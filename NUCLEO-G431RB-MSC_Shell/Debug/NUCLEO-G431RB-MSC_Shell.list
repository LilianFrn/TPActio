
NUCLEO-G431RB-MSC_Shell.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006100  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b4  080062e0  080062e0  000162e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006594  08006594  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08006594  08006594  00016594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800659c  0800659c  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800659c  0800659c  0001659c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065a0  080065a0  000165a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080065a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000108  080066ac  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  080066ac  00020260  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014148  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002790  00000000  00000000  00034280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f8  00000000  00000000  00036a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001000  00000000  00000000  00037b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f0ad  00000000  00000000  00038b08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013359  00000000  00000000  00057bb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c77f5  00000000  00000000  0006af0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00132703  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000053b4  00000000  00000000  00132754  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000108 	.word	0x20000108
 80001fc:	00000000 	.word	0x00000000
 8000200:	080062c8 	.word	0x080062c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000010c 	.word	0x2000010c
 800021c:	080062c8 	.word	0x080062c8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b09e      	sub	sp, #120	; 0x78
 80005e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char	 	cmdBuffer[CMD_BUFFER_SIZE];
	int 		idx_cmd;
	char* 		argv[MAX_ARGS];
	int		 	argc = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	673b      	str	r3, [r7, #112]	; 0x70
	char*		token;
	int 		newCmdReady = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	66bb      	str	r3, [r7, #104]	; 0x68
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f2:	f000 fc58 	bl	8000ea6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005f6:	f000 f901 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fa:	f000 f997 	bl	800092c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005fe:	f000 f949 	bl	8000894 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000602:	1d3b      	adds	r3, r7, #4
 8000604:	2224      	movs	r2, #36	; 0x24
 8000606:	2100      	movs	r1, #0
 8000608:	4618      	mov	r0, r3
 800060a:	f004 fb97 	bl	8004d3c <memset>
  memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800060e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000612:	2240      	movs	r2, #64	; 0x40
 8000614:	2100      	movs	r1, #0
 8000616:	4618      	mov	r0, r3
 8000618:	f004 fb90 	bl	8004d3c <memset>
 800061c:	4b6a      	ldr	r3, [pc, #424]	; (80007c8 <main+0x1e4>)
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
  memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
  memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000622:	2240      	movs	r2, #64	; 0x40
 8000624:	2100      	movs	r1, #0
 8000626:	4869      	ldr	r0, [pc, #420]	; (80007cc <main+0x1e8>)
 8000628:	f004 fb88 	bl	8004d3c <memset>

  HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800062c:	2201      	movs	r2, #1
 800062e:	4966      	ldr	r1, [pc, #408]	; (80007c8 <main+0x1e4>)
 8000630:	4867      	ldr	r0, [pc, #412]	; (80007d0 <main+0x1ec>)
 8000632:	f002 fbf5 	bl	8002e20 <HAL_UART_Receive_IT>
  HAL_Delay(10);
 8000636:	200a      	movs	r0, #10
 8000638:	f000 fc6c 	bl	8000f14 <HAL_Delay>
  HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 800063c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000640:	2266      	movs	r2, #102	; 0x66
 8000642:	4964      	ldr	r1, [pc, #400]	; (80007d4 <main+0x1f0>)
 8000644:	4862      	ldr	r0, [pc, #392]	; (80007d0 <main+0x1ec>)
 8000646:	f002 fb55 	bl	8002cf4 <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 800064a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800064e:	2218      	movs	r2, #24
 8000650:	4961      	ldr	r1, [pc, #388]	; (80007d8 <main+0x1f4>)
 8000652:	485f      	ldr	r0, [pc, #380]	; (80007d0 <main+0x1ec>)
 8000654:	f002 fb4e 	bl	8002cf4 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // uartRxReceived is set to 1 when a new character is received on uart 1
	  	  if(uartRxReceived){
 8000658:	4b60      	ldr	r3, [pc, #384]	; (80007dc <main+0x1f8>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d058      	beq.n	8000712 <main+0x12e>
	  		  switch(uartRxBuffer[0]){
 8000660:	4b59      	ldr	r3, [pc, #356]	; (80007c8 <main+0x1e4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b0d      	cmp	r3, #13
 8000666:	d002      	beq.n	800066e <main+0x8a>
 8000668:	2b7f      	cmp	r3, #127	; 0x7f
 800066a:	d02f      	beq.n	80006cc <main+0xe8>
 800066c:	e03e      	b.n	80006ec <main+0x108>
	  		  // Nouvelle ligne, instruction à traiter
	  		  case ASCII_CR:
	  			  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000672:	2203      	movs	r2, #3
 8000674:	495a      	ldr	r1, [pc, #360]	; (80007e0 <main+0x1fc>)
 8000676:	4856      	ldr	r0, [pc, #344]	; (80007d0 <main+0x1ec>)
 8000678:	f002 fb3c 	bl	8002cf4 <HAL_UART_Transmit>
	  			  cmdBuffer[idx_cmd] = '\0';
 800067c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000680:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8000682:	4413      	add	r3, r2
 8000684:	2200      	movs	r2, #0
 8000686:	701a      	strb	r2, [r3, #0]
	  			  argc = 0;
 8000688:	2300      	movs	r3, #0
 800068a:	673b      	str	r3, [r7, #112]	; 0x70
	  			  token = strtok(cmdBuffer, " ");
 800068c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000690:	4954      	ldr	r1, [pc, #336]	; (80007e4 <main+0x200>)
 8000692:	4618      	mov	r0, r3
 8000694:	f004 fb7a 	bl	8004d8c <strtok>
 8000698:	4603      	mov	r3, r0
 800069a:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  while(token!=NULL){
 800069c:	e00e      	b.n	80006bc <main+0xd8>
	  				  argv[argc++] = token;
 800069e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80006a0:	1c5a      	adds	r2, r3, #1
 80006a2:	673a      	str	r2, [r7, #112]	; 0x70
 80006a4:	009b      	lsls	r3, r3, #2
 80006a6:	3378      	adds	r3, #120	; 0x78
 80006a8:	443b      	add	r3, r7
 80006aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80006ac:	f843 2c74 	str.w	r2, [r3, #-116]
	  				  token = strtok(NULL, " ");
 80006b0:	494c      	ldr	r1, [pc, #304]	; (80007e4 <main+0x200>)
 80006b2:	2000      	movs	r0, #0
 80006b4:	f004 fb6a 	bl	8004d8c <strtok>
 80006b8:	4603      	mov	r3, r0
 80006ba:	66fb      	str	r3, [r7, #108]	; 0x6c
	  			  while(token!=NULL){
 80006bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d1ed      	bne.n	800069e <main+0xba>
	  			  }

	  			  idx_cmd = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	677b      	str	r3, [r7, #116]	; 0x74
	  			  newCmdReady = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	66bb      	str	r3, [r7, #104]	; 0x68
	  			  break;
 80006ca:	e01f      	b.n	800070c <main+0x128>
	  		  // Suppression du dernier caractère
	  		  case ASCII_DEL:
	  			  cmdBuffer[idx_cmd--] = '\0';
 80006cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006ce:	1e5a      	subs	r2, r3, #1
 80006d0:	677a      	str	r2, [r7, #116]	; 0x74
 80006d2:	3378      	adds	r3, #120	; 0x78
 80006d4:	443b      	add	r3, r7
 80006d6:	2200      	movs	r2, #0
 80006d8:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006e0:	2201      	movs	r2, #1
 80006e2:	4939      	ldr	r1, [pc, #228]	; (80007c8 <main+0x1e4>)
 80006e4:	483a      	ldr	r0, [pc, #232]	; (80007d0 <main+0x1ec>)
 80006e6:	f002 fb05 	bl	8002cf4 <HAL_UART_Transmit>
	  			  break;
 80006ea:	e00f      	b.n	800070c <main+0x128>
	  	      // Nouveau caractère
	  		  default:
	  			  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80006ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	677a      	str	r2, [r7, #116]	; 0x74
 80006f2:	4a35      	ldr	r2, [pc, #212]	; (80007c8 <main+0x1e4>)
 80006f4:	7812      	ldrb	r2, [r2, #0]
 80006f6:	3378      	adds	r3, #120	; 0x78
 80006f8:	443b      	add	r3, r7
 80006fa:	f803 2c50 	strb.w	r2, [r3, #-80]
	  			  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000702:	2201      	movs	r2, #1
 8000704:	4930      	ldr	r1, [pc, #192]	; (80007c8 <main+0x1e4>)
 8000706:	4832      	ldr	r0, [pc, #200]	; (80007d0 <main+0x1ec>)
 8000708:	f002 faf4 	bl	8002cf4 <HAL_UART_Transmit>
	  		  }
	  		  uartRxReceived = 0;
 800070c:	4b33      	ldr	r3, [pc, #204]	; (80007dc <main+0x1f8>)
 800070e:	2200      	movs	r2, #0
 8000710:	601a      	str	r2, [r3, #0]
	  	  }

	  	  if(newCmdReady){
 8000712:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000714:	2b00      	cmp	r3, #0
 8000716:	d09f      	beq.n	8000658 <main+0x74>
	  		  if(strcmp(argv[0],"set")==0){
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	4933      	ldr	r1, [pc, #204]	; (80007e8 <main+0x204>)
 800071c:	4618      	mov	r0, r3
 800071e:	f7ff fd7f 	bl	8000220 <strcmp>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d12d      	bne.n	8000784 <main+0x1a0>
	  			  if(strcmp(argv[1],"PA5")==0){
 8000728:	68bb      	ldr	r3, [r7, #8]
 800072a:	4930      	ldr	r1, [pc, #192]	; (80007ec <main+0x208>)
 800072c:	4618      	mov	r0, r3
 800072e:	f7ff fd77 	bl	8000220 <strcmp>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d11d      	bne.n	8000774 <main+0x190>
	  				  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, atoi(argv[2]));
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	4618      	mov	r0, r3
 800073c:	f004 fad0 	bl	8004ce0 <atoi>
 8000740:	4603      	mov	r3, r0
 8000742:	b2db      	uxtb	r3, r3
 8000744:	461a      	mov	r2, r3
 8000746:	2120      	movs	r1, #32
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f000 ff26 	bl	800159c <HAL_GPIO_WritePin>
	  				  sprintf(uartTxBuffer,"Switch on/off led : %d\r\n",atoi(argv[2]));
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	4618      	mov	r0, r3
 8000754:	f004 fac4 	bl	8004ce0 <atoi>
 8000758:	4603      	mov	r3, r0
 800075a:	461a      	mov	r2, r3
 800075c:	4924      	ldr	r1, [pc, #144]	; (80007f0 <main+0x20c>)
 800075e:	481b      	ldr	r0, [pc, #108]	; (80007cc <main+0x1e8>)
 8000760:	f004 faf4 	bl	8004d4c <siprintf>
	  				  HAL_UART_Transmit(&huart2, uartTxBuffer, 32, HAL_MAX_DELAY);
 8000764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000768:	2220      	movs	r2, #32
 800076a:	4918      	ldr	r1, [pc, #96]	; (80007cc <main+0x1e8>)
 800076c:	4818      	ldr	r0, [pc, #96]	; (80007d0 <main+0x1ec>)
 800076e:	f002 fac1 	bl	8002cf4 <HAL_UART_Transmit>
 8000772:	e01e      	b.n	80007b2 <main+0x1ce>
	  			  }
	  			  else{
	  				  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000778:	2214      	movs	r2, #20
 800077a:	491e      	ldr	r1, [pc, #120]	; (80007f4 <main+0x210>)
 800077c:	4814      	ldr	r0, [pc, #80]	; (80007d0 <main+0x1ec>)
 800077e:	f002 fab9 	bl	8002cf4 <HAL_UART_Transmit>
 8000782:	e016      	b.n	80007b2 <main+0x1ce>
	  			  }
	  		  }
	  		  else if(strcmp(argv[0],"get")==0)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	491c      	ldr	r1, [pc, #112]	; (80007f8 <main+0x214>)
 8000788:	4618      	mov	r0, r3
 800078a:	f7ff fd49 	bl	8000220 <strcmp>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d107      	bne.n	80007a4 <main+0x1c0>
	  		  {
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000794:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000798:	2214      	movs	r2, #20
 800079a:	4916      	ldr	r1, [pc, #88]	; (80007f4 <main+0x210>)
 800079c:	480c      	ldr	r0, [pc, #48]	; (80007d0 <main+0x1ec>)
 800079e:	f002 faa9 	bl	8002cf4 <HAL_UART_Transmit>
 80007a2:	e006      	b.n	80007b2 <main+0x1ce>
	  		  }
	  		  else{
	  			  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80007a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a8:	2214      	movs	r2, #20
 80007aa:	4912      	ldr	r1, [pc, #72]	; (80007f4 <main+0x210>)
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <main+0x1ec>)
 80007ae:	f002 faa1 	bl	8002cf4 <HAL_UART_Transmit>
	  		  }
	  			  HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b6:	2218      	movs	r2, #24
 80007b8:	4907      	ldr	r1, [pc, #28]	; (80007d8 <main+0x1f4>)
 80007ba:	4805      	ldr	r0, [pc, #20]	; (80007d0 <main+0x1ec>)
 80007bc:	f002 fa9a 	bl	8002cf4 <HAL_UART_Transmit>
	  			  newCmdReady = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	66bb      	str	r3, [r7, #104]	; 0x68
	  	  if(uartRxReceived){
 80007c4:	e748      	b.n	8000658 <main+0x74>
 80007c6:	bf00      	nop
 80007c8:	200001b8 	.word	0x200001b8
 80007cc:	200001bc 	.word	0x200001bc
 80007d0:	20000124 	.word	0x20000124
 80007d4:	20000018 	.word	0x20000018
 80007d8:	20000000 	.word	0x20000000
 80007dc:	200001b4 	.word	0x200001b4
 80007e0:	20000080 	.word	0x20000080
 80007e4:	080062e0 	.word	0x080062e0
 80007e8:	080062e4 	.word	0x080062e4
 80007ec:	080062e8 	.word	0x080062e8
 80007f0:	080062ec 	.word	0x080062ec
 80007f4:	20000084 	.word	0x20000084
 80007f8:	08006308 	.word	0x08006308

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	; 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0318 	add.w	r3, r7, #24
 8000806:	2238      	movs	r2, #56	; 0x38
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f004 fa96 	bl	8004d3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800081e:	2000      	movs	r0, #0
 8000820:	f000 fed4 	bl	80015cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000824:	2302      	movs	r3, #2
 8000826:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000828:	f44f 7380 	mov.w	r3, #256	; 0x100
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800082e:	2340      	movs	r3, #64	; 0x40
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000832:	2302      	movs	r3, #2
 8000834:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000836:	2302      	movs	r3, #2
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800083a:	2304      	movs	r3, #4
 800083c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800083e:	2355      	movs	r3, #85	; 0x55
 8000840:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000842:	2302      	movs	r3, #2
 8000844:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000846:	2302      	movs	r3, #2
 8000848:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800084a:	2302      	movs	r3, #2
 800084c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	f107 0318 	add.w	r3, r7, #24
 8000852:	4618      	mov	r0, r3
 8000854:	f000 ff5e 	bl	8001714 <HAL_RCC_OscConfig>
 8000858:	4603      	mov	r3, r0
 800085a:	2b00      	cmp	r3, #0
 800085c:	d001      	beq.n	8000862 <SystemClock_Config+0x66>
  {
    Error_Handler();
 800085e:	f000 f8e7 	bl	8000a30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000862:	230f      	movs	r3, #15
 8000864:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000866:	2303      	movs	r3, #3
 8000868:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2104      	movs	r1, #4
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fa62 	bl	8001d44 <HAL_RCC_ClockConfig>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000886:	f000 f8d3 	bl	8000a30 <Error_Handler>
  }
}
 800088a:	bf00      	nop
 800088c:	3750      	adds	r7, #80	; 0x50
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
	...

08000894 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000898:	4b22      	ldr	r3, [pc, #136]	; (8000924 <MX_USART2_UART_Init+0x90>)
 800089a:	4a23      	ldr	r2, [pc, #140]	; (8000928 <MX_USART2_UART_Init+0x94>)
 800089c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800089e:	4b21      	ldr	r3, [pc, #132]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008a6:	4b1f      	ldr	r3, [pc, #124]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ac:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008ba:	220c      	movs	r2, #12
 80008bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008c4:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ca:	4b16      	ldr	r3, [pc, #88]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008d0:	4b14      	ldr	r3, [pc, #80]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008d6:	4b13      	ldr	r3, [pc, #76]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008d8:	2200      	movs	r2, #0
 80008da:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008dc:	4811      	ldr	r0, [pc, #68]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008de:	f002 f9b9 	bl	8002c54 <HAL_UART_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80008e8:	f000 f8a2 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008ec:	2100      	movs	r1, #0
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_USART2_UART_Init+0x90>)
 80008f0:	f004 f92b 	bl	8004b4a <HAL_UARTEx_SetTxFifoThreshold>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80008fa:	f000 f899 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80008fe:	2100      	movs	r1, #0
 8000900:	4808      	ldr	r0, [pc, #32]	; (8000924 <MX_USART2_UART_Init+0x90>)
 8000902:	f004 f960 	bl	8004bc6 <HAL_UARTEx_SetRxFifoThreshold>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800090c:	f000 f890 	bl	8000a30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000910:	4804      	ldr	r0, [pc, #16]	; (8000924 <MX_USART2_UART_Init+0x90>)
 8000912:	f004 f8e1 	bl	8004ad8 <HAL_UARTEx_DisableFifoMode>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800091c:	f000 f888 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000920:	bf00      	nop
 8000922:	bd80      	pop	{r7, pc}
 8000924:	20000124 	.word	0x20000124
 8000928:	40004400 	.word	0x40004400

0800092c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000932:	f107 030c 	add.w	r3, r7, #12
 8000936:	2200      	movs	r2, #0
 8000938:	601a      	str	r2, [r3, #0]
 800093a:	605a      	str	r2, [r3, #4]
 800093c:	609a      	str	r2, [r3, #8]
 800093e:	60da      	str	r2, [r3, #12]
 8000940:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000942:	4b25      	ldr	r3, [pc, #148]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	4a24      	ldr	r2, [pc, #144]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000948:	f043 0304 	orr.w	r3, r3, #4
 800094c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800094e:	4b22      	ldr	r3, [pc, #136]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	f003 0304 	and.w	r3, r3, #4
 8000956:	60bb      	str	r3, [r7, #8]
 8000958:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_GPIO_Init+0xac>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	4a1e      	ldr	r2, [pc, #120]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000960:	f043 0320 	orr.w	r3, r3, #32
 8000964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800096a:	f003 0320 	and.w	r3, r3, #32
 800096e:	607b      	str	r3, [r7, #4]
 8000970:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000974:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000976:	4a18      	ldr	r2, [pc, #96]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000978:	f043 0301 	orr.w	r3, r3, #1
 800097c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800097e:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_GPIO_Init+0xac>)
 8000980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000982:	f003 0301 	and.w	r3, r3, #1
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GREEN_LED_GPIO_Port, GREEN_LED_Pin, GPIO_PIN_RESET);
 800098a:	2200      	movs	r2, #0
 800098c:	2120      	movs	r1, #32
 800098e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000992:	f000 fe03 	bl	800159c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80009a6:	f107 030c 	add.w	r3, r7, #12
 80009aa:	4619      	mov	r1, r3
 80009ac:	480b      	ldr	r0, [pc, #44]	; (80009dc <MX_GPIO_Init+0xb0>)
 80009ae:	f000 fc73 	bl	8001298 <HAL_GPIO_Init>

  /*Configure GPIO pin : GREEN_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LED_Pin;
 80009b2:	2320      	movs	r3, #32
 80009b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b6:	2301      	movs	r3, #1
 80009b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ba:	2300      	movs	r3, #0
 80009bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009be:	2300      	movs	r3, #0
 80009c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GREEN_LED_GPIO_Port, &GPIO_InitStruct);
 80009c2:	f107 030c 	add.w	r3, r7, #12
 80009c6:	4619      	mov	r1, r3
 80009c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009cc:	f000 fc64 	bl	8001298 <HAL_GPIO_Init>

}
 80009d0:	bf00      	nop
 80009d2:	3720      	adds	r7, #32
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	40021000 	.word	0x40021000
 80009dc:	48000800 	.word	0x48000800

080009e0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b082      	sub	sp, #8
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80009e8:	4b05      	ldr	r3, [pc, #20]	; (8000a00 <HAL_UART_RxCpltCallback+0x20>)
 80009ea:	2201      	movs	r2, #1
 80009ec:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80009ee:	2201      	movs	r2, #1
 80009f0:	4904      	ldr	r1, [pc, #16]	; (8000a04 <HAL_UART_RxCpltCallback+0x24>)
 80009f2:	4805      	ldr	r0, [pc, #20]	; (8000a08 <HAL_UART_RxCpltCallback+0x28>)
 80009f4:	f002 fa14 	bl	8002e20 <HAL_UART_Receive_IT>
}
 80009f8:	bf00      	nop
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	200001b4 	.word	0x200001b4
 8000a04:	200001b8 	.word	0x200001b8
 8000a08:	20000124 	.word	0x20000124

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 fa5b 	bl	8000ed8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40001000 	.word	0x40001000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <HAL_MspInit+0x44>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <HAL_MspInit+0x44>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4e:	4b0c      	ldr	r3, [pc, #48]	; (8000a80 <HAL_MspInit+0x44>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x44>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x44>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	; 0x58
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x44>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a72:	bf00      	nop
 8000a74:	370c      	adds	r7, #12
 8000a76:	46bd      	mov	sp, r7
 8000a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	40021000 	.word	0x40021000

08000a84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b09a      	sub	sp, #104	; 0x68
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
 8000a9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a9c:	f107 0310 	add.w	r3, r7, #16
 8000aa0:	2244      	movs	r2, #68	; 0x44
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f004 f949 	bl	8004d3c <memset>
  if(huart->Instance==USART2)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4a23      	ldr	r2, [pc, #140]	; (8000b3c <HAL_UART_MspInit+0xb8>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d13e      	bne.n	8000b32 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000abc:	f107 0310 	add.w	r3, r7, #16
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fb8d 	bl	80021e0 <HAL_RCCEx_PeriphCLKConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000acc:	f7ff ffb0 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <HAL_UART_MspInit+0xbc>)
 8000ad2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ad4:	4a1a      	ldr	r2, [pc, #104]	; (8000b40 <HAL_UART_MspInit+0xbc>)
 8000ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ada:	6593      	str	r3, [r2, #88]	; 0x58
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <HAL_UART_MspInit+0xbc>)
 8000ade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ae4:	60fb      	str	r3, [r7, #12]
 8000ae6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <HAL_UART_MspInit+0xbc>)
 8000aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aec:	4a14      	ldr	r2, [pc, #80]	; (8000b40 <HAL_UART_MspInit+0xbc>)
 8000aee:	f043 0301 	orr.w	r3, r3, #1
 8000af2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000af4:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <HAL_UART_MspInit+0xbc>)
 8000af6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af8:	f003 0301 	and.w	r3, r3, #1
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b00:	230c      	movs	r3, #12
 8000b02:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b10:	2307      	movs	r3, #7
 8000b12:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b14:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b18:	4619      	mov	r1, r3
 8000b1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b1e:	f000 fbbb 	bl	8001298 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000b22:	2200      	movs	r2, #0
 8000b24:	2100      	movs	r1, #0
 8000b26:	2026      	movs	r0, #38	; 0x26
 8000b28:	f000 face 	bl	80010c8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000b2c:	2026      	movs	r0, #38	; 0x26
 8000b2e:	f000 fae5 	bl	80010fc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b32:	bf00      	nop
 8000b34:	3768      	adds	r7, #104	; 0x68
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40004400 	.word	0x40004400
 8000b40:	40021000 	.word	0x40021000

08000b44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08c      	sub	sp, #48	; 0x30
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5a:	4b2d      	ldr	r3, [pc, #180]	; (8000c10 <HAL_InitTick+0xcc>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	4a2c      	ldr	r2, [pc, #176]	; (8000c10 <HAL_InitTick+0xcc>)
 8000b60:	f043 0310 	orr.w	r3, r3, #16
 8000b64:	6593      	str	r3, [r2, #88]	; 0x58
 8000b66:	4b2a      	ldr	r3, [pc, #168]	; (8000c10 <HAL_InitTick+0xcc>)
 8000b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	60bb      	str	r3, [r7, #8]
 8000b70:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b72:	f107 020c 	add.w	r2, r7, #12
 8000b76:	f107 0310 	add.w	r3, r7, #16
 8000b7a:	4611      	mov	r1, r2
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f001 fab7 	bl	80020f0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b82:	f001 fa89 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8000b86:	62b8      	str	r0, [r7, #40]	; 0x28
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b8a:	4a22      	ldr	r2, [pc, #136]	; (8000c14 <HAL_InitTick+0xd0>)
 8000b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000b90:	0c9b      	lsrs	r3, r3, #18
 8000b92:	3b01      	subs	r3, #1
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b96:	4b20      	ldr	r3, [pc, #128]	; (8000c18 <HAL_InitTick+0xd4>)
 8000b98:	4a20      	ldr	r2, [pc, #128]	; (8000c1c <HAL_InitTick+0xd8>)
 8000b9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9c:	4b1e      	ldr	r3, [pc, #120]	; (8000c18 <HAL_InitTick+0xd4>)
 8000b9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba4:	4a1c      	ldr	r2, [pc, #112]	; (8000c18 <HAL_InitTick+0xd4>)
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ba8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000baa:	4b1b      	ldr	r3, [pc, #108]	; (8000c18 <HAL_InitTick+0xd4>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb0:	4b19      	ldr	r3, [pc, #100]	; (8000c18 <HAL_InitTick+0xd4>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb6:	4818      	ldr	r0, [pc, #96]	; (8000c18 <HAL_InitTick+0xd4>)
 8000bb8:	f001 fd02 	bl	80025c0 <HAL_TIM_Base_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d11b      	bne.n	8000c02 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bca:	4813      	ldr	r0, [pc, #76]	; (8000c18 <HAL_InitTick+0xd4>)
 8000bcc:	f001 fd5a 	bl	8002684 <HAL_TIM_Base_Start_IT>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000bd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d111      	bne.n	8000c02 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bde:	2036      	movs	r0, #54	; 0x36
 8000be0:	f000 fa8c 	bl	80010fc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2b0f      	cmp	r3, #15
 8000be8:	d808      	bhi.n	8000bfc <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bea:	2200      	movs	r2, #0
 8000bec:	6879      	ldr	r1, [r7, #4]
 8000bee:	2036      	movs	r0, #54	; 0x36
 8000bf0:	f000 fa6a 	bl	80010c8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf4:	4a0a      	ldr	r2, [pc, #40]	; (8000c20 <HAL_InitTick+0xdc>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
 8000bfa:	e002      	b.n	8000c02 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000c02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3730      	adds	r7, #48	; 0x30
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	40021000 	.word	0x40021000
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	200001fc 	.word	0x200001fc
 8000c1c:	40001000 	.word	0x40001000
 8000c20:	2000009c 	.word	0x2000009c

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c28:	e7fe      	b.n	8000c28 <NMI_Handler+0x4>

08000c2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2a:	b480      	push	{r7}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <HardFault_Handler+0x4>

08000c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <MemManage_Handler+0x4>

08000c36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c3a:	e7fe      	b.n	8000c3a <BusFault_Handler+0x4>

08000c3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c40:	e7fe      	b.n	8000c40 <UsageFault_Handler+0x4>

08000c42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c42:	b480      	push	{r7}
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr

08000c5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr

08000c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c70:	bf00      	nop
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
	...

08000c7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <USART2_IRQHandler+0x10>)
 8000c82:	f002 f923 	bl	8002ecc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000124 	.word	0x20000124

08000c90 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <TIM6_DAC_IRQHandler+0x10>)
 8000c96:	f001 fd5f 	bl	8002758 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200001fc 	.word	0x200001fc

08000ca4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
	return 1;
 8000ca8:	2301      	movs	r3, #1
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <_kill>:

int _kill(int pid, int sig)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000cbe:	f004 f813 	bl	8004ce8 <__errno>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2216      	movs	r2, #22
 8000cc6:	601a      	str	r2, [r3, #0]
	return -1;
 8000cc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}

08000cd4 <_exit>:

void _exit (int status)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b082      	sub	sp, #8
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000cdc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ce0:	6878      	ldr	r0, [r7, #4]
 8000ce2:	f7ff ffe7 	bl	8000cb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000ce6:	e7fe      	b.n	8000ce6 <_exit+0x12>

08000ce8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b086      	sub	sp, #24
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	60f8      	str	r0, [r7, #12]
 8000cf0:	60b9      	str	r1, [r7, #8]
 8000cf2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]
 8000cf8:	e00a      	b.n	8000d10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000cfa:	f3af 8000 	nop.w
 8000cfe:	4601      	mov	r1, r0
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	60ba      	str	r2, [r7, #8]
 8000d06:	b2ca      	uxtb	r2, r1
 8000d08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d0a:	697b      	ldr	r3, [r7, #20]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	617b      	str	r3, [r7, #20]
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	429a      	cmp	r2, r3
 8000d16:	dbf0      	blt.n	8000cfa <_read+0x12>
	}

return len;
 8000d18:	687b      	ldr	r3, [r7, #4]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3718      	adds	r7, #24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}

08000d22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000d22:	b580      	push	{r7, lr}
 8000d24:	b086      	sub	sp, #24
 8000d26:	af00      	add	r7, sp, #0
 8000d28:	60f8      	str	r0, [r7, #12]
 8000d2a:	60b9      	str	r1, [r7, #8]
 8000d2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d2e:	2300      	movs	r3, #0
 8000d30:	617b      	str	r3, [r7, #20]
 8000d32:	e009      	b.n	8000d48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	781b      	ldrb	r3, [r3, #0]
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d42:	697b      	ldr	r3, [r7, #20]
 8000d44:	3301      	adds	r3, #1
 8000d46:	617b      	str	r3, [r7, #20]
 8000d48:	697a      	ldr	r2, [r7, #20]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	429a      	cmp	r2, r3
 8000d4e:	dbf1      	blt.n	8000d34 <_write+0x12>
	}
	return len;
 8000d50:	687b      	ldr	r3, [r7, #4]
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3718      	adds	r7, #24
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}

08000d5a <_close>:

int _close(int file)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	b083      	sub	sp, #12
 8000d5e:	af00      	add	r7, sp, #0
 8000d60:	6078      	str	r0, [r7, #4]
	return -1;
 8000d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	370c      	adds	r7, #12
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d72:	b480      	push	{r7}
 8000d74:	b083      	sub	sp, #12
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
 8000d7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d82:	605a      	str	r2, [r3, #4]
	return 0;
 8000d84:	2300      	movs	r3, #0
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr

08000d92 <_isatty>:

int _isatty(int file)
{
 8000d92:	b480      	push	{r7}
 8000d94:	b083      	sub	sp, #12
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
	return 1;
 8000d9a:	2301      	movs	r3, #1
}
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	370c      	adds	r7, #12
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b085      	sub	sp, #20
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
	return 0;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3714      	adds	r7, #20
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
	...

08000dc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b086      	sub	sp, #24
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dcc:	4a14      	ldr	r2, [pc, #80]	; (8000e20 <_sbrk+0x5c>)
 8000dce:	4b15      	ldr	r3, [pc, #84]	; (8000e24 <_sbrk+0x60>)
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd8:	4b13      	ldr	r3, [pc, #76]	; (8000e28 <_sbrk+0x64>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d102      	bne.n	8000de6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000de0:	4b11      	ldr	r3, [pc, #68]	; (8000e28 <_sbrk+0x64>)
 8000de2:	4a12      	ldr	r2, [pc, #72]	; (8000e2c <_sbrk+0x68>)
 8000de4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de6:	4b10      	ldr	r3, [pc, #64]	; (8000e28 <_sbrk+0x64>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4413      	add	r3, r2
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d207      	bcs.n	8000e04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df4:	f003 ff78 	bl	8004ce8 <__errno>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	220c      	movs	r2, #12
 8000dfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e02:	e009      	b.n	8000e18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e04:	4b08      	ldr	r3, [pc, #32]	; (8000e28 <_sbrk+0x64>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e0a:	4b07      	ldr	r3, [pc, #28]	; (8000e28 <_sbrk+0x64>)
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4413      	add	r3, r2
 8000e12:	4a05      	ldr	r2, [pc, #20]	; (8000e28 <_sbrk+0x64>)
 8000e14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e16:	68fb      	ldr	r3, [r7, #12]
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3718      	adds	r7, #24
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	20008000 	.word	0x20008000
 8000e24:	00000400 	.word	0x00000400
 8000e28:	20000248 	.word	0x20000248
 8000e2c:	20000260 	.word	0x20000260

08000e30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <SystemInit+0x20>)
 8000e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e3a:	4a05      	ldr	r2, [pc, #20]	; (8000e50 <SystemInit+0x20>)
 8000e3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e54:	480d      	ldr	r0, [pc, #52]	; (8000e8c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e56:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e58:	480d      	ldr	r0, [pc, #52]	; (8000e90 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e5a:	490e      	ldr	r1, [pc, #56]	; (8000e94 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e5c:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <LoopForever+0xe>)
  movs r3, #0
 8000e5e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000e60:	e002      	b.n	8000e68 <LoopCopyDataInit>

08000e62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e66:	3304      	adds	r3, #4

08000e68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e6c:	d3f9      	bcc.n	8000e62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e6e:	4a0b      	ldr	r2, [pc, #44]	; (8000e9c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e70:	4c0b      	ldr	r4, [pc, #44]	; (8000ea0 <LoopForever+0x16>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e74:	e001      	b.n	8000e7a <LoopFillZerobss>

08000e76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e78:	3204      	adds	r2, #4

08000e7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e7c:	d3fb      	bcc.n	8000e76 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e7e:	f7ff ffd7 	bl	8000e30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e82:	f003 ff37 	bl	8004cf4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e86:	f7ff fbad 	bl	80005e4 <main>

08000e8a <LoopForever>:

LoopForever:
    b LoopForever
 8000e8a:	e7fe      	b.n	8000e8a <LoopForever>
  ldr   r0, =_estack
 8000e8c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8000e90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e94:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 8000e98:	080065a4 	.word	0x080065a4
  ldr r2, =_sbss
 8000e9c:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8000ea0:	20000260 	.word	0x20000260

08000ea4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ea4:	e7fe      	b.n	8000ea4 <ADC1_2_IRQHandler>

08000ea6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000eac:	2300      	movs	r3, #0
 8000eae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eb0:	2003      	movs	r0, #3
 8000eb2:	f000 f8fe 	bl	80010b2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fe44 	bl	8000b44 <HAL_InitTick>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d002      	beq.n	8000ec8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e001      	b.n	8000ecc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ec8:	f7ff fdb8 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ecc:	79fb      	ldrb	r3, [r7, #7]

}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
	...

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	681a      	ldr	r2, [r3, #0]
 8000ee0:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4413      	add	r3, r2
 8000ee6:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ee8:	6013      	str	r3, [r2, #0]
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	2000024c 	.word	0x2000024c
 8000ef8:	200000a0 	.word	0x200000a0

08000efc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b03      	ldr	r3, [pc, #12]	; (8000f10 <HAL_GetTick+0x14>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	2000024c 	.word	0x2000024c

08000f14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f1c:	f7ff ffee 	bl	8000efc <HAL_GetTick>
 8000f20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000f2c:	d004      	beq.n	8000f38 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f2e:	4b09      	ldr	r3, [pc, #36]	; (8000f54 <HAL_Delay+0x40>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	68fa      	ldr	r2, [r7, #12]
 8000f34:	4413      	add	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f38:	bf00      	nop
 8000f3a:	f7ff ffdf 	bl	8000efc <HAL_GetTick>
 8000f3e:	4602      	mov	r2, r0
 8000f40:	68bb      	ldr	r3, [r7, #8]
 8000f42:	1ad3      	subs	r3, r2, r3
 8000f44:	68fa      	ldr	r2, [r7, #12]
 8000f46:	429a      	cmp	r2, r3
 8000f48:	d8f7      	bhi.n	8000f3a <HAL_Delay+0x26>
  {
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	bf00      	nop
 8000f4e:	3710      	adds	r7, #16
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	200000a0 	.word	0x200000a0

08000f58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b085      	sub	sp, #20
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	f003 0307 	and.w	r3, r3, #7
 8000f66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f68:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6a:	68db      	ldr	r3, [r3, #12]
 8000f6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6e:	68ba      	ldr	r2, [r7, #8]
 8000f70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f74:	4013      	ands	r3, r2
 8000f76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f7c:	68bb      	ldr	r3, [r7, #8]
 8000f7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f8a:	4a04      	ldr	r2, [pc, #16]	; (8000f9c <__NVIC_SetPriorityGrouping+0x44>)
 8000f8c:	68bb      	ldr	r3, [r7, #8]
 8000f8e:	60d3      	str	r3, [r2, #12]
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa6:	68db      	ldr	r3, [r3, #12]
 8000fa8:	0a1b      	lsrs	r3, r3, #8
 8000faa:	f003 0307 	and.w	r3, r3, #7
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b083      	sub	sp, #12
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	db0b      	blt.n	8000fe6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fce:	79fb      	ldrb	r3, [r7, #7]
 8000fd0:	f003 021f 	and.w	r2, r3, #31
 8000fd4:	4907      	ldr	r1, [pc, #28]	; (8000ff4 <__NVIC_EnableIRQ+0x38>)
 8000fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fda:	095b      	lsrs	r3, r3, #5
 8000fdc:	2001      	movs	r0, #1
 8000fde:	fa00 f202 	lsl.w	r2, r0, r2
 8000fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	370c      	adds	r7, #12
 8000fea:	46bd      	mov	sp, r7
 8000fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop
 8000ff4:	e000e100 	.word	0xe000e100

08000ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	4603      	mov	r3, r0
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001004:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001008:	2b00      	cmp	r3, #0
 800100a:	db0a      	blt.n	8001022 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	b2da      	uxtb	r2, r3
 8001010:	490c      	ldr	r1, [pc, #48]	; (8001044 <__NVIC_SetPriority+0x4c>)
 8001012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001016:	0112      	lsls	r2, r2, #4
 8001018:	b2d2      	uxtb	r2, r2
 800101a:	440b      	add	r3, r1
 800101c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001020:	e00a      	b.n	8001038 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	b2da      	uxtb	r2, r3
 8001026:	4908      	ldr	r1, [pc, #32]	; (8001048 <__NVIC_SetPriority+0x50>)
 8001028:	79fb      	ldrb	r3, [r7, #7]
 800102a:	f003 030f 	and.w	r3, r3, #15
 800102e:	3b04      	subs	r3, #4
 8001030:	0112      	lsls	r2, r2, #4
 8001032:	b2d2      	uxtb	r2, r2
 8001034:	440b      	add	r3, r1
 8001036:	761a      	strb	r2, [r3, #24]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000e100 	.word	0xe000e100
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800104c:	b480      	push	{r7}
 800104e:	b089      	sub	sp, #36	; 0x24
 8001050:	af00      	add	r7, sp, #0
 8001052:	60f8      	str	r0, [r7, #12]
 8001054:	60b9      	str	r1, [r7, #8]
 8001056:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f003 0307 	and.w	r3, r3, #7
 800105e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	f1c3 0307 	rsb	r3, r3, #7
 8001066:	2b04      	cmp	r3, #4
 8001068:	bf28      	it	cs
 800106a:	2304      	movcs	r3, #4
 800106c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3304      	adds	r3, #4
 8001072:	2b06      	cmp	r3, #6
 8001074:	d902      	bls.n	800107c <NVIC_EncodePriority+0x30>
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	3b03      	subs	r3, #3
 800107a:	e000      	b.n	800107e <NVIC_EncodePriority+0x32>
 800107c:	2300      	movs	r3, #0
 800107e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	43da      	mvns	r2, r3
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	401a      	ands	r2, r3
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001098:	697b      	ldr	r3, [r7, #20]
 800109a:	fa01 f303 	lsl.w	r3, r1, r3
 800109e:	43d9      	mvns	r1, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010a4:	4313      	orrs	r3, r2
         );
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3724      	adds	r7, #36	; 0x24
 80010aa:	46bd      	mov	sp, r7
 80010ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b0:	4770      	bx	lr

080010b2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010b2:	b580      	push	{r7, lr}
 80010b4:	b082      	sub	sp, #8
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff ff4c 	bl	8000f58 <__NVIC_SetPriorityGrouping>
}
 80010c0:	bf00      	nop
 80010c2:	3708      	adds	r7, #8
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b086      	sub	sp, #24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	4603      	mov	r3, r0
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
 80010d4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010d6:	f7ff ff63 	bl	8000fa0 <__NVIC_GetPriorityGrouping>
 80010da:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	68b9      	ldr	r1, [r7, #8]
 80010e0:	6978      	ldr	r0, [r7, #20]
 80010e2:	f7ff ffb3 	bl	800104c <NVIC_EncodePriority>
 80010e6:	4602      	mov	r2, r0
 80010e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ec:	4611      	mov	r1, r2
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff ff82 	bl	8000ff8 <__NVIC_SetPriority>
}
 80010f4:	bf00      	nop
 80010f6:	3718      	adds	r7, #24
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	4603      	mov	r3, r0
 8001104:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff56 	bl	8000fbc <__NVIC_EnableIRQ>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001120:	2300      	movs	r3, #0
 8001122:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d005      	beq.n	800113c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001136:	2301      	movs	r3, #1
 8001138:	73fb      	strb	r3, [r7, #15]
 800113a:	e037      	b.n	80011ac <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f022 020e 	bic.w	r2, r2, #14
 800114a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800115a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 0201 	bic.w	r2, r2, #1
 800116a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001170:	f003 021f 	and.w	r2, r3, #31
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001178:	2101      	movs	r1, #1
 800117a:	fa01 f202 	lsl.w	r2, r1, r2
 800117e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	687a      	ldr	r2, [r7, #4]
 8001186:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001188:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00c      	beq.n	80011ac <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011aa:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80011be:	4618      	mov	r0, r3
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b084      	sub	sp, #16
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d00d      	beq.n	80011fe <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2204      	movs	r2, #4
 80011e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2201      	movs	r2, #1
 80011ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	73fb      	strb	r3, [r7, #15]
 80011fc:	e047      	b.n	800128e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	681a      	ldr	r2, [r3, #0]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f022 020e 	bic.w	r2, r2, #14
 800120c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 0201 	bic.w	r2, r2, #1
 800121c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001228:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800122c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001232:	f003 021f 	and.w	r2, r3, #31
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123a:	2101      	movs	r1, #1
 800123c:	fa01 f202 	lsl.w	r2, r1, r2
 8001240:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800124a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001250:	2b00      	cmp	r3, #0
 8001252:	d00c      	beq.n	800126e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800125e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001262:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	687a      	ldr	r2, [r7, #4]
 800126a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800126c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	4798      	blx	r3
    }
  }
  return status;
 800128e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001290:	4618      	mov	r0, r3
 8001292:	3710      	adds	r7, #16
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}

08001298 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001298:	b480      	push	{r7}
 800129a:	b087      	sub	sp, #28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
 80012a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80012a6:	e15a      	b.n	800155e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2101      	movs	r1, #1
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	fa01 f303 	lsl.w	r3, r1, r3
 80012b4:	4013      	ands	r3, r2
 80012b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 814c 	beq.w	8001558 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d005      	beq.n	80012d8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d130      	bne.n	800133a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	005b      	lsls	r3, r3, #1
 80012e2:	2203      	movs	r2, #3
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	43db      	mvns	r3, r3
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	005b      	lsls	r3, r3, #1
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4313      	orrs	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800130e:	2201      	movs	r2, #1
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	fa02 f303 	lsl.w	r3, r2, r3
 8001316:	43db      	mvns	r3, r3
 8001318:	693a      	ldr	r2, [r7, #16]
 800131a:	4013      	ands	r3, r2
 800131c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	091b      	lsrs	r3, r3, #4
 8001324:	f003 0201 	and.w	r2, r3, #1
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa02 f303 	lsl.w	r3, r2, r3
 800132e:	693a      	ldr	r2, [r7, #16]
 8001330:	4313      	orrs	r3, r2
 8001332:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f003 0303 	and.w	r3, r3, #3
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800134c:	697b      	ldr	r3, [r7, #20]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	fa02 f303 	lsl.w	r3, r2, r3
 8001356:	43db      	mvns	r3, r3
 8001358:	693a      	ldr	r2, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	fa02 f303 	lsl.w	r3, r2, r3
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	4313      	orrs	r3, r2
 800136e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f003 0303 	and.w	r3, r3, #3
 800137e:	2b02      	cmp	r3, #2
 8001380:	d123      	bne.n	80013ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	08da      	lsrs	r2, r3, #3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	3208      	adds	r2, #8
 800138a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800138e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	009b      	lsls	r3, r3, #2
 8001398:	220f      	movs	r2, #15
 800139a:	fa02 f303 	lsl.w	r3, r2, r3
 800139e:	43db      	mvns	r3, r3
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4013      	ands	r3, r2
 80013a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	691a      	ldr	r2, [r3, #16]
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	f003 0307 	and.w	r3, r3, #7
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80013bc:	697b      	ldr	r3, [r7, #20]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	6939      	ldr	r1, [r7, #16]
 80013c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	005b      	lsls	r3, r3, #1
 80013d4:	2203      	movs	r2, #3
 80013d6:	fa02 f303 	lsl.w	r3, r2, r3
 80013da:	43db      	mvns	r3, r3
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	4013      	ands	r3, r2
 80013e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	f003 0203 	and.w	r2, r3, #3
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	005b      	lsls	r3, r3, #1
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	4313      	orrs	r3, r2
 80013f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001406:	2b00      	cmp	r3, #0
 8001408:	f000 80a6 	beq.w	8001558 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140c:	4b5b      	ldr	r3, [pc, #364]	; (800157c <HAL_GPIO_Init+0x2e4>)
 800140e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001410:	4a5a      	ldr	r2, [pc, #360]	; (800157c <HAL_GPIO_Init+0x2e4>)
 8001412:	f043 0301 	orr.w	r3, r3, #1
 8001416:	6613      	str	r3, [r2, #96]	; 0x60
 8001418:	4b58      	ldr	r3, [pc, #352]	; (800157c <HAL_GPIO_Init+0x2e4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	f003 0301 	and.w	r3, r3, #1
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001424:	4a56      	ldr	r2, [pc, #344]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	089b      	lsrs	r3, r3, #2
 800142a:	3302      	adds	r3, #2
 800142c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001430:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	220f      	movs	r2, #15
 800143c:	fa02 f303 	lsl.w	r3, r2, r3
 8001440:	43db      	mvns	r3, r3
 8001442:	693a      	ldr	r2, [r7, #16]
 8001444:	4013      	ands	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800144e:	d01f      	beq.n	8001490 <HAL_GPIO_Init+0x1f8>
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	4a4c      	ldr	r2, [pc, #304]	; (8001584 <HAL_GPIO_Init+0x2ec>)
 8001454:	4293      	cmp	r3, r2
 8001456:	d019      	beq.n	800148c <HAL_GPIO_Init+0x1f4>
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a4b      	ldr	r2, [pc, #300]	; (8001588 <HAL_GPIO_Init+0x2f0>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d013      	beq.n	8001488 <HAL_GPIO_Init+0x1f0>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a4a      	ldr	r2, [pc, #296]	; (800158c <HAL_GPIO_Init+0x2f4>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d00d      	beq.n	8001484 <HAL_GPIO_Init+0x1ec>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a49      	ldr	r2, [pc, #292]	; (8001590 <HAL_GPIO_Init+0x2f8>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d007      	beq.n	8001480 <HAL_GPIO_Init+0x1e8>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	4a48      	ldr	r2, [pc, #288]	; (8001594 <HAL_GPIO_Init+0x2fc>)
 8001474:	4293      	cmp	r3, r2
 8001476:	d101      	bne.n	800147c <HAL_GPIO_Init+0x1e4>
 8001478:	2305      	movs	r3, #5
 800147a:	e00a      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 800147c:	2306      	movs	r3, #6
 800147e:	e008      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001480:	2304      	movs	r3, #4
 8001482:	e006      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001484:	2303      	movs	r3, #3
 8001486:	e004      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001488:	2302      	movs	r3, #2
 800148a:	e002      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 800148c:	2301      	movs	r3, #1
 800148e:	e000      	b.n	8001492 <HAL_GPIO_Init+0x1fa>
 8001490:	2300      	movs	r3, #0
 8001492:	697a      	ldr	r2, [r7, #20]
 8001494:	f002 0203 	and.w	r2, r2, #3
 8001498:	0092      	lsls	r2, r2, #2
 800149a:	4093      	lsls	r3, r2
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014a2:	4937      	ldr	r1, [pc, #220]	; (8001580 <HAL_GPIO_Init+0x2e8>)
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3302      	adds	r3, #2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014b0:	4b39      	ldr	r3, [pc, #228]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	43db      	mvns	r3, r3
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	4013      	ands	r3, r2
 80014be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d003      	beq.n	80014d4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014d4:	4a30      	ldr	r2, [pc, #192]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80014da:	4b2f      	ldr	r3, [pc, #188]	; (8001598 <HAL_GPIO_Init+0x300>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014fe:	4a26      	ldr	r2, [pc, #152]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001504:	4b24      	ldr	r3, [pc, #144]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	43db      	mvns	r3, r3
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4013      	ands	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151c:	2b00      	cmp	r3, #0
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001528:	4a1b      	ldr	r2, [pc, #108]	; (8001598 <HAL_GPIO_Init+0x300>)
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	43db      	mvns	r3, r3
 8001538:	693a      	ldr	r2, [r7, #16]
 800153a:	4013      	ands	r3, r2
 800153c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d003      	beq.n	8001552 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800154a:	693a      	ldr	r2, [r7, #16]
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_GPIO_Init+0x300>)
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	3301      	adds	r3, #1
 800155c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	2b00      	cmp	r3, #0
 800156a:	f47f ae9d 	bne.w	80012a8 <HAL_GPIO_Init+0x10>
  }
}
 800156e:	bf00      	nop
 8001570:	bf00      	nop
 8001572:	371c      	adds	r7, #28
 8001574:	46bd      	mov	sp, r7
 8001576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157a:	4770      	bx	lr
 800157c:	40021000 	.word	0x40021000
 8001580:	40010000 	.word	0x40010000
 8001584:	48000400 	.word	0x48000400
 8001588:	48000800 	.word	0x48000800
 800158c:	48000c00 	.word	0x48000c00
 8001590:	48001000 	.word	0x48001000
 8001594:	48001400 	.word	0x48001400
 8001598:	40010400 	.word	0x40010400

0800159c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
 80015a4:	460b      	mov	r3, r1
 80015a6:	807b      	strh	r3, [r7, #2]
 80015a8:	4613      	mov	r3, r2
 80015aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015ac:	787b      	ldrb	r3, [r7, #1]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d003      	beq.n	80015ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015b2:	887a      	ldrh	r2, [r7, #2]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015b8:	e002      	b.n	80015c0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c0:	bf00      	nop
 80015c2:	370c      	adds	r7, #12
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr

080015cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d141      	bne.n	800165e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80015da:	4b4b      	ldr	r3, [pc, #300]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015e6:	d131      	bne.n	800164c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015e8:	4b47      	ldr	r3, [pc, #284]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80015ee:	4a46      	ldr	r2, [pc, #280]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	4b43      	ldr	r3, [pc, #268]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001600:	4a41      	ldr	r2, [pc, #260]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001606:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	2232      	movs	r2, #50	; 0x32
 800160e:	fb02 f303 	mul.w	r3, r2, r3
 8001612:	4a3f      	ldr	r2, [pc, #252]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001614:	fba2 2303 	umull	r2, r3, r2, r3
 8001618:	0c9b      	lsrs	r3, r3, #18
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800161e:	e002      	b.n	8001626 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	3b01      	subs	r3, #1
 8001624:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001626:	4b38      	ldr	r3, [pc, #224]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001628:	695b      	ldr	r3, [r3, #20]
 800162a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800162e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001632:	d102      	bne.n	800163a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f2      	bne.n	8001620 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800163a:	4b33      	ldr	r3, [pc, #204]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800163c:	695b      	ldr	r3, [r3, #20]
 800163e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001642:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001646:	d158      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e057      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800164c:	4b2e      	ldr	r3, [pc, #184]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800164e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001652:	4a2d      	ldr	r2, [pc, #180]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001654:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001658:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800165c:	e04d      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001664:	d141      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001666:	4b28      	ldr	r3, [pc, #160]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800166e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001672:	d131      	bne.n	80016d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001674:	4b24      	ldr	r3, [pc, #144]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800167a:	4a23      	ldr	r2, [pc, #140]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800167c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001680:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001684:	4b20      	ldr	r3, [pc, #128]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800168c:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800168e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001692:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001694:	4b1d      	ldr	r3, [pc, #116]	; (800170c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2232      	movs	r2, #50	; 0x32
 800169a:	fb02 f303 	mul.w	r3, r2, r3
 800169e:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9b      	lsrs	r3, r3, #18
 80016a6:	3301      	adds	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016aa:	e002      	b.n	80016b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	3b01      	subs	r3, #1
 80016b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016b2:	4b15      	ldr	r3, [pc, #84]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016b4:	695b      	ldr	r3, [r3, #20]
 80016b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016be:	d102      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1f2      	bne.n	80016ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016c8:	695b      	ldr	r3, [r3, #20]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d112      	bne.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e011      	b.n	80016fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80016d8:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80016e8:	e007      	b.n	80016fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80016ea:	4b07      	ldr	r3, [pc, #28]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016f2:	4a05      	ldr	r2, [pc, #20]	; (8001708 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80016f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016f8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80016fa:	2300      	movs	r3, #0
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	40007000 	.word	0x40007000
 800170c:	20000098 	.word	0x20000098
 8001710:	431bde83 	.word	0x431bde83

08001714 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e306      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	2b00      	cmp	r3, #0
 8001730:	d075      	beq.n	800181e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b97      	ldr	r3, [pc, #604]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4b94      	ldr	r3, [pc, #592]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b0c      	cmp	r3, #12
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d002      	beq.n	8001758 <HAL_RCC_OscConfig+0x44>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4b8d      	ldr	r3, [pc, #564]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001760:	2b00      	cmp	r3, #0
 8001762:	d05b      	beq.n	800181c <HAL_RCC_OscConfig+0x108>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d157      	bne.n	800181c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2e1      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001778:	d106      	bne.n	8001788 <HAL_RCC_OscConfig+0x74>
 800177a:	4b85      	ldr	r3, [pc, #532]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a84      	ldr	r2, [pc, #528]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e01d      	b.n	80017c4 <HAL_RCC_OscConfig+0xb0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001790:	d10c      	bne.n	80017ac <HAL_RCC_OscConfig+0x98>
 8001792:	4b7f      	ldr	r3, [pc, #508]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a7e      	ldr	r2, [pc, #504]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001798:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800179c:	6013      	str	r3, [r2, #0]
 800179e:	4b7c      	ldr	r3, [pc, #496]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a7b      	ldr	r2, [pc, #492]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0xb0>
 80017ac:	4b78      	ldr	r3, [pc, #480]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a77      	ldr	r2, [pc, #476]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b75      	ldr	r3, [pc, #468]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a74      	ldr	r2, [pc, #464]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d013      	beq.n	80017f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017cc:	f7ff fb96 	bl	8000efc <HAL_GetTick>
 80017d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017d2:	e008      	b.n	80017e6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d4:	f7ff fb92 	bl	8000efc <HAL_GetTick>
 80017d8:	4602      	mov	r2, r0
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	2b64      	cmp	r3, #100	; 0x64
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e2a6      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017e6:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d0f0      	beq.n	80017d4 <HAL_RCC_OscConfig+0xc0>
 80017f2:	e014      	b.n	800181e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f4:	f7ff fb82 	bl	8000efc <HAL_GetTick>
 80017f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017fa:	e008      	b.n	800180e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017fc:	f7ff fb7e 	bl	8000efc <HAL_GetTick>
 8001800:	4602      	mov	r2, r0
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	1ad3      	subs	r3, r2, r3
 8001806:	2b64      	cmp	r3, #100	; 0x64
 8001808:	d901      	bls.n	800180e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800180a:	2303      	movs	r3, #3
 800180c:	e292      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800180e:	4b60      	ldr	r3, [pc, #384]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f0      	bne.n	80017fc <HAL_RCC_OscConfig+0xe8>
 800181a:	e000      	b.n	800181e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d075      	beq.n	8001916 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800182a:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 030c 	and.w	r3, r3, #12
 8001832:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	2b0c      	cmp	r3, #12
 8001842:	d102      	bne.n	800184a <HAL_RCC_OscConfig+0x136>
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	2b02      	cmp	r3, #2
 8001848:	d002      	beq.n	8001850 <HAL_RCC_OscConfig+0x13c>
 800184a:	69bb      	ldr	r3, [r7, #24]
 800184c:	2b04      	cmp	r3, #4
 800184e:	d11f      	bne.n	8001890 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001858:	2b00      	cmp	r3, #0
 800185a:	d005      	beq.n	8001868 <HAL_RCC_OscConfig+0x154>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d101      	bne.n	8001868 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e265      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b49      	ldr	r3, [pc, #292]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	4946      	ldr	r1, [pc, #280]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800187c:	4b45      	ldr	r3, [pc, #276]	; (8001994 <HAL_RCC_OscConfig+0x280>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff f95f 	bl	8000b44 <HAL_InitTick>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d043      	beq.n	8001914 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800188c:	2301      	movs	r3, #1
 800188e:	e251      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d023      	beq.n	80018e0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001898:	4b3d      	ldr	r3, [pc, #244]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a3c      	ldr	r2, [pc, #240]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800189e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a4:	f7ff fb2a 	bl	8000efc <HAL_GetTick>
 80018a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018aa:	e008      	b.n	80018be <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ac:	f7ff fb26 	bl	8000efc <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e23a      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018be:	4b34      	ldr	r3, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ca:	4b31      	ldr	r3, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	061b      	lsls	r3, r3, #24
 80018d8:	492d      	ldr	r1, [pc, #180]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80018da:	4313      	orrs	r3, r2
 80018dc:	604b      	str	r3, [r1, #4]
 80018de:	e01a      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018e0:	4b2b      	ldr	r3, [pc, #172]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a2a      	ldr	r2, [pc, #168]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 80018e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ec:	f7ff fb06 	bl	8000efc <HAL_GetTick>
 80018f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f4:	f7ff fb02 	bl	8000efc <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e216      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001906:	4b22      	ldr	r3, [pc, #136]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190e:	2b00      	cmp	r3, #0
 8001910:	d1f0      	bne.n	80018f4 <HAL_RCC_OscConfig+0x1e0>
 8001912:	e000      	b.n	8001916 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001914:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0308 	and.w	r3, r3, #8
 800191e:	2b00      	cmp	r3, #0
 8001920:	d041      	beq.n	80019a6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d01c      	beq.n	8001964 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800192a:	4b19      	ldr	r3, [pc, #100]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800192c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001930:	4a17      	ldr	r2, [pc, #92]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800193a:	f7ff fadf 	bl	8000efc <HAL_GetTick>
 800193e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001940:	e008      	b.n	8001954 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001942:	f7ff fadb 	bl	8000efc <HAL_GetTick>
 8001946:	4602      	mov	r2, r0
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	1ad3      	subs	r3, r2, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e1ef      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001954:	4b0e      	ldr	r3, [pc, #56]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001956:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800195a:	f003 0302 	and.w	r3, r3, #2
 800195e:	2b00      	cmp	r3, #0
 8001960:	d0ef      	beq.n	8001942 <HAL_RCC_OscConfig+0x22e>
 8001962:	e020      	b.n	80019a6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001964:	4b0a      	ldr	r3, [pc, #40]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 8001966:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800196a:	4a09      	ldr	r2, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x27c>)
 800196c:	f023 0301 	bic.w	r3, r3, #1
 8001970:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001974:	f7ff fac2 	bl	8000efc <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800197a:	e00d      	b.n	8001998 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800197c:	f7ff fabe 	bl	8000efc <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b02      	cmp	r3, #2
 8001988:	d906      	bls.n	8001998 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e1d2      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
 800198e:	bf00      	nop
 8001990:	40021000 	.word	0x40021000
 8001994:	2000009c 	.word	0x2000009c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001998:	4b8c      	ldr	r3, [pc, #560]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 800199a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d1ea      	bne.n	800197c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	f000 80a6 	beq.w	8001b00 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019b4:	2300      	movs	r3, #0
 80019b6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80019b8:	4b84      	ldr	r3, [pc, #528]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
 80019c4:	2301      	movs	r3, #1
 80019c6:	e000      	b.n	80019ca <HAL_RCC_OscConfig+0x2b6>
 80019c8:	2300      	movs	r3, #0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d00d      	beq.n	80019ea <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	4b7f      	ldr	r3, [pc, #508]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 80019d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d2:	4a7e      	ldr	r2, [pc, #504]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 80019d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d8:	6593      	str	r3, [r2, #88]	; 0x58
 80019da:	4b7c      	ldr	r3, [pc, #496]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 80019dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019e6:	2301      	movs	r3, #1
 80019e8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019ea:	4b79      	ldr	r3, [pc, #484]	; (8001bd0 <HAL_RCC_OscConfig+0x4bc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d118      	bne.n	8001a28 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019f6:	4b76      	ldr	r3, [pc, #472]	; (8001bd0 <HAL_RCC_OscConfig+0x4bc>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a75      	ldr	r2, [pc, #468]	; (8001bd0 <HAL_RCC_OscConfig+0x4bc>)
 80019fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a02:	f7ff fa7b 	bl	8000efc <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a0a:	f7ff fa77 	bl	8000efc <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e18b      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a1c:	4b6c      	ldr	r3, [pc, #432]	; (8001bd0 <HAL_RCC_OscConfig+0x4bc>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d108      	bne.n	8001a42 <HAL_RCC_OscConfig+0x32e>
 8001a30:	4b66      	ldr	r3, [pc, #408]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a36:	4a65      	ldr	r2, [pc, #404]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a38:	f043 0301 	orr.w	r3, r3, #1
 8001a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a40:	e024      	b.n	8001a8c <HAL_RCC_OscConfig+0x378>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	2b05      	cmp	r3, #5
 8001a48:	d110      	bne.n	8001a6c <HAL_RCC_OscConfig+0x358>
 8001a4a:	4b60      	ldr	r3, [pc, #384]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a50:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a52:	f043 0304 	orr.w	r3, r3, #4
 8001a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a60:	4a5a      	ldr	r2, [pc, #360]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a62:	f043 0301 	orr.w	r3, r3, #1
 8001a66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6a:	e00f      	b.n	8001a8c <HAL_RCC_OscConfig+0x378>
 8001a6c:	4b57      	ldr	r3, [pc, #348]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a72:	4a56      	ldr	r2, [pc, #344]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a74:	f023 0301 	bic.w	r3, r3, #1
 8001a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a7c:	4b53      	ldr	r3, [pc, #332]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a82:	4a52      	ldr	r2, [pc, #328]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001a84:	f023 0304 	bic.w	r3, r3, #4
 8001a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d016      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff fa32 	bl	8000efc <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a9a:	e00a      	b.n	8001ab2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a9c:	f7ff fa2e 	bl	8000efc <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aaa:	4293      	cmp	r3, r2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e140      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab2:	4b46      	ldr	r3, [pc, #280]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001ab4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab8:	f003 0302 	and.w	r3, r3, #2
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d0ed      	beq.n	8001a9c <HAL_RCC_OscConfig+0x388>
 8001ac0:	e015      	b.n	8001aee <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fa1b 	bl	8000efc <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ac8:	e00a      	b.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aca:	f7ff fa17 	bl	8000efc <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d901      	bls.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e129      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae0:	4b3a      	ldr	r3, [pc, #232]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1ed      	bne.n	8001aca <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001aee:	7ffb      	ldrb	r3, [r7, #31]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d105      	bne.n	8001b00 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001af4:	4b35      	ldr	r3, [pc, #212]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001af8:	4a34      	ldr	r2, [pc, #208]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001afa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001afe:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0320 	and.w	r3, r3, #32
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d03c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d01c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b14:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b1a:	4a2c      	ldr	r2, [pc, #176]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b1c:	f043 0301 	orr.w	r3, r3, #1
 8001b20:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f9ea 	bl	8000efc <HAL_GetTick>
 8001b28:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b2a:	e008      	b.n	8001b3e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b2c:	f7ff f9e6 	bl	8000efc <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0fa      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b3e:	4b23      	ldr	r3, [pc, #140]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d0ef      	beq.n	8001b2c <HAL_RCC_OscConfig+0x418>
 8001b4c:	e01b      	b.n	8001b86 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b4e:	4b1f      	ldr	r3, [pc, #124]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b54:	4a1d      	ldr	r2, [pc, #116]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b56:	f023 0301 	bic.w	r3, r3, #1
 8001b5a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5e:	f7ff f9cd 	bl	8000efc <HAL_GetTick>
 8001b62:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b66:	f7ff f9c9 	bl	8000efc <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b02      	cmp	r3, #2
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e0dd      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b7a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d1ef      	bne.n	8001b66 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	69db      	ldr	r3, [r3, #28]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	f000 80d1 	beq.w	8001d32 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b90:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 030c 	and.w	r3, r3, #12
 8001b98:	2b0c      	cmp	r3, #12
 8001b9a:	f000 808b 	beq.w	8001cb4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d15e      	bne.n	8001c64 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <HAL_RCC_OscConfig+0x4b8>)
 8001bac:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bb0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bb2:	f7ff f9a3 	bl	8000efc <HAL_GetTick>
 8001bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bb8:	e00c      	b.n	8001bd4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bba:	f7ff f99f 	bl	8000efc <HAL_GetTick>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d905      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e0b3      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
 8001bcc:	40021000 	.word	0x40021000
 8001bd0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	4b59      	ldr	r3, [pc, #356]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d1ec      	bne.n	8001bba <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001be0:	4b56      	ldr	r3, [pc, #344]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001be2:	68da      	ldr	r2, [r3, #12]
 8001be4:	4b56      	ldr	r3, [pc, #344]	; (8001d40 <HAL_RCC_OscConfig+0x62c>)
 8001be6:	4013      	ands	r3, r2
 8001be8:	687a      	ldr	r2, [r7, #4]
 8001bea:	6a11      	ldr	r1, [r2, #32]
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001bf0:	3a01      	subs	r2, #1
 8001bf2:	0112      	lsls	r2, r2, #4
 8001bf4:	4311      	orrs	r1, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8001bfa:	0212      	lsls	r2, r2, #8
 8001bfc:	4311      	orrs	r1, r2
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c02:	0852      	lsrs	r2, r2, #1
 8001c04:	3a01      	subs	r2, #1
 8001c06:	0552      	lsls	r2, r2, #21
 8001c08:	4311      	orrs	r1, r2
 8001c0a:	687a      	ldr	r2, [r7, #4]
 8001c0c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c0e:	0852      	lsrs	r2, r2, #1
 8001c10:	3a01      	subs	r2, #1
 8001c12:	0652      	lsls	r2, r2, #25
 8001c14:	4311      	orrs	r1, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001c1a:	06d2      	lsls	r2, r2, #27
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	4947      	ldr	r1, [pc, #284]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c24:	4b45      	ldr	r3, [pc, #276]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a44      	ldr	r2, [pc, #272]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c2e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c30:	4b42      	ldr	r3, [pc, #264]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	4a41      	ldr	r2, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3c:	f7ff f95e 	bl	8000efc <HAL_GetTick>
 8001c40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c44:	f7ff f95a 	bl	8000efc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e06e      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c56:	4b39      	ldr	r3, [pc, #228]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d0f0      	beq.n	8001c44 <HAL_RCC_OscConfig+0x530>
 8001c62:	e066      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c64:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a34      	ldr	r2, [pc, #208]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4a31      	ldr	r2, [pc, #196]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c76:	f023 0303 	bic.w	r3, r3, #3
 8001c7a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8001c7c:	4b2f      	ldr	r3, [pc, #188]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	4a2e      	ldr	r2, [pc, #184]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c82:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c8a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f936 	bl	8000efc <HAL_GetTick>
 8001c90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c92:	e008      	b.n	8001ca6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c94:	f7ff f932 	bl	8000efc <HAL_GetTick>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	693b      	ldr	r3, [r7, #16]
 8001c9c:	1ad3      	subs	r3, r2, r3
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e046      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca6:	4b25      	ldr	r3, [pc, #148]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1f0      	bne.n	8001c94 <HAL_RCC_OscConfig+0x580>
 8001cb2:	e03e      	b.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	69db      	ldr	r3, [r3, #28]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	d101      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	e039      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f003 0203 	and.w	r2, r3, #3
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6a1b      	ldr	r3, [r3, #32]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d12c      	bne.n	8001d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d123      	bne.n	8001d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d11b      	bne.n	8001d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d00:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d113      	bne.n	8001d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d10:	085b      	lsrs	r3, r3, #1
 8001d12:	3b01      	subs	r3, #1
 8001d14:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d109      	bne.n	8001d2e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	3b01      	subs	r3, #1
 8001d28:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d001      	beq.n	8001d32 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e000      	b.n	8001d34 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3720      	adds	r7, #32
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	019f800c 	.word	0x019f800c

08001d44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e11e      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d5c:	4b91      	ldr	r3, [pc, #580]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 030f 	and.w	r3, r3, #15
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d910      	bls.n	8001d8c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6a:	4b8e      	ldr	r3, [pc, #568]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f023 020f 	bic.w	r2, r3, #15
 8001d72:	498c      	ldr	r1, [pc, #560]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	4313      	orrs	r3, r2
 8001d78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d7a:	4b8a      	ldr	r3, [pc, #552]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d001      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e106      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d073      	beq.n	8001e80 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d129      	bne.n	8001df4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da0:	4b81      	ldr	r3, [pc, #516]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0f4      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001db0:	f000 f9d0 	bl	8002154 <RCC_GetSysClockFreqFromPLLSource>
 8001db4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001db6:	693b      	ldr	r3, [r7, #16]
 8001db8:	4a7c      	ldr	r2, [pc, #496]	; (8001fac <HAL_RCC_ClockConfig+0x268>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d93f      	bls.n	8001e3e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dbe:	4b7a      	ldr	r3, [pc, #488]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d009      	beq.n	8001dde <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d033      	beq.n	8001e3e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d12f      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001dde:	4b72      	ldr	r3, [pc, #456]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001de6:	4a70      	ldr	r2, [pc, #448]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dec:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dee:	2380      	movs	r3, #128	; 0x80
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	e024      	b.n	8001e3e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	2b02      	cmp	r3, #2
 8001dfa:	d107      	bne.n	8001e0c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d109      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	e0c6      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e0c:	4b66      	ldr	r3, [pc, #408]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d101      	bne.n	8001e1c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	e0be      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001e1c:	f000 f8ce 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001e20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	4a61      	ldr	r2, [pc, #388]	; (8001fac <HAL_RCC_ClockConfig+0x268>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d909      	bls.n	8001e3e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e2a:	4b5f      	ldr	r3, [pc, #380]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e32:	4a5d      	ldr	r2, [pc, #372]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e38:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e3a:	2380      	movs	r3, #128	; 0x80
 8001e3c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e3e:	4b5a      	ldr	r3, [pc, #360]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f023 0203 	bic.w	r2, r3, #3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	4957      	ldr	r1, [pc, #348]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e50:	f7ff f854 	bl	8000efc <HAL_GetTick>
 8001e54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e56:	e00a      	b.n	8001e6e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e58:	f7ff f850 	bl	8000efc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e095      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e6e:	4b4e      	ldr	r3, [pc, #312]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 020c 	and.w	r2, r3, #12
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d1eb      	bne.n	8001e58 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d023      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0304 	and.w	r3, r3, #4
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d005      	beq.n	8001ea4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e98:	4b43      	ldr	r3, [pc, #268]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001e9e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ea2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f003 0308 	and.w	r3, r3, #8
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d007      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001eb0:	4b3d      	ldr	r3, [pc, #244]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001eb8:	4a3b      	ldr	r2, [pc, #236]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001eba:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ebe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ec0:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001ec2:	689b      	ldr	r3, [r3, #8]
 8001ec4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	4936      	ldr	r1, [pc, #216]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	608b      	str	r3, [r1, #8]
 8001ed2:	e008      	b.n	8001ee6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	2b80      	cmp	r3, #128	; 0x80
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001eda:	4b33      	ldr	r3, [pc, #204]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	4a32      	ldr	r2, [pc, #200]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001ee0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ee4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ee6:	4b2f      	ldr	r3, [pc, #188]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d21d      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f023 020f 	bic.w	r2, r3, #15
 8001efc:	4929      	ldr	r1, [pc, #164]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001f04:	f7fe fffa 	bl	8000efc <HAL_GetTick>
 8001f08:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0a:	e00a      	b.n	8001f22 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f0c:	f7fe fff6 	bl	8000efc <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e03b      	b.n	8001f9a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b20      	ldr	r3, [pc, #128]	; (8001fa4 <HAL_RCC_ClockConfig+0x260>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1ed      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b1a      	ldr	r3, [pc, #104]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4917      	ldr	r1, [pc, #92]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5a:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490f      	ldr	r1, [pc, #60]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f6e:	f000 f825 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <HAL_RCC_ClockConfig+0x264>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490c      	ldr	r1, [pc, #48]	; (8001fb0 <HAL_RCC_ClockConfig+0x26c>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <HAL_RCC_ClockConfig+0x270>)
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x274>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7fe fdd6 	bl	8000b44 <HAL_InitTick>
 8001f98:	4603      	mov	r3, r0
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	3718      	adds	r7, #24
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40022000 	.word	0x40022000
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	04c4b400 	.word	0x04c4b400
 8001fb0:	0800630c 	.word	0x0800630c
 8001fb4:	20000098 	.word	0x20000098
 8001fb8:	2000009c 	.word	0x2000009c

08001fbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b087      	sub	sp, #28
 8001fc0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001fc2:	4b2c      	ldr	r3, [pc, #176]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f003 030c 	and.w	r3, r3, #12
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d102      	bne.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fce:	4b2a      	ldr	r3, [pc, #168]	; (8002078 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e047      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001fd4:	4b27      	ldr	r3, [pc, #156]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	f003 030c 	and.w	r3, r3, #12
 8001fdc:	2b08      	cmp	r3, #8
 8001fde:	d102      	bne.n	8001fe6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe0:	4b26      	ldr	r3, [pc, #152]	; (800207c <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fe2:	613b      	str	r3, [r7, #16]
 8001fe4:	e03e      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b0c      	cmp	r3, #12
 8001ff0:	d136      	bne.n	8002060 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ff2:	4b20      	ldr	r3, [pc, #128]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ff4:	68db      	ldr	r3, [r3, #12]
 8001ff6:	f003 0303 	and.w	r3, r3, #3
 8001ffa:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ffc:	4b1d      	ldr	r3, [pc, #116]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	091b      	lsrs	r3, r3, #4
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	3301      	adds	r3, #1
 8002008:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2b03      	cmp	r3, #3
 800200e:	d10c      	bne.n	800202a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002010:	4a1a      	ldr	r2, [pc, #104]	; (800207c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	fbb2 f3f3 	udiv	r3, r2, r3
 8002018:	4a16      	ldr	r2, [pc, #88]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 800201a:	68d2      	ldr	r2, [r2, #12]
 800201c:	0a12      	lsrs	r2, r2, #8
 800201e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002022:	fb02 f303 	mul.w	r3, r2, r3
 8002026:	617b      	str	r3, [r7, #20]
      break;
 8002028:	e00c      	b.n	8002044 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800202a:	4a13      	ldr	r2, [pc, #76]	; (8002078 <HAL_RCC_GetSysClockFreq+0xbc>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002032:	4a10      	ldr	r2, [pc, #64]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002034:	68d2      	ldr	r2, [r2, #12]
 8002036:	0a12      	lsrs	r2, r2, #8
 8002038:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800203c:	fb02 f303 	mul.w	r3, r2, r3
 8002040:	617b      	str	r3, [r7, #20]
      break;
 8002042:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002044:	4b0b      	ldr	r3, [pc, #44]	; (8002074 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0e5b      	lsrs	r3, r3, #25
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	3301      	adds	r3, #1
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002054:	697a      	ldr	r2, [r7, #20]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	fbb2 f3f3 	udiv	r3, r2, r3
 800205c:	613b      	str	r3, [r7, #16]
 800205e:	e001      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002064:	693b      	ldr	r3, [r7, #16]
}
 8002066:	4618      	mov	r0, r3
 8002068:	371c      	adds	r7, #28
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	00f42400 	.word	0x00f42400
 800207c:	016e3600 	.word	0x016e3600

08002080 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002084:	4b03      	ldr	r3, [pc, #12]	; (8002094 <HAL_RCC_GetHCLKFreq+0x14>)
 8002086:	681b      	ldr	r3, [r3, #0]
}
 8002088:	4618      	mov	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	20000098 	.word	0x20000098

08002098 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800209c:	f7ff fff0 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020a0:	4602      	mov	r2, r0
 80020a2:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80020a4:	689b      	ldr	r3, [r3, #8]
 80020a6:	0a1b      	lsrs	r3, r3, #8
 80020a8:	f003 0307 	and.w	r3, r3, #7
 80020ac:	4904      	ldr	r1, [pc, #16]	; (80020c0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	f003 031f 	and.w	r3, r3, #31
 80020b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	0800631c 	.word	0x0800631c

080020c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80020c8:	f7ff ffda 	bl	8002080 <HAL_RCC_GetHCLKFreq>
 80020cc:	4602      	mov	r2, r0
 80020ce:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	0adb      	lsrs	r3, r3, #11
 80020d4:	f003 0307 	and.w	r3, r3, #7
 80020d8:	4904      	ldr	r1, [pc, #16]	; (80020ec <HAL_RCC_GetPCLK2Freq+0x28>)
 80020da:	5ccb      	ldrb	r3, [r1, r3]
 80020dc:	f003 031f 	and.w	r3, r3, #31
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	40021000 	.word	0x40021000
 80020ec:	0800631c 	.word	0x0800631c

080020f0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	220f      	movs	r2, #15
 80020fe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002100:	4b12      	ldr	r3, [pc, #72]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 0203 	and.w	r2, r3, #3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800210c:	4b0f      	ldr	r3, [pc, #60]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 800210e:	689b      	ldr	r3, [r3, #8]
 8002110:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002118:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <HAL_RCC_GetClockConfig+0x5c>)
 8002126:	689b      	ldr	r3, [r3, #8]
 8002128:	08db      	lsrs	r3, r3, #3
 800212a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <HAL_RCC_GetClockConfig+0x60>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 020f 	and.w	r2, r3, #15
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	601a      	str	r2, [r3, #0]
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40021000 	.word	0x40021000
 8002150:	40022000 	.word	0x40022000

08002154 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b087      	sub	sp, #28
 8002158:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800215a:	4b1e      	ldr	r3, [pc, #120]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f003 0303 	and.w	r3, r3, #3
 8002162:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002164:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	091b      	lsrs	r3, r3, #4
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	3301      	adds	r3, #1
 8002170:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	2b03      	cmp	r3, #3
 8002176:	d10c      	bne.n	8002192 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002178:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002180:	4a14      	ldr	r2, [pc, #80]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002182:	68d2      	ldr	r2, [r2, #12]
 8002184:	0a12      	lsrs	r2, r2, #8
 8002186:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	617b      	str	r3, [r7, #20]
    break;
 8002190:	e00c      	b.n	80021ac <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002192:	4a12      	ldr	r2, [pc, #72]	; (80021dc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	fbb2 f3f3 	udiv	r3, r2, r3
 800219a:	4a0e      	ldr	r2, [pc, #56]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800219c:	68d2      	ldr	r2, [r2, #12]
 800219e:	0a12      	lsrs	r2, r2, #8
 80021a0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021a4:	fb02 f303 	mul.w	r3, r2, r3
 80021a8:	617b      	str	r3, [r7, #20]
    break;
 80021aa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021ac:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	0e5b      	lsrs	r3, r3, #25
 80021b2:	f003 0303 	and.w	r3, r3, #3
 80021b6:	3301      	adds	r3, #1
 80021b8:	005b      	lsls	r3, r3, #1
 80021ba:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80021c6:	687b      	ldr	r3, [r7, #4]
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40021000 	.word	0x40021000
 80021d8:	016e3600 	.word	0x016e3600
 80021dc:	00f42400 	.word	0x00f42400

080021e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80021e8:	2300      	movs	r3, #0
 80021ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80021ec:	2300      	movs	r3, #0
 80021ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 8098 	beq.w	800232e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fe:	2300      	movs	r3, #0
 8002200:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002202:	4b43      	ldr	r3, [pc, #268]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d10d      	bne.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800220e:	4b40      	ldr	r3, [pc, #256]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a3f      	ldr	r2, [pc, #252]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002214:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
 800221a:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800221c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002222:	60bb      	str	r3, [r7, #8]
 8002224:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002226:	2301      	movs	r3, #1
 8002228:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a39      	ldr	r2, [pc, #228]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002230:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002234:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002236:	f7fe fe61 	bl	8000efc <HAL_GetTick>
 800223a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800223c:	e009      	b.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800223e:	f7fe fe5d 	bl	8000efc <HAL_GetTick>
 8002242:	4602      	mov	r2, r0
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	2b02      	cmp	r3, #2
 800224a:	d902      	bls.n	8002252 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	74fb      	strb	r3, [r7, #19]
        break;
 8002250:	e005      	b.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002252:	4b30      	ldr	r3, [pc, #192]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0ef      	beq.n	800223e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800225e:	7cfb      	ldrb	r3, [r7, #19]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d159      	bne.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002264:	4b2a      	ldr	r3, [pc, #168]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002266:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800226e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	2b00      	cmp	r3, #0
 8002274:	d01e      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227a:	697a      	ldr	r2, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	d019      	beq.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002286:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800228a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800228c:	4b20      	ldr	r3, [pc, #128]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	4a1f      	ldr	r2, [pc, #124]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800229c:	4b1c      	ldr	r3, [pc, #112]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800229e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a2:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022ac:	4a18      	ldr	r2, [pc, #96]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d016      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7fe fe1d 	bl	8000efc <HAL_GetTick>
 80022c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c4:	e00b      	b.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022c6:	f7fe fe19 	bl	8000efc <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4293      	cmp	r3, r2
 80022d6:	d902      	bls.n	80022de <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	74fb      	strb	r3, [r7, #19]
            break;
 80022dc:	e006      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022de:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0ec      	beq.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80022ec:	7cfb      	ldrb	r3, [r7, #19]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d10b      	bne.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80022f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	4903      	ldr	r1, [pc, #12]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800230a:	7cfb      	ldrb	r3, [r7, #19]
 800230c:	74bb      	strb	r3, [r7, #18]
 800230e:	e005      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800231c:	7c7b      	ldrb	r3, [r7, #17]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d105      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002322:	4ba6      	ldr	r3, [pc, #664]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	4aa5      	ldr	r2, [pc, #660]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002328:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800232c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d00a      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800233a:	4ba0      	ldr	r3, [pc, #640]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800233c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002340:	f023 0203 	bic.w	r2, r3, #3
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	499c      	ldr	r1, [pc, #624]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800234a:	4313      	orrs	r3, r2
 800234c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00a      	beq.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800235c:	4b97      	ldr	r3, [pc, #604]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800235e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002362:	f023 020c 	bic.w	r2, r3, #12
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	4994      	ldr	r1, [pc, #592]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800236c:	4313      	orrs	r3, r2
 800236e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0304 	and.w	r3, r3, #4
 800237a:	2b00      	cmp	r3, #0
 800237c:	d00a      	beq.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800237e:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002384:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	498b      	ldr	r1, [pc, #556]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800238e:	4313      	orrs	r3, r2
 8002390:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f003 0308 	and.w	r3, r3, #8
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00a      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023a0:	4b86      	ldr	r3, [pc, #536]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	4983      	ldr	r1, [pc, #524]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0320 	and.w	r3, r3, #32
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d00a      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023c2:	4b7e      	ldr	r3, [pc, #504]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023c8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	695b      	ldr	r3, [r3, #20]
 80023d0:	497a      	ldr	r1, [pc, #488]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00a      	beq.n	80023fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023e4:	4b75      	ldr	r3, [pc, #468]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023ea:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	699b      	ldr	r3, [r3, #24]
 80023f2:	4972      	ldr	r1, [pc, #456]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80023f4:	4313      	orrs	r3, r2
 80023f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00a      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002406:	4b6d      	ldr	r3, [pc, #436]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800240c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	4969      	ldr	r1, [pc, #420]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002416:	4313      	orrs	r3, r2
 8002418:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d00a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002428:	4b64      	ldr	r3, [pc, #400]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800242a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6a1b      	ldr	r3, [r3, #32]
 8002436:	4961      	ldr	r1, [pc, #388]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002438:	4313      	orrs	r3, r2
 800243a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002446:	2b00      	cmp	r3, #0
 8002448:	d00a      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800244a:	4b5c      	ldr	r3, [pc, #368]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800244c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002450:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002458:	4958      	ldr	r1, [pc, #352]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002468:	2b00      	cmp	r3, #0
 800246a:	d015      	beq.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800246c:	4b53      	ldr	r3, [pc, #332]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800246e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002472:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800247a:	4950      	ldr	r1, [pc, #320]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800247c:	4313      	orrs	r3, r2
 800247e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002486:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800248a:	d105      	bne.n	8002498 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800248c:	4b4b      	ldr	r3, [pc, #300]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	4a4a      	ldr	r2, [pc, #296]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002496:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d015      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80024a4:	4b45      	ldr	r3, [pc, #276]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b2:	4942      	ldr	r1, [pc, #264]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024c2:	d105      	bne.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024c4:	4b3d      	ldr	r3, [pc, #244]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	4a3c      	ldr	r2, [pc, #240]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d015      	beq.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80024dc:	4b37      	ldr	r3, [pc, #220]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	4934      	ldr	r1, [pc, #208]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024ec:	4313      	orrs	r3, r2
 80024ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024fa:	d105      	bne.n	8002508 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024fc:	4b2f      	ldr	r3, [pc, #188]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	4a2e      	ldr	r2, [pc, #184]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002506:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d015      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002514:	4b29      	ldr	r3, [pc, #164]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002516:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002522:	4926      	ldr	r1, [pc, #152]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002524:	4313      	orrs	r3, r2
 8002526:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800252e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002532:	d105      	bne.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002534:	4b21      	ldr	r3, [pc, #132]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	4a20      	ldr	r2, [pc, #128]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800253a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800253e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d015      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800254c:	4b1b      	ldr	r3, [pc, #108]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800254e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002552:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800255a:	4918      	ldr	r1, [pc, #96]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800255c:	4313      	orrs	r3, r2
 800255e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002566:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800256a:	d105      	bne.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800256c:	4b13      	ldr	r3, [pc, #76]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	4a12      	ldr	r2, [pc, #72]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002572:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002576:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d015      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002584:	4b0d      	ldr	r3, [pc, #52]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800258a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	490a      	ldr	r1, [pc, #40]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800259e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a2:	d105      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4a04      	ldr	r2, [pc, #16]	; (80025bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80025b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000

080025c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d101      	bne.n	80025d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e049      	b.n	8002666 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f000 f841 	bl	800266e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2202      	movs	r2, #2
 80025f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3304      	adds	r3, #4
 80025fc:	4619      	mov	r1, r3
 80025fe:	4610      	mov	r0, r2
 8002600:	f000 fa52 	bl	8002aa8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2201      	movs	r2, #1
 8002608:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	2201      	movs	r2, #1
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2201      	movs	r2, #1
 8002618:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	3708      	adds	r7, #8
 800266a:	46bd      	mov	sp, r7
 800266c:	bd80      	pop	{r7, pc}

0800266e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800266e:	b480      	push	{r7}
 8002670:	b083      	sub	sp, #12
 8002672:	af00      	add	r7, sp, #0
 8002674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002692:	b2db      	uxtb	r3, r3
 8002694:	2b01      	cmp	r3, #1
 8002696:	d001      	beq.n	800269c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e04a      	b.n	8002732 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2202      	movs	r2, #2
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68da      	ldr	r2, [r3, #12]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f042 0201 	orr.w	r2, r2, #1
 80026b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a21      	ldr	r2, [pc, #132]	; (8002740 <HAL_TIM_Base_Start_IT+0xbc>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x6c>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c6:	d013      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x6c>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a1d      	ldr	r2, [pc, #116]	; (8002744 <HAL_TIM_Base_Start_IT+0xc0>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x6c>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a1c      	ldr	r2, [pc, #112]	; (8002748 <HAL_TIM_Base_Start_IT+0xc4>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x6c>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a1a      	ldr	r2, [pc, #104]	; (800274c <HAL_TIM_Base_Start_IT+0xc8>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_TIM_Base_Start_IT+0x6c>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a19      	ldr	r2, [pc, #100]	; (8002750 <HAL_TIM_Base_Start_IT+0xcc>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d115      	bne.n	800271c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_TIM_Base_Start_IT+0xd0>)
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2b06      	cmp	r3, #6
 8002700:	d015      	beq.n	800272e <HAL_TIM_Base_Start_IT+0xaa>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002708:	d011      	beq.n	800272e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f042 0201 	orr.w	r2, r2, #1
 8002718:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800271a:	e008      	b.n	800272e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e000      	b.n	8002730 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	40012c00 	.word	0x40012c00
 8002744:	40000400 	.word	0x40000400
 8002748:	40000800 	.word	0x40000800
 800274c:	40013400 	.word	0x40013400
 8002750:	40014000 	.word	0x40014000
 8002754:	00010007 	.word	0x00010007

08002758 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	691b      	ldr	r3, [r3, #16]
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	2b02      	cmp	r3, #2
 800276c:	d122      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	f003 0302 	and.w	r3, r3, #2
 8002778:	2b02      	cmp	r3, #2
 800277a:	d11b      	bne.n	80027b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f06f 0202 	mvn.w	r2, #2
 8002784:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699b      	ldr	r3, [r3, #24]
 8002792:	f003 0303 	and.w	r3, r3, #3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d003      	beq.n	80027a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f965 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 80027a0:	e005      	b.n	80027ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f000 f957 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a8:	6878      	ldr	r0, [r7, #4]
 80027aa:	f000 f968 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	f003 0304 	and.w	r3, r3, #4
 80027be:	2b04      	cmp	r3, #4
 80027c0:	d122      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b04      	cmp	r3, #4
 80027ce:	d11b      	bne.n	8002808 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0204 	mvn.w	r2, #4
 80027d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2202      	movs	r2, #2
 80027de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	699b      	ldr	r3, [r3, #24]
 80027e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d003      	beq.n	80027f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 f93b 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 80027f4:	e005      	b.n	8002802 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 f92d 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f000 f93e 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2200      	movs	r2, #0
 8002806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	691b      	ldr	r3, [r3, #16]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b08      	cmp	r3, #8
 8002814:	d122      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f003 0308 	and.w	r3, r3, #8
 8002820:	2b08      	cmp	r3, #8
 8002822:	d11b      	bne.n	800285c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f06f 0208 	mvn.w	r2, #8
 800282c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2204      	movs	r2, #4
 8002832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	69db      	ldr	r3, [r3, #28]
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	2b00      	cmp	r3, #0
 8002840:	d003      	beq.n	800284a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f000 f911 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 8002848:	e005      	b.n	8002856 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f000 f903 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f914 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2200      	movs	r2, #0
 800285a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f003 0310 	and.w	r3, r3, #16
 8002866:	2b10      	cmp	r3, #16
 8002868:	d122      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	f003 0310 	and.w	r3, r3, #16
 8002874:	2b10      	cmp	r3, #16
 8002876:	d11b      	bne.n	80028b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f06f 0210 	mvn.w	r2, #16
 8002880:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002896:	6878      	ldr	r0, [r7, #4]
 8002898:	f000 f8e7 	bl	8002a6a <HAL_TIM_IC_CaptureCallback>
 800289c:	e005      	b.n	80028aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800289e:	6878      	ldr	r0, [r7, #4]
 80028a0:	f000 f8d9 	bl	8002a56 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8ea 	bl	8002a7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d10e      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	f003 0301 	and.w	r3, r3, #1
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d107      	bne.n	80028dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f06f 0201 	mvn.w	r2, #1
 80028d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f7fe f898 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028e6:	2b80      	cmp	r3, #128	; 0x80
 80028e8:	d10e      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028f4:	2b80      	cmp	r3, #128	; 0x80
 80028f6:	d107      	bne.n	8002908 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002900:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	f000 f96a 	bl	8002bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002912:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002916:	d10e      	bne.n	8002936 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	68db      	ldr	r3, [r3, #12]
 800291e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002922:	2b80      	cmp	r3, #128	; 0x80
 8002924:	d107      	bne.n	8002936 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800292e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 f95d 	bl	8002bf0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	691b      	ldr	r3, [r3, #16]
 800293c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002940:	2b40      	cmp	r3, #64	; 0x40
 8002942:	d10e      	bne.n	8002962 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68db      	ldr	r3, [r3, #12]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b40      	cmp	r3, #64	; 0x40
 8002950:	d107      	bne.n	8002962 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800295a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 f898 	bl	8002a92 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f003 0320 	and.w	r3, r3, #32
 800296c:	2b20      	cmp	r3, #32
 800296e:	d10e      	bne.n	800298e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f003 0320 	and.w	r3, r3, #32
 800297a:	2b20      	cmp	r3, #32
 800297c:	d107      	bne.n	800298e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f06f 0220 	mvn.w	r2, #32
 8002986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f91d 	bl	8002bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002998:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800299c:	d10f      	bne.n	80029be <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029ac:	d107      	bne.n	80029be <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80029b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	f000 f923 	bl	8002c04 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	691b      	ldr	r3, [r3, #16]
 80029c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029cc:	d10f      	bne.n	80029ee <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80029dc:	d107      	bne.n	80029ee <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80029e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80029e8:	6878      	ldr	r0, [r7, #4]
 80029ea:	f000 f915 	bl	8002c18 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	691b      	ldr	r3, [r3, #16]
 80029f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029fc:	d10f      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	68db      	ldr	r3, [r3, #12]
 8002a04:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a08:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0c:	d107      	bne.n	8002a1e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8002a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f907 	bl	8002c2c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	691b      	ldr	r3, [r3, #16]
 8002a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a2c:	d10f      	bne.n	8002a4e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a38:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002a3c:	d107      	bne.n	8002a4e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8002a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f000 f8f9 	bl	8002c40 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a4e:	bf00      	nop
 8002a50:	3708      	adds	r7, #8
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}

08002a56 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a56:	b480      	push	{r7}
 8002a58:	b083      	sub	sp, #12
 8002a5a:	af00      	add	r7, sp, #0
 8002a5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a5e:	bf00      	nop
 8002a60:	370c      	adds	r7, #12
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr

08002a6a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	b083      	sub	sp, #12
 8002a6e:	af00      	add	r7, sp, #0
 8002a70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a9a:	bf00      	nop
 8002a9c:	370c      	adds	r7, #12
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa4:	4770      	bx	lr
	...

08002aa8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	4a3c      	ldr	r2, [pc, #240]	; (8002bac <TIM_Base_SetConfig+0x104>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d00f      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac6:	d00b      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a39      	ldr	r2, [pc, #228]	; (8002bb0 <TIM_Base_SetConfig+0x108>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d007      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a38      	ldr	r2, [pc, #224]	; (8002bb4 <TIM_Base_SetConfig+0x10c>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d003      	beq.n	8002ae0 <TIM_Base_SetConfig+0x38>
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	4a37      	ldr	r2, [pc, #220]	; (8002bb8 <TIM_Base_SetConfig+0x110>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d108      	bne.n	8002af2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ae6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	68fa      	ldr	r2, [r7, #12]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a2d      	ldr	r2, [pc, #180]	; (8002bac <TIM_Base_SetConfig+0x104>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d01b      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b00:	d017      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a2a      	ldr	r2, [pc, #168]	; (8002bb0 <TIM_Base_SetConfig+0x108>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d013      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a29      	ldr	r2, [pc, #164]	; (8002bb4 <TIM_Base_SetConfig+0x10c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d00f      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a28      	ldr	r2, [pc, #160]	; (8002bb8 <TIM_Base_SetConfig+0x110>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a27      	ldr	r2, [pc, #156]	; (8002bbc <TIM_Base_SetConfig+0x114>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a26      	ldr	r2, [pc, #152]	; (8002bc0 <TIM_Base_SetConfig+0x118>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_Base_SetConfig+0x8a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a25      	ldr	r2, [pc, #148]	; (8002bc4 <TIM_Base_SetConfig+0x11c>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d108      	bne.n	8002b44 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	68db      	ldr	r3, [r3, #12]
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	695b      	ldr	r3, [r3, #20]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68fa      	ldr	r2, [r7, #12]
 8002b56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a10      	ldr	r2, [pc, #64]	; (8002bac <TIM_Base_SetConfig+0x104>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d00f      	beq.n	8002b90 <TIM_Base_SetConfig+0xe8>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a11      	ldr	r2, [pc, #68]	; (8002bb8 <TIM_Base_SetConfig+0x110>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d00b      	beq.n	8002b90 <TIM_Base_SetConfig+0xe8>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a10      	ldr	r2, [pc, #64]	; (8002bbc <TIM_Base_SetConfig+0x114>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d007      	beq.n	8002b90 <TIM_Base_SetConfig+0xe8>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	4a0f      	ldr	r2, [pc, #60]	; (8002bc0 <TIM_Base_SetConfig+0x118>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d003      	beq.n	8002b90 <TIM_Base_SetConfig+0xe8>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0e      	ldr	r2, [pc, #56]	; (8002bc4 <TIM_Base_SetConfig+0x11c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d103      	bne.n	8002b98 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	691a      	ldr	r2, [r3, #16]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	615a      	str	r2, [r3, #20]
}
 8002b9e:	bf00      	nop
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40012c00 	.word	0x40012c00
 8002bb0:	40000400 	.word	0x40000400
 8002bb4:	40000800 	.word	0x40000800
 8002bb8:	40013400 	.word	0x40013400
 8002bbc:	40014000 	.word	0x40014000
 8002bc0:	40014400 	.word	0x40014400
 8002bc4:	40014800 	.word	0x40014800

08002bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr

08002bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr

08002c04 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr

08002c2c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b083      	sub	sp, #12
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8002c48:	bf00      	nop
 8002c4a:	370c      	adds	r7, #12
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c52:	4770      	bx	lr

08002c54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d101      	bne.n	8002c66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e042      	b.n	8002cec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d106      	bne.n	8002c7e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7fd ff03 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2224      	movs	r2, #36	; 0x24
 8002c82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 0201 	bic.w	r2, r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 fc50 	bl	800353c <UART_SetConfig>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e022      	b.n	8002cec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d002      	beq.n	8002cb4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 ff10 	bl	8003ad4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002cc2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002cd2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f042 0201 	orr.w	r2, r2, #1
 8002ce2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	f000 ff97 	bl	8003c18 <UART_CheckIdleState>
 8002cea:	4603      	mov	r3, r0
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	3708      	adds	r7, #8
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b08a      	sub	sp, #40	; 0x28
 8002cf8:	af02      	add	r7, sp, #8
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	4613      	mov	r3, r2
 8002d02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d0a:	2b20      	cmp	r3, #32
 8002d0c:	f040 8083 	bne.w	8002e16 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d002      	beq.n	8002d1c <HAL_UART_Transmit+0x28>
 8002d16:	88fb      	ldrh	r3, [r7, #6]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e07b      	b.n	8002e18 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d101      	bne.n	8002d2e <HAL_UART_Transmit+0x3a>
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	e074      	b.n	8002e18 <HAL_UART_Transmit+0x124>
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2201      	movs	r2, #1
 8002d32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	2221      	movs	r2, #33	; 0x21
 8002d42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d46:	f7fe f8d9 	bl	8000efc <HAL_GetTick>
 8002d4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	88fa      	ldrh	r2, [r7, #6]
 8002d50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d64:	d108      	bne.n	8002d78 <HAL_UART_Transmit+0x84>
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d104      	bne.n	8002d78 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	61bb      	str	r3, [r7, #24]
 8002d76:	e003      	b.n	8002d80 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002d78:	68bb      	ldr	r3, [r7, #8]
 8002d7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8002d88:	e02c      	b.n	8002de4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	9300      	str	r3, [sp, #0]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	2200      	movs	r2, #0
 8002d92:	2180      	movs	r1, #128	; 0x80
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 ff8a 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e039      	b.n	8002e18 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10b      	bne.n	8002dc2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	881b      	ldrh	r3, [r3, #0]
 8002dae:	461a      	mov	r2, r3
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002db8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	3302      	adds	r3, #2
 8002dbe:	61bb      	str	r3, [r7, #24]
 8002dc0:	e007      	b.n	8002dd2 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	781a      	ldrb	r2, [r3, #0]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002dd8:	b29b      	uxth	r3, r3
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	b29a      	uxth	r2, r3
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1cc      	bne.n	8002d8a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	9300      	str	r3, [sp, #0]
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	2200      	movs	r2, #0
 8002df8:	2140      	movs	r1, #64	; 0x40
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 ff57 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8002e06:	2303      	movs	r3, #3
 8002e08:	e006      	b.n	8002e18 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	2220      	movs	r2, #32
 8002e0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8002e12:	2300      	movs	r3, #0
 8002e14:	e000      	b.n	8002e18 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8002e16:	2302      	movs	r3, #2
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3720      	adds	r7, #32
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}

08002e20 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	2b20      	cmp	r3, #32
 8002e36:	d142      	bne.n	8002ebe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Receive_IT+0x24>
 8002e3e:	88fb      	ldrh	r3, [r7, #6]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e03b      	b.n	8002ec0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d101      	bne.n	8002e56 <HAL_UART_Receive_IT+0x36>
 8002e52:	2302      	movs	r3, #2
 8002e54:	e034      	b.n	8002ec0 <HAL_UART_Receive_IT+0xa0>
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2201      	movs	r2, #1
 8002e5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2200      	movs	r2, #0
 8002e62:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a17      	ldr	r2, [pc, #92]	; (8002ec8 <HAL_UART_Receive_IT+0xa8>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d01f      	beq.n	8002eae <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d018      	beq.n	8002eae <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	e853 3f00 	ldrex	r3, [r3]
 8002e88:	613b      	str	r3, [r7, #16]
   return(result);
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002e90:	627b      	str	r3, [r7, #36]	; 0x24
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	461a      	mov	r2, r3
 8002e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9a:	623b      	str	r3, [r7, #32]
 8002e9c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e9e:	69f9      	ldr	r1, [r7, #28]
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	e841 2300 	strex	r3, r2, [r1]
 8002ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1e6      	bne.n	8002e7c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002eae:	88fb      	ldrh	r3, [r7, #6]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68b9      	ldr	r1, [r7, #8]
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f000 ffc3 	bl	8003e40 <UART_Start_Receive_IT>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	e000      	b.n	8002ec0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002ebe:	2302      	movs	r3, #2
  }
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40008000 	.word	0x40008000

08002ecc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b0ba      	sub	sp, #232	; 0xe8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	69db      	ldr	r3, [r3, #28]
 8002eda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ef2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002ef6:	f640 030f 	movw	r3, #2063	; 0x80f
 8002efa:	4013      	ands	r3, r2
 8002efc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d11b      	bne.n	8002f40 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002f08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f0c:	f003 0320 	and.w	r3, r3, #32
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d015      	beq.n	8002f40 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002f14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f18:	f003 0320 	and.w	r3, r3, #32
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d105      	bne.n	8002f2c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002f20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002f24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d009      	beq.n	8002f40 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f000 82d6 	beq.w	80034e2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4798      	blx	r3
      }
      return;
 8002f3e:	e2d0      	b.n	80034e2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 811f 	beq.w	8003188 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002f4a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8002f4e:	4b8b      	ldr	r3, [pc, #556]	; (800317c <HAL_UART_IRQHandler+0x2b0>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d106      	bne.n	8002f64 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002f56:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002f5a:	4b89      	ldr	r3, [pc, #548]	; (8003180 <HAL_UART_IRQHandler+0x2b4>)
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	f000 8112 	beq.w	8003188 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d011      	beq.n	8002f94 <HAL_UART_IRQHandler+0xc8>
 8002f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00b      	beq.n	8002f94 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	2201      	movs	r2, #1
 8002f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d011      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xf8>
 8002fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fa4:	f003 0301 	and.w	r3, r3, #1
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d00b      	beq.n	8002fc4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fba:	f043 0204 	orr.w	r2, r3, #4
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fc8:	f003 0304 	and.w	r3, r3, #4
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d011      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x128>
 8002fd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fd4:	f003 0301 	and.w	r3, r3, #1
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00b      	beq.n	8002ff4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2204      	movs	r2, #4
 8002fe2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fea:	f043 0202 	orr.w	r2, r3, #2
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0308 	and.w	r3, r3, #8
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003004:	f003 0320 	and.w	r3, r3, #32
 8003008:	2b00      	cmp	r3, #0
 800300a:	d105      	bne.n	8003018 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800300c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003010:	4b5a      	ldr	r3, [pc, #360]	; (800317c <HAL_UART_IRQHandler+0x2b0>)
 8003012:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003014:	2b00      	cmp	r3, #0
 8003016:	d00b      	beq.n	8003030 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2208      	movs	r2, #8
 800301e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003026:	f043 0208 	orr.w	r2, r3, #8
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003030:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003034:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003038:	2b00      	cmp	r3, #0
 800303a:	d012      	beq.n	8003062 <HAL_UART_IRQHandler+0x196>
 800303c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003040:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00c      	beq.n	8003062 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003050:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003058:	f043 0220 	orr.w	r2, r3, #32
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003068:	2b00      	cmp	r3, #0
 800306a:	f000 823c 	beq.w	80034e6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800306e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003072:	f003 0320 	and.w	r3, r3, #32
 8003076:	2b00      	cmp	r3, #0
 8003078:	d013      	beq.n	80030a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800307a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800307e:	f003 0320 	and.w	r3, r3, #32
 8003082:	2b00      	cmp	r3, #0
 8003084:	d105      	bne.n	8003092 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800308a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d007      	beq.n	80030a2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b40      	cmp	r3, #64	; 0x40
 80030b8:	d005      	beq.n	80030c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80030ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d04f      	beq.n	8003166 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f000 ffe4 	bl	8004094 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d6:	2b40      	cmp	r3, #64	; 0x40
 80030d8:	d141      	bne.n	800315e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	3308      	adds	r3, #8
 80030e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80030e8:	e853 3f00 	ldrex	r3, [r3]
 80030ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80030f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80030f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3308      	adds	r3, #8
 8003102:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003106:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800310a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800310e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003112:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003116:	e841 2300 	strex	r3, r2, [r1]
 800311a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800311e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1d9      	bne.n	80030da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800312a:	2b00      	cmp	r3, #0
 800312c:	d013      	beq.n	8003156 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003132:	4a14      	ldr	r2, [pc, #80]	; (8003184 <HAL_UART_IRQHandler+0x2b8>)
 8003134:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800313a:	4618      	mov	r0, r3
 800313c:	f7fe f845 	bl	80011ca <HAL_DMA_Abort_IT>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d017      	beq.n	8003176 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8003150:	4610      	mov	r0, r2
 8003152:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003154:	e00f      	b.n	8003176 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 f9da 	bl	8003510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800315c:	e00b      	b.n	8003176 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f000 f9d6 	bl	8003510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003164:	e007      	b.n	8003176 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9d2 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8003174:	e1b7      	b.n	80034e6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003176:	bf00      	nop
    return;
 8003178:	e1b5      	b.n	80034e6 <HAL_UART_IRQHandler+0x61a>
 800317a:	bf00      	nop
 800317c:	10000001 	.word	0x10000001
 8003180:	04000120 	.word	0x04000120
 8003184:	08004161 	.word	0x08004161

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800318c:	2b01      	cmp	r3, #1
 800318e:	f040 814a 	bne.w	8003426 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003192:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	f000 8143 	beq.w	8003426 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80031a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 813c 	beq.w	8003426 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2210      	movs	r2, #16
 80031b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	f040 80b5 	bne.w	8003330 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80031d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	f000 8187 	beq.w	80034ea <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80031e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031e6:	429a      	cmp	r2, r3
 80031e8:	f080 817f 	bcs.w	80034ea <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80031f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	f040 8086 	bne.w	8003314 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003210:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800321c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003224:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	461a      	mov	r2, r3
 800322e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003232:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003236:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800323e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003242:	e841 2300 	strex	r3, r2, [r1]
 8003246:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800324a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800324e:	2b00      	cmp	r3, #0
 8003250:	d1da      	bne.n	8003208 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	3308      	adds	r3, #8
 8003258:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800325c:	e853 3f00 	ldrex	r3, [r3]
 8003260:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003262:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003264:	f023 0301 	bic.w	r3, r3, #1
 8003268:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	3308      	adds	r3, #8
 8003272:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003276:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800327a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800327e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003282:	e841 2300 	strex	r3, r2, [r1]
 8003286:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003288:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1e1      	bne.n	8003252 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	3308      	adds	r3, #8
 8003294:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800329e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80032a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	3308      	adds	r3, #8
 80032ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80032b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80032b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80032b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80032ba:	e841 2300 	strex	r3, r2, [r1]
 80032be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80032c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d1e3      	bne.n	800328e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2220      	movs	r2, #32
 80032ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80032e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032e4:	f023 0310 	bic.w	r3, r3, #16
 80032e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	461a      	mov	r2, r3
 80032f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032f6:	65bb      	str	r3, [r7, #88]	; 0x58
 80032f8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80032fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80032fe:	e841 2300 	strex	r3, r2, [r1]
 8003302:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1e4      	bne.n	80032d4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd ff02 	bl	8001118 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003320:	b29b      	uxth	r3, r3
 8003322:	1ad3      	subs	r3, r2, r3
 8003324:	b29b      	uxth	r3, r3
 8003326:	4619      	mov	r1, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f8fb 	bl	8003524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800332e:	e0dc      	b.n	80034ea <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800333c:	b29b      	uxth	r3, r3
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800334a:	b29b      	uxth	r3, r3
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 80ce 	beq.w	80034ee <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8003352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003356:	2b00      	cmp	r3, #0
 8003358:	f000 80c9 	beq.w	80034ee <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003364:	e853 3f00 	ldrex	r3, [r3]
 8003368:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800336a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800336c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003370:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	461a      	mov	r2, r3
 800337a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800337e:	647b      	str	r3, [r7, #68]	; 0x44
 8003380:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003382:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003384:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800338c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1e4      	bne.n	800335c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	623b      	str	r3, [r7, #32]
   return(result);
 80033a2:	6a3b      	ldr	r3, [r7, #32]
 80033a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033a8:	f023 0301 	bic.w	r3, r3, #1
 80033ac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	3308      	adds	r3, #8
 80033b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80033ba:	633a      	str	r2, [r7, #48]	; 0x30
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033be:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80033c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033c2:	e841 2300 	strex	r3, r2, [r1]
 80033c6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80033c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1e1      	bne.n	8003392 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2220      	movs	r2, #32
 80033d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	e853 3f00 	ldrex	r3, [r3]
 80033ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0310 	bic.w	r3, r3, #16
 80033f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	e841 2300 	strex	r3, r2, [r1]
 8003410:	617b      	str	r3, [r7, #20]
   return(result);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1e4      	bne.n	80033e2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003418:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800341c:	4619      	mov	r1, r3
 800341e:	6878      	ldr	r0, [r7, #4]
 8003420:	f000 f880 	bl	8003524 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003424:	e063      	b.n	80034ee <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800342a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00e      	beq.n	8003450 <HAL_UART_IRQHandler+0x584>
 8003432:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d008      	beq.n	8003450 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003446:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003448:	6878      	ldr	r0, [r7, #4]
 800344a:	f001 fb27 	bl	8004a9c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800344e:	e051      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003454:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d014      	beq.n	8003486 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003460:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800346c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003478:	2b00      	cmp	r3, #0
 800347a:	d03a      	beq.n	80034f2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
    }
    return;
 8003484:	e035      	b.n	80034f2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_UART_IRQHandler+0x5da>
 8003492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003496:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349a:	2b00      	cmp	r3, #0
 800349c:	d003      	beq.n	80034a6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 fe74 	bl	800418c <UART_EndTransmit_IT>
    return;
 80034a4:	e026      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80034a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d009      	beq.n	80034c6 <HAL_UART_IRQHandler+0x5fa>
 80034b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 fb00 	bl	8004ac4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034c4:	e016      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80034c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d010      	beq.n	80034f4 <HAL_UART_IRQHandler+0x628>
 80034d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	da0c      	bge.n	80034f4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f001 fae8 	bl	8004ab0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034e0:	e008      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
      return;
 80034e2:	bf00      	nop
 80034e4:	e006      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
    return;
 80034e6:	bf00      	nop
 80034e8:	e004      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
      return;
 80034ea:	bf00      	nop
 80034ec:	e002      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
      return;
 80034ee:	bf00      	nop
 80034f0:	e000      	b.n	80034f4 <HAL_UART_IRQHandler+0x628>
    return;
 80034f2:	bf00      	nop
  }
}
 80034f4:	37e8      	adds	r7, #232	; 0xe8
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop

080034fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003504:	bf00      	nop
 8003506:	370c      	adds	r7, #12
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003518:	bf00      	nop
 800351a:	370c      	adds	r7, #12
 800351c:	46bd      	mov	sp, r7
 800351e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003522:	4770      	bx	lr

08003524 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr

0800353c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800353c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003540:	b08c      	sub	sp, #48	; 0x30
 8003542:	af00      	add	r7, sp, #0
 8003544:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	689a      	ldr	r2, [r3, #8]
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	691b      	ldr	r3, [r3, #16]
 8003554:	431a      	orrs	r2, r3
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	695b      	ldr	r3, [r3, #20]
 800355a:	431a      	orrs	r2, r3
 800355c:	697b      	ldr	r3, [r7, #20]
 800355e:	69db      	ldr	r3, [r3, #28]
 8003560:	4313      	orrs	r3, r2
 8003562:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	4bab      	ldr	r3, [pc, #684]	; (8003818 <UART_SetConfig+0x2dc>)
 800356c:	4013      	ands	r3, r2
 800356e:	697a      	ldr	r2, [r7, #20]
 8003570:	6812      	ldr	r2, [r2, #0]
 8003572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003574:	430b      	orrs	r3, r1
 8003576:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	68da      	ldr	r2, [r3, #12]
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4aa0      	ldr	r2, [pc, #640]	; (800381c <UART_SetConfig+0x2e0>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d004      	beq.n	80035a8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035a4:	4313      	orrs	r3, r2
 80035a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80035b2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	6812      	ldr	r2, [r2, #0]
 80035ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80035bc:	430b      	orrs	r3, r1
 80035be:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	f023 010f 	bic.w	r1, r3, #15
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a91      	ldr	r2, [pc, #580]	; (8003820 <UART_SetConfig+0x2e4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d125      	bne.n	800362c <UART_SetConfig+0xf0>
 80035e0:	4b90      	ldr	r3, [pc, #576]	; (8003824 <UART_SetConfig+0x2e8>)
 80035e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	2b03      	cmp	r3, #3
 80035ec:	d81a      	bhi.n	8003624 <UART_SetConfig+0xe8>
 80035ee:	a201      	add	r2, pc, #4	; (adr r2, 80035f4 <UART_SetConfig+0xb8>)
 80035f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035f4:	08003605 	.word	0x08003605
 80035f8:	08003615 	.word	0x08003615
 80035fc:	0800360d 	.word	0x0800360d
 8003600:	0800361d 	.word	0x0800361d
 8003604:	2301      	movs	r3, #1
 8003606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800360a:	e0d6      	b.n	80037ba <UART_SetConfig+0x27e>
 800360c:	2302      	movs	r3, #2
 800360e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003612:	e0d2      	b.n	80037ba <UART_SetConfig+0x27e>
 8003614:	2304      	movs	r3, #4
 8003616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800361a:	e0ce      	b.n	80037ba <UART_SetConfig+0x27e>
 800361c:	2308      	movs	r3, #8
 800361e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003622:	e0ca      	b.n	80037ba <UART_SetConfig+0x27e>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800362a:	e0c6      	b.n	80037ba <UART_SetConfig+0x27e>
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a7d      	ldr	r2, [pc, #500]	; (8003828 <UART_SetConfig+0x2ec>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d138      	bne.n	80036a8 <UART_SetConfig+0x16c>
 8003636:	4b7b      	ldr	r3, [pc, #492]	; (8003824 <UART_SetConfig+0x2e8>)
 8003638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b0c      	cmp	r3, #12
 8003642:	d82d      	bhi.n	80036a0 <UART_SetConfig+0x164>
 8003644:	a201      	add	r2, pc, #4	; (adr r2, 800364c <UART_SetConfig+0x110>)
 8003646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800364a:	bf00      	nop
 800364c:	08003681 	.word	0x08003681
 8003650:	080036a1 	.word	0x080036a1
 8003654:	080036a1 	.word	0x080036a1
 8003658:	080036a1 	.word	0x080036a1
 800365c:	08003691 	.word	0x08003691
 8003660:	080036a1 	.word	0x080036a1
 8003664:	080036a1 	.word	0x080036a1
 8003668:	080036a1 	.word	0x080036a1
 800366c:	08003689 	.word	0x08003689
 8003670:	080036a1 	.word	0x080036a1
 8003674:	080036a1 	.word	0x080036a1
 8003678:	080036a1 	.word	0x080036a1
 800367c:	08003699 	.word	0x08003699
 8003680:	2300      	movs	r3, #0
 8003682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003686:	e098      	b.n	80037ba <UART_SetConfig+0x27e>
 8003688:	2302      	movs	r3, #2
 800368a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800368e:	e094      	b.n	80037ba <UART_SetConfig+0x27e>
 8003690:	2304      	movs	r3, #4
 8003692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003696:	e090      	b.n	80037ba <UART_SetConfig+0x27e>
 8003698:	2308      	movs	r3, #8
 800369a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800369e:	e08c      	b.n	80037ba <UART_SetConfig+0x27e>
 80036a0:	2310      	movs	r3, #16
 80036a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036a6:	e088      	b.n	80037ba <UART_SetConfig+0x27e>
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a5f      	ldr	r2, [pc, #380]	; (800382c <UART_SetConfig+0x2f0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d125      	bne.n	80036fe <UART_SetConfig+0x1c2>
 80036b2:	4b5c      	ldr	r3, [pc, #368]	; (8003824 <UART_SetConfig+0x2e8>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80036bc:	2b30      	cmp	r3, #48	; 0x30
 80036be:	d016      	beq.n	80036ee <UART_SetConfig+0x1b2>
 80036c0:	2b30      	cmp	r3, #48	; 0x30
 80036c2:	d818      	bhi.n	80036f6 <UART_SetConfig+0x1ba>
 80036c4:	2b20      	cmp	r3, #32
 80036c6:	d00a      	beq.n	80036de <UART_SetConfig+0x1a2>
 80036c8:	2b20      	cmp	r3, #32
 80036ca:	d814      	bhi.n	80036f6 <UART_SetConfig+0x1ba>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d002      	beq.n	80036d6 <UART_SetConfig+0x19a>
 80036d0:	2b10      	cmp	r3, #16
 80036d2:	d008      	beq.n	80036e6 <UART_SetConfig+0x1aa>
 80036d4:	e00f      	b.n	80036f6 <UART_SetConfig+0x1ba>
 80036d6:	2300      	movs	r3, #0
 80036d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036dc:	e06d      	b.n	80037ba <UART_SetConfig+0x27e>
 80036de:	2302      	movs	r3, #2
 80036e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036e4:	e069      	b.n	80037ba <UART_SetConfig+0x27e>
 80036e6:	2304      	movs	r3, #4
 80036e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036ec:	e065      	b.n	80037ba <UART_SetConfig+0x27e>
 80036ee:	2308      	movs	r3, #8
 80036f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036f4:	e061      	b.n	80037ba <UART_SetConfig+0x27e>
 80036f6:	2310      	movs	r3, #16
 80036f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80036fc:	e05d      	b.n	80037ba <UART_SetConfig+0x27e>
 80036fe:	697b      	ldr	r3, [r7, #20]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a4b      	ldr	r2, [pc, #300]	; (8003830 <UART_SetConfig+0x2f4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d125      	bne.n	8003754 <UART_SetConfig+0x218>
 8003708:	4b46      	ldr	r3, [pc, #280]	; (8003824 <UART_SetConfig+0x2e8>)
 800370a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800370e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003712:	2bc0      	cmp	r3, #192	; 0xc0
 8003714:	d016      	beq.n	8003744 <UART_SetConfig+0x208>
 8003716:	2bc0      	cmp	r3, #192	; 0xc0
 8003718:	d818      	bhi.n	800374c <UART_SetConfig+0x210>
 800371a:	2b80      	cmp	r3, #128	; 0x80
 800371c:	d00a      	beq.n	8003734 <UART_SetConfig+0x1f8>
 800371e:	2b80      	cmp	r3, #128	; 0x80
 8003720:	d814      	bhi.n	800374c <UART_SetConfig+0x210>
 8003722:	2b00      	cmp	r3, #0
 8003724:	d002      	beq.n	800372c <UART_SetConfig+0x1f0>
 8003726:	2b40      	cmp	r3, #64	; 0x40
 8003728:	d008      	beq.n	800373c <UART_SetConfig+0x200>
 800372a:	e00f      	b.n	800374c <UART_SetConfig+0x210>
 800372c:	2300      	movs	r3, #0
 800372e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003732:	e042      	b.n	80037ba <UART_SetConfig+0x27e>
 8003734:	2302      	movs	r3, #2
 8003736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800373a:	e03e      	b.n	80037ba <UART_SetConfig+0x27e>
 800373c:	2304      	movs	r3, #4
 800373e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003742:	e03a      	b.n	80037ba <UART_SetConfig+0x27e>
 8003744:	2308      	movs	r3, #8
 8003746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800374a:	e036      	b.n	80037ba <UART_SetConfig+0x27e>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003752:	e032      	b.n	80037ba <UART_SetConfig+0x27e>
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a30      	ldr	r2, [pc, #192]	; (800381c <UART_SetConfig+0x2e0>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d12a      	bne.n	80037b4 <UART_SetConfig+0x278>
 800375e:	4b31      	ldr	r3, [pc, #196]	; (8003824 <UART_SetConfig+0x2e8>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800376c:	d01a      	beq.n	80037a4 <UART_SetConfig+0x268>
 800376e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003772:	d81b      	bhi.n	80037ac <UART_SetConfig+0x270>
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	d00c      	beq.n	8003794 <UART_SetConfig+0x258>
 800377a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800377e:	d815      	bhi.n	80037ac <UART_SetConfig+0x270>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d003      	beq.n	800378c <UART_SetConfig+0x250>
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d008      	beq.n	800379c <UART_SetConfig+0x260>
 800378a:	e00f      	b.n	80037ac <UART_SetConfig+0x270>
 800378c:	2300      	movs	r3, #0
 800378e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003792:	e012      	b.n	80037ba <UART_SetConfig+0x27e>
 8003794:	2302      	movs	r3, #2
 8003796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800379a:	e00e      	b.n	80037ba <UART_SetConfig+0x27e>
 800379c:	2304      	movs	r3, #4
 800379e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037a2:	e00a      	b.n	80037ba <UART_SetConfig+0x27e>
 80037a4:	2308      	movs	r3, #8
 80037a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037aa:	e006      	b.n	80037ba <UART_SetConfig+0x27e>
 80037ac:	2310      	movs	r3, #16
 80037ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80037b2:	e002      	b.n	80037ba <UART_SetConfig+0x27e>
 80037b4:	2310      	movs	r3, #16
 80037b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a17      	ldr	r2, [pc, #92]	; (800381c <UART_SetConfig+0x2e0>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	f040 80a8 	bne.w	8003916 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80037c6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80037ca:	2b08      	cmp	r3, #8
 80037cc:	d834      	bhi.n	8003838 <UART_SetConfig+0x2fc>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x298>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	08003839 	.word	0x08003839
 80037dc:	08003801 	.word	0x08003801
 80037e0:	08003839 	.word	0x08003839
 80037e4:	08003807 	.word	0x08003807
 80037e8:	08003839 	.word	0x08003839
 80037ec:	08003839 	.word	0x08003839
 80037f0:	08003839 	.word	0x08003839
 80037f4:	0800380f 	.word	0x0800380f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fc4e 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 80037fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80037fe:	e021      	b.n	8003844 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003800:	4b0c      	ldr	r3, [pc, #48]	; (8003834 <UART_SetConfig+0x2f8>)
 8003802:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003804:	e01e      	b.n	8003844 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003806:	f7fe fbd9 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800380c:	e01a      	b.n	8003844 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800380e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003814:	e016      	b.n	8003844 <UART_SetConfig+0x308>
 8003816:	bf00      	nop
 8003818:	cfff69f3 	.word	0xcfff69f3
 800381c:	40008000 	.word	0x40008000
 8003820:	40013800 	.word	0x40013800
 8003824:	40021000 	.word	0x40021000
 8003828:	40004400 	.word	0x40004400
 800382c:	40004800 	.word	0x40004800
 8003830:	40004c00 	.word	0x40004c00
 8003834:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003838:	2300      	movs	r3, #0
 800383a:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003842:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003846:	2b00      	cmp	r3, #0
 8003848:	f000 812a 	beq.w	8003aa0 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003850:	4a9e      	ldr	r2, [pc, #632]	; (8003acc <UART_SetConfig+0x590>)
 8003852:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003856:	461a      	mov	r2, r3
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	fbb3 f3f2 	udiv	r3, r3, r2
 800385e:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	d305      	bcc.n	800387c <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003876:	69ba      	ldr	r2, [r7, #24]
 8003878:	429a      	cmp	r2, r3
 800387a:	d903      	bls.n	8003884 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003882:	e10d      	b.n	8003aa0 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003886:	2200      	movs	r2, #0
 8003888:	60bb      	str	r3, [r7, #8]
 800388a:	60fa      	str	r2, [r7, #12]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003890:	4a8e      	ldr	r2, [pc, #568]	; (8003acc <UART_SetConfig+0x590>)
 8003892:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003896:	b29b      	uxth	r3, r3
 8003898:	2200      	movs	r2, #0
 800389a:	603b      	str	r3, [r7, #0]
 800389c:	607a      	str	r2, [r7, #4]
 800389e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80038a6:	f7fc fd1b 	bl	80002e0 <__aeabi_uldivmod>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4610      	mov	r0, r2
 80038b0:	4619      	mov	r1, r3
 80038b2:	f04f 0200 	mov.w	r2, #0
 80038b6:	f04f 0300 	mov.w	r3, #0
 80038ba:	020b      	lsls	r3, r1, #8
 80038bc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80038c0:	0202      	lsls	r2, r0, #8
 80038c2:	6979      	ldr	r1, [r7, #20]
 80038c4:	6849      	ldr	r1, [r1, #4]
 80038c6:	0849      	lsrs	r1, r1, #1
 80038c8:	2000      	movs	r0, #0
 80038ca:	460c      	mov	r4, r1
 80038cc:	4605      	mov	r5, r0
 80038ce:	eb12 0804 	adds.w	r8, r2, r4
 80038d2:	eb43 0905 	adc.w	r9, r3, r5
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	469a      	mov	sl, r3
 80038de:	4693      	mov	fp, r2
 80038e0:	4652      	mov	r2, sl
 80038e2:	465b      	mov	r3, fp
 80038e4:	4640      	mov	r0, r8
 80038e6:	4649      	mov	r1, r9
 80038e8:	f7fc fcfa 	bl	80002e0 <__aeabi_uldivmod>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4613      	mov	r3, r2
 80038f2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038f4:	6a3b      	ldr	r3, [r7, #32]
 80038f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fa:	d308      	bcc.n	800390e <UART_SetConfig+0x3d2>
 80038fc:	6a3b      	ldr	r3, [r7, #32]
 80038fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003902:	d204      	bcs.n	800390e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	6a3a      	ldr	r2, [r7, #32]
 800390a:	60da      	str	r2, [r3, #12]
 800390c:	e0c8      	b.n	8003aa0 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003914:	e0c4      	b.n	8003aa0 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800391e:	d167      	bne.n	80039f0 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003920:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003924:	2b08      	cmp	r3, #8
 8003926:	d828      	bhi.n	800397a <UART_SetConfig+0x43e>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <UART_SetConfig+0x3f4>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003955 	.word	0x08003955
 8003934:	0800395d 	.word	0x0800395d
 8003938:	08003965 	.word	0x08003965
 800393c:	0800397b 	.word	0x0800397b
 8003940:	0800396b 	.word	0x0800396b
 8003944:	0800397b 	.word	0x0800397b
 8003948:	0800397b 	.word	0x0800397b
 800394c:	0800397b 	.word	0x0800397b
 8003950:	08003973 	.word	0x08003973
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003954:	f7fe fba0 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003958:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800395a:	e014      	b.n	8003986 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800395c:	f7fe fbb2 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8003960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003962:	e010      	b.n	8003986 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003964:	4b5a      	ldr	r3, [pc, #360]	; (8003ad0 <UART_SetConfig+0x594>)
 8003966:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003968:	e00d      	b.n	8003986 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396a:	f7fe fb27 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 800396e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003970:	e009      	b.n	8003986 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003978:	e005      	b.n	8003986 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003984:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	f000 8089 	beq.w	8003aa0 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	4a4e      	ldr	r2, [pc, #312]	; (8003acc <UART_SetConfig+0x590>)
 8003994:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003998:	461a      	mov	r2, r3
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	fbb3 f3f2 	udiv	r3, r3, r2
 80039a0:	005a      	lsls	r2, r3, #1
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	085b      	lsrs	r3, r3, #1
 80039a8:	441a      	add	r2, r3
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80039b2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	2b0f      	cmp	r3, #15
 80039b8:	d916      	bls.n	80039e8 <UART_SetConfig+0x4ac>
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039c0:	d212      	bcs.n	80039e8 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	f023 030f 	bic.w	r3, r3, #15
 80039ca:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	085b      	lsrs	r3, r3, #1
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f003 0307 	and.w	r3, r3, #7
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	8bfb      	ldrh	r3, [r7, #30]
 80039da:	4313      	orrs	r3, r2
 80039dc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	8bfa      	ldrh	r2, [r7, #30]
 80039e4:	60da      	str	r2, [r3, #12]
 80039e6:	e05b      	b.n	8003aa0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80039ee:	e057      	b.n	8003aa0 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d828      	bhi.n	8003a4a <UART_SetConfig+0x50e>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x4c4>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fb38 	bl	8002098 <HAL_RCC_GetPCLK1Freq>
 8003a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fb4a 	bl	80020c4 <HAL_RCC_GetPCLK2Freq>
 8003a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b26      	ldr	r3, [pc, #152]	; (8003ad0 <UART_SetConfig+0x594>)
 8003a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fabf 	bl	8001fbc <HAL_RCC_GetSysClockFreq>
 8003a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003a54:	bf00      	nop
    }

    if (pclk != 0U)
 8003a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d021      	beq.n	8003aa0 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <UART_SetConfig+0x590>)
 8003a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003a66:	461a      	mov	r2, r3
 8003a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a6a:	fbb3 f2f2 	udiv	r2, r3, r2
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	085b      	lsrs	r3, r3, #1
 8003a74:	441a      	add	r2, r3
 8003a76:	697b      	ldr	r3, [r7, #20]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a80:	6a3b      	ldr	r3, [r7, #32]
 8003a82:	2b0f      	cmp	r3, #15
 8003a84:	d909      	bls.n	8003a9a <UART_SetConfig+0x55e>
 8003a86:	6a3b      	ldr	r3, [r7, #32]
 8003a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8c:	d205      	bcs.n	8003a9a <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a8e:	6a3b      	ldr	r3, [r7, #32]
 8003a90:	b29a      	uxth	r2, r3
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	60da      	str	r2, [r3, #12]
 8003a98:	e002      	b.n	8003aa0 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	2201      	movs	r2, #1
 8003aac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003abc:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3730      	adds	r7, #48	; 0x30
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003aca:	bf00      	nop
 8003acc:	08006324 	.word	0x08006324
 8003ad0:	00f42400 	.word	0x00f42400

08003ad4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	f003 0301 	and.w	r3, r3, #1
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00a      	beq.n	8003afe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00a      	beq.n	8003b20 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b24:	f003 0304 	and.w	r3, r3, #4
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d00a      	beq.n	8003b42 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b46:	f003 0308 	and.w	r3, r3, #8
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d00a      	beq.n	8003b64 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00a      	beq.n	8003b86 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d00a      	beq.n	8003ba8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	430a      	orrs	r2, r1
 8003ba6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d01a      	beq.n	8003bea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003bd2:	d10a      	bne.n	8003bea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	430a      	orrs	r2, r1
 8003be8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	605a      	str	r2, [r3, #4]
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	370c      	adds	r7, #12
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c28:	f7fd f968 	bl	8000efc <HAL_GetTick>
 8003c2c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0308 	and.w	r3, r3, #8
 8003c38:	2b08      	cmp	r3, #8
 8003c3a:	d10e      	bne.n	8003c5a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c3c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c40:	9300      	str	r3, [sp, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f82f 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d001      	beq.n	8003c5a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c56:	2303      	movs	r3, #3
 8003c58:	e025      	b.n	8003ca6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f003 0304 	and.w	r3, r3, #4
 8003c64:	2b04      	cmp	r3, #4
 8003c66:	d10e      	bne.n	8003c86 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c6c:	9300      	str	r3, [sp, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f819 	bl	8003cae <UART_WaitOnFlagUntilTimeout>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d001      	beq.n	8003c86 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e00f      	b.n	8003ca6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2220      	movs	r2, #32
 8003c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b09c      	sub	sp, #112	; 0x70
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	60f8      	str	r0, [r7, #12]
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	603b      	str	r3, [r7, #0]
 8003cba:	4613      	mov	r3, r2
 8003cbc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cbe:	e0a9      	b.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cc6:	f000 80a5 	beq.w	8003e14 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cca:	f7fd f917 	bl	8000efc <HAL_GetTick>
 8003cce:	4602      	mov	r2, r0
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d302      	bcc.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003cda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d140      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ce8:	e853 3f00 	ldrex	r3, [r3]
 8003cec:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003cee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cf0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003cf4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	461a      	mov	r2, r3
 8003cfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cfe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d00:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d02:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d04:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d06:	e841 2300 	strex	r3, r2, [r1]
 8003d0a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1e6      	bne.n	8003ce0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	3308      	adds	r3, #8
 8003d18:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d1c:	e853 3f00 	ldrex	r3, [r3]
 8003d20:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d24:	f023 0301 	bic.w	r3, r3, #1
 8003d28:	663b      	str	r3, [r7, #96]	; 0x60
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3308      	adds	r3, #8
 8003d30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d32:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d34:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d36:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d38:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d3a:	e841 2300 	strex	r3, r2, [r1]
 8003d3e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d1e5      	bne.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2220      	movs	r2, #32
 8003d4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2220      	movs	r2, #32
 8003d52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e069      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d051      	beq.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d149      	bne.n	8003e14 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d92:	e853 3f00 	ldrex	r3, [r3]
 8003d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	461a      	mov	r2, r3
 8003da6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003da8:	637b      	str	r3, [r7, #52]	; 0x34
 8003daa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003dae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003db0:	e841 2300 	strex	r3, r2, [r1]
 8003db4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1e6      	bne.n	8003d8a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	e853 3f00 	ldrex	r3, [r3]
 8003dca:	613b      	str	r3, [r7, #16]
   return(result);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	f023 0301 	bic.w	r3, r3, #1
 8003dd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	3308      	adds	r3, #8
 8003dda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003ddc:	623a      	str	r2, [r7, #32]
 8003dde:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de0:	69f9      	ldr	r1, [r7, #28]
 8003de2:	6a3a      	ldr	r2, [r7, #32]
 8003de4:	e841 2300 	strex	r3, r2, [r1]
 8003de8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d1e5      	bne.n	8003dbc <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2220      	movs	r2, #32
 8003dfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e010      	b.n	8003e36 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	68ba      	ldr	r2, [r7, #8]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	bf0c      	ite	eq
 8003e24:	2301      	moveq	r3, #1
 8003e26:	2300      	movne	r3, #0
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	79fb      	ldrb	r3, [r7, #7]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	f43f af46 	beq.w	8003cc0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	3770      	adds	r7, #112	; 0x70
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	bd80      	pop	{r7, pc}
	...

08003e40 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b0a3      	sub	sp, #140	; 0x8c
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	60f8      	str	r0, [r7, #12]
 8003e48:	60b9      	str	r1, [r7, #8]
 8003e4a:	4613      	mov	r3, r2
 8003e4c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	88fa      	ldrh	r2, [r7, #6]
 8003e58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	88fa      	ldrh	r2, [r7, #6]
 8003e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e72:	d10e      	bne.n	8003e92 <UART_Start_Receive_IT+0x52>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d105      	bne.n	8003e88 <UART_Start_Receive_IT+0x48>
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e82:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e86:	e02d      	b.n	8003ee4 <UART_Start_Receive_IT+0xa4>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	22ff      	movs	r2, #255	; 0xff
 8003e8c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e90:	e028      	b.n	8003ee4 <UART_Start_Receive_IT+0xa4>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10d      	bne.n	8003eb6 <UART_Start_Receive_IT+0x76>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <UART_Start_Receive_IT+0x6c>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	22ff      	movs	r2, #255	; 0xff
 8003ea6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eaa:	e01b      	b.n	8003ee4 <UART_Start_Receive_IT+0xa4>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	227f      	movs	r2, #127	; 0x7f
 8003eb0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eb4:	e016      	b.n	8003ee4 <UART_Start_Receive_IT+0xa4>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003ebe:	d10d      	bne.n	8003edc <UART_Start_Receive_IT+0x9c>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d104      	bne.n	8003ed2 <UART_Start_Receive_IT+0x92>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	227f      	movs	r2, #127	; 0x7f
 8003ecc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003ed0:	e008      	b.n	8003ee4 <UART_Start_Receive_IT+0xa4>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	223f      	movs	r2, #63	; 0x3f
 8003ed6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003eda:	e003      	b.n	8003ee4 <UART_Start_Receive_IT+0xa4>
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2222      	movs	r2, #34	; 0x22
 8003ef0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	3308      	adds	r3, #8
 8003efa:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003efe:	e853 3f00 	ldrex	r3, [r3]
 8003f02:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8003f04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f06:	f043 0301 	orr.w	r3, r3, #1
 8003f0a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	3308      	adds	r3, #8
 8003f14:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003f18:	673a      	str	r2, [r7, #112]	; 0x70
 8003f1a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f1c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8003f1e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8003f20:	e841 2300 	strex	r3, r2, [r1]
 8003f24:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8003f26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1e3      	bne.n	8003ef4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f34:	d153      	bne.n	8003fde <UART_Start_Receive_IT+0x19e>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d34d      	bcc.n	8003fde <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f4a:	d107      	bne.n	8003f5c <UART_Start_Receive_IT+0x11c>
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	691b      	ldr	r3, [r3, #16]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d103      	bne.n	8003f5c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	4a4b      	ldr	r2, [pc, #300]	; (8004084 <UART_Start_Receive_IT+0x244>)
 8003f58:	671a      	str	r2, [r3, #112]	; 0x70
 8003f5a:	e002      	b.n	8003f62 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	4a4a      	ldr	r2, [pc, #296]	; (8004088 <UART_Start_Receive_IT+0x248>)
 8003f60:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2200      	movs	r2, #0
 8003f66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d01a      	beq.n	8003fa8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f7a:	e853 3f00 	ldrex	r3, [r3]
 8003f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	461a      	mov	r2, r3
 8003f90:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003f94:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f96:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f9a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003fa2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e4      	bne.n	8003f72 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8003fc8:	64ba      	str	r2, [r7, #72]	; 0x48
 8003fca:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003fce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003fd6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_Start_Receive_IT+0x168>
 8003fdc:	e04a      	b.n	8004074 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fe6:	d107      	bne.n	8003ff8 <UART_Start_Receive_IT+0x1b8>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	4a26      	ldr	r2, [pc, #152]	; (800408c <UART_Start_Receive_IT+0x24c>)
 8003ff4:	671a      	str	r2, [r3, #112]	; 0x70
 8003ff6:	e002      	b.n	8003ffe <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <UART_Start_Receive_IT+0x250>)
 8003ffc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d019      	beq.n	8004042 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	e853 3f00 	ldrex	r3, [r3]
 800401a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004022:	677b      	str	r3, [r7, #116]	; 0x74
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	461a      	mov	r2, r3
 800402a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402c:	637b      	str	r3, [r7, #52]	; 0x34
 800402e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004030:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004032:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004034:	e841 2300 	strex	r3, r2, [r1]
 8004038:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800403a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1e6      	bne.n	800400e <UART_Start_Receive_IT+0x1ce>
 8004040:	e018      	b.n	8004074 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	e853 3f00 	ldrex	r3, [r3]
 800404e:	613b      	str	r3, [r7, #16]
   return(result);
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	f043 0320 	orr.w	r3, r3, #32
 8004056:	67bb      	str	r3, [r7, #120]	; 0x78
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	461a      	mov	r2, r3
 800405e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004060:	623b      	str	r3, [r7, #32]
 8004062:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004064:	69f9      	ldr	r1, [r7, #28]
 8004066:	6a3a      	ldr	r2, [r7, #32]
 8004068:	e841 2300 	strex	r3, r2, [r1]
 800406c:	61bb      	str	r3, [r7, #24]
   return(result);
 800406e:	69bb      	ldr	r3, [r7, #24]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1e6      	bne.n	8004042 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	378c      	adds	r7, #140	; 0x8c
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	0800479d 	.word	0x0800479d
 8004088:	080044a5 	.word	0x080044a5
 800408c:	08004343 	.word	0x08004343
 8004090:	080041e3 	.word	0x080041e3

08004094 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b095      	sub	sp, #84	; 0x54
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040a4:	e853 3f00 	ldrex	r3, [r3]
 80040a8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040b0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	461a      	mov	r2, r3
 80040b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040ba:	643b      	str	r3, [r7, #64]	; 0x40
 80040bc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040c2:	e841 2300 	strex	r3, r2, [r1]
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d1e6      	bne.n	800409c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	3308      	adds	r3, #8
 80040d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d6:	6a3b      	ldr	r3, [r7, #32]
 80040d8:	e853 3f00 	ldrex	r3, [r3]
 80040dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040e4:	f023 0301 	bic.w	r3, r3, #1
 80040e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	3308      	adds	r3, #8
 80040f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80040f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040fa:	e841 2300 	strex	r3, r2, [r1]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1e3      	bne.n	80040ce <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800410a:	2b01      	cmp	r3, #1
 800410c:	d118      	bne.n	8004140 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	e853 3f00 	ldrex	r3, [r3]
 800411a:	60bb      	str	r3, [r7, #8]
   return(result);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f023 0310 	bic.w	r3, r3, #16
 8004122:	647b      	str	r3, [r7, #68]	; 0x44
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	461a      	mov	r2, r3
 800412a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800412c:	61bb      	str	r3, [r7, #24]
 800412e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004130:	6979      	ldr	r1, [r7, #20]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	e841 2300 	strex	r3, r2, [r1]
 8004138:	613b      	str	r3, [r7, #16]
   return(result);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d1e6      	bne.n	800410e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2220      	movs	r2, #32
 8004144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	671a      	str	r2, [r3, #112]	; 0x70
}
 8004154:	bf00      	nop
 8004156:	3754      	adds	r7, #84	; 0x54
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b084      	sub	sp, #16
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800416c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2200      	movs	r2, #0
 800417a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f7ff f9c6 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004184:	bf00      	nop
 8004186:	3710      	adds	r7, #16
 8004188:	46bd      	mov	sp, r7
 800418a:	bd80      	pop	{r7, pc}

0800418c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b088      	sub	sp, #32
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041a8:	61fb      	str	r3, [r7, #28]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	461a      	mov	r2, r3
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	61bb      	str	r3, [r7, #24]
 80041b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b6:	6979      	ldr	r1, [r7, #20]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	613b      	str	r3, [r7, #16]
   return(result);
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e6      	bne.n	8004194 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2220      	movs	r2, #32
 80041ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff f991 	bl	80034fc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041da:	bf00      	nop
 80041dc:	3720      	adds	r7, #32
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80041e2:	b580      	push	{r7, lr}
 80041e4:	b096      	sub	sp, #88	; 0x58
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80041f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041fa:	2b22      	cmp	r3, #34	; 0x22
 80041fc:	f040 8095 	bne.w	800432a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004206:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800420a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800420e:	b2d9      	uxtb	r1, r3
 8004210:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004214:	b2da      	uxtb	r2, r3
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800421a:	400a      	ands	r2, r1
 800421c:	b2d2      	uxtb	r2, r2
 800421e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004224:	1c5a      	adds	r2, r3, #1
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004230:	b29b      	uxth	r3, r3
 8004232:	3b01      	subs	r3, #1
 8004234:	b29a      	uxth	r2, r3
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004242:	b29b      	uxth	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d178      	bne.n	800433a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800424e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004250:	e853 3f00 	ldrex	r3, [r3]
 8004254:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004258:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800425c:	653b      	str	r3, [r7, #80]	; 0x50
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	461a      	mov	r2, r3
 8004264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004266:	647b      	str	r3, [r7, #68]	; 0x44
 8004268:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800426c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800426e:	e841 2300 	strex	r3, r2, [r1]
 8004272:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004276:	2b00      	cmp	r3, #0
 8004278:	d1e6      	bne.n	8004248 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3308      	adds	r3, #8
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	e853 3f00 	ldrex	r3, [r3]
 8004288:	623b      	str	r3, [r7, #32]
   return(result);
 800428a:	6a3b      	ldr	r3, [r7, #32]
 800428c:	f023 0301 	bic.w	r3, r3, #1
 8004290:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3308      	adds	r3, #8
 8004298:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800429a:	633a      	str	r2, [r7, #48]	; 0x30
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800429e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	e841 2300 	strex	r3, r2, [r1]
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d1e5      	bne.n	800427a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	2220      	movs	r2, #32
 80042b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2200      	movs	r2, #0
 80042ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d12e      	bne.n	8004322 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60fb      	str	r3, [r7, #12]
   return(result);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	461a      	mov	r2, r3
 80042e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e8:	61fb      	str	r3, [r7, #28]
 80042ea:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	69b9      	ldr	r1, [r7, #24]
 80042ee:	69fa      	ldr	r2, [r7, #28]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	617b      	str	r3, [r7, #20]
   return(result);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e6      	bne.n	80042ca <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	69db      	ldr	r3, [r3, #28]
 8004302:	f003 0310 	and.w	r3, r3, #16
 8004306:	2b10      	cmp	r3, #16
 8004308:	d103      	bne.n	8004312 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	2210      	movs	r2, #16
 8004310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004318:	4619      	mov	r1, r3
 800431a:	6878      	ldr	r0, [r7, #4]
 800431c:	f7ff f902 	bl	8003524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004320:	e00b      	b.n	800433a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004322:	6878      	ldr	r0, [r7, #4]
 8004324:	f7fc fb5c 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 8004328:	e007      	b.n	800433a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f042 0208 	orr.w	r2, r2, #8
 8004338:	619a      	str	r2, [r3, #24]
}
 800433a:	bf00      	nop
 800433c:	3758      	adds	r7, #88	; 0x58
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b096      	sub	sp, #88	; 0x58
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004350:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	2b22      	cmp	r3, #34	; 0x22
 800435c:	f040 8095 	bne.w	800448a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004366:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004370:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004374:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004378:	4013      	ands	r3, r2
 800437a:	b29a      	uxth	r2, r3
 800437c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800437e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004384:	1c9a      	adds	r2, r3, #2
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004390:	b29b      	uxth	r3, r3
 8004392:	3b01      	subs	r3, #1
 8004394:	b29a      	uxth	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80043a2:	b29b      	uxth	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d178      	bne.n	800449a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b0:	e853 3f00 	ldrex	r3, [r3]
 80043b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	461a      	mov	r2, r3
 80043c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043c6:	643b      	str	r3, [r7, #64]	; 0x40
 80043c8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043ce:	e841 2300 	strex	r3, r2, [r1]
 80043d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d1e6      	bne.n	80043a8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	3308      	adds	r3, #8
 80043e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	f023 0301 	bic.w	r3, r3, #1
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	3308      	adds	r3, #8
 80043f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e5      	bne.n	80043da <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004420:	2b01      	cmp	r3, #1
 8004422:	d12e      	bne.n	8004482 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	e853 3f00 	ldrex	r3, [r3]
 8004436:	60bb      	str	r3, [r7, #8]
   return(result);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f023 0310 	bic.w	r3, r3, #16
 800443e:	647b      	str	r3, [r7, #68]	; 0x44
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	461a      	mov	r2, r3
 8004446:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004448:	61bb      	str	r3, [r7, #24]
 800444a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800444c:	6979      	ldr	r1, [r7, #20]
 800444e:	69ba      	ldr	r2, [r7, #24]
 8004450:	e841 2300 	strex	r3, r2, [r1]
 8004454:	613b      	str	r3, [r7, #16]
   return(result);
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1e6      	bne.n	800442a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	69db      	ldr	r3, [r3, #28]
 8004462:	f003 0310 	and.w	r3, r3, #16
 8004466:	2b10      	cmp	r3, #16
 8004468:	d103      	bne.n	8004472 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2210      	movs	r2, #16
 8004470:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004478:	4619      	mov	r1, r3
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff f852 	bl	8003524 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004480:	e00b      	b.n	800449a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc faac 	bl	80009e0 <HAL_UART_RxCpltCallback>
}
 8004488:	e007      	b.n	800449a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	699a      	ldr	r2, [r3, #24]
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f042 0208 	orr.w	r2, r2, #8
 8004498:	619a      	str	r2, [r3, #24]
}
 800449a:	bf00      	nop
 800449c:	3758      	adds	r7, #88	; 0x58
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}
	...

080044a4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0a6      	sub	sp, #152	; 0x98
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80044b2:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044da:	2b22      	cmp	r3, #34	; 0x22
 80044dc:	f040 814f 	bne.w	800477e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80044e6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044ea:	e0f6      	b.n	80046da <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80044f6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 80044fa:	b2d9      	uxtb	r1, r3
 80044fc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8004500:	b2da      	uxtb	r2, r3
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004506:	400a      	ands	r2, r1
 8004508:	b2d2      	uxtb	r2, r2
 800450a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004510:	1c5a      	adds	r2, r3, #1
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8004532:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	2b00      	cmp	r3, #0
 800453c:	d053      	beq.n	80045e6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800453e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	d011      	beq.n	800456e <UART_RxISR_8BIT_FIFOEN+0xca>
 800454a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00b      	beq.n	800456e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2201      	movs	r2, #1
 800455c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004564:	f043 0201 	orr.w	r2, r3, #1
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800456e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004572:	f003 0302 	and.w	r3, r3, #2
 8004576:	2b00      	cmp	r3, #0
 8004578:	d011      	beq.n	800459e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800457a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800457e:	f003 0301 	and.w	r3, r3, #1
 8004582:	2b00      	cmp	r3, #0
 8004584:	d00b      	beq.n	800459e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2202      	movs	r2, #2
 800458c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800459e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d011      	beq.n	80045ce <UART_RxISR_8BIT_FIFOEN+0x12a>
 80045aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2204      	movs	r2, #4
 80045bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f043 0202 	orr.w	r2, r3, #2
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d006      	beq.n	80045e6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7fe ff99 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d173      	bne.n	80046da <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80045fa:	e853 3f00 	ldrex	r3, [r3]
 80045fe:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8004600:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004602:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004606:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	461a      	mov	r2, r3
 8004610:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004614:	66bb      	str	r3, [r7, #104]	; 0x68
 8004616:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004618:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800461a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800461c:	e841 2300 	strex	r3, r2, [r1]
 8004620:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004622:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004624:	2b00      	cmp	r3, #0
 8004626:	d1e4      	bne.n	80045f2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	3308      	adds	r3, #8
 800462e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004630:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004632:	e853 3f00 	ldrex	r3, [r3]
 8004636:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800463a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800464c:	657a      	str	r2, [r7, #84]	; 0x54
 800464e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004650:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004652:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004654:	e841 2300 	strex	r3, r2, [r1]
 8004658:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800465a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800465c:	2b00      	cmp	r3, #0
 800465e:	d1e3      	bne.n	8004628 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004672:	2b01      	cmp	r3, #1
 8004674:	d12e      	bne.n	80046d4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004684:	e853 3f00 	ldrex	r3, [r3]
 8004688:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800468a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800468c:	f023 0310 	bic.w	r3, r3, #16
 8004690:	67bb      	str	r3, [r7, #120]	; 0x78
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469a:	643b      	str	r3, [r7, #64]	; 0x40
 800469c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800469e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80046a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80046a2:	e841 2300 	strex	r3, r2, [r1]
 80046a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d1e6      	bne.n	800467c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	69db      	ldr	r3, [r3, #28]
 80046b4:	f003 0310 	and.w	r3, r3, #16
 80046b8:	2b10      	cmp	r3, #16
 80046ba:	d103      	bne.n	80046c4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	2210      	movs	r2, #16
 80046c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ca:	4619      	mov	r1, r3
 80046cc:	6878      	ldr	r0, [r7, #4]
 80046ce:	f7fe ff29 	bl	8003524 <HAL_UARTEx_RxEventCallback>
 80046d2:	e002      	b.n	80046da <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f7fc f983 	bl	80009e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80046da:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80046e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80046e6:	f003 0320 	and.w	r3, r3, #32
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	f47f aefe 	bne.w	80044ec <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80046f6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80046fa:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d045      	beq.n	800478e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004708:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800470c:	429a      	cmp	r2, r3
 800470e:	d23e      	bcs.n	800478e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	3308      	adds	r3, #8
 8004716:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	e853 3f00 	ldrex	r3, [r3]
 800471e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004726:	673b      	str	r3, [r7, #112]	; 0x70
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	3308      	adds	r3, #8
 800472e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004730:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004732:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004734:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004738:	e841 2300 	strex	r3, r2, [r1]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d1e5      	bne.n	8004710 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	4a14      	ldr	r2, [pc, #80]	; (8004798 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8004748:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	60bb      	str	r3, [r7, #8]
   return(result);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	f043 0320 	orr.w	r3, r3, #32
 800475e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6979      	ldr	r1, [r7, #20]
 800476e:	69ba      	ldr	r2, [r7, #24]
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	613b      	str	r3, [r7, #16]
   return(result);
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e6      	bne.n	800474a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800477c:	e007      	b.n	800478e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	699a      	ldr	r2, [r3, #24]
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f042 0208 	orr.w	r2, r2, #8
 800478c:	619a      	str	r2, [r3, #24]
}
 800478e:	bf00      	nop
 8004790:	3798      	adds	r7, #152	; 0x98
 8004792:	46bd      	mov	sp, r7
 8004794:	bd80      	pop	{r7, pc}
 8004796:	bf00      	nop
 8004798:	080041e3 	.word	0x080041e3

0800479c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b0a8      	sub	sp, #160	; 0xa0
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80047aa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	2b22      	cmp	r3, #34	; 0x22
 80047d4:	f040 8153 	bne.w	8004a7e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80047de:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80047e2:	e0fa      	b.n	80049da <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 80047f6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80047fa:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80047fe:	4013      	ands	r3, r2
 8004800:	b29a      	uxth	r2, r3
 8004802:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004806:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	1c9a      	adds	r2, r3, #2
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004818:	b29b      	uxth	r3, r3
 800481a:	3b01      	subs	r3, #1
 800481c:	b29a      	uxth	r2, r3
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800482e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004832:	f003 0307 	and.w	r3, r3, #7
 8004836:	2b00      	cmp	r3, #0
 8004838:	d053      	beq.n	80048e2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800483a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <UART_RxISR_16BIT_FIFOEN+0xce>
 8004846:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800484a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00b      	beq.n	800486a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2201      	movs	r2, #1
 8004858:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004860:	f043 0201 	orr.w	r2, r3, #1
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800486a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b00      	cmp	r3, #0
 8004874:	d011      	beq.n	800489a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8004876:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800487a:	f003 0301 	and.w	r3, r3, #1
 800487e:	2b00      	cmp	r3, #0
 8004880:	d00b      	beq.n	800489a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2202      	movs	r2, #2
 8004888:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004890:	f043 0204 	orr.w	r2, r3, #4
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800489a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d011      	beq.n	80048ca <UART_RxISR_16BIT_FIFOEN+0x12e>
 80048a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2204      	movs	r2, #4
 80048b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	f043 0202 	orr.w	r2, r3, #2
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d006      	beq.n	80048e2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fe fe1b 	bl	8003510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80048e8:	b29b      	uxth	r3, r3
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d175      	bne.n	80049da <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048f6:	e853 3f00 	ldrex	r3, [r3]
 80048fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004902:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004910:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004912:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004916:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800491e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e4      	bne.n	80048ee <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	3308      	adds	r3, #8
 800492a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800492e:	e853 3f00 	ldrex	r3, [r3]
 8004932:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004936:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800493a:	f023 0301 	bic.w	r3, r3, #1
 800493e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	3308      	adds	r3, #8
 8004948:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800494c:	65ba      	str	r2, [r7, #88]	; 0x58
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004952:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e1      	bne.n	8004924 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2220      	movs	r2, #32
 8004964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004972:	2b01      	cmp	r3, #1
 8004974:	d12e      	bne.n	80049d4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004982:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004984:	e853 3f00 	ldrex	r3, [r3]
 8004988:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	f023 0310 	bic.w	r3, r3, #16
 8004990:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	461a      	mov	r2, r3
 8004998:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800499a:	647b      	str	r3, [r7, #68]	; 0x44
 800499c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800499e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049a2:	e841 2300 	strex	r3, r2, [r1]
 80049a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1e6      	bne.n	800497c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	69db      	ldr	r3, [r3, #28]
 80049b4:	f003 0310 	and.w	r3, r3, #16
 80049b8:	2b10      	cmp	r3, #16
 80049ba:	d103      	bne.n	80049c4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	2210      	movs	r2, #16
 80049c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80049ca:	4619      	mov	r1, r3
 80049cc:	6878      	ldr	r0, [r7, #4]
 80049ce:	f7fe fda9 	bl	8003524 <HAL_UARTEx_RxEventCallback>
 80049d2:	e002      	b.n	80049da <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80049d4:	6878      	ldr	r0, [r7, #4]
 80049d6:	f7fc f803 	bl	80009e0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80049da:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d006      	beq.n	80049f0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80049e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049e6:	f003 0320 	and.w	r3, r3, #32
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f47f aefa 	bne.w	80047e4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80049f6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80049fa:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d045      	beq.n	8004a8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004a08:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d23e      	bcs.n	8004a8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3308      	adds	r3, #8
 8004a16:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	623b      	str	r3, [r7, #32]
   return(result);
 8004a20:	6a3b      	ldr	r3, [r7, #32]
 8004a22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a26:	677b      	str	r3, [r7, #116]	; 0x74
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	3308      	adds	r3, #8
 8004a2e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004a30:	633a      	str	r2, [r7, #48]	; 0x30
 8004a32:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a36:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a14      	ldr	r2, [pc, #80]	; (8004a98 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8004a48:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	e853 3f00 	ldrex	r3, [r3]
 8004a56:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f043 0320 	orr.w	r3, r3, #32
 8004a5e:	673b      	str	r3, [r7, #112]	; 0x70
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	461a      	mov	r2, r3
 8004a66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a68:	61fb      	str	r3, [r7, #28]
 8004a6a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	69b9      	ldr	r1, [r7, #24]
 8004a6e:	69fa      	ldr	r2, [r7, #28]
 8004a70:	e841 2300 	strex	r3, r2, [r1]
 8004a74:	617b      	str	r3, [r7, #20]
   return(result);
 8004a76:	697b      	ldr	r3, [r7, #20]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d1e6      	bne.n	8004a4a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004a7c:	e007      	b.n	8004a8e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	699a      	ldr	r2, [r3, #24]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0208 	orr.w	r2, r2, #8
 8004a8c:	619a      	str	r2, [r3, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	37a0      	adds	r7, #160	; 0xa0
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	08004343 	.word	0x08004343

08004a9c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b083      	sub	sp, #12
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr

08004ab0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	b083      	sub	sp, #12
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004ab8:	bf00      	nop
 8004aba:	370c      	adds	r7, #12
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004acc:	bf00      	nop
 8004ace:	370c      	adds	r7, #12
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_UARTEx_DisableFifoMode+0x16>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e027      	b.n	8004b3e <HAL_UARTEx_DisableFifoMode+0x66>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2224      	movs	r2, #36	; 0x24
 8004afa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f022 0201 	bic.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004b1c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68fa      	ldr	r2, [r7, #12]
 8004b2a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3714      	adds	r7, #20
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b4a:	b580      	push	{r7, lr}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
 8004b52:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004b5a:	2b01      	cmp	r3, #1
 8004b5c:	d101      	bne.n	8004b62 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004b5e:	2302      	movs	r3, #2
 8004b60:	e02d      	b.n	8004bbe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2201      	movs	r2, #1
 8004b66:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2224      	movs	r2, #36	; 0x24
 8004b6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f022 0201 	bic.w	r2, r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	683a      	ldr	r2, [r7, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f850 	bl	8004c44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2220      	movs	r2, #32
 8004bb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e02d      	b.n	8004c3a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2224      	movs	r2, #36	; 0x24
 8004bea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f022 0201 	bic.w	r2, r2, #1
 8004c04:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 f812 	bl	8004c44 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68fa      	ldr	r2, [r7, #12]
 8004c26:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2220      	movs	r2, #32
 8004c2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3710      	adds	r7, #16
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
	...

08004c44 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d108      	bne.n	8004c66 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004c64:	e031      	b.n	8004cca <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004c66:	2308      	movs	r3, #8
 8004c68:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004c6a:	2308      	movs	r3, #8
 8004c6c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	0e5b      	lsrs	r3, r3, #25
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	f003 0307 	and.w	r3, r3, #7
 8004c7c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	0f5b      	lsrs	r3, r3, #29
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c8e:	7bbb      	ldrb	r3, [r7, #14]
 8004c90:	7b3a      	ldrb	r2, [r7, #12]
 8004c92:	4911      	ldr	r1, [pc, #68]	; (8004cd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004c94:	5c8a      	ldrb	r2, [r1, r2]
 8004c96:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c9a:	7b3a      	ldrb	r2, [r7, #12]
 8004c9c:	490f      	ldr	r1, [pc, #60]	; (8004cdc <UARTEx_SetNbDataToProcess+0x98>)
 8004c9e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004ca0:	fb93 f3f2 	sdiv	r3, r3, r2
 8004ca4:	b29a      	uxth	r2, r3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cac:	7bfb      	ldrb	r3, [r7, #15]
 8004cae:	7b7a      	ldrb	r2, [r7, #13]
 8004cb0:	4909      	ldr	r1, [pc, #36]	; (8004cd8 <UARTEx_SetNbDataToProcess+0x94>)
 8004cb2:	5c8a      	ldrb	r2, [r1, r2]
 8004cb4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004cb8:	7b7a      	ldrb	r2, [r7, #13]
 8004cba:	4908      	ldr	r1, [pc, #32]	; (8004cdc <UARTEx_SetNbDataToProcess+0x98>)
 8004cbc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004cbe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004cca:	bf00      	nop
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	0800633c 	.word	0x0800633c
 8004cdc:	08006344 	.word	0x08006344

08004ce0 <atoi>:
 8004ce0:	220a      	movs	r2, #10
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	f000 b930 	b.w	8004f48 <strtol>

08004ce8 <__errno>:
 8004ce8:	4b01      	ldr	r3, [pc, #4]	; (8004cf0 <__errno+0x8>)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	4770      	bx	lr
 8004cee:	bf00      	nop
 8004cf0:	200000a4 	.word	0x200000a4

08004cf4 <__libc_init_array>:
 8004cf4:	b570      	push	{r4, r5, r6, lr}
 8004cf6:	4d0d      	ldr	r5, [pc, #52]	; (8004d2c <__libc_init_array+0x38>)
 8004cf8:	4c0d      	ldr	r4, [pc, #52]	; (8004d30 <__libc_init_array+0x3c>)
 8004cfa:	1b64      	subs	r4, r4, r5
 8004cfc:	10a4      	asrs	r4, r4, #2
 8004cfe:	2600      	movs	r6, #0
 8004d00:	42a6      	cmp	r6, r4
 8004d02:	d109      	bne.n	8004d18 <__libc_init_array+0x24>
 8004d04:	4d0b      	ldr	r5, [pc, #44]	; (8004d34 <__libc_init_array+0x40>)
 8004d06:	4c0c      	ldr	r4, [pc, #48]	; (8004d38 <__libc_init_array+0x44>)
 8004d08:	f001 fade 	bl	80062c8 <_init>
 8004d0c:	1b64      	subs	r4, r4, r5
 8004d0e:	10a4      	asrs	r4, r4, #2
 8004d10:	2600      	movs	r6, #0
 8004d12:	42a6      	cmp	r6, r4
 8004d14:	d105      	bne.n	8004d22 <__libc_init_array+0x2e>
 8004d16:	bd70      	pop	{r4, r5, r6, pc}
 8004d18:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d1c:	4798      	blx	r3
 8004d1e:	3601      	adds	r6, #1
 8004d20:	e7ee      	b.n	8004d00 <__libc_init_array+0xc>
 8004d22:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d26:	4798      	blx	r3
 8004d28:	3601      	adds	r6, #1
 8004d2a:	e7f2      	b.n	8004d12 <__libc_init_array+0x1e>
 8004d2c:	0800659c 	.word	0x0800659c
 8004d30:	0800659c 	.word	0x0800659c
 8004d34:	0800659c 	.word	0x0800659c
 8004d38:	080065a0 	.word	0x080065a0

08004d3c <memset>:
 8004d3c:	4402      	add	r2, r0
 8004d3e:	4603      	mov	r3, r0
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d100      	bne.n	8004d46 <memset+0xa>
 8004d44:	4770      	bx	lr
 8004d46:	f803 1b01 	strb.w	r1, [r3], #1
 8004d4a:	e7f9      	b.n	8004d40 <memset+0x4>

08004d4c <siprintf>:
 8004d4c:	b40e      	push	{r1, r2, r3}
 8004d4e:	b500      	push	{lr}
 8004d50:	b09c      	sub	sp, #112	; 0x70
 8004d52:	ab1d      	add	r3, sp, #116	; 0x74
 8004d54:	9002      	str	r0, [sp, #8]
 8004d56:	9006      	str	r0, [sp, #24]
 8004d58:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d5c:	4809      	ldr	r0, [pc, #36]	; (8004d84 <siprintf+0x38>)
 8004d5e:	9107      	str	r1, [sp, #28]
 8004d60:	9104      	str	r1, [sp, #16]
 8004d62:	4909      	ldr	r1, [pc, #36]	; (8004d88 <siprintf+0x3c>)
 8004d64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d68:	9105      	str	r1, [sp, #20]
 8004d6a:	6800      	ldr	r0, [r0, #0]
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	a902      	add	r1, sp, #8
 8004d70:	f000 fa68 	bl	8005244 <_svfiprintf_r>
 8004d74:	9b02      	ldr	r3, [sp, #8]
 8004d76:	2200      	movs	r2, #0
 8004d78:	701a      	strb	r2, [r3, #0]
 8004d7a:	b01c      	add	sp, #112	; 0x70
 8004d7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d80:	b003      	add	sp, #12
 8004d82:	4770      	bx	lr
 8004d84:	200000a4 	.word	0x200000a4
 8004d88:	ffff0208 	.word	0xffff0208

08004d8c <strtok>:
 8004d8c:	4b16      	ldr	r3, [pc, #88]	; (8004de8 <strtok+0x5c>)
 8004d8e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d90:	681e      	ldr	r6, [r3, #0]
 8004d92:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8004d94:	4605      	mov	r5, r0
 8004d96:	b9fc      	cbnz	r4, 8004dd8 <strtok+0x4c>
 8004d98:	2050      	movs	r0, #80	; 0x50
 8004d9a:	9101      	str	r1, [sp, #4]
 8004d9c:	f000 f90e 	bl	8004fbc <malloc>
 8004da0:	9901      	ldr	r1, [sp, #4]
 8004da2:	65b0      	str	r0, [r6, #88]	; 0x58
 8004da4:	4602      	mov	r2, r0
 8004da6:	b920      	cbnz	r0, 8004db2 <strtok+0x26>
 8004da8:	4b10      	ldr	r3, [pc, #64]	; (8004dec <strtok+0x60>)
 8004daa:	4811      	ldr	r0, [pc, #68]	; (8004df0 <strtok+0x64>)
 8004dac:	2157      	movs	r1, #87	; 0x57
 8004dae:	f000 f8d5 	bl	8004f5c <__assert_func>
 8004db2:	e9c0 4400 	strd	r4, r4, [r0]
 8004db6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8004dba:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8004dbe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8004dc2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8004dc6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8004dca:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8004dce:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8004dd2:	6184      	str	r4, [r0, #24]
 8004dd4:	7704      	strb	r4, [r0, #28]
 8004dd6:	6244      	str	r4, [r0, #36]	; 0x24
 8004dd8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8004dda:	2301      	movs	r3, #1
 8004ddc:	4628      	mov	r0, r5
 8004dde:	b002      	add	sp, #8
 8004de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004de4:	f000 b806 	b.w	8004df4 <__strtok_r>
 8004de8:	200000a4 	.word	0x200000a4
 8004dec:	08006350 	.word	0x08006350
 8004df0:	08006367 	.word	0x08006367

08004df4 <__strtok_r>:
 8004df4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004df6:	b908      	cbnz	r0, 8004dfc <__strtok_r+0x8>
 8004df8:	6810      	ldr	r0, [r2, #0]
 8004dfa:	b188      	cbz	r0, 8004e20 <__strtok_r+0x2c>
 8004dfc:	4604      	mov	r4, r0
 8004dfe:	4620      	mov	r0, r4
 8004e00:	f814 5b01 	ldrb.w	r5, [r4], #1
 8004e04:	460f      	mov	r7, r1
 8004e06:	f817 6b01 	ldrb.w	r6, [r7], #1
 8004e0a:	b91e      	cbnz	r6, 8004e14 <__strtok_r+0x20>
 8004e0c:	b965      	cbnz	r5, 8004e28 <__strtok_r+0x34>
 8004e0e:	6015      	str	r5, [r2, #0]
 8004e10:	4628      	mov	r0, r5
 8004e12:	e005      	b.n	8004e20 <__strtok_r+0x2c>
 8004e14:	42b5      	cmp	r5, r6
 8004e16:	d1f6      	bne.n	8004e06 <__strtok_r+0x12>
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1f0      	bne.n	8004dfe <__strtok_r+0xa>
 8004e1c:	6014      	str	r4, [r2, #0]
 8004e1e:	7003      	strb	r3, [r0, #0]
 8004e20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e22:	461c      	mov	r4, r3
 8004e24:	e00c      	b.n	8004e40 <__strtok_r+0x4c>
 8004e26:	b915      	cbnz	r5, 8004e2e <__strtok_r+0x3a>
 8004e28:	f814 3b01 	ldrb.w	r3, [r4], #1
 8004e2c:	460e      	mov	r6, r1
 8004e2e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8004e32:	42ab      	cmp	r3, r5
 8004e34:	d1f7      	bne.n	8004e26 <__strtok_r+0x32>
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d0f3      	beq.n	8004e22 <__strtok_r+0x2e>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8004e40:	6014      	str	r4, [r2, #0]
 8004e42:	e7ed      	b.n	8004e20 <__strtok_r+0x2c>

08004e44 <_strtol_l.constprop.0>:
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e4a:	d001      	beq.n	8004e50 <_strtol_l.constprop.0+0xc>
 8004e4c:	2b24      	cmp	r3, #36	; 0x24
 8004e4e:	d906      	bls.n	8004e5e <_strtol_l.constprop.0+0x1a>
 8004e50:	f7ff ff4a 	bl	8004ce8 <__errno>
 8004e54:	2316      	movs	r3, #22
 8004e56:	6003      	str	r3, [r0, #0]
 8004e58:	2000      	movs	r0, #0
 8004e5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e5e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8004f44 <_strtol_l.constprop.0+0x100>
 8004e62:	460d      	mov	r5, r1
 8004e64:	462e      	mov	r6, r5
 8004e66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e6a:	f814 700c 	ldrb.w	r7, [r4, ip]
 8004e6e:	f017 0708 	ands.w	r7, r7, #8
 8004e72:	d1f7      	bne.n	8004e64 <_strtol_l.constprop.0+0x20>
 8004e74:	2c2d      	cmp	r4, #45	; 0x2d
 8004e76:	d132      	bne.n	8004ede <_strtol_l.constprop.0+0x9a>
 8004e78:	782c      	ldrb	r4, [r5, #0]
 8004e7a:	2701      	movs	r7, #1
 8004e7c:	1cb5      	adds	r5, r6, #2
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d05b      	beq.n	8004f3a <_strtol_l.constprop.0+0xf6>
 8004e82:	2b10      	cmp	r3, #16
 8004e84:	d109      	bne.n	8004e9a <_strtol_l.constprop.0+0x56>
 8004e86:	2c30      	cmp	r4, #48	; 0x30
 8004e88:	d107      	bne.n	8004e9a <_strtol_l.constprop.0+0x56>
 8004e8a:	782c      	ldrb	r4, [r5, #0]
 8004e8c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8004e90:	2c58      	cmp	r4, #88	; 0x58
 8004e92:	d14d      	bne.n	8004f30 <_strtol_l.constprop.0+0xec>
 8004e94:	786c      	ldrb	r4, [r5, #1]
 8004e96:	2310      	movs	r3, #16
 8004e98:	3502      	adds	r5, #2
 8004e9a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8004e9e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8004ea2:	f04f 0c00 	mov.w	ip, #0
 8004ea6:	fbb8 f9f3 	udiv	r9, r8, r3
 8004eaa:	4666      	mov	r6, ip
 8004eac:	fb03 8a19 	mls	sl, r3, r9, r8
 8004eb0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8004eb4:	f1be 0f09 	cmp.w	lr, #9
 8004eb8:	d816      	bhi.n	8004ee8 <_strtol_l.constprop.0+0xa4>
 8004eba:	4674      	mov	r4, lr
 8004ebc:	42a3      	cmp	r3, r4
 8004ebe:	dd24      	ble.n	8004f0a <_strtol_l.constprop.0+0xc6>
 8004ec0:	f1bc 0f00 	cmp.w	ip, #0
 8004ec4:	db1e      	blt.n	8004f04 <_strtol_l.constprop.0+0xc0>
 8004ec6:	45b1      	cmp	r9, r6
 8004ec8:	d31c      	bcc.n	8004f04 <_strtol_l.constprop.0+0xc0>
 8004eca:	d101      	bne.n	8004ed0 <_strtol_l.constprop.0+0x8c>
 8004ecc:	45a2      	cmp	sl, r4
 8004ece:	db19      	blt.n	8004f04 <_strtol_l.constprop.0+0xc0>
 8004ed0:	fb06 4603 	mla	r6, r6, r3, r4
 8004ed4:	f04f 0c01 	mov.w	ip, #1
 8004ed8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004edc:	e7e8      	b.n	8004eb0 <_strtol_l.constprop.0+0x6c>
 8004ede:	2c2b      	cmp	r4, #43	; 0x2b
 8004ee0:	bf04      	itt	eq
 8004ee2:	782c      	ldrbeq	r4, [r5, #0]
 8004ee4:	1cb5      	addeq	r5, r6, #2
 8004ee6:	e7ca      	b.n	8004e7e <_strtol_l.constprop.0+0x3a>
 8004ee8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8004eec:	f1be 0f19 	cmp.w	lr, #25
 8004ef0:	d801      	bhi.n	8004ef6 <_strtol_l.constprop.0+0xb2>
 8004ef2:	3c37      	subs	r4, #55	; 0x37
 8004ef4:	e7e2      	b.n	8004ebc <_strtol_l.constprop.0+0x78>
 8004ef6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8004efa:	f1be 0f19 	cmp.w	lr, #25
 8004efe:	d804      	bhi.n	8004f0a <_strtol_l.constprop.0+0xc6>
 8004f00:	3c57      	subs	r4, #87	; 0x57
 8004f02:	e7db      	b.n	8004ebc <_strtol_l.constprop.0+0x78>
 8004f04:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8004f08:	e7e6      	b.n	8004ed8 <_strtol_l.constprop.0+0x94>
 8004f0a:	f1bc 0f00 	cmp.w	ip, #0
 8004f0e:	da05      	bge.n	8004f1c <_strtol_l.constprop.0+0xd8>
 8004f10:	2322      	movs	r3, #34	; 0x22
 8004f12:	6003      	str	r3, [r0, #0]
 8004f14:	4646      	mov	r6, r8
 8004f16:	b942      	cbnz	r2, 8004f2a <_strtol_l.constprop.0+0xe6>
 8004f18:	4630      	mov	r0, r6
 8004f1a:	e79e      	b.n	8004e5a <_strtol_l.constprop.0+0x16>
 8004f1c:	b107      	cbz	r7, 8004f20 <_strtol_l.constprop.0+0xdc>
 8004f1e:	4276      	negs	r6, r6
 8004f20:	2a00      	cmp	r2, #0
 8004f22:	d0f9      	beq.n	8004f18 <_strtol_l.constprop.0+0xd4>
 8004f24:	f1bc 0f00 	cmp.w	ip, #0
 8004f28:	d000      	beq.n	8004f2c <_strtol_l.constprop.0+0xe8>
 8004f2a:	1e69      	subs	r1, r5, #1
 8004f2c:	6011      	str	r1, [r2, #0]
 8004f2e:	e7f3      	b.n	8004f18 <_strtol_l.constprop.0+0xd4>
 8004f30:	2430      	movs	r4, #48	; 0x30
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1b1      	bne.n	8004e9a <_strtol_l.constprop.0+0x56>
 8004f36:	2308      	movs	r3, #8
 8004f38:	e7af      	b.n	8004e9a <_strtol_l.constprop.0+0x56>
 8004f3a:	2c30      	cmp	r4, #48	; 0x30
 8004f3c:	d0a5      	beq.n	8004e8a <_strtol_l.constprop.0+0x46>
 8004f3e:	230a      	movs	r3, #10
 8004f40:	e7ab      	b.n	8004e9a <_strtol_l.constprop.0+0x56>
 8004f42:	bf00      	nop
 8004f44:	08006401 	.word	0x08006401

08004f48 <strtol>:
 8004f48:	4613      	mov	r3, r2
 8004f4a:	460a      	mov	r2, r1
 8004f4c:	4601      	mov	r1, r0
 8004f4e:	4802      	ldr	r0, [pc, #8]	; (8004f58 <strtol+0x10>)
 8004f50:	6800      	ldr	r0, [r0, #0]
 8004f52:	f7ff bf77 	b.w	8004e44 <_strtol_l.constprop.0>
 8004f56:	bf00      	nop
 8004f58:	200000a4 	.word	0x200000a4

08004f5c <__assert_func>:
 8004f5c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004f5e:	4614      	mov	r4, r2
 8004f60:	461a      	mov	r2, r3
 8004f62:	4b09      	ldr	r3, [pc, #36]	; (8004f88 <__assert_func+0x2c>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4605      	mov	r5, r0
 8004f68:	68d8      	ldr	r0, [r3, #12]
 8004f6a:	b14c      	cbz	r4, 8004f80 <__assert_func+0x24>
 8004f6c:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <__assert_func+0x30>)
 8004f6e:	9100      	str	r1, [sp, #0]
 8004f70:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004f74:	4906      	ldr	r1, [pc, #24]	; (8004f90 <__assert_func+0x34>)
 8004f76:	462b      	mov	r3, r5
 8004f78:	f000 f80e 	bl	8004f98 <fiprintf>
 8004f7c:	f000 fe20 	bl	8005bc0 <abort>
 8004f80:	4b04      	ldr	r3, [pc, #16]	; (8004f94 <__assert_func+0x38>)
 8004f82:	461c      	mov	r4, r3
 8004f84:	e7f3      	b.n	8004f6e <__assert_func+0x12>
 8004f86:	bf00      	nop
 8004f88:	200000a4 	.word	0x200000a4
 8004f8c:	080063c4 	.word	0x080063c4
 8004f90:	080063d1 	.word	0x080063d1
 8004f94:	080063ff 	.word	0x080063ff

08004f98 <fiprintf>:
 8004f98:	b40e      	push	{r1, r2, r3}
 8004f9a:	b503      	push	{r0, r1, lr}
 8004f9c:	4601      	mov	r1, r0
 8004f9e:	ab03      	add	r3, sp, #12
 8004fa0:	4805      	ldr	r0, [pc, #20]	; (8004fb8 <fiprintf+0x20>)
 8004fa2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fa6:	6800      	ldr	r0, [r0, #0]
 8004fa8:	9301      	str	r3, [sp, #4]
 8004faa:	f000 fa75 	bl	8005498 <_vfiprintf_r>
 8004fae:	b002      	add	sp, #8
 8004fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fb4:	b003      	add	sp, #12
 8004fb6:	4770      	bx	lr
 8004fb8:	200000a4 	.word	0x200000a4

08004fbc <malloc>:
 8004fbc:	4b02      	ldr	r3, [pc, #8]	; (8004fc8 <malloc+0xc>)
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	f000 b86f 	b.w	80050a4 <_malloc_r>
 8004fc6:	bf00      	nop
 8004fc8:	200000a4 	.word	0x200000a4

08004fcc <_free_r>:
 8004fcc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fce:	2900      	cmp	r1, #0
 8004fd0:	d044      	beq.n	800505c <_free_r+0x90>
 8004fd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fd6:	9001      	str	r0, [sp, #4]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f1a1 0404 	sub.w	r4, r1, #4
 8004fde:	bfb8      	it	lt
 8004fe0:	18e4      	addlt	r4, r4, r3
 8004fe2:	f001 f83d 	bl	8006060 <__malloc_lock>
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <_free_r+0x94>)
 8004fe8:	9801      	ldr	r0, [sp, #4]
 8004fea:	6813      	ldr	r3, [r2, #0]
 8004fec:	b933      	cbnz	r3, 8004ffc <_free_r+0x30>
 8004fee:	6063      	str	r3, [r4, #4]
 8004ff0:	6014      	str	r4, [r2, #0]
 8004ff2:	b003      	add	sp, #12
 8004ff4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ff8:	f001 b838 	b.w	800606c <__malloc_unlock>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d908      	bls.n	8005012 <_free_r+0x46>
 8005000:	6825      	ldr	r5, [r4, #0]
 8005002:	1961      	adds	r1, r4, r5
 8005004:	428b      	cmp	r3, r1
 8005006:	bf01      	itttt	eq
 8005008:	6819      	ldreq	r1, [r3, #0]
 800500a:	685b      	ldreq	r3, [r3, #4]
 800500c:	1949      	addeq	r1, r1, r5
 800500e:	6021      	streq	r1, [r4, #0]
 8005010:	e7ed      	b.n	8004fee <_free_r+0x22>
 8005012:	461a      	mov	r2, r3
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	b10b      	cbz	r3, 800501c <_free_r+0x50>
 8005018:	42a3      	cmp	r3, r4
 800501a:	d9fa      	bls.n	8005012 <_free_r+0x46>
 800501c:	6811      	ldr	r1, [r2, #0]
 800501e:	1855      	adds	r5, r2, r1
 8005020:	42a5      	cmp	r5, r4
 8005022:	d10b      	bne.n	800503c <_free_r+0x70>
 8005024:	6824      	ldr	r4, [r4, #0]
 8005026:	4421      	add	r1, r4
 8005028:	1854      	adds	r4, r2, r1
 800502a:	42a3      	cmp	r3, r4
 800502c:	6011      	str	r1, [r2, #0]
 800502e:	d1e0      	bne.n	8004ff2 <_free_r+0x26>
 8005030:	681c      	ldr	r4, [r3, #0]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	6053      	str	r3, [r2, #4]
 8005036:	4421      	add	r1, r4
 8005038:	6011      	str	r1, [r2, #0]
 800503a:	e7da      	b.n	8004ff2 <_free_r+0x26>
 800503c:	d902      	bls.n	8005044 <_free_r+0x78>
 800503e:	230c      	movs	r3, #12
 8005040:	6003      	str	r3, [r0, #0]
 8005042:	e7d6      	b.n	8004ff2 <_free_r+0x26>
 8005044:	6825      	ldr	r5, [r4, #0]
 8005046:	1961      	adds	r1, r4, r5
 8005048:	428b      	cmp	r3, r1
 800504a:	bf04      	itt	eq
 800504c:	6819      	ldreq	r1, [r3, #0]
 800504e:	685b      	ldreq	r3, [r3, #4]
 8005050:	6063      	str	r3, [r4, #4]
 8005052:	bf04      	itt	eq
 8005054:	1949      	addeq	r1, r1, r5
 8005056:	6021      	streq	r1, [r4, #0]
 8005058:	6054      	str	r4, [r2, #4]
 800505a:	e7ca      	b.n	8004ff2 <_free_r+0x26>
 800505c:	b003      	add	sp, #12
 800505e:	bd30      	pop	{r4, r5, pc}
 8005060:	20000250 	.word	0x20000250

08005064 <sbrk_aligned>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4e0e      	ldr	r6, [pc, #56]	; (80050a0 <sbrk_aligned+0x3c>)
 8005068:	460c      	mov	r4, r1
 800506a:	6831      	ldr	r1, [r6, #0]
 800506c:	4605      	mov	r5, r0
 800506e:	b911      	cbnz	r1, 8005076 <sbrk_aligned+0x12>
 8005070:	f000 fcd6 	bl	8005a20 <_sbrk_r>
 8005074:	6030      	str	r0, [r6, #0]
 8005076:	4621      	mov	r1, r4
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fcd1 	bl	8005a20 <_sbrk_r>
 800507e:	1c43      	adds	r3, r0, #1
 8005080:	d00a      	beq.n	8005098 <sbrk_aligned+0x34>
 8005082:	1cc4      	adds	r4, r0, #3
 8005084:	f024 0403 	bic.w	r4, r4, #3
 8005088:	42a0      	cmp	r0, r4
 800508a:	d007      	beq.n	800509c <sbrk_aligned+0x38>
 800508c:	1a21      	subs	r1, r4, r0
 800508e:	4628      	mov	r0, r5
 8005090:	f000 fcc6 	bl	8005a20 <_sbrk_r>
 8005094:	3001      	adds	r0, #1
 8005096:	d101      	bne.n	800509c <sbrk_aligned+0x38>
 8005098:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800509c:	4620      	mov	r0, r4
 800509e:	bd70      	pop	{r4, r5, r6, pc}
 80050a0:	20000254 	.word	0x20000254

080050a4 <_malloc_r>:
 80050a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80050a8:	1ccd      	adds	r5, r1, #3
 80050aa:	f025 0503 	bic.w	r5, r5, #3
 80050ae:	3508      	adds	r5, #8
 80050b0:	2d0c      	cmp	r5, #12
 80050b2:	bf38      	it	cc
 80050b4:	250c      	movcc	r5, #12
 80050b6:	2d00      	cmp	r5, #0
 80050b8:	4607      	mov	r7, r0
 80050ba:	db01      	blt.n	80050c0 <_malloc_r+0x1c>
 80050bc:	42a9      	cmp	r1, r5
 80050be:	d905      	bls.n	80050cc <_malloc_r+0x28>
 80050c0:	230c      	movs	r3, #12
 80050c2:	603b      	str	r3, [r7, #0]
 80050c4:	2600      	movs	r6, #0
 80050c6:	4630      	mov	r0, r6
 80050c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050cc:	4e2e      	ldr	r6, [pc, #184]	; (8005188 <_malloc_r+0xe4>)
 80050ce:	f000 ffc7 	bl	8006060 <__malloc_lock>
 80050d2:	6833      	ldr	r3, [r6, #0]
 80050d4:	461c      	mov	r4, r3
 80050d6:	bb34      	cbnz	r4, 8005126 <_malloc_r+0x82>
 80050d8:	4629      	mov	r1, r5
 80050da:	4638      	mov	r0, r7
 80050dc:	f7ff ffc2 	bl	8005064 <sbrk_aligned>
 80050e0:	1c43      	adds	r3, r0, #1
 80050e2:	4604      	mov	r4, r0
 80050e4:	d14d      	bne.n	8005182 <_malloc_r+0xde>
 80050e6:	6834      	ldr	r4, [r6, #0]
 80050e8:	4626      	mov	r6, r4
 80050ea:	2e00      	cmp	r6, #0
 80050ec:	d140      	bne.n	8005170 <_malloc_r+0xcc>
 80050ee:	6823      	ldr	r3, [r4, #0]
 80050f0:	4631      	mov	r1, r6
 80050f2:	4638      	mov	r0, r7
 80050f4:	eb04 0803 	add.w	r8, r4, r3
 80050f8:	f000 fc92 	bl	8005a20 <_sbrk_r>
 80050fc:	4580      	cmp	r8, r0
 80050fe:	d13a      	bne.n	8005176 <_malloc_r+0xd2>
 8005100:	6821      	ldr	r1, [r4, #0]
 8005102:	3503      	adds	r5, #3
 8005104:	1a6d      	subs	r5, r5, r1
 8005106:	f025 0503 	bic.w	r5, r5, #3
 800510a:	3508      	adds	r5, #8
 800510c:	2d0c      	cmp	r5, #12
 800510e:	bf38      	it	cc
 8005110:	250c      	movcc	r5, #12
 8005112:	4629      	mov	r1, r5
 8005114:	4638      	mov	r0, r7
 8005116:	f7ff ffa5 	bl	8005064 <sbrk_aligned>
 800511a:	3001      	adds	r0, #1
 800511c:	d02b      	beq.n	8005176 <_malloc_r+0xd2>
 800511e:	6823      	ldr	r3, [r4, #0]
 8005120:	442b      	add	r3, r5
 8005122:	6023      	str	r3, [r4, #0]
 8005124:	e00e      	b.n	8005144 <_malloc_r+0xa0>
 8005126:	6822      	ldr	r2, [r4, #0]
 8005128:	1b52      	subs	r2, r2, r5
 800512a:	d41e      	bmi.n	800516a <_malloc_r+0xc6>
 800512c:	2a0b      	cmp	r2, #11
 800512e:	d916      	bls.n	800515e <_malloc_r+0xba>
 8005130:	1961      	adds	r1, r4, r5
 8005132:	42a3      	cmp	r3, r4
 8005134:	6025      	str	r5, [r4, #0]
 8005136:	bf18      	it	ne
 8005138:	6059      	strne	r1, [r3, #4]
 800513a:	6863      	ldr	r3, [r4, #4]
 800513c:	bf08      	it	eq
 800513e:	6031      	streq	r1, [r6, #0]
 8005140:	5162      	str	r2, [r4, r5]
 8005142:	604b      	str	r3, [r1, #4]
 8005144:	4638      	mov	r0, r7
 8005146:	f104 060b 	add.w	r6, r4, #11
 800514a:	f000 ff8f 	bl	800606c <__malloc_unlock>
 800514e:	f026 0607 	bic.w	r6, r6, #7
 8005152:	1d23      	adds	r3, r4, #4
 8005154:	1af2      	subs	r2, r6, r3
 8005156:	d0b6      	beq.n	80050c6 <_malloc_r+0x22>
 8005158:	1b9b      	subs	r3, r3, r6
 800515a:	50a3      	str	r3, [r4, r2]
 800515c:	e7b3      	b.n	80050c6 <_malloc_r+0x22>
 800515e:	6862      	ldr	r2, [r4, #4]
 8005160:	42a3      	cmp	r3, r4
 8005162:	bf0c      	ite	eq
 8005164:	6032      	streq	r2, [r6, #0]
 8005166:	605a      	strne	r2, [r3, #4]
 8005168:	e7ec      	b.n	8005144 <_malloc_r+0xa0>
 800516a:	4623      	mov	r3, r4
 800516c:	6864      	ldr	r4, [r4, #4]
 800516e:	e7b2      	b.n	80050d6 <_malloc_r+0x32>
 8005170:	4634      	mov	r4, r6
 8005172:	6876      	ldr	r6, [r6, #4]
 8005174:	e7b9      	b.n	80050ea <_malloc_r+0x46>
 8005176:	230c      	movs	r3, #12
 8005178:	603b      	str	r3, [r7, #0]
 800517a:	4638      	mov	r0, r7
 800517c:	f000 ff76 	bl	800606c <__malloc_unlock>
 8005180:	e7a1      	b.n	80050c6 <_malloc_r+0x22>
 8005182:	6025      	str	r5, [r4, #0]
 8005184:	e7de      	b.n	8005144 <_malloc_r+0xa0>
 8005186:	bf00      	nop
 8005188:	20000250 	.word	0x20000250

0800518c <__ssputs_r>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	688e      	ldr	r6, [r1, #8]
 8005192:	429e      	cmp	r6, r3
 8005194:	4682      	mov	sl, r0
 8005196:	460c      	mov	r4, r1
 8005198:	4690      	mov	r8, r2
 800519a:	461f      	mov	r7, r3
 800519c:	d838      	bhi.n	8005210 <__ssputs_r+0x84>
 800519e:	898a      	ldrh	r2, [r1, #12]
 80051a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80051a4:	d032      	beq.n	800520c <__ssputs_r+0x80>
 80051a6:	6825      	ldr	r5, [r4, #0]
 80051a8:	6909      	ldr	r1, [r1, #16]
 80051aa:	eba5 0901 	sub.w	r9, r5, r1
 80051ae:	6965      	ldr	r5, [r4, #20]
 80051b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80051b8:	3301      	adds	r3, #1
 80051ba:	444b      	add	r3, r9
 80051bc:	106d      	asrs	r5, r5, #1
 80051be:	429d      	cmp	r5, r3
 80051c0:	bf38      	it	cc
 80051c2:	461d      	movcc	r5, r3
 80051c4:	0553      	lsls	r3, r2, #21
 80051c6:	d531      	bpl.n	800522c <__ssputs_r+0xa0>
 80051c8:	4629      	mov	r1, r5
 80051ca:	f7ff ff6b 	bl	80050a4 <_malloc_r>
 80051ce:	4606      	mov	r6, r0
 80051d0:	b950      	cbnz	r0, 80051e8 <__ssputs_r+0x5c>
 80051d2:	230c      	movs	r3, #12
 80051d4:	f8ca 3000 	str.w	r3, [sl]
 80051d8:	89a3      	ldrh	r3, [r4, #12]
 80051da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051de:	81a3      	strh	r3, [r4, #12]
 80051e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051e8:	6921      	ldr	r1, [r4, #16]
 80051ea:	464a      	mov	r2, r9
 80051ec:	f000 ff10 	bl	8006010 <memcpy>
 80051f0:	89a3      	ldrh	r3, [r4, #12]
 80051f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051fa:	81a3      	strh	r3, [r4, #12]
 80051fc:	6126      	str	r6, [r4, #16]
 80051fe:	6165      	str	r5, [r4, #20]
 8005200:	444e      	add	r6, r9
 8005202:	eba5 0509 	sub.w	r5, r5, r9
 8005206:	6026      	str	r6, [r4, #0]
 8005208:	60a5      	str	r5, [r4, #8]
 800520a:	463e      	mov	r6, r7
 800520c:	42be      	cmp	r6, r7
 800520e:	d900      	bls.n	8005212 <__ssputs_r+0x86>
 8005210:	463e      	mov	r6, r7
 8005212:	6820      	ldr	r0, [r4, #0]
 8005214:	4632      	mov	r2, r6
 8005216:	4641      	mov	r1, r8
 8005218:	f000 ff08 	bl	800602c <memmove>
 800521c:	68a3      	ldr	r3, [r4, #8]
 800521e:	1b9b      	subs	r3, r3, r6
 8005220:	60a3      	str	r3, [r4, #8]
 8005222:	6823      	ldr	r3, [r4, #0]
 8005224:	4433      	add	r3, r6
 8005226:	6023      	str	r3, [r4, #0]
 8005228:	2000      	movs	r0, #0
 800522a:	e7db      	b.n	80051e4 <__ssputs_r+0x58>
 800522c:	462a      	mov	r2, r5
 800522e:	f000 ff23 	bl	8006078 <_realloc_r>
 8005232:	4606      	mov	r6, r0
 8005234:	2800      	cmp	r0, #0
 8005236:	d1e1      	bne.n	80051fc <__ssputs_r+0x70>
 8005238:	6921      	ldr	r1, [r4, #16]
 800523a:	4650      	mov	r0, sl
 800523c:	f7ff fec6 	bl	8004fcc <_free_r>
 8005240:	e7c7      	b.n	80051d2 <__ssputs_r+0x46>
	...

08005244 <_svfiprintf_r>:
 8005244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005248:	4698      	mov	r8, r3
 800524a:	898b      	ldrh	r3, [r1, #12]
 800524c:	061b      	lsls	r3, r3, #24
 800524e:	b09d      	sub	sp, #116	; 0x74
 8005250:	4607      	mov	r7, r0
 8005252:	460d      	mov	r5, r1
 8005254:	4614      	mov	r4, r2
 8005256:	d50e      	bpl.n	8005276 <_svfiprintf_r+0x32>
 8005258:	690b      	ldr	r3, [r1, #16]
 800525a:	b963      	cbnz	r3, 8005276 <_svfiprintf_r+0x32>
 800525c:	2140      	movs	r1, #64	; 0x40
 800525e:	f7ff ff21 	bl	80050a4 <_malloc_r>
 8005262:	6028      	str	r0, [r5, #0]
 8005264:	6128      	str	r0, [r5, #16]
 8005266:	b920      	cbnz	r0, 8005272 <_svfiprintf_r+0x2e>
 8005268:	230c      	movs	r3, #12
 800526a:	603b      	str	r3, [r7, #0]
 800526c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005270:	e0d1      	b.n	8005416 <_svfiprintf_r+0x1d2>
 8005272:	2340      	movs	r3, #64	; 0x40
 8005274:	616b      	str	r3, [r5, #20]
 8005276:	2300      	movs	r3, #0
 8005278:	9309      	str	r3, [sp, #36]	; 0x24
 800527a:	2320      	movs	r3, #32
 800527c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005280:	f8cd 800c 	str.w	r8, [sp, #12]
 8005284:	2330      	movs	r3, #48	; 0x30
 8005286:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005430 <_svfiprintf_r+0x1ec>
 800528a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800528e:	f04f 0901 	mov.w	r9, #1
 8005292:	4623      	mov	r3, r4
 8005294:	469a      	mov	sl, r3
 8005296:	f813 2b01 	ldrb.w	r2, [r3], #1
 800529a:	b10a      	cbz	r2, 80052a0 <_svfiprintf_r+0x5c>
 800529c:	2a25      	cmp	r2, #37	; 0x25
 800529e:	d1f9      	bne.n	8005294 <_svfiprintf_r+0x50>
 80052a0:	ebba 0b04 	subs.w	fp, sl, r4
 80052a4:	d00b      	beq.n	80052be <_svfiprintf_r+0x7a>
 80052a6:	465b      	mov	r3, fp
 80052a8:	4622      	mov	r2, r4
 80052aa:	4629      	mov	r1, r5
 80052ac:	4638      	mov	r0, r7
 80052ae:	f7ff ff6d 	bl	800518c <__ssputs_r>
 80052b2:	3001      	adds	r0, #1
 80052b4:	f000 80aa 	beq.w	800540c <_svfiprintf_r+0x1c8>
 80052b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ba:	445a      	add	r2, fp
 80052bc:	9209      	str	r2, [sp, #36]	; 0x24
 80052be:	f89a 3000 	ldrb.w	r3, [sl]
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f000 80a2 	beq.w	800540c <_svfiprintf_r+0x1c8>
 80052c8:	2300      	movs	r3, #0
 80052ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052ce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052d2:	f10a 0a01 	add.w	sl, sl, #1
 80052d6:	9304      	str	r3, [sp, #16]
 80052d8:	9307      	str	r3, [sp, #28]
 80052da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052de:	931a      	str	r3, [sp, #104]	; 0x68
 80052e0:	4654      	mov	r4, sl
 80052e2:	2205      	movs	r2, #5
 80052e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80052e8:	4851      	ldr	r0, [pc, #324]	; (8005430 <_svfiprintf_r+0x1ec>)
 80052ea:	f7fa ffa9 	bl	8000240 <memchr>
 80052ee:	9a04      	ldr	r2, [sp, #16]
 80052f0:	b9d8      	cbnz	r0, 800532a <_svfiprintf_r+0xe6>
 80052f2:	06d0      	lsls	r0, r2, #27
 80052f4:	bf44      	itt	mi
 80052f6:	2320      	movmi	r3, #32
 80052f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80052fc:	0711      	lsls	r1, r2, #28
 80052fe:	bf44      	itt	mi
 8005300:	232b      	movmi	r3, #43	; 0x2b
 8005302:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005306:	f89a 3000 	ldrb.w	r3, [sl]
 800530a:	2b2a      	cmp	r3, #42	; 0x2a
 800530c:	d015      	beq.n	800533a <_svfiprintf_r+0xf6>
 800530e:	9a07      	ldr	r2, [sp, #28]
 8005310:	4654      	mov	r4, sl
 8005312:	2000      	movs	r0, #0
 8005314:	f04f 0c0a 	mov.w	ip, #10
 8005318:	4621      	mov	r1, r4
 800531a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531e:	3b30      	subs	r3, #48	; 0x30
 8005320:	2b09      	cmp	r3, #9
 8005322:	d94e      	bls.n	80053c2 <_svfiprintf_r+0x17e>
 8005324:	b1b0      	cbz	r0, 8005354 <_svfiprintf_r+0x110>
 8005326:	9207      	str	r2, [sp, #28]
 8005328:	e014      	b.n	8005354 <_svfiprintf_r+0x110>
 800532a:	eba0 0308 	sub.w	r3, r0, r8
 800532e:	fa09 f303 	lsl.w	r3, r9, r3
 8005332:	4313      	orrs	r3, r2
 8005334:	9304      	str	r3, [sp, #16]
 8005336:	46a2      	mov	sl, r4
 8005338:	e7d2      	b.n	80052e0 <_svfiprintf_r+0x9c>
 800533a:	9b03      	ldr	r3, [sp, #12]
 800533c:	1d19      	adds	r1, r3, #4
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	9103      	str	r1, [sp, #12]
 8005342:	2b00      	cmp	r3, #0
 8005344:	bfbb      	ittet	lt
 8005346:	425b      	neglt	r3, r3
 8005348:	f042 0202 	orrlt.w	r2, r2, #2
 800534c:	9307      	strge	r3, [sp, #28]
 800534e:	9307      	strlt	r3, [sp, #28]
 8005350:	bfb8      	it	lt
 8005352:	9204      	strlt	r2, [sp, #16]
 8005354:	7823      	ldrb	r3, [r4, #0]
 8005356:	2b2e      	cmp	r3, #46	; 0x2e
 8005358:	d10c      	bne.n	8005374 <_svfiprintf_r+0x130>
 800535a:	7863      	ldrb	r3, [r4, #1]
 800535c:	2b2a      	cmp	r3, #42	; 0x2a
 800535e:	d135      	bne.n	80053cc <_svfiprintf_r+0x188>
 8005360:	9b03      	ldr	r3, [sp, #12]
 8005362:	1d1a      	adds	r2, r3, #4
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	9203      	str	r2, [sp, #12]
 8005368:	2b00      	cmp	r3, #0
 800536a:	bfb8      	it	lt
 800536c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005370:	3402      	adds	r4, #2
 8005372:	9305      	str	r3, [sp, #20]
 8005374:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005440 <_svfiprintf_r+0x1fc>
 8005378:	7821      	ldrb	r1, [r4, #0]
 800537a:	2203      	movs	r2, #3
 800537c:	4650      	mov	r0, sl
 800537e:	f7fa ff5f 	bl	8000240 <memchr>
 8005382:	b140      	cbz	r0, 8005396 <_svfiprintf_r+0x152>
 8005384:	2340      	movs	r3, #64	; 0x40
 8005386:	eba0 000a 	sub.w	r0, r0, sl
 800538a:	fa03 f000 	lsl.w	r0, r3, r0
 800538e:	9b04      	ldr	r3, [sp, #16]
 8005390:	4303      	orrs	r3, r0
 8005392:	3401      	adds	r4, #1
 8005394:	9304      	str	r3, [sp, #16]
 8005396:	f814 1b01 	ldrb.w	r1, [r4], #1
 800539a:	4826      	ldr	r0, [pc, #152]	; (8005434 <_svfiprintf_r+0x1f0>)
 800539c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053a0:	2206      	movs	r2, #6
 80053a2:	f7fa ff4d 	bl	8000240 <memchr>
 80053a6:	2800      	cmp	r0, #0
 80053a8:	d038      	beq.n	800541c <_svfiprintf_r+0x1d8>
 80053aa:	4b23      	ldr	r3, [pc, #140]	; (8005438 <_svfiprintf_r+0x1f4>)
 80053ac:	bb1b      	cbnz	r3, 80053f6 <_svfiprintf_r+0x1b2>
 80053ae:	9b03      	ldr	r3, [sp, #12]
 80053b0:	3307      	adds	r3, #7
 80053b2:	f023 0307 	bic.w	r3, r3, #7
 80053b6:	3308      	adds	r3, #8
 80053b8:	9303      	str	r3, [sp, #12]
 80053ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053bc:	4433      	add	r3, r6
 80053be:	9309      	str	r3, [sp, #36]	; 0x24
 80053c0:	e767      	b.n	8005292 <_svfiprintf_r+0x4e>
 80053c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80053c6:	460c      	mov	r4, r1
 80053c8:	2001      	movs	r0, #1
 80053ca:	e7a5      	b.n	8005318 <_svfiprintf_r+0xd4>
 80053cc:	2300      	movs	r3, #0
 80053ce:	3401      	adds	r4, #1
 80053d0:	9305      	str	r3, [sp, #20]
 80053d2:	4619      	mov	r1, r3
 80053d4:	f04f 0c0a 	mov.w	ip, #10
 80053d8:	4620      	mov	r0, r4
 80053da:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053de:	3a30      	subs	r2, #48	; 0x30
 80053e0:	2a09      	cmp	r2, #9
 80053e2:	d903      	bls.n	80053ec <_svfiprintf_r+0x1a8>
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d0c5      	beq.n	8005374 <_svfiprintf_r+0x130>
 80053e8:	9105      	str	r1, [sp, #20]
 80053ea:	e7c3      	b.n	8005374 <_svfiprintf_r+0x130>
 80053ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80053f0:	4604      	mov	r4, r0
 80053f2:	2301      	movs	r3, #1
 80053f4:	e7f0      	b.n	80053d8 <_svfiprintf_r+0x194>
 80053f6:	ab03      	add	r3, sp, #12
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	462a      	mov	r2, r5
 80053fc:	4b0f      	ldr	r3, [pc, #60]	; (800543c <_svfiprintf_r+0x1f8>)
 80053fe:	a904      	add	r1, sp, #16
 8005400:	4638      	mov	r0, r7
 8005402:	f3af 8000 	nop.w
 8005406:	1c42      	adds	r2, r0, #1
 8005408:	4606      	mov	r6, r0
 800540a:	d1d6      	bne.n	80053ba <_svfiprintf_r+0x176>
 800540c:	89ab      	ldrh	r3, [r5, #12]
 800540e:	065b      	lsls	r3, r3, #25
 8005410:	f53f af2c 	bmi.w	800526c <_svfiprintf_r+0x28>
 8005414:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005416:	b01d      	add	sp, #116	; 0x74
 8005418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800541c:	ab03      	add	r3, sp, #12
 800541e:	9300      	str	r3, [sp, #0]
 8005420:	462a      	mov	r2, r5
 8005422:	4b06      	ldr	r3, [pc, #24]	; (800543c <_svfiprintf_r+0x1f8>)
 8005424:	a904      	add	r1, sp, #16
 8005426:	4638      	mov	r0, r7
 8005428:	f000 f9d4 	bl	80057d4 <_printf_i>
 800542c:	e7eb      	b.n	8005406 <_svfiprintf_r+0x1c2>
 800542e:	bf00      	nop
 8005430:	08006501 	.word	0x08006501
 8005434:	0800650b 	.word	0x0800650b
 8005438:	00000000 	.word	0x00000000
 800543c:	0800518d 	.word	0x0800518d
 8005440:	08006507 	.word	0x08006507

08005444 <__sfputc_r>:
 8005444:	6893      	ldr	r3, [r2, #8]
 8005446:	3b01      	subs	r3, #1
 8005448:	2b00      	cmp	r3, #0
 800544a:	b410      	push	{r4}
 800544c:	6093      	str	r3, [r2, #8]
 800544e:	da08      	bge.n	8005462 <__sfputc_r+0x1e>
 8005450:	6994      	ldr	r4, [r2, #24]
 8005452:	42a3      	cmp	r3, r4
 8005454:	db01      	blt.n	800545a <__sfputc_r+0x16>
 8005456:	290a      	cmp	r1, #10
 8005458:	d103      	bne.n	8005462 <__sfputc_r+0x1e>
 800545a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800545e:	f000 baef 	b.w	8005a40 <__swbuf_r>
 8005462:	6813      	ldr	r3, [r2, #0]
 8005464:	1c58      	adds	r0, r3, #1
 8005466:	6010      	str	r0, [r2, #0]
 8005468:	7019      	strb	r1, [r3, #0]
 800546a:	4608      	mov	r0, r1
 800546c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005470:	4770      	bx	lr

08005472 <__sfputs_r>:
 8005472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005474:	4606      	mov	r6, r0
 8005476:	460f      	mov	r7, r1
 8005478:	4614      	mov	r4, r2
 800547a:	18d5      	adds	r5, r2, r3
 800547c:	42ac      	cmp	r4, r5
 800547e:	d101      	bne.n	8005484 <__sfputs_r+0x12>
 8005480:	2000      	movs	r0, #0
 8005482:	e007      	b.n	8005494 <__sfputs_r+0x22>
 8005484:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005488:	463a      	mov	r2, r7
 800548a:	4630      	mov	r0, r6
 800548c:	f7ff ffda 	bl	8005444 <__sfputc_r>
 8005490:	1c43      	adds	r3, r0, #1
 8005492:	d1f3      	bne.n	800547c <__sfputs_r+0xa>
 8005494:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005498 <_vfiprintf_r>:
 8005498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800549c:	460d      	mov	r5, r1
 800549e:	b09d      	sub	sp, #116	; 0x74
 80054a0:	4614      	mov	r4, r2
 80054a2:	4698      	mov	r8, r3
 80054a4:	4606      	mov	r6, r0
 80054a6:	b118      	cbz	r0, 80054b0 <_vfiprintf_r+0x18>
 80054a8:	6983      	ldr	r3, [r0, #24]
 80054aa:	b90b      	cbnz	r3, 80054b0 <_vfiprintf_r+0x18>
 80054ac:	f000 fcaa 	bl	8005e04 <__sinit>
 80054b0:	4b89      	ldr	r3, [pc, #548]	; (80056d8 <_vfiprintf_r+0x240>)
 80054b2:	429d      	cmp	r5, r3
 80054b4:	d11b      	bne.n	80054ee <_vfiprintf_r+0x56>
 80054b6:	6875      	ldr	r5, [r6, #4]
 80054b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054ba:	07d9      	lsls	r1, r3, #31
 80054bc:	d405      	bmi.n	80054ca <_vfiprintf_r+0x32>
 80054be:	89ab      	ldrh	r3, [r5, #12]
 80054c0:	059a      	lsls	r2, r3, #22
 80054c2:	d402      	bmi.n	80054ca <_vfiprintf_r+0x32>
 80054c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80054c6:	f000 fd3b 	bl	8005f40 <__retarget_lock_acquire_recursive>
 80054ca:	89ab      	ldrh	r3, [r5, #12]
 80054cc:	071b      	lsls	r3, r3, #28
 80054ce:	d501      	bpl.n	80054d4 <_vfiprintf_r+0x3c>
 80054d0:	692b      	ldr	r3, [r5, #16]
 80054d2:	b9eb      	cbnz	r3, 8005510 <_vfiprintf_r+0x78>
 80054d4:	4629      	mov	r1, r5
 80054d6:	4630      	mov	r0, r6
 80054d8:	f000 fb04 	bl	8005ae4 <__swsetup_r>
 80054dc:	b1c0      	cbz	r0, 8005510 <_vfiprintf_r+0x78>
 80054de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80054e0:	07dc      	lsls	r4, r3, #31
 80054e2:	d50e      	bpl.n	8005502 <_vfiprintf_r+0x6a>
 80054e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80054e8:	b01d      	add	sp, #116	; 0x74
 80054ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054ee:	4b7b      	ldr	r3, [pc, #492]	; (80056dc <_vfiprintf_r+0x244>)
 80054f0:	429d      	cmp	r5, r3
 80054f2:	d101      	bne.n	80054f8 <_vfiprintf_r+0x60>
 80054f4:	68b5      	ldr	r5, [r6, #8]
 80054f6:	e7df      	b.n	80054b8 <_vfiprintf_r+0x20>
 80054f8:	4b79      	ldr	r3, [pc, #484]	; (80056e0 <_vfiprintf_r+0x248>)
 80054fa:	429d      	cmp	r5, r3
 80054fc:	bf08      	it	eq
 80054fe:	68f5      	ldreq	r5, [r6, #12]
 8005500:	e7da      	b.n	80054b8 <_vfiprintf_r+0x20>
 8005502:	89ab      	ldrh	r3, [r5, #12]
 8005504:	0598      	lsls	r0, r3, #22
 8005506:	d4ed      	bmi.n	80054e4 <_vfiprintf_r+0x4c>
 8005508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800550a:	f000 fd1a 	bl	8005f42 <__retarget_lock_release_recursive>
 800550e:	e7e9      	b.n	80054e4 <_vfiprintf_r+0x4c>
 8005510:	2300      	movs	r3, #0
 8005512:	9309      	str	r3, [sp, #36]	; 0x24
 8005514:	2320      	movs	r3, #32
 8005516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800551a:	f8cd 800c 	str.w	r8, [sp, #12]
 800551e:	2330      	movs	r3, #48	; 0x30
 8005520:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80056e4 <_vfiprintf_r+0x24c>
 8005524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005528:	f04f 0901 	mov.w	r9, #1
 800552c:	4623      	mov	r3, r4
 800552e:	469a      	mov	sl, r3
 8005530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005534:	b10a      	cbz	r2, 800553a <_vfiprintf_r+0xa2>
 8005536:	2a25      	cmp	r2, #37	; 0x25
 8005538:	d1f9      	bne.n	800552e <_vfiprintf_r+0x96>
 800553a:	ebba 0b04 	subs.w	fp, sl, r4
 800553e:	d00b      	beq.n	8005558 <_vfiprintf_r+0xc0>
 8005540:	465b      	mov	r3, fp
 8005542:	4622      	mov	r2, r4
 8005544:	4629      	mov	r1, r5
 8005546:	4630      	mov	r0, r6
 8005548:	f7ff ff93 	bl	8005472 <__sfputs_r>
 800554c:	3001      	adds	r0, #1
 800554e:	f000 80aa 	beq.w	80056a6 <_vfiprintf_r+0x20e>
 8005552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005554:	445a      	add	r2, fp
 8005556:	9209      	str	r2, [sp, #36]	; 0x24
 8005558:	f89a 3000 	ldrb.w	r3, [sl]
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80a2 	beq.w	80056a6 <_vfiprintf_r+0x20e>
 8005562:	2300      	movs	r3, #0
 8005564:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800556c:	f10a 0a01 	add.w	sl, sl, #1
 8005570:	9304      	str	r3, [sp, #16]
 8005572:	9307      	str	r3, [sp, #28]
 8005574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005578:	931a      	str	r3, [sp, #104]	; 0x68
 800557a:	4654      	mov	r4, sl
 800557c:	2205      	movs	r2, #5
 800557e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005582:	4858      	ldr	r0, [pc, #352]	; (80056e4 <_vfiprintf_r+0x24c>)
 8005584:	f7fa fe5c 	bl	8000240 <memchr>
 8005588:	9a04      	ldr	r2, [sp, #16]
 800558a:	b9d8      	cbnz	r0, 80055c4 <_vfiprintf_r+0x12c>
 800558c:	06d1      	lsls	r1, r2, #27
 800558e:	bf44      	itt	mi
 8005590:	2320      	movmi	r3, #32
 8005592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005596:	0713      	lsls	r3, r2, #28
 8005598:	bf44      	itt	mi
 800559a:	232b      	movmi	r3, #43	; 0x2b
 800559c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80055a0:	f89a 3000 	ldrb.w	r3, [sl]
 80055a4:	2b2a      	cmp	r3, #42	; 0x2a
 80055a6:	d015      	beq.n	80055d4 <_vfiprintf_r+0x13c>
 80055a8:	9a07      	ldr	r2, [sp, #28]
 80055aa:	4654      	mov	r4, sl
 80055ac:	2000      	movs	r0, #0
 80055ae:	f04f 0c0a 	mov.w	ip, #10
 80055b2:	4621      	mov	r1, r4
 80055b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80055b8:	3b30      	subs	r3, #48	; 0x30
 80055ba:	2b09      	cmp	r3, #9
 80055bc:	d94e      	bls.n	800565c <_vfiprintf_r+0x1c4>
 80055be:	b1b0      	cbz	r0, 80055ee <_vfiprintf_r+0x156>
 80055c0:	9207      	str	r2, [sp, #28]
 80055c2:	e014      	b.n	80055ee <_vfiprintf_r+0x156>
 80055c4:	eba0 0308 	sub.w	r3, r0, r8
 80055c8:	fa09 f303 	lsl.w	r3, r9, r3
 80055cc:	4313      	orrs	r3, r2
 80055ce:	9304      	str	r3, [sp, #16]
 80055d0:	46a2      	mov	sl, r4
 80055d2:	e7d2      	b.n	800557a <_vfiprintf_r+0xe2>
 80055d4:	9b03      	ldr	r3, [sp, #12]
 80055d6:	1d19      	adds	r1, r3, #4
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	9103      	str	r1, [sp, #12]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	bfbb      	ittet	lt
 80055e0:	425b      	neglt	r3, r3
 80055e2:	f042 0202 	orrlt.w	r2, r2, #2
 80055e6:	9307      	strge	r3, [sp, #28]
 80055e8:	9307      	strlt	r3, [sp, #28]
 80055ea:	bfb8      	it	lt
 80055ec:	9204      	strlt	r2, [sp, #16]
 80055ee:	7823      	ldrb	r3, [r4, #0]
 80055f0:	2b2e      	cmp	r3, #46	; 0x2e
 80055f2:	d10c      	bne.n	800560e <_vfiprintf_r+0x176>
 80055f4:	7863      	ldrb	r3, [r4, #1]
 80055f6:	2b2a      	cmp	r3, #42	; 0x2a
 80055f8:	d135      	bne.n	8005666 <_vfiprintf_r+0x1ce>
 80055fa:	9b03      	ldr	r3, [sp, #12]
 80055fc:	1d1a      	adds	r2, r3, #4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	9203      	str	r2, [sp, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	bfb8      	it	lt
 8005606:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800560a:	3402      	adds	r4, #2
 800560c:	9305      	str	r3, [sp, #20]
 800560e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80056f4 <_vfiprintf_r+0x25c>
 8005612:	7821      	ldrb	r1, [r4, #0]
 8005614:	2203      	movs	r2, #3
 8005616:	4650      	mov	r0, sl
 8005618:	f7fa fe12 	bl	8000240 <memchr>
 800561c:	b140      	cbz	r0, 8005630 <_vfiprintf_r+0x198>
 800561e:	2340      	movs	r3, #64	; 0x40
 8005620:	eba0 000a 	sub.w	r0, r0, sl
 8005624:	fa03 f000 	lsl.w	r0, r3, r0
 8005628:	9b04      	ldr	r3, [sp, #16]
 800562a:	4303      	orrs	r3, r0
 800562c:	3401      	adds	r4, #1
 800562e:	9304      	str	r3, [sp, #16]
 8005630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005634:	482c      	ldr	r0, [pc, #176]	; (80056e8 <_vfiprintf_r+0x250>)
 8005636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800563a:	2206      	movs	r2, #6
 800563c:	f7fa fe00 	bl	8000240 <memchr>
 8005640:	2800      	cmp	r0, #0
 8005642:	d03f      	beq.n	80056c4 <_vfiprintf_r+0x22c>
 8005644:	4b29      	ldr	r3, [pc, #164]	; (80056ec <_vfiprintf_r+0x254>)
 8005646:	bb1b      	cbnz	r3, 8005690 <_vfiprintf_r+0x1f8>
 8005648:	9b03      	ldr	r3, [sp, #12]
 800564a:	3307      	adds	r3, #7
 800564c:	f023 0307 	bic.w	r3, r3, #7
 8005650:	3308      	adds	r3, #8
 8005652:	9303      	str	r3, [sp, #12]
 8005654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005656:	443b      	add	r3, r7
 8005658:	9309      	str	r3, [sp, #36]	; 0x24
 800565a:	e767      	b.n	800552c <_vfiprintf_r+0x94>
 800565c:	fb0c 3202 	mla	r2, ip, r2, r3
 8005660:	460c      	mov	r4, r1
 8005662:	2001      	movs	r0, #1
 8005664:	e7a5      	b.n	80055b2 <_vfiprintf_r+0x11a>
 8005666:	2300      	movs	r3, #0
 8005668:	3401      	adds	r4, #1
 800566a:	9305      	str	r3, [sp, #20]
 800566c:	4619      	mov	r1, r3
 800566e:	f04f 0c0a 	mov.w	ip, #10
 8005672:	4620      	mov	r0, r4
 8005674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005678:	3a30      	subs	r2, #48	; 0x30
 800567a:	2a09      	cmp	r2, #9
 800567c:	d903      	bls.n	8005686 <_vfiprintf_r+0x1ee>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d0c5      	beq.n	800560e <_vfiprintf_r+0x176>
 8005682:	9105      	str	r1, [sp, #20]
 8005684:	e7c3      	b.n	800560e <_vfiprintf_r+0x176>
 8005686:	fb0c 2101 	mla	r1, ip, r1, r2
 800568a:	4604      	mov	r4, r0
 800568c:	2301      	movs	r3, #1
 800568e:	e7f0      	b.n	8005672 <_vfiprintf_r+0x1da>
 8005690:	ab03      	add	r3, sp, #12
 8005692:	9300      	str	r3, [sp, #0]
 8005694:	462a      	mov	r2, r5
 8005696:	4b16      	ldr	r3, [pc, #88]	; (80056f0 <_vfiprintf_r+0x258>)
 8005698:	a904      	add	r1, sp, #16
 800569a:	4630      	mov	r0, r6
 800569c:	f3af 8000 	nop.w
 80056a0:	4607      	mov	r7, r0
 80056a2:	1c78      	adds	r0, r7, #1
 80056a4:	d1d6      	bne.n	8005654 <_vfiprintf_r+0x1bc>
 80056a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80056a8:	07d9      	lsls	r1, r3, #31
 80056aa:	d405      	bmi.n	80056b8 <_vfiprintf_r+0x220>
 80056ac:	89ab      	ldrh	r3, [r5, #12]
 80056ae:	059a      	lsls	r2, r3, #22
 80056b0:	d402      	bmi.n	80056b8 <_vfiprintf_r+0x220>
 80056b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80056b4:	f000 fc45 	bl	8005f42 <__retarget_lock_release_recursive>
 80056b8:	89ab      	ldrh	r3, [r5, #12]
 80056ba:	065b      	lsls	r3, r3, #25
 80056bc:	f53f af12 	bmi.w	80054e4 <_vfiprintf_r+0x4c>
 80056c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80056c2:	e711      	b.n	80054e8 <_vfiprintf_r+0x50>
 80056c4:	ab03      	add	r3, sp, #12
 80056c6:	9300      	str	r3, [sp, #0]
 80056c8:	462a      	mov	r2, r5
 80056ca:	4b09      	ldr	r3, [pc, #36]	; (80056f0 <_vfiprintf_r+0x258>)
 80056cc:	a904      	add	r1, sp, #16
 80056ce:	4630      	mov	r0, r6
 80056d0:	f000 f880 	bl	80057d4 <_printf_i>
 80056d4:	e7e4      	b.n	80056a0 <_vfiprintf_r+0x208>
 80056d6:	bf00      	nop
 80056d8:	08006554 	.word	0x08006554
 80056dc:	08006574 	.word	0x08006574
 80056e0:	08006534 	.word	0x08006534
 80056e4:	08006501 	.word	0x08006501
 80056e8:	0800650b 	.word	0x0800650b
 80056ec:	00000000 	.word	0x00000000
 80056f0:	08005473 	.word	0x08005473
 80056f4:	08006507 	.word	0x08006507

080056f8 <_printf_common>:
 80056f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80056fc:	4616      	mov	r6, r2
 80056fe:	4699      	mov	r9, r3
 8005700:	688a      	ldr	r2, [r1, #8]
 8005702:	690b      	ldr	r3, [r1, #16]
 8005704:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005708:	4293      	cmp	r3, r2
 800570a:	bfb8      	it	lt
 800570c:	4613      	movlt	r3, r2
 800570e:	6033      	str	r3, [r6, #0]
 8005710:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005714:	4607      	mov	r7, r0
 8005716:	460c      	mov	r4, r1
 8005718:	b10a      	cbz	r2, 800571e <_printf_common+0x26>
 800571a:	3301      	adds	r3, #1
 800571c:	6033      	str	r3, [r6, #0]
 800571e:	6823      	ldr	r3, [r4, #0]
 8005720:	0699      	lsls	r1, r3, #26
 8005722:	bf42      	ittt	mi
 8005724:	6833      	ldrmi	r3, [r6, #0]
 8005726:	3302      	addmi	r3, #2
 8005728:	6033      	strmi	r3, [r6, #0]
 800572a:	6825      	ldr	r5, [r4, #0]
 800572c:	f015 0506 	ands.w	r5, r5, #6
 8005730:	d106      	bne.n	8005740 <_printf_common+0x48>
 8005732:	f104 0a19 	add.w	sl, r4, #25
 8005736:	68e3      	ldr	r3, [r4, #12]
 8005738:	6832      	ldr	r2, [r6, #0]
 800573a:	1a9b      	subs	r3, r3, r2
 800573c:	42ab      	cmp	r3, r5
 800573e:	dc26      	bgt.n	800578e <_printf_common+0x96>
 8005740:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005744:	1e13      	subs	r3, r2, #0
 8005746:	6822      	ldr	r2, [r4, #0]
 8005748:	bf18      	it	ne
 800574a:	2301      	movne	r3, #1
 800574c:	0692      	lsls	r2, r2, #26
 800574e:	d42b      	bmi.n	80057a8 <_printf_common+0xb0>
 8005750:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005754:	4649      	mov	r1, r9
 8005756:	4638      	mov	r0, r7
 8005758:	47c0      	blx	r8
 800575a:	3001      	adds	r0, #1
 800575c:	d01e      	beq.n	800579c <_printf_common+0xa4>
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	68e5      	ldr	r5, [r4, #12]
 8005762:	6832      	ldr	r2, [r6, #0]
 8005764:	f003 0306 	and.w	r3, r3, #6
 8005768:	2b04      	cmp	r3, #4
 800576a:	bf08      	it	eq
 800576c:	1aad      	subeq	r5, r5, r2
 800576e:	68a3      	ldr	r3, [r4, #8]
 8005770:	6922      	ldr	r2, [r4, #16]
 8005772:	bf0c      	ite	eq
 8005774:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005778:	2500      	movne	r5, #0
 800577a:	4293      	cmp	r3, r2
 800577c:	bfc4      	itt	gt
 800577e:	1a9b      	subgt	r3, r3, r2
 8005780:	18ed      	addgt	r5, r5, r3
 8005782:	2600      	movs	r6, #0
 8005784:	341a      	adds	r4, #26
 8005786:	42b5      	cmp	r5, r6
 8005788:	d11a      	bne.n	80057c0 <_printf_common+0xc8>
 800578a:	2000      	movs	r0, #0
 800578c:	e008      	b.n	80057a0 <_printf_common+0xa8>
 800578e:	2301      	movs	r3, #1
 8005790:	4652      	mov	r2, sl
 8005792:	4649      	mov	r1, r9
 8005794:	4638      	mov	r0, r7
 8005796:	47c0      	blx	r8
 8005798:	3001      	adds	r0, #1
 800579a:	d103      	bne.n	80057a4 <_printf_common+0xac>
 800579c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057a4:	3501      	adds	r5, #1
 80057a6:	e7c6      	b.n	8005736 <_printf_common+0x3e>
 80057a8:	18e1      	adds	r1, r4, r3
 80057aa:	1c5a      	adds	r2, r3, #1
 80057ac:	2030      	movs	r0, #48	; 0x30
 80057ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80057b2:	4422      	add	r2, r4
 80057b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80057b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80057bc:	3302      	adds	r3, #2
 80057be:	e7c7      	b.n	8005750 <_printf_common+0x58>
 80057c0:	2301      	movs	r3, #1
 80057c2:	4622      	mov	r2, r4
 80057c4:	4649      	mov	r1, r9
 80057c6:	4638      	mov	r0, r7
 80057c8:	47c0      	blx	r8
 80057ca:	3001      	adds	r0, #1
 80057cc:	d0e6      	beq.n	800579c <_printf_common+0xa4>
 80057ce:	3601      	adds	r6, #1
 80057d0:	e7d9      	b.n	8005786 <_printf_common+0x8e>
	...

080057d4 <_printf_i>:
 80057d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80057d8:	7e0f      	ldrb	r7, [r1, #24]
 80057da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80057dc:	2f78      	cmp	r7, #120	; 0x78
 80057de:	4691      	mov	r9, r2
 80057e0:	4680      	mov	r8, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	469a      	mov	sl, r3
 80057e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80057ea:	d807      	bhi.n	80057fc <_printf_i+0x28>
 80057ec:	2f62      	cmp	r7, #98	; 0x62
 80057ee:	d80a      	bhi.n	8005806 <_printf_i+0x32>
 80057f0:	2f00      	cmp	r7, #0
 80057f2:	f000 80d8 	beq.w	80059a6 <_printf_i+0x1d2>
 80057f6:	2f58      	cmp	r7, #88	; 0x58
 80057f8:	f000 80a3 	beq.w	8005942 <_printf_i+0x16e>
 80057fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005800:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005804:	e03a      	b.n	800587c <_printf_i+0xa8>
 8005806:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800580a:	2b15      	cmp	r3, #21
 800580c:	d8f6      	bhi.n	80057fc <_printf_i+0x28>
 800580e:	a101      	add	r1, pc, #4	; (adr r1, 8005814 <_printf_i+0x40>)
 8005810:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005814:	0800586d 	.word	0x0800586d
 8005818:	08005881 	.word	0x08005881
 800581c:	080057fd 	.word	0x080057fd
 8005820:	080057fd 	.word	0x080057fd
 8005824:	080057fd 	.word	0x080057fd
 8005828:	080057fd 	.word	0x080057fd
 800582c:	08005881 	.word	0x08005881
 8005830:	080057fd 	.word	0x080057fd
 8005834:	080057fd 	.word	0x080057fd
 8005838:	080057fd 	.word	0x080057fd
 800583c:	080057fd 	.word	0x080057fd
 8005840:	0800598d 	.word	0x0800598d
 8005844:	080058b1 	.word	0x080058b1
 8005848:	0800596f 	.word	0x0800596f
 800584c:	080057fd 	.word	0x080057fd
 8005850:	080057fd 	.word	0x080057fd
 8005854:	080059af 	.word	0x080059af
 8005858:	080057fd 	.word	0x080057fd
 800585c:	080058b1 	.word	0x080058b1
 8005860:	080057fd 	.word	0x080057fd
 8005864:	080057fd 	.word	0x080057fd
 8005868:	08005977 	.word	0x08005977
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	602a      	str	r2, [r5, #0]
 8005874:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005878:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800587c:	2301      	movs	r3, #1
 800587e:	e0a3      	b.n	80059c8 <_printf_i+0x1f4>
 8005880:	6820      	ldr	r0, [r4, #0]
 8005882:	6829      	ldr	r1, [r5, #0]
 8005884:	0606      	lsls	r6, r0, #24
 8005886:	f101 0304 	add.w	r3, r1, #4
 800588a:	d50a      	bpl.n	80058a2 <_printf_i+0xce>
 800588c:	680e      	ldr	r6, [r1, #0]
 800588e:	602b      	str	r3, [r5, #0]
 8005890:	2e00      	cmp	r6, #0
 8005892:	da03      	bge.n	800589c <_printf_i+0xc8>
 8005894:	232d      	movs	r3, #45	; 0x2d
 8005896:	4276      	negs	r6, r6
 8005898:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800589c:	485e      	ldr	r0, [pc, #376]	; (8005a18 <_printf_i+0x244>)
 800589e:	230a      	movs	r3, #10
 80058a0:	e019      	b.n	80058d6 <_printf_i+0x102>
 80058a2:	680e      	ldr	r6, [r1, #0]
 80058a4:	602b      	str	r3, [r5, #0]
 80058a6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80058aa:	bf18      	it	ne
 80058ac:	b236      	sxthne	r6, r6
 80058ae:	e7ef      	b.n	8005890 <_printf_i+0xbc>
 80058b0:	682b      	ldr	r3, [r5, #0]
 80058b2:	6820      	ldr	r0, [r4, #0]
 80058b4:	1d19      	adds	r1, r3, #4
 80058b6:	6029      	str	r1, [r5, #0]
 80058b8:	0601      	lsls	r1, r0, #24
 80058ba:	d501      	bpl.n	80058c0 <_printf_i+0xec>
 80058bc:	681e      	ldr	r6, [r3, #0]
 80058be:	e002      	b.n	80058c6 <_printf_i+0xf2>
 80058c0:	0646      	lsls	r6, r0, #25
 80058c2:	d5fb      	bpl.n	80058bc <_printf_i+0xe8>
 80058c4:	881e      	ldrh	r6, [r3, #0]
 80058c6:	4854      	ldr	r0, [pc, #336]	; (8005a18 <_printf_i+0x244>)
 80058c8:	2f6f      	cmp	r7, #111	; 0x6f
 80058ca:	bf0c      	ite	eq
 80058cc:	2308      	moveq	r3, #8
 80058ce:	230a      	movne	r3, #10
 80058d0:	2100      	movs	r1, #0
 80058d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80058d6:	6865      	ldr	r5, [r4, #4]
 80058d8:	60a5      	str	r5, [r4, #8]
 80058da:	2d00      	cmp	r5, #0
 80058dc:	bfa2      	ittt	ge
 80058de:	6821      	ldrge	r1, [r4, #0]
 80058e0:	f021 0104 	bicge.w	r1, r1, #4
 80058e4:	6021      	strge	r1, [r4, #0]
 80058e6:	b90e      	cbnz	r6, 80058ec <_printf_i+0x118>
 80058e8:	2d00      	cmp	r5, #0
 80058ea:	d04d      	beq.n	8005988 <_printf_i+0x1b4>
 80058ec:	4615      	mov	r5, r2
 80058ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80058f2:	fb03 6711 	mls	r7, r3, r1, r6
 80058f6:	5dc7      	ldrb	r7, [r0, r7]
 80058f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80058fc:	4637      	mov	r7, r6
 80058fe:	42bb      	cmp	r3, r7
 8005900:	460e      	mov	r6, r1
 8005902:	d9f4      	bls.n	80058ee <_printf_i+0x11a>
 8005904:	2b08      	cmp	r3, #8
 8005906:	d10b      	bne.n	8005920 <_printf_i+0x14c>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	07de      	lsls	r6, r3, #31
 800590c:	d508      	bpl.n	8005920 <_printf_i+0x14c>
 800590e:	6923      	ldr	r3, [r4, #16]
 8005910:	6861      	ldr	r1, [r4, #4]
 8005912:	4299      	cmp	r1, r3
 8005914:	bfde      	ittt	le
 8005916:	2330      	movle	r3, #48	; 0x30
 8005918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800591c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005920:	1b52      	subs	r2, r2, r5
 8005922:	6122      	str	r2, [r4, #16]
 8005924:	f8cd a000 	str.w	sl, [sp]
 8005928:	464b      	mov	r3, r9
 800592a:	aa03      	add	r2, sp, #12
 800592c:	4621      	mov	r1, r4
 800592e:	4640      	mov	r0, r8
 8005930:	f7ff fee2 	bl	80056f8 <_printf_common>
 8005934:	3001      	adds	r0, #1
 8005936:	d14c      	bne.n	80059d2 <_printf_i+0x1fe>
 8005938:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800593c:	b004      	add	sp, #16
 800593e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005942:	4835      	ldr	r0, [pc, #212]	; (8005a18 <_printf_i+0x244>)
 8005944:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005948:	6829      	ldr	r1, [r5, #0]
 800594a:	6823      	ldr	r3, [r4, #0]
 800594c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005950:	6029      	str	r1, [r5, #0]
 8005952:	061d      	lsls	r5, r3, #24
 8005954:	d514      	bpl.n	8005980 <_printf_i+0x1ac>
 8005956:	07df      	lsls	r7, r3, #31
 8005958:	bf44      	itt	mi
 800595a:	f043 0320 	orrmi.w	r3, r3, #32
 800595e:	6023      	strmi	r3, [r4, #0]
 8005960:	b91e      	cbnz	r6, 800596a <_printf_i+0x196>
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	f023 0320 	bic.w	r3, r3, #32
 8005968:	6023      	str	r3, [r4, #0]
 800596a:	2310      	movs	r3, #16
 800596c:	e7b0      	b.n	80058d0 <_printf_i+0xfc>
 800596e:	6823      	ldr	r3, [r4, #0]
 8005970:	f043 0320 	orr.w	r3, r3, #32
 8005974:	6023      	str	r3, [r4, #0]
 8005976:	2378      	movs	r3, #120	; 0x78
 8005978:	4828      	ldr	r0, [pc, #160]	; (8005a1c <_printf_i+0x248>)
 800597a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800597e:	e7e3      	b.n	8005948 <_printf_i+0x174>
 8005980:	0659      	lsls	r1, r3, #25
 8005982:	bf48      	it	mi
 8005984:	b2b6      	uxthmi	r6, r6
 8005986:	e7e6      	b.n	8005956 <_printf_i+0x182>
 8005988:	4615      	mov	r5, r2
 800598a:	e7bb      	b.n	8005904 <_printf_i+0x130>
 800598c:	682b      	ldr	r3, [r5, #0]
 800598e:	6826      	ldr	r6, [r4, #0]
 8005990:	6961      	ldr	r1, [r4, #20]
 8005992:	1d18      	adds	r0, r3, #4
 8005994:	6028      	str	r0, [r5, #0]
 8005996:	0635      	lsls	r5, r6, #24
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	d501      	bpl.n	80059a0 <_printf_i+0x1cc>
 800599c:	6019      	str	r1, [r3, #0]
 800599e:	e002      	b.n	80059a6 <_printf_i+0x1d2>
 80059a0:	0670      	lsls	r0, r6, #25
 80059a2:	d5fb      	bpl.n	800599c <_printf_i+0x1c8>
 80059a4:	8019      	strh	r1, [r3, #0]
 80059a6:	2300      	movs	r3, #0
 80059a8:	6123      	str	r3, [r4, #16]
 80059aa:	4615      	mov	r5, r2
 80059ac:	e7ba      	b.n	8005924 <_printf_i+0x150>
 80059ae:	682b      	ldr	r3, [r5, #0]
 80059b0:	1d1a      	adds	r2, r3, #4
 80059b2:	602a      	str	r2, [r5, #0]
 80059b4:	681d      	ldr	r5, [r3, #0]
 80059b6:	6862      	ldr	r2, [r4, #4]
 80059b8:	2100      	movs	r1, #0
 80059ba:	4628      	mov	r0, r5
 80059bc:	f7fa fc40 	bl	8000240 <memchr>
 80059c0:	b108      	cbz	r0, 80059c6 <_printf_i+0x1f2>
 80059c2:	1b40      	subs	r0, r0, r5
 80059c4:	6060      	str	r0, [r4, #4]
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	6123      	str	r3, [r4, #16]
 80059ca:	2300      	movs	r3, #0
 80059cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80059d0:	e7a8      	b.n	8005924 <_printf_i+0x150>
 80059d2:	6923      	ldr	r3, [r4, #16]
 80059d4:	462a      	mov	r2, r5
 80059d6:	4649      	mov	r1, r9
 80059d8:	4640      	mov	r0, r8
 80059da:	47d0      	blx	sl
 80059dc:	3001      	adds	r0, #1
 80059de:	d0ab      	beq.n	8005938 <_printf_i+0x164>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	079b      	lsls	r3, r3, #30
 80059e4:	d413      	bmi.n	8005a0e <_printf_i+0x23a>
 80059e6:	68e0      	ldr	r0, [r4, #12]
 80059e8:	9b03      	ldr	r3, [sp, #12]
 80059ea:	4298      	cmp	r0, r3
 80059ec:	bfb8      	it	lt
 80059ee:	4618      	movlt	r0, r3
 80059f0:	e7a4      	b.n	800593c <_printf_i+0x168>
 80059f2:	2301      	movs	r3, #1
 80059f4:	4632      	mov	r2, r6
 80059f6:	4649      	mov	r1, r9
 80059f8:	4640      	mov	r0, r8
 80059fa:	47d0      	blx	sl
 80059fc:	3001      	adds	r0, #1
 80059fe:	d09b      	beq.n	8005938 <_printf_i+0x164>
 8005a00:	3501      	adds	r5, #1
 8005a02:	68e3      	ldr	r3, [r4, #12]
 8005a04:	9903      	ldr	r1, [sp, #12]
 8005a06:	1a5b      	subs	r3, r3, r1
 8005a08:	42ab      	cmp	r3, r5
 8005a0a:	dcf2      	bgt.n	80059f2 <_printf_i+0x21e>
 8005a0c:	e7eb      	b.n	80059e6 <_printf_i+0x212>
 8005a0e:	2500      	movs	r5, #0
 8005a10:	f104 0619 	add.w	r6, r4, #25
 8005a14:	e7f5      	b.n	8005a02 <_printf_i+0x22e>
 8005a16:	bf00      	nop
 8005a18:	08006512 	.word	0x08006512
 8005a1c:	08006523 	.word	0x08006523

08005a20 <_sbrk_r>:
 8005a20:	b538      	push	{r3, r4, r5, lr}
 8005a22:	4d06      	ldr	r5, [pc, #24]	; (8005a3c <_sbrk_r+0x1c>)
 8005a24:	2300      	movs	r3, #0
 8005a26:	4604      	mov	r4, r0
 8005a28:	4608      	mov	r0, r1
 8005a2a:	602b      	str	r3, [r5, #0]
 8005a2c:	f7fb f9ca 	bl	8000dc4 <_sbrk>
 8005a30:	1c43      	adds	r3, r0, #1
 8005a32:	d102      	bne.n	8005a3a <_sbrk_r+0x1a>
 8005a34:	682b      	ldr	r3, [r5, #0]
 8005a36:	b103      	cbz	r3, 8005a3a <_sbrk_r+0x1a>
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	bd38      	pop	{r3, r4, r5, pc}
 8005a3c:	2000025c 	.word	0x2000025c

08005a40 <__swbuf_r>:
 8005a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a42:	460e      	mov	r6, r1
 8005a44:	4614      	mov	r4, r2
 8005a46:	4605      	mov	r5, r0
 8005a48:	b118      	cbz	r0, 8005a52 <__swbuf_r+0x12>
 8005a4a:	6983      	ldr	r3, [r0, #24]
 8005a4c:	b90b      	cbnz	r3, 8005a52 <__swbuf_r+0x12>
 8005a4e:	f000 f9d9 	bl	8005e04 <__sinit>
 8005a52:	4b21      	ldr	r3, [pc, #132]	; (8005ad8 <__swbuf_r+0x98>)
 8005a54:	429c      	cmp	r4, r3
 8005a56:	d12b      	bne.n	8005ab0 <__swbuf_r+0x70>
 8005a58:	686c      	ldr	r4, [r5, #4]
 8005a5a:	69a3      	ldr	r3, [r4, #24]
 8005a5c:	60a3      	str	r3, [r4, #8]
 8005a5e:	89a3      	ldrh	r3, [r4, #12]
 8005a60:	071a      	lsls	r2, r3, #28
 8005a62:	d52f      	bpl.n	8005ac4 <__swbuf_r+0x84>
 8005a64:	6923      	ldr	r3, [r4, #16]
 8005a66:	b36b      	cbz	r3, 8005ac4 <__swbuf_r+0x84>
 8005a68:	6923      	ldr	r3, [r4, #16]
 8005a6a:	6820      	ldr	r0, [r4, #0]
 8005a6c:	1ac0      	subs	r0, r0, r3
 8005a6e:	6963      	ldr	r3, [r4, #20]
 8005a70:	b2f6      	uxtb	r6, r6
 8005a72:	4283      	cmp	r3, r0
 8005a74:	4637      	mov	r7, r6
 8005a76:	dc04      	bgt.n	8005a82 <__swbuf_r+0x42>
 8005a78:	4621      	mov	r1, r4
 8005a7a:	4628      	mov	r0, r5
 8005a7c:	f000 f92e 	bl	8005cdc <_fflush_r>
 8005a80:	bb30      	cbnz	r0, 8005ad0 <__swbuf_r+0x90>
 8005a82:	68a3      	ldr	r3, [r4, #8]
 8005a84:	3b01      	subs	r3, #1
 8005a86:	60a3      	str	r3, [r4, #8]
 8005a88:	6823      	ldr	r3, [r4, #0]
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	6022      	str	r2, [r4, #0]
 8005a8e:	701e      	strb	r6, [r3, #0]
 8005a90:	6963      	ldr	r3, [r4, #20]
 8005a92:	3001      	adds	r0, #1
 8005a94:	4283      	cmp	r3, r0
 8005a96:	d004      	beq.n	8005aa2 <__swbuf_r+0x62>
 8005a98:	89a3      	ldrh	r3, [r4, #12]
 8005a9a:	07db      	lsls	r3, r3, #31
 8005a9c:	d506      	bpl.n	8005aac <__swbuf_r+0x6c>
 8005a9e:	2e0a      	cmp	r6, #10
 8005aa0:	d104      	bne.n	8005aac <__swbuf_r+0x6c>
 8005aa2:	4621      	mov	r1, r4
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	f000 f919 	bl	8005cdc <_fflush_r>
 8005aaa:	b988      	cbnz	r0, 8005ad0 <__swbuf_r+0x90>
 8005aac:	4638      	mov	r0, r7
 8005aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ab0:	4b0a      	ldr	r3, [pc, #40]	; (8005adc <__swbuf_r+0x9c>)
 8005ab2:	429c      	cmp	r4, r3
 8005ab4:	d101      	bne.n	8005aba <__swbuf_r+0x7a>
 8005ab6:	68ac      	ldr	r4, [r5, #8]
 8005ab8:	e7cf      	b.n	8005a5a <__swbuf_r+0x1a>
 8005aba:	4b09      	ldr	r3, [pc, #36]	; (8005ae0 <__swbuf_r+0xa0>)
 8005abc:	429c      	cmp	r4, r3
 8005abe:	bf08      	it	eq
 8005ac0:	68ec      	ldreq	r4, [r5, #12]
 8005ac2:	e7ca      	b.n	8005a5a <__swbuf_r+0x1a>
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	f000 f80c 	bl	8005ae4 <__swsetup_r>
 8005acc:	2800      	cmp	r0, #0
 8005ace:	d0cb      	beq.n	8005a68 <__swbuf_r+0x28>
 8005ad0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8005ad4:	e7ea      	b.n	8005aac <__swbuf_r+0x6c>
 8005ad6:	bf00      	nop
 8005ad8:	08006554 	.word	0x08006554
 8005adc:	08006574 	.word	0x08006574
 8005ae0:	08006534 	.word	0x08006534

08005ae4 <__swsetup_r>:
 8005ae4:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <__swsetup_r+0xcc>)
 8005ae6:	b570      	push	{r4, r5, r6, lr}
 8005ae8:	681d      	ldr	r5, [r3, #0]
 8005aea:	4606      	mov	r6, r0
 8005aec:	460c      	mov	r4, r1
 8005aee:	b125      	cbz	r5, 8005afa <__swsetup_r+0x16>
 8005af0:	69ab      	ldr	r3, [r5, #24]
 8005af2:	b913      	cbnz	r3, 8005afa <__swsetup_r+0x16>
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f985 	bl	8005e04 <__sinit>
 8005afa:	4b2e      	ldr	r3, [pc, #184]	; (8005bb4 <__swsetup_r+0xd0>)
 8005afc:	429c      	cmp	r4, r3
 8005afe:	d10f      	bne.n	8005b20 <__swsetup_r+0x3c>
 8005b00:	686c      	ldr	r4, [r5, #4]
 8005b02:	89a3      	ldrh	r3, [r4, #12]
 8005b04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b08:	0719      	lsls	r1, r3, #28
 8005b0a:	d42c      	bmi.n	8005b66 <__swsetup_r+0x82>
 8005b0c:	06dd      	lsls	r5, r3, #27
 8005b0e:	d411      	bmi.n	8005b34 <__swsetup_r+0x50>
 8005b10:	2309      	movs	r3, #9
 8005b12:	6033      	str	r3, [r6, #0]
 8005b14:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b18:	81a3      	strh	r3, [r4, #12]
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b1e:	e03e      	b.n	8005b9e <__swsetup_r+0xba>
 8005b20:	4b25      	ldr	r3, [pc, #148]	; (8005bb8 <__swsetup_r+0xd4>)
 8005b22:	429c      	cmp	r4, r3
 8005b24:	d101      	bne.n	8005b2a <__swsetup_r+0x46>
 8005b26:	68ac      	ldr	r4, [r5, #8]
 8005b28:	e7eb      	b.n	8005b02 <__swsetup_r+0x1e>
 8005b2a:	4b24      	ldr	r3, [pc, #144]	; (8005bbc <__swsetup_r+0xd8>)
 8005b2c:	429c      	cmp	r4, r3
 8005b2e:	bf08      	it	eq
 8005b30:	68ec      	ldreq	r4, [r5, #12]
 8005b32:	e7e6      	b.n	8005b02 <__swsetup_r+0x1e>
 8005b34:	0758      	lsls	r0, r3, #29
 8005b36:	d512      	bpl.n	8005b5e <__swsetup_r+0x7a>
 8005b38:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b3a:	b141      	cbz	r1, 8005b4e <__swsetup_r+0x6a>
 8005b3c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b40:	4299      	cmp	r1, r3
 8005b42:	d002      	beq.n	8005b4a <__swsetup_r+0x66>
 8005b44:	4630      	mov	r0, r6
 8005b46:	f7ff fa41 	bl	8004fcc <_free_r>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	2300      	movs	r3, #0
 8005b58:	6063      	str	r3, [r4, #4]
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	6023      	str	r3, [r4, #0]
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f043 0308 	orr.w	r3, r3, #8
 8005b64:	81a3      	strh	r3, [r4, #12]
 8005b66:	6923      	ldr	r3, [r4, #16]
 8005b68:	b94b      	cbnz	r3, 8005b7e <__swsetup_r+0x9a>
 8005b6a:	89a3      	ldrh	r3, [r4, #12]
 8005b6c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b74:	d003      	beq.n	8005b7e <__swsetup_r+0x9a>
 8005b76:	4621      	mov	r1, r4
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f000 fa09 	bl	8005f90 <__smakebuf_r>
 8005b7e:	89a0      	ldrh	r0, [r4, #12]
 8005b80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b84:	f010 0301 	ands.w	r3, r0, #1
 8005b88:	d00a      	beq.n	8005ba0 <__swsetup_r+0xbc>
 8005b8a:	2300      	movs	r3, #0
 8005b8c:	60a3      	str	r3, [r4, #8]
 8005b8e:	6963      	ldr	r3, [r4, #20]
 8005b90:	425b      	negs	r3, r3
 8005b92:	61a3      	str	r3, [r4, #24]
 8005b94:	6923      	ldr	r3, [r4, #16]
 8005b96:	b943      	cbnz	r3, 8005baa <__swsetup_r+0xc6>
 8005b98:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b9c:	d1ba      	bne.n	8005b14 <__swsetup_r+0x30>
 8005b9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ba0:	0781      	lsls	r1, r0, #30
 8005ba2:	bf58      	it	pl
 8005ba4:	6963      	ldrpl	r3, [r4, #20]
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	e7f4      	b.n	8005b94 <__swsetup_r+0xb0>
 8005baa:	2000      	movs	r0, #0
 8005bac:	e7f7      	b.n	8005b9e <__swsetup_r+0xba>
 8005bae:	bf00      	nop
 8005bb0:	200000a4 	.word	0x200000a4
 8005bb4:	08006554 	.word	0x08006554
 8005bb8:	08006574 	.word	0x08006574
 8005bbc:	08006534 	.word	0x08006534

08005bc0 <abort>:
 8005bc0:	b508      	push	{r3, lr}
 8005bc2:	2006      	movs	r0, #6
 8005bc4:	f000 fab0 	bl	8006128 <raise>
 8005bc8:	2001      	movs	r0, #1
 8005bca:	f7fb f883 	bl	8000cd4 <_exit>
	...

08005bd0 <__sflush_r>:
 8005bd0:	898a      	ldrh	r2, [r1, #12]
 8005bd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bd6:	4605      	mov	r5, r0
 8005bd8:	0710      	lsls	r0, r2, #28
 8005bda:	460c      	mov	r4, r1
 8005bdc:	d458      	bmi.n	8005c90 <__sflush_r+0xc0>
 8005bde:	684b      	ldr	r3, [r1, #4]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	dc05      	bgt.n	8005bf0 <__sflush_r+0x20>
 8005be4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	dc02      	bgt.n	8005bf0 <__sflush_r+0x20>
 8005bea:	2000      	movs	r0, #0
 8005bec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	d0f9      	beq.n	8005bea <__sflush_r+0x1a>
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bfc:	682f      	ldr	r7, [r5, #0]
 8005bfe:	602b      	str	r3, [r5, #0]
 8005c00:	d032      	beq.n	8005c68 <__sflush_r+0x98>
 8005c02:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005c04:	89a3      	ldrh	r3, [r4, #12]
 8005c06:	075a      	lsls	r2, r3, #29
 8005c08:	d505      	bpl.n	8005c16 <__sflush_r+0x46>
 8005c0a:	6863      	ldr	r3, [r4, #4]
 8005c0c:	1ac0      	subs	r0, r0, r3
 8005c0e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c10:	b10b      	cbz	r3, 8005c16 <__sflush_r+0x46>
 8005c12:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c14:	1ac0      	subs	r0, r0, r3
 8005c16:	2300      	movs	r3, #0
 8005c18:	4602      	mov	r2, r0
 8005c1a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c1c:	6a21      	ldr	r1, [r4, #32]
 8005c1e:	4628      	mov	r0, r5
 8005c20:	47b0      	blx	r6
 8005c22:	1c43      	adds	r3, r0, #1
 8005c24:	89a3      	ldrh	r3, [r4, #12]
 8005c26:	d106      	bne.n	8005c36 <__sflush_r+0x66>
 8005c28:	6829      	ldr	r1, [r5, #0]
 8005c2a:	291d      	cmp	r1, #29
 8005c2c:	d82c      	bhi.n	8005c88 <__sflush_r+0xb8>
 8005c2e:	4a2a      	ldr	r2, [pc, #168]	; (8005cd8 <__sflush_r+0x108>)
 8005c30:	40ca      	lsrs	r2, r1
 8005c32:	07d6      	lsls	r6, r2, #31
 8005c34:	d528      	bpl.n	8005c88 <__sflush_r+0xb8>
 8005c36:	2200      	movs	r2, #0
 8005c38:	6062      	str	r2, [r4, #4]
 8005c3a:	04d9      	lsls	r1, r3, #19
 8005c3c:	6922      	ldr	r2, [r4, #16]
 8005c3e:	6022      	str	r2, [r4, #0]
 8005c40:	d504      	bpl.n	8005c4c <__sflush_r+0x7c>
 8005c42:	1c42      	adds	r2, r0, #1
 8005c44:	d101      	bne.n	8005c4a <__sflush_r+0x7a>
 8005c46:	682b      	ldr	r3, [r5, #0]
 8005c48:	b903      	cbnz	r3, 8005c4c <__sflush_r+0x7c>
 8005c4a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c4c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c4e:	602f      	str	r7, [r5, #0]
 8005c50:	2900      	cmp	r1, #0
 8005c52:	d0ca      	beq.n	8005bea <__sflush_r+0x1a>
 8005c54:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c58:	4299      	cmp	r1, r3
 8005c5a:	d002      	beq.n	8005c62 <__sflush_r+0x92>
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	f7ff f9b5 	bl	8004fcc <_free_r>
 8005c62:	2000      	movs	r0, #0
 8005c64:	6360      	str	r0, [r4, #52]	; 0x34
 8005c66:	e7c1      	b.n	8005bec <__sflush_r+0x1c>
 8005c68:	6a21      	ldr	r1, [r4, #32]
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	47b0      	blx	r6
 8005c70:	1c41      	adds	r1, r0, #1
 8005c72:	d1c7      	bne.n	8005c04 <__sflush_r+0x34>
 8005c74:	682b      	ldr	r3, [r5, #0]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d0c4      	beq.n	8005c04 <__sflush_r+0x34>
 8005c7a:	2b1d      	cmp	r3, #29
 8005c7c:	d001      	beq.n	8005c82 <__sflush_r+0xb2>
 8005c7e:	2b16      	cmp	r3, #22
 8005c80:	d101      	bne.n	8005c86 <__sflush_r+0xb6>
 8005c82:	602f      	str	r7, [r5, #0]
 8005c84:	e7b1      	b.n	8005bea <__sflush_r+0x1a>
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	e7ad      	b.n	8005bec <__sflush_r+0x1c>
 8005c90:	690f      	ldr	r7, [r1, #16]
 8005c92:	2f00      	cmp	r7, #0
 8005c94:	d0a9      	beq.n	8005bea <__sflush_r+0x1a>
 8005c96:	0793      	lsls	r3, r2, #30
 8005c98:	680e      	ldr	r6, [r1, #0]
 8005c9a:	bf08      	it	eq
 8005c9c:	694b      	ldreq	r3, [r1, #20]
 8005c9e:	600f      	str	r7, [r1, #0]
 8005ca0:	bf18      	it	ne
 8005ca2:	2300      	movne	r3, #0
 8005ca4:	eba6 0807 	sub.w	r8, r6, r7
 8005ca8:	608b      	str	r3, [r1, #8]
 8005caa:	f1b8 0f00 	cmp.w	r8, #0
 8005cae:	dd9c      	ble.n	8005bea <__sflush_r+0x1a>
 8005cb0:	6a21      	ldr	r1, [r4, #32]
 8005cb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005cb4:	4643      	mov	r3, r8
 8005cb6:	463a      	mov	r2, r7
 8005cb8:	4628      	mov	r0, r5
 8005cba:	47b0      	blx	r6
 8005cbc:	2800      	cmp	r0, #0
 8005cbe:	dc06      	bgt.n	8005cce <__sflush_r+0xfe>
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cc6:	81a3      	strh	r3, [r4, #12]
 8005cc8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005ccc:	e78e      	b.n	8005bec <__sflush_r+0x1c>
 8005cce:	4407      	add	r7, r0
 8005cd0:	eba8 0800 	sub.w	r8, r8, r0
 8005cd4:	e7e9      	b.n	8005caa <__sflush_r+0xda>
 8005cd6:	bf00      	nop
 8005cd8:	20400001 	.word	0x20400001

08005cdc <_fflush_r>:
 8005cdc:	b538      	push	{r3, r4, r5, lr}
 8005cde:	690b      	ldr	r3, [r1, #16]
 8005ce0:	4605      	mov	r5, r0
 8005ce2:	460c      	mov	r4, r1
 8005ce4:	b913      	cbnz	r3, 8005cec <_fflush_r+0x10>
 8005ce6:	2500      	movs	r5, #0
 8005ce8:	4628      	mov	r0, r5
 8005cea:	bd38      	pop	{r3, r4, r5, pc}
 8005cec:	b118      	cbz	r0, 8005cf6 <_fflush_r+0x1a>
 8005cee:	6983      	ldr	r3, [r0, #24]
 8005cf0:	b90b      	cbnz	r3, 8005cf6 <_fflush_r+0x1a>
 8005cf2:	f000 f887 	bl	8005e04 <__sinit>
 8005cf6:	4b14      	ldr	r3, [pc, #80]	; (8005d48 <_fflush_r+0x6c>)
 8005cf8:	429c      	cmp	r4, r3
 8005cfa:	d11b      	bne.n	8005d34 <_fflush_r+0x58>
 8005cfc:	686c      	ldr	r4, [r5, #4]
 8005cfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d0ef      	beq.n	8005ce6 <_fflush_r+0xa>
 8005d06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005d08:	07d0      	lsls	r0, r2, #31
 8005d0a:	d404      	bmi.n	8005d16 <_fflush_r+0x3a>
 8005d0c:	0599      	lsls	r1, r3, #22
 8005d0e:	d402      	bmi.n	8005d16 <_fflush_r+0x3a>
 8005d10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d12:	f000 f915 	bl	8005f40 <__retarget_lock_acquire_recursive>
 8005d16:	4628      	mov	r0, r5
 8005d18:	4621      	mov	r1, r4
 8005d1a:	f7ff ff59 	bl	8005bd0 <__sflush_r>
 8005d1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d20:	07da      	lsls	r2, r3, #31
 8005d22:	4605      	mov	r5, r0
 8005d24:	d4e0      	bmi.n	8005ce8 <_fflush_r+0xc>
 8005d26:	89a3      	ldrh	r3, [r4, #12]
 8005d28:	059b      	lsls	r3, r3, #22
 8005d2a:	d4dd      	bmi.n	8005ce8 <_fflush_r+0xc>
 8005d2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d2e:	f000 f908 	bl	8005f42 <__retarget_lock_release_recursive>
 8005d32:	e7d9      	b.n	8005ce8 <_fflush_r+0xc>
 8005d34:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <_fflush_r+0x70>)
 8005d36:	429c      	cmp	r4, r3
 8005d38:	d101      	bne.n	8005d3e <_fflush_r+0x62>
 8005d3a:	68ac      	ldr	r4, [r5, #8]
 8005d3c:	e7df      	b.n	8005cfe <_fflush_r+0x22>
 8005d3e:	4b04      	ldr	r3, [pc, #16]	; (8005d50 <_fflush_r+0x74>)
 8005d40:	429c      	cmp	r4, r3
 8005d42:	bf08      	it	eq
 8005d44:	68ec      	ldreq	r4, [r5, #12]
 8005d46:	e7da      	b.n	8005cfe <_fflush_r+0x22>
 8005d48:	08006554 	.word	0x08006554
 8005d4c:	08006574 	.word	0x08006574
 8005d50:	08006534 	.word	0x08006534

08005d54 <std>:
 8005d54:	2300      	movs	r3, #0
 8005d56:	b510      	push	{r4, lr}
 8005d58:	4604      	mov	r4, r0
 8005d5a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d62:	6083      	str	r3, [r0, #8]
 8005d64:	8181      	strh	r1, [r0, #12]
 8005d66:	6643      	str	r3, [r0, #100]	; 0x64
 8005d68:	81c2      	strh	r2, [r0, #14]
 8005d6a:	6183      	str	r3, [r0, #24]
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	2208      	movs	r2, #8
 8005d70:	305c      	adds	r0, #92	; 0x5c
 8005d72:	f7fe ffe3 	bl	8004d3c <memset>
 8005d76:	4b05      	ldr	r3, [pc, #20]	; (8005d8c <std+0x38>)
 8005d78:	6263      	str	r3, [r4, #36]	; 0x24
 8005d7a:	4b05      	ldr	r3, [pc, #20]	; (8005d90 <std+0x3c>)
 8005d7c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d7e:	4b05      	ldr	r3, [pc, #20]	; (8005d94 <std+0x40>)
 8005d80:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d82:	4b05      	ldr	r3, [pc, #20]	; (8005d98 <std+0x44>)
 8005d84:	6224      	str	r4, [r4, #32]
 8005d86:	6323      	str	r3, [r4, #48]	; 0x30
 8005d88:	bd10      	pop	{r4, pc}
 8005d8a:	bf00      	nop
 8005d8c:	08006161 	.word	0x08006161
 8005d90:	08006183 	.word	0x08006183
 8005d94:	080061bb 	.word	0x080061bb
 8005d98:	080061df 	.word	0x080061df

08005d9c <_cleanup_r>:
 8005d9c:	4901      	ldr	r1, [pc, #4]	; (8005da4 <_cleanup_r+0x8>)
 8005d9e:	f000 b8af 	b.w	8005f00 <_fwalk_reent>
 8005da2:	bf00      	nop
 8005da4:	08005cdd 	.word	0x08005cdd

08005da8 <__sfmoreglue>:
 8005da8:	b570      	push	{r4, r5, r6, lr}
 8005daa:	2268      	movs	r2, #104	; 0x68
 8005dac:	1e4d      	subs	r5, r1, #1
 8005dae:	4355      	muls	r5, r2
 8005db0:	460e      	mov	r6, r1
 8005db2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005db6:	f7ff f975 	bl	80050a4 <_malloc_r>
 8005dba:	4604      	mov	r4, r0
 8005dbc:	b140      	cbz	r0, 8005dd0 <__sfmoreglue+0x28>
 8005dbe:	2100      	movs	r1, #0
 8005dc0:	e9c0 1600 	strd	r1, r6, [r0]
 8005dc4:	300c      	adds	r0, #12
 8005dc6:	60a0      	str	r0, [r4, #8]
 8005dc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dcc:	f7fe ffb6 	bl	8004d3c <memset>
 8005dd0:	4620      	mov	r0, r4
 8005dd2:	bd70      	pop	{r4, r5, r6, pc}

08005dd4 <__sfp_lock_acquire>:
 8005dd4:	4801      	ldr	r0, [pc, #4]	; (8005ddc <__sfp_lock_acquire+0x8>)
 8005dd6:	f000 b8b3 	b.w	8005f40 <__retarget_lock_acquire_recursive>
 8005dda:	bf00      	nop
 8005ddc:	20000259 	.word	0x20000259

08005de0 <__sfp_lock_release>:
 8005de0:	4801      	ldr	r0, [pc, #4]	; (8005de8 <__sfp_lock_release+0x8>)
 8005de2:	f000 b8ae 	b.w	8005f42 <__retarget_lock_release_recursive>
 8005de6:	bf00      	nop
 8005de8:	20000259 	.word	0x20000259

08005dec <__sinit_lock_acquire>:
 8005dec:	4801      	ldr	r0, [pc, #4]	; (8005df4 <__sinit_lock_acquire+0x8>)
 8005dee:	f000 b8a7 	b.w	8005f40 <__retarget_lock_acquire_recursive>
 8005df2:	bf00      	nop
 8005df4:	2000025a 	.word	0x2000025a

08005df8 <__sinit_lock_release>:
 8005df8:	4801      	ldr	r0, [pc, #4]	; (8005e00 <__sinit_lock_release+0x8>)
 8005dfa:	f000 b8a2 	b.w	8005f42 <__retarget_lock_release_recursive>
 8005dfe:	bf00      	nop
 8005e00:	2000025a 	.word	0x2000025a

08005e04 <__sinit>:
 8005e04:	b510      	push	{r4, lr}
 8005e06:	4604      	mov	r4, r0
 8005e08:	f7ff fff0 	bl	8005dec <__sinit_lock_acquire>
 8005e0c:	69a3      	ldr	r3, [r4, #24]
 8005e0e:	b11b      	cbz	r3, 8005e18 <__sinit+0x14>
 8005e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e14:	f7ff bff0 	b.w	8005df8 <__sinit_lock_release>
 8005e18:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e1c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <__sinit+0x68>)
 8005e20:	4a13      	ldr	r2, [pc, #76]	; (8005e70 <__sinit+0x6c>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e26:	42a3      	cmp	r3, r4
 8005e28:	bf04      	itt	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	61a3      	streq	r3, [r4, #24]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 f820 	bl	8005e74 <__sfp>
 8005e34:	6060      	str	r0, [r4, #4]
 8005e36:	4620      	mov	r0, r4
 8005e38:	f000 f81c 	bl	8005e74 <__sfp>
 8005e3c:	60a0      	str	r0, [r4, #8]
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 f818 	bl	8005e74 <__sfp>
 8005e44:	2200      	movs	r2, #0
 8005e46:	60e0      	str	r0, [r4, #12]
 8005e48:	2104      	movs	r1, #4
 8005e4a:	6860      	ldr	r0, [r4, #4]
 8005e4c:	f7ff ff82 	bl	8005d54 <std>
 8005e50:	68a0      	ldr	r0, [r4, #8]
 8005e52:	2201      	movs	r2, #1
 8005e54:	2109      	movs	r1, #9
 8005e56:	f7ff ff7d 	bl	8005d54 <std>
 8005e5a:	68e0      	ldr	r0, [r4, #12]
 8005e5c:	2202      	movs	r2, #2
 8005e5e:	2112      	movs	r1, #18
 8005e60:	f7ff ff78 	bl	8005d54 <std>
 8005e64:	2301      	movs	r3, #1
 8005e66:	61a3      	str	r3, [r4, #24]
 8005e68:	e7d2      	b.n	8005e10 <__sinit+0xc>
 8005e6a:	bf00      	nop
 8005e6c:	0800634c 	.word	0x0800634c
 8005e70:	08005d9d 	.word	0x08005d9d

08005e74 <__sfp>:
 8005e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e76:	4607      	mov	r7, r0
 8005e78:	f7ff ffac 	bl	8005dd4 <__sfp_lock_acquire>
 8005e7c:	4b1e      	ldr	r3, [pc, #120]	; (8005ef8 <__sfp+0x84>)
 8005e7e:	681e      	ldr	r6, [r3, #0]
 8005e80:	69b3      	ldr	r3, [r6, #24]
 8005e82:	b913      	cbnz	r3, 8005e8a <__sfp+0x16>
 8005e84:	4630      	mov	r0, r6
 8005e86:	f7ff ffbd 	bl	8005e04 <__sinit>
 8005e8a:	3648      	adds	r6, #72	; 0x48
 8005e8c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	d503      	bpl.n	8005e9c <__sfp+0x28>
 8005e94:	6833      	ldr	r3, [r6, #0]
 8005e96:	b30b      	cbz	r3, 8005edc <__sfp+0x68>
 8005e98:	6836      	ldr	r6, [r6, #0]
 8005e9a:	e7f7      	b.n	8005e8c <__sfp+0x18>
 8005e9c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005ea0:	b9d5      	cbnz	r5, 8005ed8 <__sfp+0x64>
 8005ea2:	4b16      	ldr	r3, [pc, #88]	; (8005efc <__sfp+0x88>)
 8005ea4:	60e3      	str	r3, [r4, #12]
 8005ea6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005eaa:	6665      	str	r5, [r4, #100]	; 0x64
 8005eac:	f000 f847 	bl	8005f3e <__retarget_lock_init_recursive>
 8005eb0:	f7ff ff96 	bl	8005de0 <__sfp_lock_release>
 8005eb4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005eb8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005ebc:	6025      	str	r5, [r4, #0]
 8005ebe:	61a5      	str	r5, [r4, #24]
 8005ec0:	2208      	movs	r2, #8
 8005ec2:	4629      	mov	r1, r5
 8005ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005ec8:	f7fe ff38 	bl	8004d3c <memset>
 8005ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ed4:	4620      	mov	r0, r4
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	3468      	adds	r4, #104	; 0x68
 8005eda:	e7d9      	b.n	8005e90 <__sfp+0x1c>
 8005edc:	2104      	movs	r1, #4
 8005ede:	4638      	mov	r0, r7
 8005ee0:	f7ff ff62 	bl	8005da8 <__sfmoreglue>
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	6030      	str	r0, [r6, #0]
 8005ee8:	2800      	cmp	r0, #0
 8005eea:	d1d5      	bne.n	8005e98 <__sfp+0x24>
 8005eec:	f7ff ff78 	bl	8005de0 <__sfp_lock_release>
 8005ef0:	230c      	movs	r3, #12
 8005ef2:	603b      	str	r3, [r7, #0]
 8005ef4:	e7ee      	b.n	8005ed4 <__sfp+0x60>
 8005ef6:	bf00      	nop
 8005ef8:	0800634c 	.word	0x0800634c
 8005efc:	ffff0001 	.word	0xffff0001

08005f00 <_fwalk_reent>:
 8005f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005f04:	4606      	mov	r6, r0
 8005f06:	4688      	mov	r8, r1
 8005f08:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005f0c:	2700      	movs	r7, #0
 8005f0e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f12:	f1b9 0901 	subs.w	r9, r9, #1
 8005f16:	d505      	bpl.n	8005f24 <_fwalk_reent+0x24>
 8005f18:	6824      	ldr	r4, [r4, #0]
 8005f1a:	2c00      	cmp	r4, #0
 8005f1c:	d1f7      	bne.n	8005f0e <_fwalk_reent+0xe>
 8005f1e:	4638      	mov	r0, r7
 8005f20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f24:	89ab      	ldrh	r3, [r5, #12]
 8005f26:	2b01      	cmp	r3, #1
 8005f28:	d907      	bls.n	8005f3a <_fwalk_reent+0x3a>
 8005f2a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	d003      	beq.n	8005f3a <_fwalk_reent+0x3a>
 8005f32:	4629      	mov	r1, r5
 8005f34:	4630      	mov	r0, r6
 8005f36:	47c0      	blx	r8
 8005f38:	4307      	orrs	r7, r0
 8005f3a:	3568      	adds	r5, #104	; 0x68
 8005f3c:	e7e9      	b.n	8005f12 <_fwalk_reent+0x12>

08005f3e <__retarget_lock_init_recursive>:
 8005f3e:	4770      	bx	lr

08005f40 <__retarget_lock_acquire_recursive>:
 8005f40:	4770      	bx	lr

08005f42 <__retarget_lock_release_recursive>:
 8005f42:	4770      	bx	lr

08005f44 <__swhatbuf_r>:
 8005f44:	b570      	push	{r4, r5, r6, lr}
 8005f46:	460e      	mov	r6, r1
 8005f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f4c:	2900      	cmp	r1, #0
 8005f4e:	b096      	sub	sp, #88	; 0x58
 8005f50:	4614      	mov	r4, r2
 8005f52:	461d      	mov	r5, r3
 8005f54:	da08      	bge.n	8005f68 <__swhatbuf_r+0x24>
 8005f56:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	602a      	str	r2, [r5, #0]
 8005f5e:	061a      	lsls	r2, r3, #24
 8005f60:	d410      	bmi.n	8005f84 <__swhatbuf_r+0x40>
 8005f62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f66:	e00e      	b.n	8005f86 <__swhatbuf_r+0x42>
 8005f68:	466a      	mov	r2, sp
 8005f6a:	f000 f95f 	bl	800622c <_fstat_r>
 8005f6e:	2800      	cmp	r0, #0
 8005f70:	dbf1      	blt.n	8005f56 <__swhatbuf_r+0x12>
 8005f72:	9a01      	ldr	r2, [sp, #4]
 8005f74:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f78:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f7c:	425a      	negs	r2, r3
 8005f7e:	415a      	adcs	r2, r3
 8005f80:	602a      	str	r2, [r5, #0]
 8005f82:	e7ee      	b.n	8005f62 <__swhatbuf_r+0x1e>
 8005f84:	2340      	movs	r3, #64	; 0x40
 8005f86:	2000      	movs	r0, #0
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	b016      	add	sp, #88	; 0x58
 8005f8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f90 <__smakebuf_r>:
 8005f90:	898b      	ldrh	r3, [r1, #12]
 8005f92:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f94:	079d      	lsls	r5, r3, #30
 8005f96:	4606      	mov	r6, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	d507      	bpl.n	8005fac <__smakebuf_r+0x1c>
 8005f9c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005fa0:	6023      	str	r3, [r4, #0]
 8005fa2:	6123      	str	r3, [r4, #16]
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	6163      	str	r3, [r4, #20]
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	ab01      	add	r3, sp, #4
 8005fae:	466a      	mov	r2, sp
 8005fb0:	f7ff ffc8 	bl	8005f44 <__swhatbuf_r>
 8005fb4:	9900      	ldr	r1, [sp, #0]
 8005fb6:	4605      	mov	r5, r0
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f7ff f873 	bl	80050a4 <_malloc_r>
 8005fbe:	b948      	cbnz	r0, 8005fd4 <__smakebuf_r+0x44>
 8005fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fc4:	059a      	lsls	r2, r3, #22
 8005fc6:	d4ef      	bmi.n	8005fa8 <__smakebuf_r+0x18>
 8005fc8:	f023 0303 	bic.w	r3, r3, #3
 8005fcc:	f043 0302 	orr.w	r3, r3, #2
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	e7e3      	b.n	8005f9c <__smakebuf_r+0xc>
 8005fd4:	4b0d      	ldr	r3, [pc, #52]	; (800600c <__smakebuf_r+0x7c>)
 8005fd6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fd8:	89a3      	ldrh	r3, [r4, #12]
 8005fda:	6020      	str	r0, [r4, #0]
 8005fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fe0:	81a3      	strh	r3, [r4, #12]
 8005fe2:	9b00      	ldr	r3, [sp, #0]
 8005fe4:	6163      	str	r3, [r4, #20]
 8005fe6:	9b01      	ldr	r3, [sp, #4]
 8005fe8:	6120      	str	r0, [r4, #16]
 8005fea:	b15b      	cbz	r3, 8006004 <__smakebuf_r+0x74>
 8005fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005ff0:	4630      	mov	r0, r6
 8005ff2:	f000 f92d 	bl	8006250 <_isatty_r>
 8005ff6:	b128      	cbz	r0, 8006004 <__smakebuf_r+0x74>
 8005ff8:	89a3      	ldrh	r3, [r4, #12]
 8005ffa:	f023 0303 	bic.w	r3, r3, #3
 8005ffe:	f043 0301 	orr.w	r3, r3, #1
 8006002:	81a3      	strh	r3, [r4, #12]
 8006004:	89a0      	ldrh	r0, [r4, #12]
 8006006:	4305      	orrs	r5, r0
 8006008:	81a5      	strh	r5, [r4, #12]
 800600a:	e7cd      	b.n	8005fa8 <__smakebuf_r+0x18>
 800600c:	08005d9d 	.word	0x08005d9d

08006010 <memcpy>:
 8006010:	440a      	add	r2, r1
 8006012:	4291      	cmp	r1, r2
 8006014:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006018:	d100      	bne.n	800601c <memcpy+0xc>
 800601a:	4770      	bx	lr
 800601c:	b510      	push	{r4, lr}
 800601e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006022:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006026:	4291      	cmp	r1, r2
 8006028:	d1f9      	bne.n	800601e <memcpy+0xe>
 800602a:	bd10      	pop	{r4, pc}

0800602c <memmove>:
 800602c:	4288      	cmp	r0, r1
 800602e:	b510      	push	{r4, lr}
 8006030:	eb01 0402 	add.w	r4, r1, r2
 8006034:	d902      	bls.n	800603c <memmove+0x10>
 8006036:	4284      	cmp	r4, r0
 8006038:	4623      	mov	r3, r4
 800603a:	d807      	bhi.n	800604c <memmove+0x20>
 800603c:	1e43      	subs	r3, r0, #1
 800603e:	42a1      	cmp	r1, r4
 8006040:	d008      	beq.n	8006054 <memmove+0x28>
 8006042:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006046:	f803 2f01 	strb.w	r2, [r3, #1]!
 800604a:	e7f8      	b.n	800603e <memmove+0x12>
 800604c:	4402      	add	r2, r0
 800604e:	4601      	mov	r1, r0
 8006050:	428a      	cmp	r2, r1
 8006052:	d100      	bne.n	8006056 <memmove+0x2a>
 8006054:	bd10      	pop	{r4, pc}
 8006056:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800605a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800605e:	e7f7      	b.n	8006050 <memmove+0x24>

08006060 <__malloc_lock>:
 8006060:	4801      	ldr	r0, [pc, #4]	; (8006068 <__malloc_lock+0x8>)
 8006062:	f7ff bf6d 	b.w	8005f40 <__retarget_lock_acquire_recursive>
 8006066:	bf00      	nop
 8006068:	20000258 	.word	0x20000258

0800606c <__malloc_unlock>:
 800606c:	4801      	ldr	r0, [pc, #4]	; (8006074 <__malloc_unlock+0x8>)
 800606e:	f7ff bf68 	b.w	8005f42 <__retarget_lock_release_recursive>
 8006072:	bf00      	nop
 8006074:	20000258 	.word	0x20000258

08006078 <_realloc_r>:
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	4680      	mov	r8, r0
 800607e:	4614      	mov	r4, r2
 8006080:	460e      	mov	r6, r1
 8006082:	b921      	cbnz	r1, 800608e <_realloc_r+0x16>
 8006084:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006088:	4611      	mov	r1, r2
 800608a:	f7ff b80b 	b.w	80050a4 <_malloc_r>
 800608e:	b92a      	cbnz	r2, 800609c <_realloc_r+0x24>
 8006090:	f7fe ff9c 	bl	8004fcc <_free_r>
 8006094:	4625      	mov	r5, r4
 8006096:	4628      	mov	r0, r5
 8006098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800609c:	f000 f8fa 	bl	8006294 <_malloc_usable_size_r>
 80060a0:	4284      	cmp	r4, r0
 80060a2:	4607      	mov	r7, r0
 80060a4:	d802      	bhi.n	80060ac <_realloc_r+0x34>
 80060a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060aa:	d812      	bhi.n	80060d2 <_realloc_r+0x5a>
 80060ac:	4621      	mov	r1, r4
 80060ae:	4640      	mov	r0, r8
 80060b0:	f7fe fff8 	bl	80050a4 <_malloc_r>
 80060b4:	4605      	mov	r5, r0
 80060b6:	2800      	cmp	r0, #0
 80060b8:	d0ed      	beq.n	8006096 <_realloc_r+0x1e>
 80060ba:	42bc      	cmp	r4, r7
 80060bc:	4622      	mov	r2, r4
 80060be:	4631      	mov	r1, r6
 80060c0:	bf28      	it	cs
 80060c2:	463a      	movcs	r2, r7
 80060c4:	f7ff ffa4 	bl	8006010 <memcpy>
 80060c8:	4631      	mov	r1, r6
 80060ca:	4640      	mov	r0, r8
 80060cc:	f7fe ff7e 	bl	8004fcc <_free_r>
 80060d0:	e7e1      	b.n	8006096 <_realloc_r+0x1e>
 80060d2:	4635      	mov	r5, r6
 80060d4:	e7df      	b.n	8006096 <_realloc_r+0x1e>

080060d6 <_raise_r>:
 80060d6:	291f      	cmp	r1, #31
 80060d8:	b538      	push	{r3, r4, r5, lr}
 80060da:	4604      	mov	r4, r0
 80060dc:	460d      	mov	r5, r1
 80060de:	d904      	bls.n	80060ea <_raise_r+0x14>
 80060e0:	2316      	movs	r3, #22
 80060e2:	6003      	str	r3, [r0, #0]
 80060e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060e8:	bd38      	pop	{r3, r4, r5, pc}
 80060ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80060ec:	b112      	cbz	r2, 80060f4 <_raise_r+0x1e>
 80060ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80060f2:	b94b      	cbnz	r3, 8006108 <_raise_r+0x32>
 80060f4:	4620      	mov	r0, r4
 80060f6:	f000 f831 	bl	800615c <_getpid_r>
 80060fa:	462a      	mov	r2, r5
 80060fc:	4601      	mov	r1, r0
 80060fe:	4620      	mov	r0, r4
 8006100:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006104:	f000 b818 	b.w	8006138 <_kill_r>
 8006108:	2b01      	cmp	r3, #1
 800610a:	d00a      	beq.n	8006122 <_raise_r+0x4c>
 800610c:	1c59      	adds	r1, r3, #1
 800610e:	d103      	bne.n	8006118 <_raise_r+0x42>
 8006110:	2316      	movs	r3, #22
 8006112:	6003      	str	r3, [r0, #0]
 8006114:	2001      	movs	r0, #1
 8006116:	e7e7      	b.n	80060e8 <_raise_r+0x12>
 8006118:	2400      	movs	r4, #0
 800611a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800611e:	4628      	mov	r0, r5
 8006120:	4798      	blx	r3
 8006122:	2000      	movs	r0, #0
 8006124:	e7e0      	b.n	80060e8 <_raise_r+0x12>
	...

08006128 <raise>:
 8006128:	4b02      	ldr	r3, [pc, #8]	; (8006134 <raise+0xc>)
 800612a:	4601      	mov	r1, r0
 800612c:	6818      	ldr	r0, [r3, #0]
 800612e:	f7ff bfd2 	b.w	80060d6 <_raise_r>
 8006132:	bf00      	nop
 8006134:	200000a4 	.word	0x200000a4

08006138 <_kill_r>:
 8006138:	b538      	push	{r3, r4, r5, lr}
 800613a:	4d07      	ldr	r5, [pc, #28]	; (8006158 <_kill_r+0x20>)
 800613c:	2300      	movs	r3, #0
 800613e:	4604      	mov	r4, r0
 8006140:	4608      	mov	r0, r1
 8006142:	4611      	mov	r1, r2
 8006144:	602b      	str	r3, [r5, #0]
 8006146:	f7fa fdb5 	bl	8000cb4 <_kill>
 800614a:	1c43      	adds	r3, r0, #1
 800614c:	d102      	bne.n	8006154 <_kill_r+0x1c>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	b103      	cbz	r3, 8006154 <_kill_r+0x1c>
 8006152:	6023      	str	r3, [r4, #0]
 8006154:	bd38      	pop	{r3, r4, r5, pc}
 8006156:	bf00      	nop
 8006158:	2000025c 	.word	0x2000025c

0800615c <_getpid_r>:
 800615c:	f7fa bda2 	b.w	8000ca4 <_getpid>

08006160 <__sread>:
 8006160:	b510      	push	{r4, lr}
 8006162:	460c      	mov	r4, r1
 8006164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006168:	f000 f89c 	bl	80062a4 <_read_r>
 800616c:	2800      	cmp	r0, #0
 800616e:	bfab      	itete	ge
 8006170:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006172:	89a3      	ldrhlt	r3, [r4, #12]
 8006174:	181b      	addge	r3, r3, r0
 8006176:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800617a:	bfac      	ite	ge
 800617c:	6563      	strge	r3, [r4, #84]	; 0x54
 800617e:	81a3      	strhlt	r3, [r4, #12]
 8006180:	bd10      	pop	{r4, pc}

08006182 <__swrite>:
 8006182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006186:	461f      	mov	r7, r3
 8006188:	898b      	ldrh	r3, [r1, #12]
 800618a:	05db      	lsls	r3, r3, #23
 800618c:	4605      	mov	r5, r0
 800618e:	460c      	mov	r4, r1
 8006190:	4616      	mov	r6, r2
 8006192:	d505      	bpl.n	80061a0 <__swrite+0x1e>
 8006194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006198:	2302      	movs	r3, #2
 800619a:	2200      	movs	r2, #0
 800619c:	f000 f868 	bl	8006270 <_lseek_r>
 80061a0:	89a3      	ldrh	r3, [r4, #12]
 80061a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80061a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061aa:	81a3      	strh	r3, [r4, #12]
 80061ac:	4632      	mov	r2, r6
 80061ae:	463b      	mov	r3, r7
 80061b0:	4628      	mov	r0, r5
 80061b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80061b6:	f000 b817 	b.w	80061e8 <_write_r>

080061ba <__sseek>:
 80061ba:	b510      	push	{r4, lr}
 80061bc:	460c      	mov	r4, r1
 80061be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061c2:	f000 f855 	bl	8006270 <_lseek_r>
 80061c6:	1c43      	adds	r3, r0, #1
 80061c8:	89a3      	ldrh	r3, [r4, #12]
 80061ca:	bf15      	itete	ne
 80061cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80061ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80061d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80061d6:	81a3      	strheq	r3, [r4, #12]
 80061d8:	bf18      	it	ne
 80061da:	81a3      	strhne	r3, [r4, #12]
 80061dc:	bd10      	pop	{r4, pc}

080061de <__sclose>:
 80061de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e2:	f000 b813 	b.w	800620c <_close_r>
	...

080061e8 <_write_r>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	4d07      	ldr	r5, [pc, #28]	; (8006208 <_write_r+0x20>)
 80061ec:	4604      	mov	r4, r0
 80061ee:	4608      	mov	r0, r1
 80061f0:	4611      	mov	r1, r2
 80061f2:	2200      	movs	r2, #0
 80061f4:	602a      	str	r2, [r5, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	f7fa fd93 	bl	8000d22 <_write>
 80061fc:	1c43      	adds	r3, r0, #1
 80061fe:	d102      	bne.n	8006206 <_write_r+0x1e>
 8006200:	682b      	ldr	r3, [r5, #0]
 8006202:	b103      	cbz	r3, 8006206 <_write_r+0x1e>
 8006204:	6023      	str	r3, [r4, #0]
 8006206:	bd38      	pop	{r3, r4, r5, pc}
 8006208:	2000025c 	.word	0x2000025c

0800620c <_close_r>:
 800620c:	b538      	push	{r3, r4, r5, lr}
 800620e:	4d06      	ldr	r5, [pc, #24]	; (8006228 <_close_r+0x1c>)
 8006210:	2300      	movs	r3, #0
 8006212:	4604      	mov	r4, r0
 8006214:	4608      	mov	r0, r1
 8006216:	602b      	str	r3, [r5, #0]
 8006218:	f7fa fd9f 	bl	8000d5a <_close>
 800621c:	1c43      	adds	r3, r0, #1
 800621e:	d102      	bne.n	8006226 <_close_r+0x1a>
 8006220:	682b      	ldr	r3, [r5, #0]
 8006222:	b103      	cbz	r3, 8006226 <_close_r+0x1a>
 8006224:	6023      	str	r3, [r4, #0]
 8006226:	bd38      	pop	{r3, r4, r5, pc}
 8006228:	2000025c 	.word	0x2000025c

0800622c <_fstat_r>:
 800622c:	b538      	push	{r3, r4, r5, lr}
 800622e:	4d07      	ldr	r5, [pc, #28]	; (800624c <_fstat_r+0x20>)
 8006230:	2300      	movs	r3, #0
 8006232:	4604      	mov	r4, r0
 8006234:	4608      	mov	r0, r1
 8006236:	4611      	mov	r1, r2
 8006238:	602b      	str	r3, [r5, #0]
 800623a:	f7fa fd9a 	bl	8000d72 <_fstat>
 800623e:	1c43      	adds	r3, r0, #1
 8006240:	d102      	bne.n	8006248 <_fstat_r+0x1c>
 8006242:	682b      	ldr	r3, [r5, #0]
 8006244:	b103      	cbz	r3, 8006248 <_fstat_r+0x1c>
 8006246:	6023      	str	r3, [r4, #0]
 8006248:	bd38      	pop	{r3, r4, r5, pc}
 800624a:	bf00      	nop
 800624c:	2000025c 	.word	0x2000025c

08006250 <_isatty_r>:
 8006250:	b538      	push	{r3, r4, r5, lr}
 8006252:	4d06      	ldr	r5, [pc, #24]	; (800626c <_isatty_r+0x1c>)
 8006254:	2300      	movs	r3, #0
 8006256:	4604      	mov	r4, r0
 8006258:	4608      	mov	r0, r1
 800625a:	602b      	str	r3, [r5, #0]
 800625c:	f7fa fd99 	bl	8000d92 <_isatty>
 8006260:	1c43      	adds	r3, r0, #1
 8006262:	d102      	bne.n	800626a <_isatty_r+0x1a>
 8006264:	682b      	ldr	r3, [r5, #0]
 8006266:	b103      	cbz	r3, 800626a <_isatty_r+0x1a>
 8006268:	6023      	str	r3, [r4, #0]
 800626a:	bd38      	pop	{r3, r4, r5, pc}
 800626c:	2000025c 	.word	0x2000025c

08006270 <_lseek_r>:
 8006270:	b538      	push	{r3, r4, r5, lr}
 8006272:	4d07      	ldr	r5, [pc, #28]	; (8006290 <_lseek_r+0x20>)
 8006274:	4604      	mov	r4, r0
 8006276:	4608      	mov	r0, r1
 8006278:	4611      	mov	r1, r2
 800627a:	2200      	movs	r2, #0
 800627c:	602a      	str	r2, [r5, #0]
 800627e:	461a      	mov	r2, r3
 8006280:	f7fa fd92 	bl	8000da8 <_lseek>
 8006284:	1c43      	adds	r3, r0, #1
 8006286:	d102      	bne.n	800628e <_lseek_r+0x1e>
 8006288:	682b      	ldr	r3, [r5, #0]
 800628a:	b103      	cbz	r3, 800628e <_lseek_r+0x1e>
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	bd38      	pop	{r3, r4, r5, pc}
 8006290:	2000025c 	.word	0x2000025c

08006294 <_malloc_usable_size_r>:
 8006294:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006298:	1f18      	subs	r0, r3, #4
 800629a:	2b00      	cmp	r3, #0
 800629c:	bfbc      	itt	lt
 800629e:	580b      	ldrlt	r3, [r1, r0]
 80062a0:	18c0      	addlt	r0, r0, r3
 80062a2:	4770      	bx	lr

080062a4 <_read_r>:
 80062a4:	b538      	push	{r3, r4, r5, lr}
 80062a6:	4d07      	ldr	r5, [pc, #28]	; (80062c4 <_read_r+0x20>)
 80062a8:	4604      	mov	r4, r0
 80062aa:	4608      	mov	r0, r1
 80062ac:	4611      	mov	r1, r2
 80062ae:	2200      	movs	r2, #0
 80062b0:	602a      	str	r2, [r5, #0]
 80062b2:	461a      	mov	r2, r3
 80062b4:	f7fa fd18 	bl	8000ce8 <_read>
 80062b8:	1c43      	adds	r3, r0, #1
 80062ba:	d102      	bne.n	80062c2 <_read_r+0x1e>
 80062bc:	682b      	ldr	r3, [r5, #0]
 80062be:	b103      	cbz	r3, 80062c2 <_read_r+0x1e>
 80062c0:	6023      	str	r3, [r4, #0]
 80062c2:	bd38      	pop	{r3, r4, r5, pc}
 80062c4:	2000025c 	.word	0x2000025c

080062c8 <_init>:
 80062c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ca:	bf00      	nop
 80062cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ce:	bc08      	pop	{r3}
 80062d0:	469e      	mov	lr, r3
 80062d2:	4770      	bx	lr

080062d4 <_fini>:
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062d6:	bf00      	nop
 80062d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062da:	bc08      	pop	{r3}
 80062dc:	469e      	mov	lr, r3
 80062de:	4770      	bx	lr
