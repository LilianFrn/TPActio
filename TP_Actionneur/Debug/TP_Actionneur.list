
TP_Actionneur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e50  08007e50  00020158  2**0
                  CONTENTS
  4 .ARM          00000008  08007e50  08007e50  00017e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e58  08007e58  00020158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e58  08007e58  00017e58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e5c  08007e5c  00017e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000158  20000000  08007e60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000158  08007fb8  00020158  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08007fb8  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149bb  00000000  00000000  00020188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002852  00000000  00000000  00034b43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00037398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  000384c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002752e  00000000  00000000  00039500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013ca1  00000000  00000000  00060a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fdc5e  00000000  00000000  000746cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017232d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005580  00000000  00000000  00172380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000158 	.word	0x20000158
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a70 	.word	0x08007a70

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000015c 	.word	0x2000015c
 800021c:	08007a70 	.word	0x08007a70

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f003 fe7e 	bl	80042f6 <HAL_UART_Transmit>
	return chr;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001c0 	.word	0x200001c0

08000608 <PWN_start>:

void PWN_start(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800060c:	2100      	movs	r1, #0
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <PWN_start+0x28>)
 8000610:	f002 fb28 	bl	8002c64 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <PWN_start+0x28>)
 8000618:	f003 fb90 	bl	8003d3c <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800061c:	2104      	movs	r1, #4
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <PWN_start+0x28>)
 8000620:	f002 fb20 	bl	8002c64 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000624:	2104      	movs	r1, #4
 8000626:	4802      	ldr	r0, [pc, #8]	; (8000630 <PWN_start+0x28>)
 8000628:	f003 fb88 	bl	8003d3c <HAL_TIMEx_PWMN_Start>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	20000174 	.word	0x20000174

08000634 <PWN_stop>:

void PWN_stop(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <PWN_stop+0x28>)
 800063c:	f002 fc24 	bl	8002e88 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000640:	2100      	movs	r1, #0
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <PWN_stop+0x28>)
 8000644:	f003 fc3c 	bl	8003ec0 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8000648:	2104      	movs	r1, #4
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <PWN_stop+0x28>)
 800064c:	f002 fc1c 	bl	8002e88 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <PWN_stop+0x28>)
 8000654:	f003 fc34 	bl	8003ec0 <HAL_TIMEx_PWMN_Stop>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000174 	.word	0x20000174

08000660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	  PWN_start();
 800066a:	f7ff ffcd 	bl	8000608 <PWN_start>
	  printf("Bouton\r\n");
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <HAL_GPIO_EXTI_Callback+0x1c>)
 8000670:	f005 ff24 	bl	80064bc <puts>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08007a88 	.word	0x08007a88

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fdeb 	bl	800125e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f824 	bl	80006d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f978 	bl	8000980 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000690:	f000 f86c 	bl	800076c <MX_TIM1_Init>
  TIM1->CCR1 = 512;
 8000694:	4b0c      	ldr	r3, [pc, #48]	; (80006c8 <main+0x48>)
 8000696:	f44f 7200 	mov.w	r2, #512	; 0x200
 800069a:	635a      	str	r2, [r3, #52]	; 0x34
  TIM1->CCR2 = 512;
 800069c:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <main+0x48>)
 800069e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006a2:	639a      	str	r2, [r3, #56]	; 0x38
  MX_USART2_UART_Init();
 80006a4:	f000 f920 	bl	80008e8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  shell_start();
 80006a8:	f000 f9fc 	bl	8000aa4 <shell_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uartRxReceived) {
 80006ac:	4b07      	ldr	r3, [pc, #28]	; (80006cc <main+0x4c>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <main+0x38>
		  shell_process();
 80006b4:	f000 fa30 	bl	8000b18 <shell_process>
	  }
	  if (cmd_ready) {
 80006b8:	4b05      	ldr	r3, [pc, #20]	; (80006d0 <main+0x50>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d0f5      	beq.n	80006ac <main+0x2c>
		  shell_execute();
 80006c0:	f000 faa2 	bl	8000c08 <shell_execute>
	  if (uartRxReceived) {
 80006c4:	e7f2      	b.n	80006ac <main+0x2c>
 80006c6:	bf00      	nop
 80006c8:	40012c00 	.word	0x40012c00
 80006cc:	20000250 	.word	0x20000250
 80006d0:	20000298 	.word	0x20000298

080006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b094      	sub	sp, #80	; 0x50
 80006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006da:	f107 0318 	add.w	r3, r7, #24
 80006de:	2238      	movs	r2, #56	; 0x38
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f005 fe5c 	bl	80063a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]
 80006f2:	60da      	str	r2, [r3, #12]
 80006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f001 f9c6 	bl	8001a88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006fc:	2302      	movs	r3, #2
 80006fe:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000700:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000704:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000706:	2340      	movs	r3, #64	; 0x40
 8000708:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070a:	2302      	movs	r3, #2
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800070e:	2302      	movs	r3, #2
 8000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000712:	2304      	movs	r3, #4
 8000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000716:	2355      	movs	r3, #85	; 0x55
 8000718:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800071a:	2302      	movs	r3, #2
 800071c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800071e:	2302      	movs	r3, #2
 8000720:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000722:	2302      	movs	r3, #2
 8000724:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000726:	f107 0318 	add.w	r3, r7, #24
 800072a:	4618      	mov	r0, r3
 800072c:	f001 fa60 	bl	8001bf0 <HAL_RCC_OscConfig>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000736:	f000 f9af 	bl	8000a98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073a:	230f      	movs	r3, #15
 800073c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800073e:	2303      	movs	r3, #3
 8000740:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	2104      	movs	r1, #4
 8000752:	4618      	mov	r0, r3
 8000754:	f001 fd64 	bl	8002220 <HAL_RCC_ClockConfig>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800075e:	f000 f99b 	bl	8000a98 <Error_Handler>
  }
}
 8000762:	bf00      	nop
 8000764:	3750      	adds	r7, #80	; 0x50
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b09c      	sub	sp, #112	; 0x70
 8000770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000772:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000776:	2200      	movs	r2, #0
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	605a      	str	r2, [r3, #4]
 800077c:	609a      	str	r2, [r3, #8]
 800077e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000780:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800078c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
 800079c:	615a      	str	r2, [r3, #20]
 800079e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80007a0:	1d3b      	adds	r3, r7, #4
 80007a2:	2234      	movs	r2, #52	; 0x34
 80007a4:	2100      	movs	r1, #0
 80007a6:	4618      	mov	r0, r3
 80007a8:	f005 fdfa 	bl	80063a0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007ac:	4b4c      	ldr	r3, [pc, #304]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007ae:	4a4d      	ldr	r2, [pc, #308]	; (80008e4 <MX_TIM1_Init+0x178>)
 80007b0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 80007b2:	4b4b      	ldr	r3, [pc, #300]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007b4:	2209      	movs	r2, #9
 80007b6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b8:	4b49      	ldr	r3, [pc, #292]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80007be:	4b48      	ldr	r3, [pc, #288]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007c0:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007c4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c6:	4b46      	ldr	r3, [pc, #280]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007cc:	4b44      	ldr	r3, [pc, #272]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d2:	4b43      	ldr	r3, [pc, #268]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d8:	4841      	ldr	r0, [pc, #260]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007da:	f002 f98b 	bl	8002af4 <HAL_TIM_Base_Init>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007e4:	f000 f958 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ec:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ee:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007f2:	4619      	mov	r1, r3
 80007f4:	483a      	ldr	r0, [pc, #232]	; (80008e0 <MX_TIM1_Init+0x174>)
 80007f6:	f002 fcf7 	bl	80031e8 <HAL_TIM_ConfigClockSource>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000800:	f000 f94a 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000804:	4836      	ldr	r0, [pc, #216]	; (80008e0 <MX_TIM1_Init+0x174>)
 8000806:	f002 f9cc 	bl	8002ba2 <HAL_TIM_PWM_Init>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000810:	f000 f942 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000814:	2300      	movs	r3, #0
 8000816:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000818:	2300      	movs	r3, #0
 800081a:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000820:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000824:	4619      	mov	r1, r3
 8000826:	482e      	ldr	r0, [pc, #184]	; (80008e0 <MX_TIM1_Init+0x174>)
 8000828:	f003 fba8 	bl	8003f7c <HAL_TIMEx_MasterConfigSynchronization>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8000832:	f000 f931 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000836:	2360      	movs	r3, #96	; 0x60
 8000838:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 613;
 800083a:	f240 2365 	movw	r3, #613	; 0x265
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000844:	2300      	movs	r3, #0
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000848:	2300      	movs	r3, #0
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800084c:	2300      	movs	r3, #0
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000850:	2300      	movs	r3, #0
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000854:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000858:	2200      	movs	r2, #0
 800085a:	4619      	mov	r1, r3
 800085c:	4820      	ldr	r0, [pc, #128]	; (80008e0 <MX_TIM1_Init+0x174>)
 800085e:	f002 fbaf 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000868:	f000 f916 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800086c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000870:	2204      	movs	r2, #4
 8000872:	4619      	mov	r1, r3
 8000874:	481a      	ldr	r0, [pc, #104]	; (80008e0 <MX_TIM1_Init+0x174>)
 8000876:	f002 fba3 	bl	8002fc0 <HAL_TIM_PWM_ConfigChannel>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000880:	f000 f90a 	bl	8000a98 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000884:	2300      	movs	r3, #0
 8000886:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800088c:	2300      	movs	r3, #0
 800088e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8000890:	23d2      	movs	r3, #210	; 0xd2
 8000892:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80008a2:	2300      	movs	r3, #0
 80008a4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80008aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008b4:	2300      	movs	r3, #0
 80008b6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008b8:	2300      	movs	r3, #0
 80008ba:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008bc:	1d3b      	adds	r3, r7, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	4807      	ldr	r0, [pc, #28]	; (80008e0 <MX_TIM1_Init+0x174>)
 80008c2:	f003 fbf1 	bl	80040a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80008cc:	f000 f8e4 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <MX_TIM1_Init+0x174>)
 80008d2:	f000 faef 	bl	8000eb4 <HAL_TIM_MspPostInit>

}
 80008d6:	bf00      	nop
 80008d8:	3770      	adds	r7, #112	; 0x70
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	20000174 	.word	0x20000174
 80008e4:	40012c00 	.word	0x40012c00

080008e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008ec:	4b22      	ldr	r3, [pc, #136]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008ee:	4a23      	ldr	r2, [pc, #140]	; (800097c <MX_USART2_UART_Init+0x94>)
 80008f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008f2:	4b21      	ldr	r3, [pc, #132]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008fa:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <MX_USART2_UART_Init+0x90>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000902:	2200      	movs	r2, #0
 8000904:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000906:	4b1c      	ldr	r3, [pc, #112]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000908:	2200      	movs	r2, #0
 800090a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800090c:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800090e:	220c      	movs	r2, #12
 8000910:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000912:	4b19      	ldr	r3, [pc, #100]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000914:	2200      	movs	r2, #0
 8000916:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800091a:	2200      	movs	r2, #0
 800091c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800091e:	4b16      	ldr	r3, [pc, #88]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000920:	2200      	movs	r2, #0
 8000922:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000924:	4b14      	ldr	r3, [pc, #80]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000926:	2200      	movs	r2, #0
 8000928:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800092a:	4b13      	ldr	r3, [pc, #76]	; (8000978 <MX_USART2_UART_Init+0x90>)
 800092c:	2200      	movs	r2, #0
 800092e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000930:	4811      	ldr	r0, [pc, #68]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000932:	f003 fc90 	bl	8004256 <HAL_UART_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800093c:	f000 f8ac 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000940:	2100      	movs	r1, #0
 8000942:	480d      	ldr	r0, [pc, #52]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000944:	f005 fc33 	bl	80061ae <HAL_UARTEx_SetTxFifoThreshold>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800094e:	f000 f8a3 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000952:	2100      	movs	r1, #0
 8000954:	4808      	ldr	r0, [pc, #32]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000956:	f005 fc68 	bl	800622a <HAL_UARTEx_SetRxFifoThreshold>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000960:	f000 f89a 	bl	8000a98 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000964:	4804      	ldr	r0, [pc, #16]	; (8000978 <MX_USART2_UART_Init+0x90>)
 8000966:	f005 fbe9 	bl	800613c <HAL_UARTEx_DisableFifoMode>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000970:	f000 f892 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000974:	bf00      	nop
 8000976:	bd80      	pop	{r7, pc}
 8000978:	200001c0 	.word	0x200001c0
 800097c:	40004400 	.word	0x40004400

08000980 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b088      	sub	sp, #32
 8000984:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000986:	f107 030c 	add.w	r3, r7, #12
 800098a:	2200      	movs	r2, #0
 800098c:	601a      	str	r2, [r3, #0]
 800098e:	605a      	str	r2, [r3, #4]
 8000990:	609a      	str	r2, [r3, #8]
 8000992:	60da      	str	r2, [r3, #12]
 8000994:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000996:	4b33      	ldr	r3, [pc, #204]	; (8000a64 <MX_GPIO_Init+0xe4>)
 8000998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099a:	4a32      	ldr	r2, [pc, #200]	; (8000a64 <MX_GPIO_Init+0xe4>)
 800099c:	f043 0304 	orr.w	r3, r3, #4
 80009a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a6:	f003 0304 	and.w	r3, r3, #4
 80009aa:	60bb      	str	r3, [r7, #8]
 80009ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b2:	4a2c      	ldr	r2, [pc, #176]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009b4:	f043 0320 	orr.w	r3, r3, #32
 80009b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009be:	f003 0320 	and.w	r3, r3, #32
 80009c2:	607b      	str	r3, [r7, #4]
 80009c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ca:	4a26      	ldr	r2, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009cc:	f043 0301 	orr.w	r3, r3, #1
 80009d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xe4>)
 80009d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	603b      	str	r3, [r7, #0]
 80009dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80009de:	2200      	movs	r2, #0
 80009e0:	2108      	movs	r1, #8
 80009e2:	4821      	ldr	r0, [pc, #132]	; (8000a68 <MX_GPIO_Init+0xe8>)
 80009e4:	f001 f820 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2120      	movs	r1, #32
 80009ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f0:	f001 f81a 	bl	8001a28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009fa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a04:	f107 030c 	add.w	r3, r7, #12
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4817      	ldr	r0, [pc, #92]	; (8000a68 <MX_GPIO_Init+0xe8>)
 8000a0c:	f000 fe8a 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000a10:	2308      	movs	r3, #8
 8000a12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a20:	f107 030c 	add.w	r3, r7, #12
 8000a24:	4619      	mov	r1, r3
 8000a26:	4810      	ldr	r0, [pc, #64]	; (8000a68 <MX_GPIO_Init+0xe8>)
 8000a28:	f000 fe7c 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a30:	2301      	movs	r3, #1
 8000a32:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a46:	f000 fe6d 	bl	8001724 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2028      	movs	r0, #40	; 0x28
 8000a50:	f000 fd73 	bl	800153a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a54:	2028      	movs	r0, #40	; 0x28
 8000a56:	f000 fd8a 	bl	800156e <HAL_NVIC_EnableIRQ>

}
 8000a5a:	bf00      	nop
 8000a5c:	3720      	adds	r7, #32
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000
 8000a68:	48000800 	.word	0x48000800

08000a6c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <HAL_UART_RxCpltCallback+0x20>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	4904      	ldr	r1, [pc, #16]	; (8000a90 <HAL_UART_RxCpltCallback+0x24>)
 8000a7e:	4805      	ldr	r0, [pc, #20]	; (8000a94 <HAL_UART_RxCpltCallback+0x28>)
 8000a80:	f003 fcd0 	bl	8004424 <HAL_UART_Receive_IT>
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000250 	.word	0x20000250
 8000a90:	20000254 	.word	0x20000254
 8000a94:	200001c0 	.word	0x200001c0

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a9c:	b672      	cpsid	i
}
 8000a9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <Error_Handler+0x8>
	...

08000aa4 <shell_start>:
static int 			idx_cmd;
static char* 		argv[MAX_ARGS];
static int		 	argc = 0;
static char*		token;

void shell_start(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000aa8:	2224      	movs	r2, #36	; 0x24
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4813      	ldr	r0, [pc, #76]	; (8000afc <shell_start+0x58>)
 8000aae:	f005 fc77 	bl	80063a0 <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000ab2:	2240      	movs	r2, #64	; 0x40
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	4812      	ldr	r0, [pc, #72]	; (8000b00 <shell_start+0x5c>)
 8000ab8:	f005 fc72 	bl	80063a0 <memset>
 8000abc:	4b11      	ldr	r3, [pc, #68]	; (8000b04 <shell_start+0x60>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000ac2:	2240      	movs	r2, #64	; 0x40
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4810      	ldr	r0, [pc, #64]	; (8000b08 <shell_start+0x64>)
 8000ac8:	f005 fc6a 	bl	80063a0 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000acc:	2201      	movs	r2, #1
 8000ace:	490d      	ldr	r1, [pc, #52]	; (8000b04 <shell_start+0x60>)
 8000ad0:	480e      	ldr	r0, [pc, #56]	; (8000b0c <shell_start+0x68>)
 8000ad2:	f003 fca7 	bl	8004424 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000ad6:	200a      	movs	r0, #10
 8000ad8:	f000 fc32 	bl	8001340 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ae0:	2266      	movs	r2, #102	; 0x66
 8000ae2:	490b      	ldr	r1, [pc, #44]	; (8000b10 <shell_start+0x6c>)
 8000ae4:	4809      	ldr	r0, [pc, #36]	; (8000b0c <shell_start+0x68>)
 8000ae6:	f003 fc06 	bl	80042f6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	2218      	movs	r2, #24
 8000af0:	4908      	ldr	r1, [pc, #32]	; (8000b14 <shell_start+0x70>)
 8000af2:	4806      	ldr	r0, [pc, #24]	; (8000b0c <shell_start+0x68>)
 8000af4:	f003 fbff 	bl	80042f6 <HAL_UART_Transmit>
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	200002e8 	.word	0x200002e8
 8000b00:	200002a0 	.word	0x200002a0
 8000b04:	20000254 	.word	0x20000254
 8000b08:	20000258 	.word	0x20000258
 8000b0c:	200001c0 	.word	0x200001c0
 8000b10:	20000018 	.word	0x20000018
 8000b14:	20000000 	.word	0x20000000

08000b18 <shell_process>:

void shell_process(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	switch(uartRxBuffer[0]){
 8000b1c:	4b2f      	ldr	r3, [pc, #188]	; (8000bdc <shell_process+0xc4>)
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	2b0d      	cmp	r3, #13
 8000b22:	d002      	beq.n	8000b2a <shell_process+0x12>
 8000b24:	2b7f      	cmp	r3, #127	; 0x7f
 8000b26:	d033      	beq.n	8000b90 <shell_process+0x78>
 8000b28:	e042      	b.n	8000bb0 <shell_process+0x98>
		// Nouvelle ligne, instruction à traiter
		case ASCII_CR:
		  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b2e:	2203      	movs	r2, #3
 8000b30:	492b      	ldr	r1, [pc, #172]	; (8000be0 <shell_process+0xc8>)
 8000b32:	482c      	ldr	r0, [pc, #176]	; (8000be4 <shell_process+0xcc>)
 8000b34:	f003 fbdf 	bl	80042f6 <HAL_UART_Transmit>
		  cmdBuffer[idx_cmd] = '\0';
 8000b38:	4b2b      	ldr	r3, [pc, #172]	; (8000be8 <shell_process+0xd0>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a2b      	ldr	r2, [pc, #172]	; (8000bec <shell_process+0xd4>)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	54d1      	strb	r1, [r2, r3]
		  argc = 0;
 8000b42:	4b2b      	ldr	r3, [pc, #172]	; (8000bf0 <shell_process+0xd8>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
		  token = strtok(cmdBuffer, " ");
 8000b48:	492a      	ldr	r1, [pc, #168]	; (8000bf4 <shell_process+0xdc>)
 8000b4a:	4828      	ldr	r0, [pc, #160]	; (8000bec <shell_process+0xd4>)
 8000b4c:	f005 fcf2 	bl	8006534 <strtok>
 8000b50:	4603      	mov	r3, r0
 8000b52:	4a29      	ldr	r2, [pc, #164]	; (8000bf8 <shell_process+0xe0>)
 8000b54:	6013      	str	r3, [r2, #0]
		  while(token!=NULL){
 8000b56:	e010      	b.n	8000b7a <shell_process+0x62>
			  argv[argc++] = token;
 8000b58:	4b25      	ldr	r3, [pc, #148]	; (8000bf0 <shell_process+0xd8>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	1c5a      	adds	r2, r3, #1
 8000b5e:	4924      	ldr	r1, [pc, #144]	; (8000bf0 <shell_process+0xd8>)
 8000b60:	600a      	str	r2, [r1, #0]
 8000b62:	4a25      	ldr	r2, [pc, #148]	; (8000bf8 <shell_process+0xe0>)
 8000b64:	6812      	ldr	r2, [r2, #0]
 8000b66:	4925      	ldr	r1, [pc, #148]	; (8000bfc <shell_process+0xe4>)
 8000b68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  token = strtok(NULL, " ");
 8000b6c:	4921      	ldr	r1, [pc, #132]	; (8000bf4 <shell_process+0xdc>)
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f005 fce0 	bl	8006534 <strtok>
 8000b74:	4603      	mov	r3, r0
 8000b76:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <shell_process+0xe0>)
 8000b78:	6013      	str	r3, [r2, #0]
		  while(token!=NULL){
 8000b7a:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <shell_process+0xe0>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d1ea      	bne.n	8000b58 <shell_process+0x40>
		  }

		  idx_cmd = 0;
 8000b82:	4b19      	ldr	r3, [pc, #100]	; (8000be8 <shell_process+0xd0>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
		  cmd_ready = 1;
 8000b88:	4b1d      	ldr	r3, [pc, #116]	; (8000c00 <shell_process+0xe8>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	601a      	str	r2, [r3, #0]
		  break;
 8000b8e:	e01f      	b.n	8000bd0 <shell_process+0xb8>
		// Suppression du dernier caractère
		case ASCII_DEL:
		  cmdBuffer[idx_cmd--] = '\0';
 8000b90:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <shell_process+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	1e5a      	subs	r2, r3, #1
 8000b96:	4914      	ldr	r1, [pc, #80]	; (8000be8 <shell_process+0xd0>)
 8000b98:	600a      	str	r2, [r1, #0]
 8000b9a:	4a14      	ldr	r2, [pc, #80]	; (8000bec <shell_process+0xd4>)
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000ba0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	490d      	ldr	r1, [pc, #52]	; (8000bdc <shell_process+0xc4>)
 8000ba8:	480e      	ldr	r0, [pc, #56]	; (8000be4 <shell_process+0xcc>)
 8000baa:	f003 fba4 	bl	80042f6 <HAL_UART_Transmit>
		  break;
 8000bae:	e00f      	b.n	8000bd0 <shell_process+0xb8>
		// Nouveau caractère
		default:
		  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <shell_process+0xd0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	1c5a      	adds	r2, r3, #1
 8000bb6:	490c      	ldr	r1, [pc, #48]	; (8000be8 <shell_process+0xd0>)
 8000bb8:	600a      	str	r2, [r1, #0]
 8000bba:	4a08      	ldr	r2, [pc, #32]	; (8000bdc <shell_process+0xc4>)
 8000bbc:	7811      	ldrb	r1, [r2, #0]
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <shell_process+0xd4>)
 8000bc0:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000bc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4904      	ldr	r1, [pc, #16]	; (8000bdc <shell_process+0xc4>)
 8000bca:	4806      	ldr	r0, [pc, #24]	; (8000be4 <shell_process+0xcc>)
 8000bcc:	f003 fb93 	bl	80042f6 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <shell_process+0xec>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	601a      	str	r2, [r3, #0]
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000254 	.word	0x20000254
 8000be0:	20000080 	.word	0x20000080
 8000be4:	200001c0 	.word	0x200001c0
 8000be8:	200002e4 	.word	0x200002e4
 8000bec:	200002a0 	.word	0x200002a0
 8000bf0:	2000030c 	.word	0x2000030c
 8000bf4:	08007b70 	.word	0x08007b70
 8000bf8:	20000310 	.word	0x20000310
 8000bfc:	200002e8 	.word	0x200002e8
 8000c00:	20000298 	.word	0x20000298
 8000c04:	20000250 	.word	0x20000250

08000c08 <shell_execute>:

void shell_execute(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af02      	add	r7, sp, #8
	/* HELP command */
	if(strcmp(argv[0],com[0])==0)
 8000c0e:	4b75      	ldr	r3, [pc, #468]	; (8000de4 <shell_execute+0x1dc>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a75      	ldr	r2, [pc, #468]	; (8000de8 <shell_execute+0x1e0>)
 8000c14:	6812      	ldr	r2, [r2, #0]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fb01 	bl	8000220 <strcmp>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d117      	bne.n	8000c54 <shell_execute+0x4c>
	{
	  sprintf(uartTxBuffer,"Commands :\r\n%s\r\n%s\r\n%s\r\n%s\r\n", com[0], com[1], com[2], com[3]);
 8000c24:	4b70      	ldr	r3, [pc, #448]	; (8000de8 <shell_execute+0x1e0>)
 8000c26:	6819      	ldr	r1, [r3, #0]
 8000c28:	4b6f      	ldr	r3, [pc, #444]	; (8000de8 <shell_execute+0x1e0>)
 8000c2a:	6858      	ldr	r0, [r3, #4]
 8000c2c:	4b6e      	ldr	r3, [pc, #440]	; (8000de8 <shell_execute+0x1e0>)
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	4a6d      	ldr	r2, [pc, #436]	; (8000de8 <shell_execute+0x1e0>)
 8000c32:	68d2      	ldr	r2, [r2, #12]
 8000c34:	9201      	str	r2, [sp, #4]
 8000c36:	9300      	str	r3, [sp, #0]
 8000c38:	4603      	mov	r3, r0
 8000c3a:	460a      	mov	r2, r1
 8000c3c:	496b      	ldr	r1, [pc, #428]	; (8000dec <shell_execute+0x1e4>)
 8000c3e:	486c      	ldr	r0, [pc, #432]	; (8000df0 <shell_execute+0x1e8>)
 8000c40:	f005 fc44 	bl	80064cc <siprintf>
	  HAL_UART_Transmit(&huart2, uartTxBuffer, UART_TX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000c44:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c48:	2240      	movs	r2, #64	; 0x40
 8000c4a:	4969      	ldr	r1, [pc, #420]	; (8000df0 <shell_execute+0x1e8>)
 8000c4c:	4869      	ldr	r0, [pc, #420]	; (8000df4 <shell_execute+0x1ec>)
 8000c4e:	f003 fb52 	bl	80042f6 <HAL_UART_Transmit>
 8000c52:	e0b9      	b.n	8000dc8 <shell_execute+0x1c0>
	}
	/* PINOUT command */
	else if(strcmp(argv[0],com[1])==0)
 8000c54:	4b63      	ldr	r3, [pc, #396]	; (8000de4 <shell_execute+0x1dc>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a63      	ldr	r2, [pc, #396]	; (8000de8 <shell_execute+0x1e0>)
 8000c5a:	6852      	ldr	r2, [r2, #4]
 8000c5c:	4611      	mov	r1, r2
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fade 	bl	8000220 <strcmp>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d11e      	bne.n	8000ca8 <shell_execute+0xa0>
	{
	  for (int i = 0; i < 10; i++) {
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	607b      	str	r3, [r7, #4]
 8000c6e:	e017      	b.n	8000ca0 <shell_execute+0x98>
		  size = sprintf(uartTxBuffer,"%s\r\n", pins[i]);
 8000c70:	4a61      	ldr	r2, [pc, #388]	; (8000df8 <shell_execute+0x1f0>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4960      	ldr	r1, [pc, #384]	; (8000dfc <shell_execute+0x1f4>)
 8000c7c:	485c      	ldr	r0, [pc, #368]	; (8000df0 <shell_execute+0x1e8>)
 8000c7e:	f005 fc25 	bl	80064cc <siprintf>
 8000c82:	4603      	mov	r3, r0
 8000c84:	4a5e      	ldr	r2, [pc, #376]	; (8000e00 <shell_execute+0x1f8>)
 8000c86:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8000c88:	4b5d      	ldr	r3, [pc, #372]	; (8000e00 <shell_execute+0x1f8>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c92:	4957      	ldr	r1, [pc, #348]	; (8000df0 <shell_execute+0x1e8>)
 8000c94:	4857      	ldr	r0, [pc, #348]	; (8000df4 <shell_execute+0x1ec>)
 8000c96:	f003 fb2e 	bl	80042f6 <HAL_UART_Transmit>
	  for (int i = 0; i < 10; i++) {
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b09      	cmp	r3, #9
 8000ca4:	dde4      	ble.n	8000c70 <shell_execute+0x68>
 8000ca6:	e08f      	b.n	8000dc8 <shell_execute+0x1c0>
	  }
	}
	/* START command */
	else if(strcmp(argv[0],com[2])==0)
 8000ca8:	4b4e      	ldr	r3, [pc, #312]	; (8000de4 <shell_execute+0x1dc>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a4e      	ldr	r2, [pc, #312]	; (8000de8 <shell_execute+0x1e0>)
 8000cae:	6892      	ldr	r2, [r2, #8]
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f7ff fab4 	bl	8000220 <strcmp>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d112      	bne.n	8000ce4 <shell_execute+0xdc>
	{
		PWN_start();
 8000cbe:	f7ff fca3 	bl	8000608 <PWN_start>
		size = sprintf(uartTxBuffer,"PWN ON\r\n");
 8000cc2:	4950      	ldr	r1, [pc, #320]	; (8000e04 <shell_execute+0x1fc>)
 8000cc4:	484a      	ldr	r0, [pc, #296]	; (8000df0 <shell_execute+0x1e8>)
 8000cc6:	f005 fc01 	bl	80064cc <siprintf>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	4a4c      	ldr	r2, [pc, #304]	; (8000e00 <shell_execute+0x1f8>)
 8000cce:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8000cd0:	4b4b      	ldr	r3, [pc, #300]	; (8000e00 <shell_execute+0x1f8>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	b29a      	uxth	r2, r3
 8000cd6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cda:	4945      	ldr	r1, [pc, #276]	; (8000df0 <shell_execute+0x1e8>)
 8000cdc:	4845      	ldr	r0, [pc, #276]	; (8000df4 <shell_execute+0x1ec>)
 8000cde:	f003 fb0a 	bl	80042f6 <HAL_UART_Transmit>
 8000ce2:	e071      	b.n	8000dc8 <shell_execute+0x1c0>
	}
	/* STOP command */
	else if(strcmp(argv[0],com[3])==0)
 8000ce4:	4b3f      	ldr	r3, [pc, #252]	; (8000de4 <shell_execute+0x1dc>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a3f      	ldr	r2, [pc, #252]	; (8000de8 <shell_execute+0x1e0>)
 8000cea:	68d2      	ldr	r2, [r2, #12]
 8000cec:	4611      	mov	r1, r2
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f7ff fa96 	bl	8000220 <strcmp>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d112      	bne.n	8000d20 <shell_execute+0x118>
	{
		PWN_stop();
 8000cfa:	f7ff fc9b 	bl	8000634 <PWN_stop>
		size = sprintf(uartTxBuffer,"PWN OFF\r\n");
 8000cfe:	4942      	ldr	r1, [pc, #264]	; (8000e08 <shell_execute+0x200>)
 8000d00:	483b      	ldr	r0, [pc, #236]	; (8000df0 <shell_execute+0x1e8>)
 8000d02:	f005 fbe3 	bl	80064cc <siprintf>
 8000d06:	4603      	mov	r3, r0
 8000d08:	4a3d      	ldr	r2, [pc, #244]	; (8000e00 <shell_execute+0x1f8>)
 8000d0a:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8000d0c:	4b3c      	ldr	r3, [pc, #240]	; (8000e00 <shell_execute+0x1f8>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	b29a      	uxth	r2, r3
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d16:	4936      	ldr	r1, [pc, #216]	; (8000df0 <shell_execute+0x1e8>)
 8000d18:	4836      	ldr	r0, [pc, #216]	; (8000df4 <shell_execute+0x1ec>)
 8000d1a:	f003 faec 	bl	80042f6 <HAL_UART_Transmit>
 8000d1e:	e053      	b.n	8000dc8 <shell_execute+0x1c0>
	}
	else if(strncmp(argv[0],"speed",strlen("speed")) == 0){
 8000d20:	4b30      	ldr	r3, [pc, #192]	; (8000de4 <shell_execute+0x1dc>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2205      	movs	r2, #5
 8000d26:	4939      	ldr	r1, [pc, #228]	; (8000e0c <shell_execute+0x204>)
 8000d28:	4618      	mov	r0, r3
 8000d2a:	f005 fbef 	bl	800650c <strncmp>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d142      	bne.n	8000dba <shell_execute+0x1b2>
			vitesse = atoi(argv[1]);
 8000d34:	4b2b      	ldr	r3, [pc, #172]	; (8000de4 <shell_execute+0x1dc>)
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f005 fb03 	bl	8006344 <atoi>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	4a33      	ldr	r2, [pc, #204]	; (8000e10 <shell_execute+0x208>)
 8000d42:	6013      	str	r3, [r2, #0]
			printf("%d\r\n", vitesse);
 8000d44:	4b32      	ldr	r3, [pc, #200]	; (8000e10 <shell_execute+0x208>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4832      	ldr	r0, [pc, #200]	; (8000e14 <shell_execute+0x20c>)
 8000d4c:	f005 fb30 	bl	80063b0 <iprintf>

			while (TIM1->CCR1 < vitesse){
 8000d50:	e012      	b.n	8000d78 <shell_execute+0x170>
				TIM1->CCR1++;
 8000d52:	4b31      	ldr	r3, [pc, #196]	; (8000e18 <shell_execute+0x210>)
 8000d54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d56:	3201      	adds	r2, #1
 8000d58:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2--;
 8000d5a:	4b2f      	ldr	r3, [pc, #188]	; (8000e18 <shell_execute+0x210>)
 8000d5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d5e:	3a01      	subs	r2, #1
 8000d60:	639a      	str	r2, [r3, #56]	; 0x38
				printf("%d %d\r\n", TIM1->CCR1, TIM1->CCR2);
 8000d62:	4b2d      	ldr	r3, [pc, #180]	; (8000e18 <shell_execute+0x210>)
 8000d64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d66:	4a2c      	ldr	r2, [pc, #176]	; (8000e18 <shell_execute+0x210>)
 8000d68:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000d6a:	4619      	mov	r1, r3
 8000d6c:	482b      	ldr	r0, [pc, #172]	; (8000e1c <shell_execute+0x214>)
 8000d6e:	f005 fb1f 	bl	80063b0 <iprintf>
				HAL_Delay(10);
 8000d72:	200a      	movs	r0, #10
 8000d74:	f000 fae4 	bl	8001340 <HAL_Delay>
			while (TIM1->CCR1 < vitesse){
 8000d78:	4b27      	ldr	r3, [pc, #156]	; (8000e18 <shell_execute+0x210>)
 8000d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d7c:	4a24      	ldr	r2, [pc, #144]	; (8000e10 <shell_execute+0x208>)
 8000d7e:	6812      	ldr	r2, [r2, #0]
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d3e6      	bcc.n	8000d52 <shell_execute+0x14a>
			}
			while (TIM1->CCR1 > vitesse){
 8000d84:	e012      	b.n	8000dac <shell_execute+0x1a4>
				TIM1->CCR1--;
 8000d86:	4b24      	ldr	r3, [pc, #144]	; (8000e18 <shell_execute+0x210>)
 8000d88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d8a:	3a01      	subs	r2, #1
 8000d8c:	635a      	str	r2, [r3, #52]	; 0x34
				TIM1->CCR2++;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <shell_execute+0x210>)
 8000d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d92:	3201      	adds	r2, #1
 8000d94:	639a      	str	r2, [r3, #56]	; 0x38
				printf("%d %d\r\n", TIM1->CCR1, TIM1->CCR2);
 8000d96:	4b20      	ldr	r3, [pc, #128]	; (8000e18 <shell_execute+0x210>)
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	4a1f      	ldr	r2, [pc, #124]	; (8000e18 <shell_execute+0x210>)
 8000d9c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000d9e:	4619      	mov	r1, r3
 8000da0:	481e      	ldr	r0, [pc, #120]	; (8000e1c <shell_execute+0x214>)
 8000da2:	f005 fb05 	bl	80063b0 <iprintf>
				HAL_Delay(10);
 8000da6:	200a      	movs	r0, #10
 8000da8:	f000 faca 	bl	8001340 <HAL_Delay>
			while (TIM1->CCR1 > vitesse){
 8000dac:	4b1a      	ldr	r3, [pc, #104]	; (8000e18 <shell_execute+0x210>)
 8000dae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000db0:	4a17      	ldr	r2, [pc, #92]	; (8000e10 <shell_execute+0x208>)
 8000db2:	6812      	ldr	r2, [r2, #0]
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d8e6      	bhi.n	8000d86 <shell_execute+0x17e>
 8000db8:	e006      	b.n	8000dc8 <shell_execute+0x1c0>
			}
		}
	else{
	  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000dba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dbe:	2214      	movs	r2, #20
 8000dc0:	4917      	ldr	r1, [pc, #92]	; (8000e20 <shell_execute+0x218>)
 8000dc2:	480c      	ldr	r0, [pc, #48]	; (8000df4 <shell_execute+0x1ec>)
 8000dc4:	f003 fa97 	bl	80042f6 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000dc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dcc:	2218      	movs	r2, #24
 8000dce:	4915      	ldr	r1, [pc, #84]	; (8000e24 <shell_execute+0x21c>)
 8000dd0:	4808      	ldr	r0, [pc, #32]	; (8000df4 <shell_execute+0x1ec>)
 8000dd2:	f003 fa90 	bl	80042f6 <HAL_UART_Transmit>
	cmd_ready = 0;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	; (8000e28 <shell_execute+0x220>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	601a      	str	r2, [r3, #0]
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	200002e8 	.word	0x200002e8
 8000de8:	20000098 	.word	0x20000098
 8000dec:	08007b74 	.word	0x08007b74
 8000df0:	20000258 	.word	0x20000258
 8000df4:	200001c0 	.word	0x200001c0
 8000df8:	200000ac 	.word	0x200000ac
 8000dfc:	08007b94 	.word	0x08007b94
 8000e00:	200002e0 	.word	0x200002e0
 8000e04:	08007b9c 	.word	0x08007b9c
 8000e08:	08007ba8 	.word	0x08007ba8
 8000e0c:	08007ab0 	.word	0x08007ab0
 8000e10:	2000029c 	.word	0x2000029c
 8000e14:	08007bb4 	.word	0x08007bb4
 8000e18:	40012c00 	.word	0x40012c00
 8000e1c:	08007bbc 	.word	0x08007bbc
 8000e20:	20000084 	.word	0x20000084
 8000e24:	20000000 	.word	0x20000000
 8000e28:	20000298 	.word	0x20000298

08000e2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e32:	4b0f      	ldr	r3, [pc, #60]	; (8000e70 <HAL_MspInit+0x44>)
 8000e34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e36:	4a0e      	ldr	r2, [pc, #56]	; (8000e70 <HAL_MspInit+0x44>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6613      	str	r3, [r2, #96]	; 0x60
 8000e3e:	4b0c      	ldr	r3, [pc, #48]	; (8000e70 <HAL_MspInit+0x44>)
 8000e40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	607b      	str	r3, [r7, #4]
 8000e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e4a:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <HAL_MspInit+0x44>)
 8000e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e4e:	4a08      	ldr	r2, [pc, #32]	; (8000e70 <HAL_MspInit+0x44>)
 8000e50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e54:	6593      	str	r3, [r2, #88]	; 0x58
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_MspInit+0x44>)
 8000e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e5e:	603b      	str	r3, [r7, #0]
 8000e60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000e62:	f000 feb5 	bl	8001bd0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40021000 	.word	0x40021000

08000e74 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_TIM_Base_MspInit+0x38>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d10b      	bne.n	8000e9e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e86:	4b0a      	ldr	r3, [pc, #40]	; (8000eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8a:	4a09      	ldr	r2, [pc, #36]	; (8000eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e90:	6613      	str	r3, [r2, #96]	; 0x60
 8000e92:	4b07      	ldr	r3, [pc, #28]	; (8000eb0 <HAL_TIM_Base_MspInit+0x3c>)
 8000e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e9e:	bf00      	nop
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	40012c00 	.word	0x40012c00
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b088      	sub	sp, #32
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <HAL_TIM_MspPostInit+0x68>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d11d      	bne.n	8000f12 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed6:	4b12      	ldr	r3, [pc, #72]	; (8000f20 <HAL_TIM_MspPostInit+0x6c>)
 8000ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eda:	4a11      	ldr	r2, [pc, #68]	; (8000f20 <HAL_TIM_MspPostInit+0x6c>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_TIM_MspPostInit+0x6c>)
 8000ee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000eee:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000ef2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000f00:	2306      	movs	r3, #6
 8000f02:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f000 fc09 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000f12:	bf00      	nop
 8000f14:	3720      	adds	r7, #32
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40012c00 	.word	0x40012c00
 8000f20:	40021000 	.word	0x40021000

08000f24 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b09e      	sub	sp, #120	; 0x78
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]
 8000f34:	605a      	str	r2, [r3, #4]
 8000f36:	609a      	str	r2, [r3, #8]
 8000f38:	60da      	str	r2, [r3, #12]
 8000f3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	2254      	movs	r2, #84	; 0x54
 8000f42:	2100      	movs	r1, #0
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 fa2b 	bl	80063a0 <memset>
  if(huart->Instance==USART2)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <HAL_UART_MspInit+0xb8>)
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d13e      	bne.n	8000fd2 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f54:	2302      	movs	r3, #2
 8000f56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4618      	mov	r0, r3
 8000f62:	f001 fb79 	bl	8002658 <HAL_RCCEx_PeriphCLKConfig>
 8000f66:	4603      	mov	r3, r0
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d001      	beq.n	8000f70 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f6c:	f7ff fd94 	bl	8000a98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f70:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8000f7c:	4b18      	ldr	r3, [pc, #96]	; (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	4a14      	ldr	r2, [pc, #80]	; (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000f8e:	f043 0301 	orr.w	r3, r3, #1
 8000f92:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f94:	4b12      	ldr	r3, [pc, #72]	; (8000fe0 <HAL_UART_MspInit+0xbc>)
 8000f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fac:	2300      	movs	r3, #0
 8000fae:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fb8:	4619      	mov	r1, r3
 8000fba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fbe:	f000 fbb1 	bl	8001724 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2026      	movs	r0, #38	; 0x26
 8000fc8:	f000 fab7 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fcc:	2026      	movs	r0, #38	; 0x26
 8000fce:	f000 face 	bl	800156e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000fd2:	bf00      	nop
 8000fd4:	3778      	adds	r7, #120	; 0x78
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40004400 	.word	0x40004400
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001030:	f000 f968 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001034:	bf00      	nop
 8001036:	bd80      	pop	{r7, pc}

08001038 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <USART2_IRQHandler+0x10>)
 800103e:	f003 fa47 	bl	80044d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	200001c0 	.word	0x200001c0

0800104c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001050:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001054:	f000 fd00 	bl	8001a58 <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001058:	bf00      	nop
 800105a:	bd80      	pop	{r7, pc}

0800105c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
	return 1;
 8001060:	2301      	movs	r3, #1
}
 8001062:	4618      	mov	r0, r3
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_kill>:

int _kill(int pid, int sig)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001076:	f005 f969 	bl	800634c <__errno>
 800107a:	4603      	mov	r3, r0
 800107c:	2216      	movs	r2, #22
 800107e:	601a      	str	r2, [r3, #0]
	return -1;
 8001080:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_exit>:

void _exit (int status)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b082      	sub	sp, #8
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001094:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffe7 	bl	800106c <_kill>
	while (1) {}		/* Make sure we hang here */
 800109e:	e7fe      	b.n	800109e <_exit+0x12>

080010a0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ac:	2300      	movs	r3, #0
 80010ae:	617b      	str	r3, [r7, #20]
 80010b0:	e00a      	b.n	80010c8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010b2:	f3af 8000 	nop.w
 80010b6:	4601      	mov	r1, r0
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	b2ca      	uxtb	r2, r1
 80010c0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	3301      	adds	r3, #1
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	697a      	ldr	r2, [r7, #20]
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	dbf0      	blt.n	80010b2 <_read+0x12>
	}

return len;
 80010d0:	687b      	ldr	r3, [r7, #4]
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3718      	adds	r7, #24
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b086      	sub	sp, #24
 80010de:	af00      	add	r7, sp, #0
 80010e0:	60f8      	str	r0, [r7, #12]
 80010e2:	60b9      	str	r1, [r7, #8]
 80010e4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010e6:	2300      	movs	r3, #0
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	e009      	b.n	8001100 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	1c5a      	adds	r2, r3, #1
 80010f0:	60ba      	str	r2, [r7, #8]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa75 	bl	80005e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	3301      	adds	r3, #1
 80010fe:	617b      	str	r3, [r7, #20]
 8001100:	697a      	ldr	r2, [r7, #20]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	429a      	cmp	r2, r3
 8001106:	dbf1      	blt.n	80010ec <_write+0x12>
	}
	return len;
 8001108:	687b      	ldr	r3, [r7, #4]
}
 800110a:	4618      	mov	r0, r3
 800110c:	3718      	adds	r7, #24
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <_close>:

int _close(int file)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
	return -1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800111e:	4618      	mov	r0, r3
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr

0800112a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
 8001132:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800113a:	605a      	str	r2, [r3, #4]
	return 0;
 800113c:	2300      	movs	r3, #0
}
 800113e:	4618      	mov	r0, r3
 8001140:	370c      	adds	r7, #12
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr

0800114a <_isatty>:

int _isatty(int file)
{
 800114a:	b480      	push	{r7}
 800114c:	b083      	sub	sp, #12
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
	return 1;
 8001152:	2301      	movs	r3, #1
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
	return 0;
 800116c:	2300      	movs	r3, #0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001184:	4a14      	ldr	r2, [pc, #80]	; (80011d8 <_sbrk+0x5c>)
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <_sbrk+0x60>)
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001190:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <_sbrk+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b00      	cmp	r3, #0
 8001196:	d102      	bne.n	800119e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <_sbrk+0x64>)
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <_sbrk+0x68>)
 800119c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800119e:	4b10      	ldr	r3, [pc, #64]	; (80011e0 <_sbrk+0x64>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4413      	add	r3, r2
 80011a6:	693a      	ldr	r2, [r7, #16]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d207      	bcs.n	80011bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011ac:	f005 f8ce 	bl	800634c <__errno>
 80011b0:	4603      	mov	r3, r0
 80011b2:	220c      	movs	r2, #12
 80011b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ba:	e009      	b.n	80011d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011bc:	4b08      	ldr	r3, [pc, #32]	; (80011e0 <_sbrk+0x64>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011c2:	4b07      	ldr	r3, [pc, #28]	; (80011e0 <_sbrk+0x64>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a05      	ldr	r2, [pc, #20]	; (80011e0 <_sbrk+0x64>)
 80011cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011ce:	68fb      	ldr	r3, [r7, #12]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	3718      	adds	r7, #24
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20020000 	.word	0x20020000
 80011dc:	00000400 	.word	0x00000400
 80011e0:	20000314 	.word	0x20000314
 80011e4:	20000330 	.word	0x20000330

080011e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <SystemInit+0x20>)
 80011ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <SystemInit+0x20>)
 80011f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800120e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480d      	ldr	r0, [pc, #52]	; (8001248 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490e      	ldr	r1, [pc, #56]	; (800124c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0e      	ldr	r2, [pc, #56]	; (8001250 <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0b      	ldr	r2, [pc, #44]	; (8001254 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0b      	ldr	r4, [pc, #44]	; (8001258 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001236:	f7ff ffd7 	bl	80011e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800123a:	f005 f88d 	bl	8006358 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123e:	f7ff fa1f 	bl	8000680 <main>

08001242 <LoopForever>:

LoopForever:
    b LoopForever
 8001242:	e7fe      	b.n	8001242 <LoopForever>
  ldr   r0, =_estack
 8001244:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001248:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800124c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8001250:	08007e60 	.word	0x08007e60
  ldr r2, =_sbss
 8001254:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8001258:	2000032c 	.word	0x2000032c

0800125c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800125c:	e7fe      	b.n	800125c <ADC1_2_IRQHandler>

0800125e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b082      	sub	sp, #8
 8001262:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001264:	2300      	movs	r3, #0
 8001266:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001268:	2003      	movs	r0, #3
 800126a:	f000 f95b 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126e:	2000      	movs	r0, #0
 8001270:	f000 f80e 	bl	8001290 <HAL_InitTick>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d002      	beq.n	8001280 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800127a:	2301      	movs	r3, #1
 800127c:	71fb      	strb	r3, [r7, #7]
 800127e:	e001      	b.n	8001284 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001280:	f7ff fdd4 	bl	8000e2c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001284:	79fb      	ldrb	r3, [r7, #7]

}
 8001286:	4618      	mov	r0, r3
 8001288:	3708      	adds	r7, #8
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
	...

08001290 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001298:	2300      	movs	r3, #0
 800129a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800129c:	4b16      	ldr	r3, [pc, #88]	; (80012f8 <HAL_InitTick+0x68>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d022      	beq.n	80012ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80012a4:	4b15      	ldr	r3, [pc, #84]	; (80012fc <HAL_InitTick+0x6c>)
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	4b13      	ldr	r3, [pc, #76]	; (80012f8 <HAL_InitTick+0x68>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80012b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	f000 f966 	bl	800158a <HAL_SYSTICK_Config>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10f      	bne.n	80012e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b0f      	cmp	r3, #15
 80012c8:	d809      	bhi.n	80012de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012ca:	2200      	movs	r2, #0
 80012cc:	6879      	ldr	r1, [r7, #4]
 80012ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012d2:	f000 f932 	bl	800153a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d6:	4a0a      	ldr	r2, [pc, #40]	; (8001300 <HAL_InitTick+0x70>)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	6013      	str	r3, [r2, #0]
 80012dc:	e007      	b.n	80012ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	73fb      	strb	r3, [r7, #15]
 80012e2:	e004      	b.n	80012ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e4:	2301      	movs	r3, #1
 80012e6:	73fb      	strb	r3, [r7, #15]
 80012e8:	e001      	b.n	80012ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012ea:	2301      	movs	r3, #1
 80012ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	200000f0 	.word	0x200000f0
 80012fc:	200000e8 	.word	0x200000e8
 8001300:	200000ec 	.word	0x200000ec

08001304 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <HAL_IncTick+0x1c>)
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	4b05      	ldr	r3, [pc, #20]	; (8001324 <HAL_IncTick+0x20>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4413      	add	r3, r2
 8001312:	4a03      	ldr	r2, [pc, #12]	; (8001320 <HAL_IncTick+0x1c>)
 8001314:	6013      	str	r3, [r2, #0]
}
 8001316:	bf00      	nop
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	20000318 	.word	0x20000318
 8001324:	200000f0 	.word	0x200000f0

08001328 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001328:	b480      	push	{r7}
 800132a:	af00      	add	r7, sp, #0
  return uwTick;
 800132c:	4b03      	ldr	r3, [pc, #12]	; (800133c <HAL_GetTick+0x14>)
 800132e:	681b      	ldr	r3, [r3, #0]
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	20000318 	.word	0x20000318

08001340 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff ffee 	bl	8001328 <HAL_GetTick>
 800134c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001358:	d004      	beq.n	8001364 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_Delay+0x40>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	4413      	add	r3, r2
 8001362:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001364:	bf00      	nop
 8001366:	f7ff ffdf 	bl	8001328 <HAL_GetTick>
 800136a:	4602      	mov	r2, r0
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	429a      	cmp	r2, r3
 8001374:	d8f7      	bhi.n	8001366 <HAL_Delay+0x26>
  {
  }
}
 8001376:	bf00      	nop
 8001378:	bf00      	nop
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200000f0 	.word	0x200000f0

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001548:	f7ff ff40 	bl	80013cc <__NVIC_GetPriorityGrouping>
 800154c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	68b9      	ldr	r1, [r7, #8]
 8001552:	6978      	ldr	r0, [r7, #20]
 8001554:	f7ff ff90 	bl	8001478 <NVIC_EncodePriority>
 8001558:	4602      	mov	r2, r0
 800155a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800155e:	4611      	mov	r1, r2
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ff5f 	bl	8001424 <__NVIC_SetPriority>
}
 8001566:	bf00      	nop
 8001568:	3718      	adds	r7, #24
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ff33 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001582:	bf00      	nop
 8001584:	3708      	adds	r7, #8
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001592:	6878      	ldr	r0, [r7, #4]
 8001594:	f7ff ffa4 	bl	80014e0 <SysTick_Config>
 8001598:	4603      	mov	r3, r0
}
 800159a:	4618      	mov	r0, r3
 800159c:	3708      	adds	r7, #8
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}

080015a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015a2:	b480      	push	{r7}
 80015a4:	b085      	sub	sp, #20
 80015a6:	af00      	add	r7, sp, #0
 80015a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015aa:	2300      	movs	r3, #0
 80015ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015b4:	b2db      	uxtb	r3, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d005      	beq.n	80015c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2204      	movs	r2, #4
 80015be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	73fb      	strb	r3, [r7, #15]
 80015c4:	e037      	b.n	8001636 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f022 020e 	bic.w	r2, r2, #14
 80015d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 0201 	bic.w	r2, r2, #1
 80015f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015fa:	f003 021f 	and.w	r2, r3, #31
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	2101      	movs	r1, #1
 8001604:	fa01 f202 	lsl.w	r2, r1, r2
 8001608:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160e:	687a      	ldr	r2, [r7, #4]
 8001610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001612:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001618:	2b00      	cmp	r3, #0
 800161a:	d00c      	beq.n	8001636 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800162a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001634:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2201      	movs	r2, #1
 800163a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2200      	movs	r2, #0
 8001642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001646:	7bfb      	ldrb	r3, [r7, #15]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800165c:	2300      	movs	r3, #0
 800165e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d00d      	beq.n	8001688 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2204      	movs	r2, #4
 8001670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2201      	movs	r2, #1
 8001676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2200      	movs	r2, #0
 800167e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	73fb      	strb	r3, [r7, #15]
 8001686:	e047      	b.n	8001718 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681a      	ldr	r2, [r3, #0]
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f022 020e 	bic.w	r2, r2, #14
 8001696:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f022 0201 	bic.w	r2, r2, #1
 80016a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	681a      	ldr	r2, [r3, #0]
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016bc:	f003 021f 	and.w	r2, r3, #31
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	2101      	movs	r1, #1
 80016c6:	fa01 f202 	lsl.w	r2, r1, r2
 80016ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d00c      	beq.n	80016f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	2201      	movs	r2, #1
 80016fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	4798      	blx	r3
    }
  }
  return status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001732:	e15a      	b.n	80019ea <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 814c 	beq.w	80019e4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001760:	2b02      	cmp	r3, #2
 8001762:	d130      	bne.n	80017c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179a:	2201      	movs	r2, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 0201 	and.w	r2, r3, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d017      	beq.n	8001802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d123      	bne.n	8001856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	6939      	ldr	r1, [r7, #16]
 8001852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0203 	and.w	r2, r3, #3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80a6 	beq.w	80019e4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	4b5b      	ldr	r3, [pc, #364]	; (8001a08 <HAL_GPIO_Init+0x2e4>)
 800189a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800189c:	4a5a      	ldr	r2, [pc, #360]	; (8001a08 <HAL_GPIO_Init+0x2e4>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6613      	str	r3, [r2, #96]	; 0x60
 80018a4:	4b58      	ldr	r3, [pc, #352]	; (8001a08 <HAL_GPIO_Init+0x2e4>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018b0:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018da:	d01f      	beq.n	800191c <HAL_GPIO_Init+0x1f8>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a4c      	ldr	r2, [pc, #304]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d019      	beq.n	8001918 <HAL_GPIO_Init+0x1f4>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a4b      	ldr	r2, [pc, #300]	; (8001a14 <HAL_GPIO_Init+0x2f0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <HAL_GPIO_Init+0x1f0>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a4a      	ldr	r2, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x2f4>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d00d      	beq.n	8001910 <HAL_GPIO_Init+0x1ec>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a49      	ldr	r2, [pc, #292]	; (8001a1c <HAL_GPIO_Init+0x2f8>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d007      	beq.n	800190c <HAL_GPIO_Init+0x1e8>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a48      	ldr	r2, [pc, #288]	; (8001a20 <HAL_GPIO_Init+0x2fc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d101      	bne.n	8001908 <HAL_GPIO_Init+0x1e4>
 8001904:	2305      	movs	r3, #5
 8001906:	e00a      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001908:	2306      	movs	r3, #6
 800190a:	e008      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 800190c:	2304      	movs	r3, #4
 800190e:	e006      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001910:	2303      	movs	r3, #3
 8001912:	e004      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001914:	2302      	movs	r3, #2
 8001916:	e002      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 8001918:	2301      	movs	r3, #1
 800191a:	e000      	b.n	800191e <HAL_GPIO_Init+0x1fa>
 800191c:	2300      	movs	r3, #0
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	f002 0203 	and.w	r2, r2, #3
 8001924:	0092      	lsls	r2, r2, #2
 8001926:	4093      	lsls	r3, r2
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	4313      	orrs	r3, r2
 800192c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800192e:	4937      	ldr	r1, [pc, #220]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	089b      	lsrs	r3, r3, #2
 8001934:	3302      	adds	r3, #2
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800193c:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <HAL_GPIO_Init+0x300>)
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001954:	2b00      	cmp	r3, #0
 8001956:	d003      	beq.n	8001960 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001960:	4a30      	ldr	r2, [pc, #192]	; (8001a24 <HAL_GPIO_Init+0x300>)
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001966:	4b2f      	ldr	r3, [pc, #188]	; (8001a24 <HAL_GPIO_Init+0x300>)
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	43db      	mvns	r3, r3
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	4013      	ands	r3, r2
 8001974:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4313      	orrs	r3, r2
 8001988:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800198a:	4a26      	ldr	r2, [pc, #152]	; (8001a24 <HAL_GPIO_Init+0x300>)
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001990:	4b24      	ldr	r3, [pc, #144]	; (8001a24 <HAL_GPIO_Init+0x300>)
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	43db      	mvns	r3, r3
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4013      	ands	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019b4:	4a1b      	ldr	r2, [pc, #108]	; (8001a24 <HAL_GPIO_Init+0x300>)
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019ba:	4b1a      	ldr	r3, [pc, #104]	; (8001a24 <HAL_GPIO_Init+0x300>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	4013      	ands	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	4313      	orrs	r3, r2
 80019dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <HAL_GPIO_Init+0x300>)
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	3301      	adds	r3, #1
 80019e8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	f47f ae9d 	bne.w	8001734 <HAL_GPIO_Init+0x10>
  }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	371c      	adds	r7, #28
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	48000800 	.word	0x48000800
 8001a18:	48000c00 	.word	0x48000c00
 8001a1c:	48001000 	.word	0x48001000
 8001a20:	48001400 	.word	0x48001400
 8001a24:	40010400 	.word	0x40010400

08001a28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	460b      	mov	r3, r1
 8001a32:	807b      	strh	r3, [r7, #2]
 8001a34:	4613      	mov	r3, r2
 8001a36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a38:	787b      	ldrb	r3, [r7, #1]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a3e:	887a      	ldrh	r2, [r7, #2]
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a44:	e002      	b.n	8001a4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a46:	887a      	ldrh	r2, [r7, #2]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a62:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	88fb      	ldrh	r3, [r7, #6]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d006      	beq.n	8001a7c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a6e:	4a05      	ldr	r2, [pc, #20]	; (8001a84 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	88fb      	ldrh	r3, [r7, #6]
 8001a72:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4618      	mov	r0, r3
 8001a78:	f7fe fdf2 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40010400 	.word	0x40010400

08001a88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d141      	bne.n	8001b1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a96:	4b4b      	ldr	r3, [pc, #300]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aa2:	d131      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001aa4:	4b47      	ldr	r3, [pc, #284]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001aaa:	4a46      	ldr	r2, [pc, #280]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ab0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ab4:	4b43      	ldr	r3, [pc, #268]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001abc:	4a41      	ldr	r2, [pc, #260]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ac2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac4:	4b40      	ldr	r3, [pc, #256]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	2232      	movs	r2, #50	; 0x32
 8001aca:	fb02 f303 	mul.w	r3, r2, r3
 8001ace:	4a3f      	ldr	r2, [pc, #252]	; (8001bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ad4:	0c9b      	lsrs	r3, r3, #18
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ada:	e002      	b.n	8001ae2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ae2:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001aee:	d102      	bne.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d1f2      	bne.n	8001adc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af6:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001afe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b02:	d158      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e057      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b08:	4b2e      	ldr	r3, [pc, #184]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b0e:	4a2d      	ldr	r2, [pc, #180]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001b14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001b18:	e04d      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b20:	d141      	bne.n	8001ba6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b22:	4b28      	ldr	r3, [pc, #160]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b2e:	d131      	bne.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b30:	4b24      	ldr	r3, [pc, #144]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b36:	4a23      	ldr	r2, [pc, #140]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b48:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2232      	movs	r2, #50	; 0x32
 8001b56:	fb02 f303 	mul.w	r3, r2, r3
 8001b5a:	4a1c      	ldr	r2, [pc, #112]	; (8001bcc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b60:	0c9b      	lsrs	r3, r3, #18
 8001b62:	3301      	adds	r3, #1
 8001b64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b66:	e002      	b.n	8001b6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b6e:	4b15      	ldr	r3, [pc, #84]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b7a:	d102      	bne.n	8001b82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f2      	bne.n	8001b68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b82:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b8e:	d112      	bne.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e011      	b.n	8001bb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b94:	4b0b      	ldr	r3, [pc, #44]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001b9a:	4a0a      	ldr	r2, [pc, #40]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ba0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ba4:	e007      	b.n	8001bb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ba6:	4b07      	ldr	r3, [pc, #28]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bae:	4a05      	ldr	r2, [pc, #20]	; (8001bc4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3714      	adds	r7, #20
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	200000e8 	.word	0x200000e8
 8001bcc:	431bde83 	.word	0x431bde83

08001bd0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	4a04      	ldr	r2, [pc, #16]	; (8001bec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bde:	6093      	str	r3, [r2, #8]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	40007000 	.word	0x40007000

08001bf0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e306      	b.n	8002210 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d075      	beq.n	8001cfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b97      	ldr	r3, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b94      	ldr	r3, [pc, #592]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b0c      	cmp	r3, #12
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_OscConfig+0x3e>
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	2b03      	cmp	r3, #3
 8001c2c:	d002      	beq.n	8001c34 <HAL_RCC_OscConfig+0x44>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d10b      	bne.n	8001c4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	4b8d      	ldr	r3, [pc, #564]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d05b      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x108>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d157      	bne.n	8001cf8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e2e1      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c54:	d106      	bne.n	8001c64 <HAL_RCC_OscConfig+0x74>
 8001c56:	4b85      	ldr	r3, [pc, #532]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a84      	ldr	r2, [pc, #528]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e01d      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c6c:	d10c      	bne.n	8001c88 <HAL_RCC_OscConfig+0x98>
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a7e      	ldr	r2, [pc, #504]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c78:	6013      	str	r3, [r2, #0]
 8001c7a:	4b7c      	ldr	r3, [pc, #496]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a7b      	ldr	r2, [pc, #492]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	e00b      	b.n	8001ca0 <HAL_RCC_OscConfig+0xb0>
 8001c88:	4b78      	ldr	r3, [pc, #480]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a77      	ldr	r2, [pc, #476]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c92:	6013      	str	r3, [r2, #0]
 8001c94:	4b75      	ldr	r3, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a74      	ldr	r2, [pc, #464]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001c9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fb3e 	bl	8001328 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cb0:	f7ff fb3a 	bl	8001328 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b64      	cmp	r3, #100	; 0x64
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e2a6      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc2:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f0      	beq.n	8001cb0 <HAL_RCC_OscConfig+0xc0>
 8001cce:	e014      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff fb2a 	bl	8001328 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cd8:	f7ff fb26 	bl	8001328 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b64      	cmp	r3, #100	; 0x64
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e292      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cea:	4b60      	ldr	r3, [pc, #384]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1f0      	bne.n	8001cd8 <HAL_RCC_OscConfig+0xe8>
 8001cf6:	e000      	b.n	8001cfa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f003 0302 	and.w	r3, r3, #2
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d075      	beq.n	8001df2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d06:	4b59      	ldr	r3, [pc, #356]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	f003 030c 	and.w	r3, r3, #12
 8001d0e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d10:	4b56      	ldr	r3, [pc, #344]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	2b0c      	cmp	r3, #12
 8001d1e:	d102      	bne.n	8001d26 <HAL_RCC_OscConfig+0x136>
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d002      	beq.n	8001d2c <HAL_RCC_OscConfig+0x13c>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	2b04      	cmp	r3, #4
 8001d2a:	d11f      	bne.n	8001d6c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d2c:	4b4f      	ldr	r3, [pc, #316]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d005      	beq.n	8001d44 <HAL_RCC_OscConfig+0x154>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e265      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d44:	4b49      	ldr	r3, [pc, #292]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	691b      	ldr	r3, [r3, #16]
 8001d50:	061b      	lsls	r3, r3, #24
 8001d52:	4946      	ldr	r1, [pc, #280]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d58:	4b45      	ldr	r3, [pc, #276]	; (8001e70 <HAL_RCC_OscConfig+0x280>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f7ff fa97 	bl	8001290 <HAL_InitTick>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d043      	beq.n	8001df0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e251      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d023      	beq.n	8001dbc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001d74:	4b3d      	ldr	r3, [pc, #244]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a3c      	ldr	r2, [pc, #240]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d80:	f7ff fad2 	bl	8001328 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d86:	e008      	b.n	8001d9a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d88:	f7ff face 	bl	8001328 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e23a      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001da6:	4b31      	ldr	r3, [pc, #196]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	061b      	lsls	r3, r3, #24
 8001db4:	492d      	ldr	r1, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001db6:	4313      	orrs	r3, r2
 8001db8:	604b      	str	r3, [r1, #4]
 8001dba:	e01a      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a2a      	ldr	r2, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001dc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc8:	f7ff faae 	bl	8001328 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dd0:	f7ff faaa 	bl	8001328 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b02      	cmp	r3, #2
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e216      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d1f0      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x1e0>
 8001dee:	e000      	b.n	8001df2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d041      	beq.n	8001e82 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01c      	beq.n	8001e40 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e0c:	4a17      	ldr	r2, [pc, #92]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e16:	f7ff fa87 	bl	8001328 <HAL_GetTick>
 8001e1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e1e:	f7ff fa83 	bl	8001328 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e1ef      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e30:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e36:	f003 0302 	and.w	r3, r3, #2
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d0ef      	beq.n	8001e1e <HAL_RCC_OscConfig+0x22e>
 8001e3e:	e020      	b.n	8001e82 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e40:	4b0a      	ldr	r3, [pc, #40]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e46:	4a09      	ldr	r2, [pc, #36]	; (8001e6c <HAL_RCC_OscConfig+0x27c>)
 8001e48:	f023 0301 	bic.w	r3, r3, #1
 8001e4c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e50:	f7ff fa6a 	bl	8001328 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e56:	e00d      	b.n	8001e74 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e58:	f7ff fa66 	bl	8001328 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b02      	cmp	r3, #2
 8001e64:	d906      	bls.n	8001e74 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1d2      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	200000ec 	.word	0x200000ec
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001e74:	4b8c      	ldr	r3, [pc, #560]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001e76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d1ea      	bne.n	8001e58 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0304 	and.w	r3, r3, #4
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f000 80a6 	beq.w	8001fdc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001e94:	4b84      	ldr	r3, [pc, #528]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001e96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x2b4>
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e000      	b.n	8001ea6 <HAL_RCC_OscConfig+0x2b6>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00d      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eaa:	4b7f      	ldr	r3, [pc, #508]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eae:	4a7e      	ldr	r2, [pc, #504]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	6593      	str	r3, [r2, #88]	; 0x58
 8001eb6:	4b7c      	ldr	r3, [pc, #496]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ec6:	4b79      	ldr	r3, [pc, #484]	; (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d118      	bne.n	8001f04 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ed2:	4b76      	ldr	r3, [pc, #472]	; (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a75      	ldr	r2, [pc, #468]	; (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ede:	f7ff fa23 	bl	8001328 <HAL_GetTick>
 8001ee2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ee4:	e008      	b.n	8001ef8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ee6:	f7ff fa1f 	bl	8001328 <HAL_GetTick>
 8001eea:	4602      	mov	r2, r0
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	1ad3      	subs	r3, r2, r3
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d901      	bls.n	8001ef8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e18b      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ef8:	4b6c      	ldr	r3, [pc, #432]	; (80020ac <HAL_RCC_OscConfig+0x4bc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d0f0      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_RCC_OscConfig+0x32e>
 8001f0c:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f12:	4a65      	ldr	r2, [pc, #404]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f14:	f043 0301 	orr.w	r3, r3, #1
 8001f18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f1c:	e024      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	2b05      	cmp	r3, #5
 8001f24:	d110      	bne.n	8001f48 <HAL_RCC_OscConfig+0x358>
 8001f26:	4b60      	ldr	r3, [pc, #384]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2c:	4a5e      	ldr	r2, [pc, #376]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f2e:	f043 0304 	orr.w	r3, r3, #4
 8001f32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f36:	4b5c      	ldr	r3, [pc, #368]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f3c:	4a5a      	ldr	r2, [pc, #360]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f3e:	f043 0301 	orr.w	r3, r3, #1
 8001f42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f46:	e00f      	b.n	8001f68 <HAL_RCC_OscConfig+0x378>
 8001f48:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4e:	4a56      	ldr	r2, [pc, #344]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f50:	f023 0301 	bic.w	r3, r3, #1
 8001f54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f58:	4b53      	ldr	r3, [pc, #332]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5e:	4a52      	ldr	r2, [pc, #328]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f023 0304 	bic.w	r3, r3, #4
 8001f64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d016      	beq.n	8001f9e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f70:	f7ff f9da 	bl	8001328 <HAL_GetTick>
 8001f74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f76:	e00a      	b.n	8001f8e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f78:	f7ff f9d6 	bl	8001328 <HAL_GetTick>
 8001f7c:	4602      	mov	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d901      	bls.n	8001f8e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	e140      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001f8e:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d0ed      	beq.n	8001f78 <HAL_RCC_OscConfig+0x388>
 8001f9c:	e015      	b.n	8001fca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f9e:	f7ff f9c3 	bl	8001328 <HAL_GetTick>
 8001fa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fa4:	e00a      	b.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff f9bf 	bl	8001328 <HAL_GetTick>
 8001faa:	4602      	mov	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d901      	bls.n	8001fbc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	e129      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1ed      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001fca:	7ffb      	ldrb	r3, [r7, #31]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d105      	bne.n	8001fdc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fd0:	4b35      	ldr	r3, [pc, #212]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd4:	4a34      	ldr	r2, [pc, #208]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001fd6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fda:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d03c      	beq.n	8002062 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d01c      	beq.n	800202a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ff0:	4b2d      	ldr	r3, [pc, #180]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ff6:	4a2c      	ldr	r2, [pc, #176]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8001ff8:	f043 0301 	orr.w	r3, r3, #1
 8001ffc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff f992 	bl	8001328 <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002008:	f7ff f98e 	bl	8001328 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e0fa      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800201a:	4b23      	ldr	r3, [pc, #140]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800201c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d0ef      	beq.n	8002008 <HAL_RCC_OscConfig+0x418>
 8002028:	e01b      	b.n	8002062 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800202a:	4b1f      	ldr	r3, [pc, #124]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800202c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002030:	4a1d      	ldr	r2, [pc, #116]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002032:	f023 0301 	bic.w	r3, r3, #1
 8002036:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203a:	f7ff f975 	bl	8001328 <HAL_GetTick>
 800203e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002040:	e008      	b.n	8002054 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002042:	f7ff f971 	bl	8001328 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	2b02      	cmp	r3, #2
 800204e:	d901      	bls.n	8002054 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002050:	2303      	movs	r3, #3
 8002052:	e0dd      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002054:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002056:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1ef      	bne.n	8002042 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	69db      	ldr	r3, [r3, #28]
 8002066:	2b00      	cmp	r3, #0
 8002068:	f000 80d1 	beq.w	800220e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800206c:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 030c 	and.w	r3, r3, #12
 8002074:	2b0c      	cmp	r3, #12
 8002076:	f000 808b 	beq.w	8002190 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	69db      	ldr	r3, [r3, #28]
 800207e:	2b02      	cmp	r3, #2
 8002080:	d15e      	bne.n	8002140 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <HAL_RCC_OscConfig+0x4b8>)
 8002088:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800208e:	f7ff f94b 	bl	8001328 <HAL_GetTick>
 8002092:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002094:	e00c      	b.n	80020b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002096:	f7ff f947 	bl	8001328 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d905      	bls.n	80020b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80020a4:	2303      	movs	r3, #3
 80020a6:	e0b3      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
 80020a8:	40021000 	.word	0x40021000
 80020ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b0:	4b59      	ldr	r3, [pc, #356]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d1ec      	bne.n	8002096 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80020bc:	4b56      	ldr	r3, [pc, #344]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 80020be:	68da      	ldr	r2, [r3, #12]
 80020c0:	4b56      	ldr	r3, [pc, #344]	; (800221c <HAL_RCC_OscConfig+0x62c>)
 80020c2:	4013      	ands	r3, r2
 80020c4:	687a      	ldr	r2, [r7, #4]
 80020c6:	6a11      	ldr	r1, [r2, #32]
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80020cc:	3a01      	subs	r2, #1
 80020ce:	0112      	lsls	r2, r2, #4
 80020d0:	4311      	orrs	r1, r2
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80020d6:	0212      	lsls	r2, r2, #8
 80020d8:	4311      	orrs	r1, r2
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80020de:	0852      	lsrs	r2, r2, #1
 80020e0:	3a01      	subs	r2, #1
 80020e2:	0552      	lsls	r2, r2, #21
 80020e4:	4311      	orrs	r1, r2
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80020ea:	0852      	lsrs	r2, r2, #1
 80020ec:	3a01      	subs	r2, #1
 80020ee:	0652      	lsls	r2, r2, #25
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80020f6:	06d2      	lsls	r2, r2, #27
 80020f8:	430a      	orrs	r2, r1
 80020fa:	4947      	ldr	r1, [pc, #284]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 80020fc:	4313      	orrs	r3, r2
 80020fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002100:	4b45      	ldr	r3, [pc, #276]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a44      	ldr	r2, [pc, #272]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002106:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800210c:	4b42      	ldr	r3, [pc, #264]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	4a41      	ldr	r2, [pc, #260]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002112:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002116:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002118:	f7ff f906 	bl	8001328 <HAL_GetTick>
 800211c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800211e:	e008      	b.n	8002132 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002120:	f7ff f902 	bl	8001328 <HAL_GetTick>
 8002124:	4602      	mov	r2, r0
 8002126:	693b      	ldr	r3, [r7, #16]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	2b02      	cmp	r3, #2
 800212c:	d901      	bls.n	8002132 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800212e:	2303      	movs	r3, #3
 8002130:	e06e      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002132:	4b39      	ldr	r3, [pc, #228]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d0f0      	beq.n	8002120 <HAL_RCC_OscConfig+0x530>
 800213e:	e066      	b.n	800220e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002140:	4b35      	ldr	r3, [pc, #212]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a34      	ldr	r2, [pc, #208]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002146:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800214a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800214c:	4b32      	ldr	r3, [pc, #200]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	4a31      	ldr	r2, [pc, #196]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002158:	4b2f      	ldr	r3, [pc, #188]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	4a2e      	ldr	r2, [pc, #184]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 800215e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002162:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002166:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002168:	f7ff f8de 	bl	8001328 <HAL_GetTick>
 800216c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800216e:	e008      	b.n	8002182 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002170:	f7ff f8da 	bl	8001328 <HAL_GetTick>
 8002174:	4602      	mov	r2, r0
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	2b02      	cmp	r3, #2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e046      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002182:	4b25      	ldr	r3, [pc, #148]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f0      	bne.n	8002170 <HAL_RCC_OscConfig+0x580>
 800218e:	e03e      	b.n	800220e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	69db      	ldr	r3, [r3, #28]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d101      	bne.n	800219c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e039      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800219c:	4b1e      	ldr	r3, [pc, #120]	; (8002218 <HAL_RCC_OscConfig+0x628>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	f003 0203 	and.w	r2, r3, #3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d12c      	bne.n	800220a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	3b01      	subs	r3, #1
 80021bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021be:	429a      	cmp	r2, r3
 80021c0:	d123      	bne.n	800220a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d11b      	bne.n	800220a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021dc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80021de:	429a      	cmp	r2, r3
 80021e0:	d113      	bne.n	800220a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	085b      	lsrs	r3, r3, #1
 80021ee:	3b01      	subs	r3, #1
 80021f0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d109      	bne.n	800220a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	3720      	adds	r7, #32
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40021000 	.word	0x40021000
 800221c:	019f800c 	.word	0x019f800c

08002220 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b086      	sub	sp, #24
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
 8002228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800222a:	2300      	movs	r3, #0
 800222c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e11e      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b91      	ldr	r3, [pc, #580]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d910      	bls.n	8002268 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b8e      	ldr	r3, [pc, #568]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 020f 	bic.w	r2, r3, #15
 800224e:	498c      	ldr	r1, [pc, #560]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b8a      	ldr	r3, [pc, #552]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 030f 	and.w	r3, r3, #15
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e106      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0301 	and.w	r3, r3, #1
 8002270:	2b00      	cmp	r3, #0
 8002272:	d073      	beq.n	800235c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	2b03      	cmp	r3, #3
 800227a:	d129      	bne.n	80022d0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227c:	4b81      	ldr	r3, [pc, #516]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002284:	2b00      	cmp	r3, #0
 8002286:	d101      	bne.n	800228c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e0f4      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800228c:	f000 f99e 	bl	80025cc <RCC_GetSysClockFreqFromPLLSource>
 8002290:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	4a7c      	ldr	r2, [pc, #496]	; (8002488 <HAL_RCC_ClockConfig+0x268>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d93f      	bls.n	800231a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800229a:	4b7a      	ldr	r3, [pc, #488]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d009      	beq.n	80022ba <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d033      	beq.n	800231a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d12f      	bne.n	800231a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80022ba:	4b72      	ldr	r3, [pc, #456]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022c2:	4a70      	ldr	r2, [pc, #448]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80022c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80022ca:	2380      	movs	r3, #128	; 0x80
 80022cc:	617b      	str	r3, [r7, #20]
 80022ce:	e024      	b.n	800231a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d107      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d8:	4b6a      	ldr	r3, [pc, #424]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022e4:	2301      	movs	r3, #1
 80022e6:	e0c6      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022e8:	4b66      	ldr	r3, [pc, #408]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0be      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80022f8:	f000 f8ce 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	4a61      	ldr	r2, [pc, #388]	; (8002488 <HAL_RCC_ClockConfig+0x268>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d909      	bls.n	800231a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002306:	4b5f      	ldr	r3, [pc, #380]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800230e:	4a5d      	ldr	r2, [pc, #372]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002310:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002314:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002316:	2380      	movs	r3, #128	; 0x80
 8002318:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800231a:	4b5a      	ldr	r3, [pc, #360]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	f023 0203 	bic.w	r2, r3, #3
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	4957      	ldr	r1, [pc, #348]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002328:	4313      	orrs	r3, r2
 800232a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800232c:	f7fe fffc 	bl	8001328 <HAL_GetTick>
 8002330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002332:	e00a      	b.n	800234a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002334:	f7fe fff8 	bl	8001328 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002342:	4293      	cmp	r3, r2
 8002344:	d901      	bls.n	800234a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e095      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800234a:	4b4e      	ldr	r3, [pc, #312]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f003 020c 	and.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	429a      	cmp	r2, r3
 800235a:	d1eb      	bne.n	8002334 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d023      	beq.n	80023b0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d005      	beq.n	8002380 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002374:	4b43      	ldr	r3, [pc, #268]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	4a42      	ldr	r2, [pc, #264]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800237a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800237e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d007      	beq.n	800239c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800238c:	4b3d      	ldr	r3, [pc, #244]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002394:	4a3b      	ldr	r2, [pc, #236]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002396:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800239a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239c:	4b39      	ldr	r3, [pc, #228]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	4936      	ldr	r1, [pc, #216]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	608b      	str	r3, [r1, #8]
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	2b80      	cmp	r3, #128	; 0x80
 80023b4:	d105      	bne.n	80023c2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80023b6:	4b33      	ldr	r3, [pc, #204]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	4a32      	ldr	r2, [pc, #200]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 80023bc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023c0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023c2:	4b2f      	ldr	r3, [pc, #188]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 030f 	and.w	r3, r3, #15
 80023ca:	683a      	ldr	r2, [r7, #0]
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d21d      	bcs.n	800240c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d0:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f023 020f 	bic.w	r2, r3, #15
 80023d8:	4929      	ldr	r1, [pc, #164]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	4313      	orrs	r3, r2
 80023de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023e0:	f7fe ffa2 	bl	8001328 <HAL_GetTick>
 80023e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	e00a      	b.n	80023fe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e8:	f7fe ff9e 	bl	8001328 <HAL_GetTick>
 80023ec:	4602      	mov	r2, r0
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	1ad3      	subs	r3, r2, r3
 80023f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e03b      	b.n	8002476 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	; (8002480 <HAL_RCC_ClockConfig+0x260>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 030f 	and.w	r3, r3, #15
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d1ed      	bne.n	80023e8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b00      	cmp	r3, #0
 8002416:	d008      	beq.n	800242a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002418:	4b1a      	ldr	r3, [pc, #104]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4917      	ldr	r1, [pc, #92]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0308 	and.w	r3, r3, #8
 8002432:	2b00      	cmp	r3, #0
 8002434:	d009      	beq.n	800244a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002436:	4b13      	ldr	r3, [pc, #76]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002438:	689b      	ldr	r3, [r3, #8]
 800243a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	691b      	ldr	r3, [r3, #16]
 8002442:	00db      	lsls	r3, r3, #3
 8002444:	490f      	ldr	r1, [pc, #60]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002446:	4313      	orrs	r3, r2
 8002448:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800244a:	f000 f825 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800244e:	4602      	mov	r2, r0
 8002450:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <HAL_RCC_ClockConfig+0x264>)
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	f003 030f 	and.w	r3, r3, #15
 800245a:	490c      	ldr	r1, [pc, #48]	; (800248c <HAL_RCC_ClockConfig+0x26c>)
 800245c:	5ccb      	ldrb	r3, [r1, r3]
 800245e:	f003 031f 	and.w	r3, r3, #31
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a0a      	ldr	r2, [pc, #40]	; (8002490 <HAL_RCC_ClockConfig+0x270>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800246a:	4b0a      	ldr	r3, [pc, #40]	; (8002494 <HAL_RCC_ClockConfig+0x274>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe ff0e 	bl	8001290 <HAL_InitTick>
 8002474:	4603      	mov	r3, r0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	04c4b400 	.word	0x04c4b400
 800248c:	08007bc4 	.word	0x08007bc4
 8002490:	200000e8 	.word	0x200000e8
 8002494:	200000ec 	.word	0x200000ec

08002498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002498:	b480      	push	{r7}
 800249a:	b087      	sub	sp, #28
 800249c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800249e:	4b2c      	ldr	r3, [pc, #176]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
 80024a6:	2b04      	cmp	r3, #4
 80024a8:	d102      	bne.n	80024b0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80024aa:	4b2a      	ldr	r3, [pc, #168]	; (8002554 <HAL_RCC_GetSysClockFreq+0xbc>)
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e047      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80024b0:	4b27      	ldr	r3, [pc, #156]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 030c 	and.w	r3, r3, #12
 80024b8:	2b08      	cmp	r3, #8
 80024ba:	d102      	bne.n	80024c2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024bc:	4b26      	ldr	r3, [pc, #152]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e03e      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80024c2:	4b23      	ldr	r3, [pc, #140]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d136      	bne.n	800253c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	f003 0303 	and.w	r3, r3, #3
 80024d6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d8:	4b1d      	ldr	r3, [pc, #116]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	091b      	lsrs	r3, r3, #4
 80024de:	f003 030f 	and.w	r3, r3, #15
 80024e2:	3301      	adds	r3, #1
 80024e4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2b03      	cmp	r3, #3
 80024ea:	d10c      	bne.n	8002506 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <HAL_RCC_GetSysClockFreq+0xc0>)
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80024f4:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 80024f6:	68d2      	ldr	r2, [r2, #12]
 80024f8:	0a12      	lsrs	r2, r2, #8
 80024fa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
 8002502:	617b      	str	r3, [r7, #20]
      break;
 8002504:	e00c      	b.n	8002520 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	fbb2 f3f3 	udiv	r3, r2, r3
 800250e:	4a10      	ldr	r2, [pc, #64]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002510:	68d2      	ldr	r2, [r2, #12]
 8002512:	0a12      	lsrs	r2, r2, #8
 8002514:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002518:	fb02 f303 	mul.w	r3, r2, r3
 800251c:	617b      	str	r3, [r7, #20]
      break;
 800251e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	0e5b      	lsrs	r3, r3, #25
 8002526:	f003 0303 	and.w	r3, r3, #3
 800252a:	3301      	adds	r3, #1
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	fbb2 f3f3 	udiv	r3, r2, r3
 8002538:	613b      	str	r3, [r7, #16]
 800253a:	e001      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800253c:	2300      	movs	r3, #0
 800253e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002540:	693b      	ldr	r3, [r7, #16]
}
 8002542:	4618      	mov	r0, r3
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40021000 	.word	0x40021000
 8002554:	00f42400 	.word	0x00f42400
 8002558:	016e3600 	.word	0x016e3600

0800255c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002560:	4b03      	ldr	r3, [pc, #12]	; (8002570 <HAL_RCC_GetHCLKFreq+0x14>)
 8002562:	681b      	ldr	r3, [r3, #0]
}
 8002564:	4618      	mov	r0, r3
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	200000e8 	.word	0x200000e8

08002574 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002578:	f7ff fff0 	bl	800255c <HAL_RCC_GetHCLKFreq>
 800257c:	4602      	mov	r2, r0
 800257e:	4b06      	ldr	r3, [pc, #24]	; (8002598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	0a1b      	lsrs	r3, r3, #8
 8002584:	f003 0307 	and.w	r3, r3, #7
 8002588:	4904      	ldr	r1, [pc, #16]	; (800259c <HAL_RCC_GetPCLK1Freq+0x28>)
 800258a:	5ccb      	ldrb	r3, [r1, r3]
 800258c:	f003 031f 	and.w	r3, r3, #31
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	08007bd4 	.word	0x08007bd4

080025a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80025a4:	f7ff ffda 	bl	800255c <HAL_RCC_GetHCLKFreq>
 80025a8:	4602      	mov	r2, r0
 80025aa:	4b06      	ldr	r3, [pc, #24]	; (80025c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	0adb      	lsrs	r3, r3, #11
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	4904      	ldr	r1, [pc, #16]	; (80025c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025b6:	5ccb      	ldrb	r3, [r1, r3]
 80025b8:	f003 031f 	and.w	r3, r3, #31
 80025bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	40021000 	.word	0x40021000
 80025c8:	08007bd4 	.word	0x08007bd4

080025cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b087      	sub	sp, #28
 80025d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025dc:	4b1b      	ldr	r3, [pc, #108]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	091b      	lsrs	r3, r3, #4
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3301      	adds	r3, #1
 80025e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d10c      	bne.n	800260a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80025f0:	4a17      	ldr	r2, [pc, #92]	; (8002650 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f8:	4a14      	ldr	r2, [pc, #80]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80025fa:	68d2      	ldr	r2, [r2, #12]
 80025fc:	0a12      	lsrs	r2, r2, #8
 80025fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002602:	fb02 f303 	mul.w	r3, r2, r3
 8002606:	617b      	str	r3, [r7, #20]
    break;
 8002608:	e00c      	b.n	8002624 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002612:	4a0e      	ldr	r2, [pc, #56]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002614:	68d2      	ldr	r2, [r2, #12]
 8002616:	0a12      	lsrs	r2, r2, #8
 8002618:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	617b      	str	r3, [r7, #20]
    break;
 8002622:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002624:	4b09      	ldr	r3, [pc, #36]	; (800264c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	0e5b      	lsrs	r3, r3, #25
 800262a:	f003 0303 	and.w	r3, r3, #3
 800262e:	3301      	adds	r3, #1
 8002630:	005b      	lsls	r3, r3, #1
 8002632:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002634:	697a      	ldr	r2, [r7, #20]
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	fbb2 f3f3 	udiv	r3, r2, r3
 800263c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800263e:	687b      	ldr	r3, [r7, #4]
}
 8002640:	4618      	mov	r0, r3
 8002642:	371c      	adds	r7, #28
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr
 800264c:	40021000 	.word	0x40021000
 8002650:	016e3600 	.word	0x016e3600
 8002654:	00f42400 	.word	0x00f42400

08002658 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002660:	2300      	movs	r3, #0
 8002662:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002664:	2300      	movs	r3, #0
 8002666:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8098 	beq.w	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002676:	2300      	movs	r3, #0
 8002678:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800267a:	4b43      	ldr	r3, [pc, #268]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800267c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800267e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d10d      	bne.n	80026a2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002686:	4b40      	ldr	r3, [pc, #256]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800268a:	4a3f      	ldr	r2, [pc, #252]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800268c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002690:	6593      	str	r3, [r2, #88]	; 0x58
 8002692:	4b3d      	ldr	r3, [pc, #244]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800269e:	2301      	movs	r3, #1
 80026a0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026a2:	4b3a      	ldr	r3, [pc, #232]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a39      	ldr	r2, [pc, #228]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80026ae:	f7fe fe3b 	bl	8001328 <HAL_GetTick>
 80026b2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026b4:	e009      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b6:	f7fe fe37 	bl	8001328 <HAL_GetTick>
 80026ba:	4602      	mov	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d902      	bls.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80026c4:	2303      	movs	r3, #3
 80026c6:	74fb      	strb	r3, [r7, #19]
        break;
 80026c8:	e005      	b.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80026ca:	4b30      	ldr	r3, [pc, #192]	; (800278c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0ef      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80026d6:	7cfb      	ldrb	r3, [r7, #19]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d159      	bne.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01e      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f2:	697a      	ldr	r2, [r7, #20]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d019      	beq.n	800272c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026f8:	4b23      	ldr	r3, [pc, #140]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002702:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002704:	4b20      	ldr	r3, [pc, #128]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a1f      	ldr	r2, [pc, #124]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800270c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002714:	4b1c      	ldr	r3, [pc, #112]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800271c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002724:	4a18      	ldr	r2, [pc, #96]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0301 	and.w	r3, r3, #1
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f7fe fdf7 	bl	8001328 <HAL_GetTick>
 800273a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	e00b      	b.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273e:	f7fe fdf3 	bl	8001328 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	f241 3288 	movw	r2, #5000	; 0x1388
 800274c:	4293      	cmp	r3, r2
 800274e:	d902      	bls.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	74fb      	strb	r3, [r7, #19]
            break;
 8002754:	e006      	b.n	8002764 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002756:	4b0c      	ldr	r3, [pc, #48]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d0ec      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002764:	7cfb      	ldrb	r3, [r7, #19]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d10b      	bne.n	8002782 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800276a:	4b07      	ldr	r3, [pc, #28]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800276c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002778:	4903      	ldr	r1, [pc, #12]	; (8002788 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002780:	e008      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002782:	7cfb      	ldrb	r3, [r7, #19]
 8002784:	74bb      	strb	r3, [r7, #18]
 8002786:	e005      	b.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002790:	7cfb      	ldrb	r3, [r7, #19]
 8002792:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002794:	7c7b      	ldrb	r3, [r7, #17]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d105      	bne.n	80027a6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800279a:	4ba7      	ldr	r3, [pc, #668]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800279e:	4aa6      	ldr	r2, [pc, #664]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027a4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d00a      	beq.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027b2:	4ba1      	ldr	r3, [pc, #644]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b8:	f023 0203 	bic.w	r2, r3, #3
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	499d      	ldr	r1, [pc, #628]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00a      	beq.n	80027ea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027d4:	4b98      	ldr	r3, [pc, #608]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027da:	f023 020c 	bic.w	r2, r3, #12
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	4995      	ldr	r1, [pc, #596]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00a      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027f6:	4b90      	ldr	r3, [pc, #576]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	68db      	ldr	r3, [r3, #12]
 8002804:	498c      	ldr	r1, [pc, #560]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002806:	4313      	orrs	r3, r2
 8002808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0308 	and.w	r3, r3, #8
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002818:	4b87      	ldr	r3, [pc, #540]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	691b      	ldr	r3, [r3, #16]
 8002826:	4984      	ldr	r1, [pc, #528]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0310 	and.w	r3, r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800283a:	4b7f      	ldr	r3, [pc, #508]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	695b      	ldr	r3, [r3, #20]
 8002848:	497b      	ldr	r1, [pc, #492]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 0320 	and.w	r3, r3, #32
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800285c:	4b76      	ldr	r3, [pc, #472]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002862:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	4973      	ldr	r1, [pc, #460]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286c:	4313      	orrs	r3, r2
 800286e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800287e:	4b6e      	ldr	r3, [pc, #440]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002884:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	496a      	ldr	r1, [pc, #424]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	4313      	orrs	r3, r2
 8002890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028a0:	4b65      	ldr	r3, [pc, #404]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a1b      	ldr	r3, [r3, #32]
 80028ae:	4962      	ldr	r1, [pc, #392]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b0:	4313      	orrs	r3, r2
 80028b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028c2:	4b5d      	ldr	r3, [pc, #372]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028d0:	4959      	ldr	r1, [pc, #356]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80028e4:	4b54      	ldr	r3, [pc, #336]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ea:	f023 0203 	bic.w	r2, r3, #3
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028f2:	4951      	ldr	r1, [pc, #324]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002906:	4b4c      	ldr	r3, [pc, #304]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002908:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002914:	4948      	ldr	r1, [pc, #288]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	4313      	orrs	r3, r2
 8002918:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002924:	2b00      	cmp	r3, #0
 8002926:	d015      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002928:	4b43      	ldr	r3, [pc, #268]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800292a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800292e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002936:	4940      	ldr	r1, [pc, #256]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002938:	4313      	orrs	r3, r2
 800293a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002946:	d105      	bne.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	4a3a      	ldr	r2, [pc, #232]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002952:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	2b00      	cmp	r3, #0
 800295e:	d015      	beq.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002960:	4b35      	ldr	r3, [pc, #212]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002966:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800296e:	4932      	ldr	r1, [pc, #200]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002970:	4313      	orrs	r3, r2
 8002972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800297a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297e:	d105      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	4a2c      	ldr	r2, [pc, #176]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800298a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002994:	2b00      	cmp	r3, #0
 8002996:	d015      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002998:	4b27      	ldr	r3, [pc, #156]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800299a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800299e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	4924      	ldr	r1, [pc, #144]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029b6:	d105      	bne.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029b8:	4b1f      	ldr	r3, [pc, #124]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029ba:	68db      	ldr	r3, [r3, #12]
 80029bc:	4a1e      	ldr	r2, [pc, #120]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d015      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80029d0:	4b19      	ldr	r3, [pc, #100]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029de:	4916      	ldr	r1, [pc, #88]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f0:	4b11      	ldr	r3, [pc, #68]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a10      	ldr	r2, [pc, #64]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80029f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d019      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	4908      	ldr	r1, [pc, #32]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a26:	d109      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a28:	4b03      	ldr	r3, [pc, #12]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	4a02      	ldr	r2, [pc, #8]	; (8002a38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a32:	60d3      	str	r3, [r2, #12]
 8002a34:	e002      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d015      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a48:	4b29      	ldr	r3, [pc, #164]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	4926      	ldr	r1, [pc, #152]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a66:	d105      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002a68:	4b21      	ldr	r3, [pc, #132]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	4a20      	ldr	r2, [pc, #128]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d015      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002a80:	4b1b      	ldr	r3, [pc, #108]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a8e:	4918      	ldr	r1, [pc, #96]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9e:	d105      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aa6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002aaa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d015      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002aba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002abe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ac6:	490a      	ldr	r1, [pc, #40]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ad2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ad6:	d105      	bne.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad8:	4b05      	ldr	r3, [pc, #20]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	4a04      	ldr	r2, [pc, #16]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ae2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ae4:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40021000 	.word	0x40021000

08002af4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e049      	b.n	8002b9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0c:	b2db      	uxtb	r3, r3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d106      	bne.n	8002b20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f7fe f9aa 	bl	8000e74 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2202      	movs	r2, #2
 8002b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681a      	ldr	r2, [r3, #0]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3304      	adds	r3, #4
 8002b30:	4619      	mov	r1, r3
 8002b32:	4610      	mov	r0, r2
 8002b34:	f000 fc6e 	bl	8003414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b98:	2300      	movs	r3, #0
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}

08002ba2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ba2:	b580      	push	{r7, lr}
 8002ba4:	b082      	sub	sp, #8
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	e049      	b.n	8002c48 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f841 	bl	8002c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2202      	movs	r2, #2
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681a      	ldr	r2, [r3, #0]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	3304      	adds	r3, #4
 8002bde:	4619      	mov	r1, r3
 8002be0:	4610      	mov	r0, r2
 8002be2:	f000 fc17 	bl	8003414 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2201      	movs	r2, #1
 8002bea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2201      	movs	r2, #1
 8002bfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2201      	movs	r2, #1
 8002c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	2201      	movs	r2, #1
 8002c1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2201      	movs	r2, #1
 8002c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2201      	movs	r2, #1
 8002c32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2201      	movs	r2, #1
 8002c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c46:	2300      	movs	r3, #0
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b084      	sub	sp, #16
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
 8002c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d109      	bne.n	8002c88 <HAL_TIM_PWM_Start+0x24>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	bf14      	ite	ne
 8002c80:	2301      	movne	r3, #1
 8002c82:	2300      	moveq	r3, #0
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	e03c      	b.n	8002d02 <HAL_TIM_PWM_Start+0x9e>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	2b04      	cmp	r3, #4
 8002c8c:	d109      	bne.n	8002ca2 <HAL_TIM_PWM_Start+0x3e>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	bf14      	ite	ne
 8002c9a:	2301      	movne	r3, #1
 8002c9c:	2300      	moveq	r3, #0
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	e02f      	b.n	8002d02 <HAL_TIM_PWM_Start+0x9e>
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	2b08      	cmp	r3, #8
 8002ca6:	d109      	bne.n	8002cbc <HAL_TIM_PWM_Start+0x58>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	bf14      	ite	ne
 8002cb4:	2301      	movne	r3, #1
 8002cb6:	2300      	moveq	r3, #0
 8002cb8:	b2db      	uxtb	r3, r3
 8002cba:	e022      	b.n	8002d02 <HAL_TIM_PWM_Start+0x9e>
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	2b0c      	cmp	r3, #12
 8002cc0:	d109      	bne.n	8002cd6 <HAL_TIM_PWM_Start+0x72>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b01      	cmp	r3, #1
 8002ccc:	bf14      	ite	ne
 8002cce:	2301      	movne	r3, #1
 8002cd0:	2300      	moveq	r3, #0
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	e015      	b.n	8002d02 <HAL_TIM_PWM_Start+0x9e>
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b10      	cmp	r3, #16
 8002cda:	d109      	bne.n	8002cf0 <HAL_TIM_PWM_Start+0x8c>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ce2:	b2db      	uxtb	r3, r3
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	bf14      	ite	ne
 8002ce8:	2301      	movne	r3, #1
 8002cea:	2300      	moveq	r3, #0
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	e008      	b.n	8002d02 <HAL_TIM_PWM_Start+0x9e>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	bf14      	ite	ne
 8002cfc:	2301      	movne	r3, #1
 8002cfe:	2300      	moveq	r3, #0
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002d06:	2301      	movs	r3, #1
 8002d08:	e0a6      	b.n	8002e58 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d104      	bne.n	8002d1a <HAL_TIM_PWM_Start+0xb6>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d18:	e023      	b.n	8002d62 <HAL_TIM_PWM_Start+0xfe>
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	2b04      	cmp	r3, #4
 8002d1e:	d104      	bne.n	8002d2a <HAL_TIM_PWM_Start+0xc6>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2202      	movs	r2, #2
 8002d24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d28:	e01b      	b.n	8002d62 <HAL_TIM_PWM_Start+0xfe>
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	2b08      	cmp	r3, #8
 8002d2e:	d104      	bne.n	8002d3a <HAL_TIM_PWM_Start+0xd6>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d38:	e013      	b.n	8002d62 <HAL_TIM_PWM_Start+0xfe>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	2b0c      	cmp	r3, #12
 8002d3e:	d104      	bne.n	8002d4a <HAL_TIM_PWM_Start+0xe6>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2202      	movs	r2, #2
 8002d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d48:	e00b      	b.n	8002d62 <HAL_TIM_PWM_Start+0xfe>
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	2b10      	cmp	r3, #16
 8002d4e:	d104      	bne.n	8002d5a <HAL_TIM_PWM_Start+0xf6>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2202      	movs	r2, #2
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	e003      	b.n	8002d62 <HAL_TIM_PWM_Start+0xfe>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2202      	movs	r2, #2
 8002d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2201      	movs	r2, #1
 8002d68:	6839      	ldr	r1, [r7, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 ffc0 	bl	8003cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a3a      	ldr	r2, [pc, #232]	; (8002e60 <HAL_TIM_PWM_Start+0x1fc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d018      	beq.n	8002dac <HAL_TIM_PWM_Start+0x148>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a39      	ldr	r2, [pc, #228]	; (8002e64 <HAL_TIM_PWM_Start+0x200>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d013      	beq.n	8002dac <HAL_TIM_PWM_Start+0x148>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a37      	ldr	r2, [pc, #220]	; (8002e68 <HAL_TIM_PWM_Start+0x204>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00e      	beq.n	8002dac <HAL_TIM_PWM_Start+0x148>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a36      	ldr	r2, [pc, #216]	; (8002e6c <HAL_TIM_PWM_Start+0x208>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d009      	beq.n	8002dac <HAL_TIM_PWM_Start+0x148>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a34      	ldr	r2, [pc, #208]	; (8002e70 <HAL_TIM_PWM_Start+0x20c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d004      	beq.n	8002dac <HAL_TIM_PWM_Start+0x148>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a33      	ldr	r2, [pc, #204]	; (8002e74 <HAL_TIM_PWM_Start+0x210>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d101      	bne.n	8002db0 <HAL_TIM_PWM_Start+0x14c>
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_TIM_PWM_Start+0x14e>
 8002db0:	2300      	movs	r3, #0
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d007      	beq.n	8002dc6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a25      	ldr	r2, [pc, #148]	; (8002e60 <HAL_TIM_PWM_Start+0x1fc>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d022      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dd8:	d01d      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a26      	ldr	r2, [pc, #152]	; (8002e78 <HAL_TIM_PWM_Start+0x214>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d018      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <HAL_TIM_PWM_Start+0x218>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d013      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <HAL_TIM_PWM_Start+0x21c>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00e      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a19      	ldr	r2, [pc, #100]	; (8002e64 <HAL_TIM_PWM_Start+0x200>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d009      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a18      	ldr	r2, [pc, #96]	; (8002e68 <HAL_TIM_PWM_Start+0x204>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d004      	beq.n	8002e16 <HAL_TIM_PWM_Start+0x1b2>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a18      	ldr	r2, [pc, #96]	; (8002e74 <HAL_TIM_PWM_Start+0x210>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d115      	bne.n	8002e42 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	689a      	ldr	r2, [r3, #8]
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_TIM_PWM_Start+0x220>)
 8002e1e:	4013      	ands	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2b06      	cmp	r3, #6
 8002e26:	d015      	beq.n	8002e54 <HAL_TIM_PWM_Start+0x1f0>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e2e:	d011      	beq.n	8002e54 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f042 0201 	orr.w	r2, r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e40:	e008      	b.n	8002e54 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	e000      	b.n	8002e56 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40013400 	.word	0x40013400
 8002e68:	40014000 	.word	0x40014000
 8002e6c:	40014400 	.word	0x40014400
 8002e70:	40014800 	.word	0x40014800
 8002e74:	40015000 	.word	0x40015000
 8002e78:	40000400 	.word	0x40000400
 8002e7c:	40000800 	.word	0x40000800
 8002e80:	40000c00 	.word	0x40000c00
 8002e84:	00010007 	.word	0x00010007

08002e88 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b082      	sub	sp, #8
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
 8002e90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2200      	movs	r2, #0
 8002e98:	6839      	ldr	r1, [r7, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f000 ff28 	bl	8003cf0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a40      	ldr	r2, [pc, #256]	; (8002fa8 <HAL_TIM_PWM_Stop+0x120>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d018      	beq.n	8002edc <HAL_TIM_PWM_Stop+0x54>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a3f      	ldr	r2, [pc, #252]	; (8002fac <HAL_TIM_PWM_Stop+0x124>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d013      	beq.n	8002edc <HAL_TIM_PWM_Stop+0x54>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a3d      	ldr	r2, [pc, #244]	; (8002fb0 <HAL_TIM_PWM_Stop+0x128>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00e      	beq.n	8002edc <HAL_TIM_PWM_Stop+0x54>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a3c      	ldr	r2, [pc, #240]	; (8002fb4 <HAL_TIM_PWM_Stop+0x12c>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d009      	beq.n	8002edc <HAL_TIM_PWM_Stop+0x54>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a3a      	ldr	r2, [pc, #232]	; (8002fb8 <HAL_TIM_PWM_Stop+0x130>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_TIM_PWM_Stop+0x54>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a39      	ldr	r2, [pc, #228]	; (8002fbc <HAL_TIM_PWM_Stop+0x134>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d101      	bne.n	8002ee0 <HAL_TIM_PWM_Stop+0x58>
 8002edc:	2301      	movs	r3, #1
 8002ede:	e000      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0x5a>
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d017      	beq.n	8002f16 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	f241 1311 	movw	r3, #4369	; 0x1111
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d10f      	bne.n	8002f16 <HAL_TIM_PWM_Stop+0x8e>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	6a1a      	ldr	r2, [r3, #32]
 8002efc:	f244 4344 	movw	r3, #17476	; 0x4444
 8002f00:	4013      	ands	r3, r2
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_TIM_PWM_Stop+0x8e>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002f14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a1a      	ldr	r2, [r3, #32]
 8002f1c:	f241 1311 	movw	r3, #4369	; 0x1111
 8002f20:	4013      	ands	r3, r2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10f      	bne.n	8002f46 <HAL_TIM_PWM_Stop+0xbe>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	f244 4344 	movw	r3, #17476	; 0x4444
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d107      	bne.n	8002f46 <HAL_TIM_PWM_Stop+0xbe>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0201 	bic.w	r2, r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d104      	bne.n	8002f56 <HAL_TIM_PWM_Stop+0xce>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f54:	e023      	b.n	8002f9e <HAL_TIM_PWM_Stop+0x116>
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	2b04      	cmp	r3, #4
 8002f5a:	d104      	bne.n	8002f66 <HAL_TIM_PWM_Stop+0xde>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f64:	e01b      	b.n	8002f9e <HAL_TIM_PWM_Stop+0x116>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	2b08      	cmp	r3, #8
 8002f6a:	d104      	bne.n	8002f76 <HAL_TIM_PWM_Stop+0xee>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f74:	e013      	b.n	8002f9e <HAL_TIM_PWM_Stop+0x116>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	2b0c      	cmp	r3, #12
 8002f7a:	d104      	bne.n	8002f86 <HAL_TIM_PWM_Stop+0xfe>
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f84:	e00b      	b.n	8002f9e <HAL_TIM_PWM_Stop+0x116>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	2b10      	cmp	r3, #16
 8002f8a:	d104      	bne.n	8002f96 <HAL_TIM_PWM_Stop+0x10e>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f94:	e003      	b.n	8002f9e <HAL_TIM_PWM_Stop+0x116>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	40012c00 	.word	0x40012c00
 8002fac:	40013400 	.word	0x40013400
 8002fb0:	40014000 	.word	0x40014000
 8002fb4:	40014400 	.word	0x40014400
 8002fb8:	40014800 	.word	0x40014800
 8002fbc:	40015000 	.word	0x40015000

08002fc0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b086      	sub	sp, #24
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	60f8      	str	r0, [r7, #12]
 8002fc8:	60b9      	str	r1, [r7, #8]
 8002fca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0ff      	b.n	80031de <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b14      	cmp	r3, #20
 8002fea:	f200 80f0 	bhi.w	80031ce <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003049 	.word	0x08003049
 8002ff8:	080031cf 	.word	0x080031cf
 8002ffc:	080031cf 	.word	0x080031cf
 8003000:	080031cf 	.word	0x080031cf
 8003004:	08003089 	.word	0x08003089
 8003008:	080031cf 	.word	0x080031cf
 800300c:	080031cf 	.word	0x080031cf
 8003010:	080031cf 	.word	0x080031cf
 8003014:	080030cb 	.word	0x080030cb
 8003018:	080031cf 	.word	0x080031cf
 800301c:	080031cf 	.word	0x080031cf
 8003020:	080031cf 	.word	0x080031cf
 8003024:	0800310b 	.word	0x0800310b
 8003028:	080031cf 	.word	0x080031cf
 800302c:	080031cf 	.word	0x080031cf
 8003030:	080031cf 	.word	0x080031cf
 8003034:	0800314d 	.word	0x0800314d
 8003038:	080031cf 	.word	0x080031cf
 800303c:	080031cf 	.word	0x080031cf
 8003040:	080031cf 	.word	0x080031cf
 8003044:	0800318d 	.word	0x0800318d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	68b9      	ldr	r1, [r7, #8]
 800304e:	4618      	mov	r0, r3
 8003050:	f000 fa88 	bl	8003564 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	699a      	ldr	r2, [r3, #24]
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f042 0208 	orr.w	r2, r2, #8
 8003062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	699a      	ldr	r2, [r3, #24]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0204 	bic.w	r2, r2, #4
 8003072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6999      	ldr	r1, [r3, #24]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	691a      	ldr	r2, [r3, #16]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	430a      	orrs	r2, r1
 8003084:	619a      	str	r2, [r3, #24]
      break;
 8003086:	e0a5      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	68b9      	ldr	r1, [r7, #8]
 800308e:	4618      	mov	r0, r3
 8003090:	f000 fb02 	bl	8003698 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	699a      	ldr	r2, [r3, #24]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6999      	ldr	r1, [r3, #24]
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	021a      	lsls	r2, r3, #8
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	619a      	str	r2, [r3, #24]
      break;
 80030c8:	e084      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	68b9      	ldr	r1, [r7, #8]
 80030d0:	4618      	mov	r0, r3
 80030d2:	f000 fb75 	bl	80037c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 0208 	orr.w	r2, r2, #8
 80030e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69da      	ldr	r2, [r3, #28]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 0204 	bic.w	r2, r2, #4
 80030f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69d9      	ldr	r1, [r3, #28]
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	61da      	str	r2, [r3, #28]
      break;
 8003108:	e064      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68b9      	ldr	r1, [r7, #8]
 8003110:	4618      	mov	r0, r3
 8003112:	f000 fbe7 	bl	80038e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69da      	ldr	r2, [r3, #28]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69d9      	ldr	r1, [r3, #28]
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	691b      	ldr	r3, [r3, #16]
 8003140:	021a      	lsls	r2, r3, #8
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	430a      	orrs	r2, r1
 8003148:	61da      	str	r2, [r3, #28]
      break;
 800314a:	e043      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	68b9      	ldr	r1, [r7, #8]
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fc5a 	bl	8003a0c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f042 0208 	orr.w	r2, r2, #8
 8003166:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0204 	bic.w	r2, r2, #4
 8003176:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	691a      	ldr	r2, [r3, #16]
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800318a:	e023      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	68b9      	ldr	r1, [r7, #8]
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fca4 	bl	8003ae0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	021a      	lsls	r2, r3, #8
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	430a      	orrs	r2, r1
 80031ca:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80031cc:	e002      	b.n	80031d4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	75fb      	strb	r3, [r7, #23]
      break;
 80031d2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop

080031e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
 80031f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f2:	2300      	movs	r3, #0
 80031f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d101      	bne.n	8003204 <HAL_TIM_ConfigClockSource+0x1c>
 8003200:	2302      	movs	r3, #2
 8003202:	e0f6      	b.n	80033f2 <HAL_TIM_ConfigClockSource+0x20a>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003222:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003226:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800322e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	68ba      	ldr	r2, [r7, #8]
 8003236:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <HAL_TIM_ConfigClockSource+0x214>)
 800323e:	4293      	cmp	r3, r2
 8003240:	f000 80c1 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003244:	4a6d      	ldr	r2, [pc, #436]	; (80033fc <HAL_TIM_ConfigClockSource+0x214>)
 8003246:	4293      	cmp	r3, r2
 8003248:	f200 80c6 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800324c:	4a6c      	ldr	r2, [pc, #432]	; (8003400 <HAL_TIM_ConfigClockSource+0x218>)
 800324e:	4293      	cmp	r3, r2
 8003250:	f000 80b9 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003254:	4a6a      	ldr	r2, [pc, #424]	; (8003400 <HAL_TIM_ConfigClockSource+0x218>)
 8003256:	4293      	cmp	r3, r2
 8003258:	f200 80be 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800325c:	4a69      	ldr	r2, [pc, #420]	; (8003404 <HAL_TIM_ConfigClockSource+0x21c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	f000 80b1 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003264:	4a67      	ldr	r2, [pc, #412]	; (8003404 <HAL_TIM_ConfigClockSource+0x21c>)
 8003266:	4293      	cmp	r3, r2
 8003268:	f200 80b6 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800326c:	4a66      	ldr	r2, [pc, #408]	; (8003408 <HAL_TIM_ConfigClockSource+0x220>)
 800326e:	4293      	cmp	r3, r2
 8003270:	f000 80a9 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003274:	4a64      	ldr	r2, [pc, #400]	; (8003408 <HAL_TIM_ConfigClockSource+0x220>)
 8003276:	4293      	cmp	r3, r2
 8003278:	f200 80ae 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800327c:	4a63      	ldr	r2, [pc, #396]	; (800340c <HAL_TIM_ConfigClockSource+0x224>)
 800327e:	4293      	cmp	r3, r2
 8003280:	f000 80a1 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003284:	4a61      	ldr	r2, [pc, #388]	; (800340c <HAL_TIM_ConfigClockSource+0x224>)
 8003286:	4293      	cmp	r3, r2
 8003288:	f200 80a6 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800328c:	4a60      	ldr	r2, [pc, #384]	; (8003410 <HAL_TIM_ConfigClockSource+0x228>)
 800328e:	4293      	cmp	r3, r2
 8003290:	f000 8099 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003294:	4a5e      	ldr	r2, [pc, #376]	; (8003410 <HAL_TIM_ConfigClockSource+0x228>)
 8003296:	4293      	cmp	r3, r2
 8003298:	f200 809e 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 800329c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80032a0:	f000 8091 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 80032a4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80032a8:	f200 8096 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b0:	f000 8089 	beq.w	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 80032b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b8:	f200 808e 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c0:	d03e      	beq.n	8003340 <HAL_TIM_ConfigClockSource+0x158>
 80032c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80032c6:	f200 8087 	bhi.w	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032ce:	f000 8086 	beq.w	80033de <HAL_TIM_ConfigClockSource+0x1f6>
 80032d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032d6:	d87f      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032d8:	2b70      	cmp	r3, #112	; 0x70
 80032da:	d01a      	beq.n	8003312 <HAL_TIM_ConfigClockSource+0x12a>
 80032dc:	2b70      	cmp	r3, #112	; 0x70
 80032de:	d87b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032e0:	2b60      	cmp	r3, #96	; 0x60
 80032e2:	d050      	beq.n	8003386 <HAL_TIM_ConfigClockSource+0x19e>
 80032e4:	2b60      	cmp	r3, #96	; 0x60
 80032e6:	d877      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032e8:	2b50      	cmp	r3, #80	; 0x50
 80032ea:	d03c      	beq.n	8003366 <HAL_TIM_ConfigClockSource+0x17e>
 80032ec:	2b50      	cmp	r3, #80	; 0x50
 80032ee:	d873      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032f0:	2b40      	cmp	r3, #64	; 0x40
 80032f2:	d058      	beq.n	80033a6 <HAL_TIM_ConfigClockSource+0x1be>
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d86f      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 80032f8:	2b30      	cmp	r3, #48	; 0x30
 80032fa:	d064      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 80032fc:	2b30      	cmp	r3, #48	; 0x30
 80032fe:	d86b      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d060      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003304:	2b20      	cmp	r3, #32
 8003306:	d867      	bhi.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
 8003308:	2b00      	cmp	r3, #0
 800330a:	d05c      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 800330c:	2b10      	cmp	r3, #16
 800330e:	d05a      	beq.n	80033c6 <HAL_TIM_ConfigClockSource+0x1de>
 8003310:	e062      	b.n	80033d8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6818      	ldr	r0, [r3, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	6899      	ldr	r1, [r3, #8]
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685a      	ldr	r2, [r3, #4]
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f000 fcc5 	bl	8003cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003334:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	609a      	str	r2, [r3, #8]
      break;
 800333e:	e04f      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	f000 fcae 	bl	8003cb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003362:	609a      	str	r2, [r3, #8]
      break;
 8003364:	e03c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6818      	ldr	r0, [r3, #0]
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	6859      	ldr	r1, [r3, #4]
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	461a      	mov	r2, r3
 8003374:	f000 fc20 	bl	8003bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2150      	movs	r1, #80	; 0x50
 800337e:	4618      	mov	r0, r3
 8003380:	f000 fc79 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 8003384:	e02c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6818      	ldr	r0, [r3, #0]
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6859      	ldr	r1, [r3, #4]
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	461a      	mov	r2, r3
 8003394:	f000 fc3f 	bl	8003c16 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	2160      	movs	r1, #96	; 0x60
 800339e:	4618      	mov	r0, r3
 80033a0:	f000 fc69 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 80033a4:	e01c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6818      	ldr	r0, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	6859      	ldr	r1, [r3, #4]
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	461a      	mov	r2, r3
 80033b4:	f000 fc00 	bl	8003bb8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2140      	movs	r1, #64	; 0x40
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 fc59 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 80033c4:	e00c      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4619      	mov	r1, r3
 80033d0:	4610      	mov	r0, r2
 80033d2:	f000 fc50 	bl	8003c76 <TIM_ITRx_SetConfig>
      break;
 80033d6:	e003      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	73fb      	strb	r3, [r7, #15]
      break;
 80033dc:	e000      	b.n	80033e0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80033de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	00100070 	.word	0x00100070
 8003400:	00100060 	.word	0x00100060
 8003404:	00100050 	.word	0x00100050
 8003408:	00100040 	.word	0x00100040
 800340c:	00100030 	.word	0x00100030
 8003410:	00100020 	.word	0x00100020

08003414 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a46      	ldr	r2, [pc, #280]	; (8003540 <TIM_Base_SetConfig+0x12c>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d017      	beq.n	800345c <TIM_Base_SetConfig+0x48>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003432:	d013      	beq.n	800345c <TIM_Base_SetConfig+0x48>
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	4a43      	ldr	r2, [pc, #268]	; (8003544 <TIM_Base_SetConfig+0x130>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d00f      	beq.n	800345c <TIM_Base_SetConfig+0x48>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a42      	ldr	r2, [pc, #264]	; (8003548 <TIM_Base_SetConfig+0x134>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d00b      	beq.n	800345c <TIM_Base_SetConfig+0x48>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a41      	ldr	r2, [pc, #260]	; (800354c <TIM_Base_SetConfig+0x138>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d007      	beq.n	800345c <TIM_Base_SetConfig+0x48>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a40      	ldr	r2, [pc, #256]	; (8003550 <TIM_Base_SetConfig+0x13c>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d003      	beq.n	800345c <TIM_Base_SetConfig+0x48>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3f      	ldr	r2, [pc, #252]	; (8003554 <TIM_Base_SetConfig+0x140>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d108      	bne.n	800346e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a33      	ldr	r2, [pc, #204]	; (8003540 <TIM_Base_SetConfig+0x12c>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d023      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800347c:	d01f      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a30      	ldr	r2, [pc, #192]	; (8003544 <TIM_Base_SetConfig+0x130>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01b      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a2f      	ldr	r2, [pc, #188]	; (8003548 <TIM_Base_SetConfig+0x134>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d017      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a2e      	ldr	r2, [pc, #184]	; (800354c <TIM_Base_SetConfig+0x138>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a2d      	ldr	r2, [pc, #180]	; (8003550 <TIM_Base_SetConfig+0x13c>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00f      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a2d      	ldr	r2, [pc, #180]	; (8003558 <TIM_Base_SetConfig+0x144>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d00b      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2c      	ldr	r2, [pc, #176]	; (800355c <TIM_Base_SetConfig+0x148>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d007      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <TIM_Base_SetConfig+0x14c>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d003      	beq.n	80034be <TIM_Base_SetConfig+0xaa>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a26      	ldr	r2, [pc, #152]	; (8003554 <TIM_Base_SetConfig+0x140>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d108      	bne.n	80034d0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80034d6:	683b      	ldr	r3, [r7, #0]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	4313      	orrs	r3, r2
 80034dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	681a      	ldr	r2, [r3, #0]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	4a12      	ldr	r2, [pc, #72]	; (8003540 <TIM_Base_SetConfig+0x12c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d013      	beq.n	8003524 <TIM_Base_SetConfig+0x110>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	4a14      	ldr	r2, [pc, #80]	; (8003550 <TIM_Base_SetConfig+0x13c>)
 8003500:	4293      	cmp	r3, r2
 8003502:	d00f      	beq.n	8003524 <TIM_Base_SetConfig+0x110>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	4a14      	ldr	r2, [pc, #80]	; (8003558 <TIM_Base_SetConfig+0x144>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d00b      	beq.n	8003524 <TIM_Base_SetConfig+0x110>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <TIM_Base_SetConfig+0x148>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d007      	beq.n	8003524 <TIM_Base_SetConfig+0x110>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a12      	ldr	r2, [pc, #72]	; (8003560 <TIM_Base_SetConfig+0x14c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0x110>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a0d      	ldr	r2, [pc, #52]	; (8003554 <TIM_Base_SetConfig+0x140>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	615a      	str	r2, [r3, #20]
}
 8003532:	bf00      	nop
 8003534:	3714      	adds	r7, #20
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr
 800353e:	bf00      	nop
 8003540:	40012c00 	.word	0x40012c00
 8003544:	40000400 	.word	0x40000400
 8003548:	40000800 	.word	0x40000800
 800354c:	40000c00 	.word	0x40000c00
 8003550:	40013400 	.word	0x40013400
 8003554:	40015000 	.word	0x40015000
 8003558:	40014000 	.word	0x40014000
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800

08003564 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f023 0201 	bic.w	r2, r3, #1
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f023 0303 	bic.w	r3, r3, #3
 800359e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	68fa      	ldr	r2, [r7, #12]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	f023 0302 	bic.w	r3, r3, #2
 80035b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	4313      	orrs	r3, r2
 80035ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	4a30      	ldr	r2, [pc, #192]	; (8003680 <TIM_OC1_SetConfig+0x11c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d013      	beq.n	80035ec <TIM_OC1_SetConfig+0x88>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a2f      	ldr	r2, [pc, #188]	; (8003684 <TIM_OC1_SetConfig+0x120>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00f      	beq.n	80035ec <TIM_OC1_SetConfig+0x88>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a2e      	ldr	r2, [pc, #184]	; (8003688 <TIM_OC1_SetConfig+0x124>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d00b      	beq.n	80035ec <TIM_OC1_SetConfig+0x88>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a2d      	ldr	r2, [pc, #180]	; (800368c <TIM_OC1_SetConfig+0x128>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d007      	beq.n	80035ec <TIM_OC1_SetConfig+0x88>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a2c      	ldr	r2, [pc, #176]	; (8003690 <TIM_OC1_SetConfig+0x12c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d003      	beq.n	80035ec <TIM_OC1_SetConfig+0x88>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a2b      	ldr	r2, [pc, #172]	; (8003694 <TIM_OC1_SetConfig+0x130>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d10c      	bne.n	8003606 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f023 0308 	bic.w	r3, r3, #8
 80035f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	68db      	ldr	r3, [r3, #12]
 80035f8:	697a      	ldr	r2, [r7, #20]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	f023 0304 	bic.w	r3, r3, #4
 8003604:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a1d      	ldr	r2, [pc, #116]	; (8003680 <TIM_OC1_SetConfig+0x11c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d013      	beq.n	8003636 <TIM_OC1_SetConfig+0xd2>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a1c      	ldr	r2, [pc, #112]	; (8003684 <TIM_OC1_SetConfig+0x120>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d00f      	beq.n	8003636 <TIM_OC1_SetConfig+0xd2>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a1b      	ldr	r2, [pc, #108]	; (8003688 <TIM_OC1_SetConfig+0x124>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00b      	beq.n	8003636 <TIM_OC1_SetConfig+0xd2>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a1a      	ldr	r2, [pc, #104]	; (800368c <TIM_OC1_SetConfig+0x128>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d007      	beq.n	8003636 <TIM_OC1_SetConfig+0xd2>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a19      	ldr	r2, [pc, #100]	; (8003690 <TIM_OC1_SetConfig+0x12c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC1_SetConfig+0xd2>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <TIM_OC1_SetConfig+0x130>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d111      	bne.n	800365a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800363c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003644:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	695b      	ldr	r3, [r3, #20]
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	699b      	ldr	r3, [r3, #24]
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	4313      	orrs	r3, r2
 8003658:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	693a      	ldr	r2, [r7, #16]
 800365e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	621a      	str	r2, [r3, #32]
}
 8003674:	bf00      	nop
 8003676:	371c      	adds	r7, #28
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr
 8003680:	40012c00 	.word	0x40012c00
 8003684:	40013400 	.word	0x40013400
 8003688:	40014000 	.word	0x40014000
 800368c:	40014400 	.word	0x40014400
 8003690:	40014800 	.word	0x40014800
 8003694:	40015000 	.word	0x40015000

08003698 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003698:	b480      	push	{r7}
 800369a:	b087      	sub	sp, #28
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	f023 0210 	bic.w	r2, r3, #16
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a1b      	ldr	r3, [r3, #32]
 80036b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	021b      	lsls	r3, r3, #8
 80036da:	68fa      	ldr	r2, [r7, #12]
 80036dc:	4313      	orrs	r3, r2
 80036de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0320 	bic.w	r3, r3, #32
 80036e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	011b      	lsls	r3, r3, #4
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	4313      	orrs	r3, r2
 80036f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	4a2c      	ldr	r2, [pc, #176]	; (80037a8 <TIM_OC2_SetConfig+0x110>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d007      	beq.n	800370c <TIM_OC2_SetConfig+0x74>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	4a2b      	ldr	r2, [pc, #172]	; (80037ac <TIM_OC2_SetConfig+0x114>)
 8003700:	4293      	cmp	r3, r2
 8003702:	d003      	beq.n	800370c <TIM_OC2_SetConfig+0x74>
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	4a2a      	ldr	r2, [pc, #168]	; (80037b0 <TIM_OC2_SetConfig+0x118>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d10d      	bne.n	8003728 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003712:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	68db      	ldr	r3, [r3, #12]
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	697a      	ldr	r2, [r7, #20]
 800371c:	4313      	orrs	r3, r2
 800371e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003726:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <TIM_OC2_SetConfig+0x110>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d013      	beq.n	8003758 <TIM_OC2_SetConfig+0xc0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	4a1e      	ldr	r2, [pc, #120]	; (80037ac <TIM_OC2_SetConfig+0x114>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00f      	beq.n	8003758 <TIM_OC2_SetConfig+0xc0>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <TIM_OC2_SetConfig+0x11c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d00b      	beq.n	8003758 <TIM_OC2_SetConfig+0xc0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	4a1d      	ldr	r2, [pc, #116]	; (80037b8 <TIM_OC2_SetConfig+0x120>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d007      	beq.n	8003758 <TIM_OC2_SetConfig+0xc0>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a1c      	ldr	r2, [pc, #112]	; (80037bc <TIM_OC2_SetConfig+0x124>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d003      	beq.n	8003758 <TIM_OC2_SetConfig+0xc0>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	4a17      	ldr	r2, [pc, #92]	; (80037b0 <TIM_OC2_SetConfig+0x118>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d113      	bne.n	8003780 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800375e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003766:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	695b      	ldr	r3, [r3, #20]
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	693a      	ldr	r2, [r7, #16]
 8003784:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	697a      	ldr	r2, [r7, #20]
 8003798:	621a      	str	r2, [r3, #32]
}
 800379a:	bf00      	nop
 800379c:	371c      	adds	r7, #28
 800379e:	46bd      	mov	sp, r7
 80037a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a4:	4770      	bx	lr
 80037a6:	bf00      	nop
 80037a8:	40012c00 	.word	0x40012c00
 80037ac:	40013400 	.word	0x40013400
 80037b0:	40015000 	.word	0x40015000
 80037b4:	40014000 	.word	0x40014000
 80037b8:	40014400 	.word	0x40014400
 80037bc:	40014800 	.word	0x40014800

080037c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a1b      	ldr	r3, [r3, #32]
 80037ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6a1b      	ldr	r3, [r3, #32]
 80037da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69db      	ldr	r3, [r3, #28]
 80037e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f023 0303 	bic.w	r3, r3, #3
 80037fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	4313      	orrs	r3, r2
 8003804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800380c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	689b      	ldr	r3, [r3, #8]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	697a      	ldr	r2, [r7, #20]
 8003816:	4313      	orrs	r3, r2
 8003818:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a2b      	ldr	r2, [pc, #172]	; (80038cc <TIM_OC3_SetConfig+0x10c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <TIM_OC3_SetConfig+0x72>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a2a      	ldr	r2, [pc, #168]	; (80038d0 <TIM_OC3_SetConfig+0x110>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d003      	beq.n	8003832 <TIM_OC3_SetConfig+0x72>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4a29      	ldr	r2, [pc, #164]	; (80038d4 <TIM_OC3_SetConfig+0x114>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d10d      	bne.n	800384e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	68db      	ldr	r3, [r3, #12]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800384c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4a1e      	ldr	r2, [pc, #120]	; (80038cc <TIM_OC3_SetConfig+0x10c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d013      	beq.n	800387e <TIM_OC3_SetConfig+0xbe>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a1d      	ldr	r2, [pc, #116]	; (80038d0 <TIM_OC3_SetConfig+0x110>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d00f      	beq.n	800387e <TIM_OC3_SetConfig+0xbe>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a1d      	ldr	r2, [pc, #116]	; (80038d8 <TIM_OC3_SetConfig+0x118>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d00b      	beq.n	800387e <TIM_OC3_SetConfig+0xbe>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a1c      	ldr	r2, [pc, #112]	; (80038dc <TIM_OC3_SetConfig+0x11c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d007      	beq.n	800387e <TIM_OC3_SetConfig+0xbe>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <TIM_OC3_SetConfig+0x120>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d003      	beq.n	800387e <TIM_OC3_SetConfig+0xbe>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a16      	ldr	r2, [pc, #88]	; (80038d4 <TIM_OC3_SetConfig+0x114>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d113      	bne.n	80038a6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800387e:	693b      	ldr	r3, [r7, #16]
 8003880:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003884:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800388c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	011b      	lsls	r3, r3, #4
 8003894:	693a      	ldr	r2, [r7, #16]
 8003896:	4313      	orrs	r3, r2
 8003898:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	011b      	lsls	r3, r3, #4
 80038a0:	693a      	ldr	r2, [r7, #16]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	693a      	ldr	r2, [r7, #16]
 80038aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	697a      	ldr	r2, [r7, #20]
 80038be:	621a      	str	r2, [r3, #32]
}
 80038c0:	bf00      	nop
 80038c2:	371c      	adds	r7, #28
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr
 80038cc:	40012c00 	.word	0x40012c00
 80038d0:	40013400 	.word	0x40013400
 80038d4:	40015000 	.word	0x40015000
 80038d8:	40014000 	.word	0x40014000
 80038dc:	40014400 	.word	0x40014400
 80038e0:	40014800 	.word	0x40014800

080038e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	69db      	ldr	r3, [r3, #28]
 800390a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003912:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800391e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	021b      	lsls	r3, r3, #8
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003932:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	031b      	lsls	r3, r3, #12
 800393a:	697a      	ldr	r2, [r7, #20]
 800393c:	4313      	orrs	r3, r2
 800393e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a2c      	ldr	r2, [pc, #176]	; (80039f4 <TIM_OC4_SetConfig+0x110>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d007      	beq.n	8003958 <TIM_OC4_SetConfig+0x74>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a2b      	ldr	r2, [pc, #172]	; (80039f8 <TIM_OC4_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_OC4_SetConfig+0x74>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a2a      	ldr	r2, [pc, #168]	; (80039fc <TIM_OC4_SetConfig+0x118>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d10d      	bne.n	8003974 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800395e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	031b      	lsls	r3, r3, #12
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003972:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a1f      	ldr	r2, [pc, #124]	; (80039f4 <TIM_OC4_SetConfig+0x110>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d013      	beq.n	80039a4 <TIM_OC4_SetConfig+0xc0>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a1e      	ldr	r2, [pc, #120]	; (80039f8 <TIM_OC4_SetConfig+0x114>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d00f      	beq.n	80039a4 <TIM_OC4_SetConfig+0xc0>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a1e      	ldr	r2, [pc, #120]	; (8003a00 <TIM_OC4_SetConfig+0x11c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00b      	beq.n	80039a4 <TIM_OC4_SetConfig+0xc0>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a1d      	ldr	r2, [pc, #116]	; (8003a04 <TIM_OC4_SetConfig+0x120>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <TIM_OC4_SetConfig+0xc0>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a1c      	ldr	r2, [pc, #112]	; (8003a08 <TIM_OC4_SetConfig+0x124>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d003      	beq.n	80039a4 <TIM_OC4_SetConfig+0xc0>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <TIM_OC4_SetConfig+0x118>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d113      	bne.n	80039cc <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80039aa:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80039ac:	693b      	ldr	r3, [r7, #16]
 80039ae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80039b2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	019b      	lsls	r3, r3, #6
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	4313      	orrs	r3, r2
 80039be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	019b      	lsls	r3, r3, #6
 80039c6:	693a      	ldr	r2, [r7, #16]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	68fa      	ldr	r2, [r7, #12]
 80039d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685a      	ldr	r2, [r3, #4]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	697a      	ldr	r2, [r7, #20]
 80039e4:	621a      	str	r2, [r3, #32]
}
 80039e6:	bf00      	nop
 80039e8:	371c      	adds	r7, #28
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr
 80039f2:	bf00      	nop
 80039f4:	40012c00 	.word	0x40012c00
 80039f8:	40013400 	.word	0x40013400
 80039fc:	40015000 	.word	0x40015000
 8003a00:	40014000 	.word	0x40014000
 8003a04:	40014400 	.word	0x40014400
 8003a08:	40014800 	.word	0x40014800

08003a0c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a1b      	ldr	r3, [r3, #32]
 8003a26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68fa      	ldr	r2, [r7, #12]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003a50:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	041b      	lsls	r3, r3, #16
 8003a58:	693a      	ldr	r2, [r7, #16]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a19      	ldr	r2, [pc, #100]	; (8003ac8 <TIM_OC5_SetConfig+0xbc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d013      	beq.n	8003a8e <TIM_OC5_SetConfig+0x82>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a18      	ldr	r2, [pc, #96]	; (8003acc <TIM_OC5_SetConfig+0xc0>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d00f      	beq.n	8003a8e <TIM_OC5_SetConfig+0x82>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a17      	ldr	r2, [pc, #92]	; (8003ad0 <TIM_OC5_SetConfig+0xc4>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00b      	beq.n	8003a8e <TIM_OC5_SetConfig+0x82>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a16      	ldr	r2, [pc, #88]	; (8003ad4 <TIM_OC5_SetConfig+0xc8>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <TIM_OC5_SetConfig+0x82>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <TIM_OC5_SetConfig+0xcc>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d003      	beq.n	8003a8e <TIM_OC5_SetConfig+0x82>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a14      	ldr	r2, [pc, #80]	; (8003adc <TIM_OC5_SetConfig+0xd0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d109      	bne.n	8003aa2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	021b      	lsls	r3, r3, #8
 8003a9c:	697a      	ldr	r2, [r7, #20]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	697a      	ldr	r2, [r7, #20]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	40012c00 	.word	0x40012c00
 8003acc:	40013400 	.word	0x40013400
 8003ad0:	40014000 	.word	0x40014000
 8003ad4:	40014400 	.word	0x40014400
 8003ad8:	40014800 	.word	0x40014800
 8003adc:	40015000 	.word	0x40015000

08003ae0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a1b      	ldr	r3, [r3, #32]
 8003afa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003b12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	021b      	lsls	r3, r3, #8
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003b26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	051b      	lsls	r3, r3, #20
 8003b2e:	693a      	ldr	r2, [r7, #16]
 8003b30:	4313      	orrs	r3, r2
 8003b32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a1a      	ldr	r2, [pc, #104]	; (8003ba0 <TIM_OC6_SetConfig+0xc0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d013      	beq.n	8003b64 <TIM_OC6_SetConfig+0x84>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a19      	ldr	r2, [pc, #100]	; (8003ba4 <TIM_OC6_SetConfig+0xc4>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00f      	beq.n	8003b64 <TIM_OC6_SetConfig+0x84>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a18      	ldr	r2, [pc, #96]	; (8003ba8 <TIM_OC6_SetConfig+0xc8>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <TIM_OC6_SetConfig+0x84>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a17      	ldr	r2, [pc, #92]	; (8003bac <TIM_OC6_SetConfig+0xcc>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d007      	beq.n	8003b64 <TIM_OC6_SetConfig+0x84>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a16      	ldr	r2, [pc, #88]	; (8003bb0 <TIM_OC6_SetConfig+0xd0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d003      	beq.n	8003b64 <TIM_OC6_SetConfig+0x84>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a15      	ldr	r2, [pc, #84]	; (8003bb4 <TIM_OC6_SetConfig+0xd4>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d109      	bne.n	8003b78 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b6a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	029b      	lsls	r3, r3, #10
 8003b72:	697a      	ldr	r2, [r7, #20]
 8003b74:	4313      	orrs	r3, r2
 8003b76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	68fa      	ldr	r2, [r7, #12]
 8003b82:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	693a      	ldr	r2, [r7, #16]
 8003b90:	621a      	str	r2, [r3, #32]
}
 8003b92:	bf00      	nop
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40012c00 	.word	0x40012c00
 8003ba4:	40013400 	.word	0x40013400
 8003ba8:	40014000 	.word	0x40014000
 8003bac:	40014400 	.word	0x40014400
 8003bb0:	40014800 	.word	0x40014800
 8003bb4:	40015000 	.word	0x40015000

08003bb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	011b      	lsls	r3, r3, #4
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 030a 	bic.w	r3, r3, #10
 8003bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	621a      	str	r2, [r3, #32]
}
 8003c0a:	bf00      	nop
 8003c0c:	371c      	adds	r7, #28
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b087      	sub	sp, #28
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	60f8      	str	r0, [r7, #12]
 8003c1e:	60b9      	str	r1, [r7, #8]
 8003c20:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	6a1b      	ldr	r3, [r3, #32]
 8003c26:	f023 0210 	bic.w	r2, r3, #16
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	699b      	ldr	r3, [r3, #24]
 8003c32:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	031b      	lsls	r3, r3, #12
 8003c46:	697a      	ldr	r2, [r7, #20]
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c52:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	621a      	str	r2, [r3, #32]
}
 8003c6a:	bf00      	nop
 8003c6c:	371c      	adds	r7, #28
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr

08003c76 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c76:	b480      	push	{r7}
 8003c78:	b085      	sub	sp, #20
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
 8003c7e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003c8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c92:	683a      	ldr	r2, [r7, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	4313      	orrs	r3, r2
 8003c98:	f043 0307 	orr.w	r3, r3, #7
 8003c9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	609a      	str	r2, [r3, #8]
}
 8003ca4:	bf00      	nop
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr

08003cb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b087      	sub	sp, #28
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
 8003cbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	021a      	lsls	r2, r3, #8
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	431a      	orrs	r2, r3
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	697a      	ldr	r2, [r7, #20]
 8003ce2:	609a      	str	r2, [r3, #8]
}
 8003ce4:	bf00      	nop
 8003ce6:	371c      	adds	r7, #28
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cee:	4770      	bx	lr

08003cf0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b087      	sub	sp, #28
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	60f8      	str	r0, [r7, #12]
 8003cf8:	60b9      	str	r1, [r7, #8]
 8003cfa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	f003 031f 	and.w	r3, r3, #31
 8003d02:	2201      	movs	r2, #1
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	6a1a      	ldr	r2, [r3, #32]
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	43db      	mvns	r3, r3
 8003d12:	401a      	ands	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6a1a      	ldr	r2, [r3, #32]
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	f003 031f 	and.w	r3, r3, #31
 8003d22:	6879      	ldr	r1, [r7, #4]
 8003d24:	fa01 f303 	lsl.w	r3, r1, r3
 8003d28:	431a      	orrs	r2, r3
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
	...

08003d3c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
 8003d44:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d109      	bne.n	8003d60 <HAL_TIMEx_PWMN_Start+0x24>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	2b01      	cmp	r3, #1
 8003d56:	bf14      	ite	ne
 8003d58:	2301      	movne	r3, #1
 8003d5a:	2300      	moveq	r3, #0
 8003d5c:	b2db      	uxtb	r3, r3
 8003d5e:	e022      	b.n	8003da6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d109      	bne.n	8003d7a <HAL_TIMEx_PWMN_Start+0x3e>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	bf14      	ite	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	2300      	moveq	r3, #0
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	e015      	b.n	8003da6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	2b08      	cmp	r3, #8
 8003d7e:	d109      	bne.n	8003d94 <HAL_TIMEx_PWMN_Start+0x58>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	bf14      	ite	ne
 8003d8c:	2301      	movne	r3, #1
 8003d8e:	2300      	moveq	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	e008      	b.n	8003da6 <HAL_TIMEx_PWMN_Start+0x6a>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	bf14      	ite	ne
 8003da0:	2301      	movne	r3, #1
 8003da2:	2300      	moveq	r3, #0
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d001      	beq.n	8003dae <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e073      	b.n	8003e96 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <HAL_TIMEx_PWMN_Start+0x82>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2202      	movs	r2, #2
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003dbc:	e013      	b.n	8003de6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003dbe:	683b      	ldr	r3, [r7, #0]
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d104      	bne.n	8003dce <HAL_TIMEx_PWMN_Start+0x92>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003dcc:	e00b      	b.n	8003de6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d104      	bne.n	8003dde <HAL_TIMEx_PWMN_Start+0xa2>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ddc:	e003      	b.n	8003de6 <HAL_TIMEx_PWMN_Start+0xaa>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2202      	movs	r2, #2
 8003de2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2204      	movs	r2, #4
 8003dec:	6839      	ldr	r1, [r7, #0]
 8003dee:	4618      	mov	r0, r3
 8003df0:	f000 fa0c 	bl	800420c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e02:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <HAL_TIMEx_PWMN_Start+0x164>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d022      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e16:	d01d      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a21      	ldr	r2, [pc, #132]	; (8003ea4 <HAL_TIMEx_PWMN_Start+0x168>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d018      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a20      	ldr	r2, [pc, #128]	; (8003ea8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d013      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a1e      	ldr	r2, [pc, #120]	; (8003eac <HAL_TIMEx_PWMN_Start+0x170>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00e      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a1d      	ldr	r2, [pc, #116]	; (8003eb0 <HAL_TIMEx_PWMN_Start+0x174>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d009      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1b      	ldr	r2, [pc, #108]	; (8003eb4 <HAL_TIMEx_PWMN_Start+0x178>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d004      	beq.n	8003e54 <HAL_TIMEx_PWMN_Start+0x118>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a1a      	ldr	r2, [pc, #104]	; (8003eb8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d115      	bne.n	8003e80 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	4b18      	ldr	r3, [pc, #96]	; (8003ebc <HAL_TIMEx_PWMN_Start+0x180>)
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2b06      	cmp	r3, #6
 8003e64:	d015      	beq.n	8003e92 <HAL_TIMEx_PWMN_Start+0x156>
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6c:	d011      	beq.n	8003e92 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f042 0201 	orr.w	r2, r2, #1
 8003e7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e7e:	e008      	b.n	8003e92 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0201 	orr.w	r2, r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	e000      	b.n	8003e94 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	40012c00 	.word	0x40012c00
 8003ea4:	40000400 	.word	0x40000400
 8003ea8:	40000800 	.word	0x40000800
 8003eac:	40000c00 	.word	0x40000c00
 8003eb0:	40013400 	.word	0x40013400
 8003eb4:	40014000 	.word	0x40014000
 8003eb8:	40015000 	.word	0x40015000
 8003ebc:	00010007 	.word	0x00010007

08003ec0 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	6839      	ldr	r1, [r7, #0]
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f000 f99a 	bl	800420c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	6a1a      	ldr	r2, [r3, #32]
 8003ede:	f241 1311 	movw	r3, #4369	; 0x1111
 8003ee2:	4013      	ands	r3, r2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d10f      	bne.n	8003f08 <HAL_TIMEx_PWMN_Stop+0x48>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	6a1a      	ldr	r2, [r3, #32]
 8003eee:	f244 4344 	movw	r3, #17476	; 0x4444
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d107      	bne.n	8003f08 <HAL_TIMEx_PWMN_Stop+0x48>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	f241 1311 	movw	r3, #4369	; 0x1111
 8003f12:	4013      	ands	r3, r2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d10f      	bne.n	8003f38 <HAL_TIMEx_PWMN_Stop+0x78>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6a1a      	ldr	r2, [r3, #32]
 8003f1e:	f244 4344 	movw	r3, #17476	; 0x4444
 8003f22:	4013      	ands	r3, r2
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d107      	bne.n	8003f38 <HAL_TIMEx_PWMN_Stop+0x78>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f022 0201 	bic.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d104      	bne.n	8003f48 <HAL_TIMEx_PWMN_Stop+0x88>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	2201      	movs	r2, #1
 8003f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f46:	e013      	b.n	8003f70 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	2b04      	cmp	r3, #4
 8003f4c:	d104      	bne.n	8003f58 <HAL_TIMEx_PWMN_Stop+0x98>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2201      	movs	r2, #1
 8003f52:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f56:	e00b      	b.n	8003f70 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d104      	bne.n	8003f68 <HAL_TIMEx_PWMN_Stop+0xa8>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f66:	e003      	b.n	8003f70 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	3708      	adds	r7, #8
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}
	...

08003f7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b085      	sub	sp, #20
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d101      	bne.n	8003f94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f90:	2302      	movs	r3, #2
 8003f92:	e074      	b.n	800407e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d009      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a33      	ldr	r2, [pc, #204]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d004      	beq.n	8003fd2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a31      	ldr	r2, [pc, #196]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d108      	bne.n	8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003fd8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a21      	ldr	r2, [pc, #132]	; (800408c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d022      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004014:	d01d      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a1f      	ldr	r2, [pc, #124]	; (8004098 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d018      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d013      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a1c      	ldr	r2, [pc, #112]	; (80040a0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00e      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a15      	ldr	r2, [pc, #84]	; (8004090 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d009      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d004      	beq.n	8004052 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a11      	ldr	r2, [pc, #68]	; (8004094 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d10c      	bne.n	800406c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004058:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	4313      	orrs	r3, r2
 8004062:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68ba      	ldr	r2, [r7, #8]
 800406a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2200      	movs	r2, #0
 8004078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr
 800408a:	bf00      	nop
 800408c:	40012c00 	.word	0x40012c00
 8004090:	40013400 	.word	0x40013400
 8004094:	40015000 	.word	0x40015000
 8004098:	40000400 	.word	0x40000400
 800409c:	40000800 	.word	0x40000800
 80040a0:	40000c00 	.word	0x40000c00
 80040a4:	40014000 	.word	0x40014000

080040a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d101      	bne.n	80040c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80040c0:	2302      	movs	r3, #2
 80040c2:	e096      	b.n	80041f2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4313      	orrs	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	4313      	orrs	r3, r2
 8004110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	695b      	ldr	r3, [r3, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4313      	orrs	r3, r2
 800412c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	041b      	lsls	r3, r3, #16
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a2f      	ldr	r2, [pc, #188]	; (8004200 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d009      	beq.n	800415c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a2d      	ldr	r2, [pc, #180]	; (8004204 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a2c      	ldr	r2, [pc, #176]	; (8004208 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d106      	bne.n	800416a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a24      	ldr	r2, [pc, #144]	; (8004200 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d009      	beq.n	8004188 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d004      	beq.n	8004188 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a21      	ldr	r2, [pc, #132]	; (8004208 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d12b      	bne.n	80041e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004192:	051b      	lsls	r3, r3, #20
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6a1b      	ldr	r3, [r3, #32]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	4313      	orrs	r3, r2
 80041b2:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a11      	ldr	r2, [pc, #68]	; (8004200 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d009      	beq.n	80041d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a10      	ldr	r2, [pc, #64]	; (8004204 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d004      	beq.n	80041d2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a0e      	ldr	r2, [pc, #56]	; (8004208 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d106      	bne.n	80041e0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041dc:	4313      	orrs	r3, r2
 80041de:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68fa      	ldr	r2, [r7, #12]
 80041e6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40012c00 	.word	0x40012c00
 8004204:	40013400 	.word	0x40013400
 8004208:	40015000 	.word	0x40015000

0800420c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800420c:	b480      	push	{r7}
 800420e:	b087      	sub	sp, #28
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	f003 031f 	and.w	r3, r3, #31
 800421e:	2204      	movs	r2, #4
 8004220:	fa02 f303 	lsl.w	r3, r2, r3
 8004224:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6a1a      	ldr	r2, [r3, #32]
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	43db      	mvns	r3, r3
 800422e:	401a      	ands	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a1a      	ldr	r2, [r3, #32]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 031f 	and.w	r3, r3, #31
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	fa01 f303 	lsl.w	r3, r1, r3
 8004244:	431a      	orrs	r2, r3
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr

08004256 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b082      	sub	sp, #8
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e042      	b.n	80042ee <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800426e:	2b00      	cmp	r3, #0
 8004270:	d106      	bne.n	8004280 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f7fc fe52 	bl	8000f24 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2224      	movs	r2, #36	; 0x24
 8004284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0201 	bic.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004298:	6878      	ldr	r0, [r7, #4]
 800429a:	f000 fc51 	bl	8004b40 <UART_SetConfig>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d101      	bne.n	80042a8 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e022      	b.n	80042ee <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80042b0:	6878      	ldr	r0, [r7, #4]
 80042b2:	f000 ff41 	bl	8005138 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80042c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	689a      	ldr	r2, [r3, #8]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80042d4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f042 0201 	orr.w	r2, r2, #1
 80042e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 ffc8 	bl	800527c <UART_CheckIdleState>
 80042ec:	4603      	mov	r3, r0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3708      	adds	r7, #8
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}

080042f6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b08a      	sub	sp, #40	; 0x28
 80042fa:	af02      	add	r7, sp, #8
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	603b      	str	r3, [r7, #0]
 8004302:	4613      	mov	r3, r2
 8004304:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800430c:	2b20      	cmp	r3, #32
 800430e:	f040 8083 	bne.w	8004418 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004312:	68bb      	ldr	r3, [r7, #8]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d002      	beq.n	800431e <HAL_UART_Transmit+0x28>
 8004318:	88fb      	ldrh	r3, [r7, #6]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e07b      	b.n	800441a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_UART_Transmit+0x3a>
 800432c:	2302      	movs	r3, #2
 800432e:	e074      	b.n	800441a <HAL_UART_Transmit+0x124>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2200      	movs	r2, #0
 800433c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2221      	movs	r2, #33	; 0x21
 8004344:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004348:	f7fc ffee 	bl	8001328 <HAL_GetTick>
 800434c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	88fa      	ldrh	r2, [r7, #6]
 8004352:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	88fa      	ldrh	r2, [r7, #6]
 800435a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d108      	bne.n	800437a <HAL_UART_Transmit+0x84>
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d104      	bne.n	800437a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004370:	2300      	movs	r3, #0
 8004372:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	61bb      	str	r3, [r7, #24]
 8004378:	e003      	b.n	8004382 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800437e:	2300      	movs	r3, #0
 8004380:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2200      	movs	r2, #0
 8004386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800438a:	e02c      	b.n	80043e6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	9300      	str	r3, [sp, #0]
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2200      	movs	r2, #0
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 ffbb 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d001      	beq.n	80043a6 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e039      	b.n	800441a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d10b      	bne.n	80043c4 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ac:	69bb      	ldr	r3, [r7, #24]
 80043ae:	881b      	ldrh	r3, [r3, #0]
 80043b0:	461a      	mov	r2, r3
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	3302      	adds	r3, #2
 80043c0:	61bb      	str	r3, [r7, #24]
 80043c2:	e007      	b.n	80043d4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	781a      	ldrb	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80043ce:	69fb      	ldr	r3, [r7, #28]
 80043d0:	3301      	adds	r3, #1
 80043d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043da:	b29b      	uxth	r3, r3
 80043dc:	3b01      	subs	r3, #1
 80043de:	b29a      	uxth	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80043ec:	b29b      	uxth	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1cc      	bne.n	800438c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2200      	movs	r2, #0
 80043fa:	2140      	movs	r1, #64	; 0x40
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 ff88 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 8004402:	4603      	mov	r3, r0
 8004404:	2b00      	cmp	r3, #0
 8004406:	d001      	beq.n	800440c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e006      	b.n	800441a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	2220      	movs	r2, #32
 8004410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004414:	2300      	movs	r3, #0
 8004416:	e000      	b.n	800441a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8004418:	2302      	movs	r3, #2
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3720      	adds	r7, #32
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08a      	sub	sp, #40	; 0x28
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	4613      	mov	r3, r2
 8004430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004438:	2b20      	cmp	r3, #32
 800443a:	d142      	bne.n	80044c2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d002      	beq.n	8004448 <HAL_UART_Receive_IT+0x24>
 8004442:	88fb      	ldrh	r3, [r7, #6]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e03b      	b.n	80044c4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_UART_Receive_IT+0x36>
 8004456:	2302      	movs	r3, #2
 8004458:	e034      	b.n	80044c4 <HAL_UART_Receive_IT+0xa0>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	2200      	movs	r2, #0
 8004466:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	4a17      	ldr	r2, [pc, #92]	; (80044cc <HAL_UART_Receive_IT+0xa8>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d01f      	beq.n	80044b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	e853 3f00 	ldrex	r3, [r3]
 800448c:	613b      	str	r3, [r7, #16]
   return(result);
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	461a      	mov	r2, r3
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	623b      	str	r3, [r7, #32]
 80044a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a2:	69f9      	ldr	r1, [r7, #28]
 80044a4:	6a3a      	ldr	r2, [r7, #32]
 80044a6:	e841 2300 	strex	r3, r2, [r1]
 80044aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d1e6      	bne.n	8004480 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	461a      	mov	r2, r3
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	68f8      	ldr	r0, [r7, #12]
 80044ba:	f000 fff3 	bl	80054a4 <UART_Start_Receive_IT>
 80044be:	4603      	mov	r3, r0
 80044c0:	e000      	b.n	80044c4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80044c2:	2302      	movs	r3, #2
  }
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3728      	adds	r7, #40	; 0x28
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}
 80044cc:	40008000 	.word	0x40008000

080044d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b0ba      	sub	sp, #232	; 0xe8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	69db      	ldr	r3, [r3, #28]
 80044de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	689b      	ldr	r3, [r3, #8]
 80044f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80044f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80044fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80044fe:	4013      	ands	r3, r2
 8004500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11b      	bne.n	8004544 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	f003 0320 	and.w	r3, r3, #32
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b00      	cmp	r3, #0
 8004522:	d105      	bne.n	8004530 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004524:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d009      	beq.n	8004544 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004534:	2b00      	cmp	r3, #0
 8004536:	f000 82d6 	beq.w	8004ae6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	4798      	blx	r3
      }
      return;
 8004542:	e2d0      	b.n	8004ae6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004544:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004548:	2b00      	cmp	r3, #0
 800454a:	f000 811f 	beq.w	800478c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800454e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004552:	4b8b      	ldr	r3, [pc, #556]	; (8004780 <HAL_UART_IRQHandler+0x2b0>)
 8004554:	4013      	ands	r3, r2
 8004556:	2b00      	cmp	r3, #0
 8004558:	d106      	bne.n	8004568 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800455a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800455e:	4b89      	ldr	r3, [pc, #548]	; (8004784 <HAL_UART_IRQHandler+0x2b4>)
 8004560:	4013      	ands	r3, r2
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8112 	beq.w	800478c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004568:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d011      	beq.n	8004598 <HAL_UART_IRQHandler+0xc8>
 8004574:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004578:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457c:	2b00      	cmp	r3, #0
 800457e:	d00b      	beq.n	8004598 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2201      	movs	r2, #1
 8004586:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d011      	beq.n	80045c8 <HAL_UART_IRQHandler+0xf8>
 80045a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00b      	beq.n	80045c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2202      	movs	r2, #2
 80045b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045be:	f043 0204 	orr.w	r2, r3, #4
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80045c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d011      	beq.n	80045f8 <HAL_UART_IRQHandler+0x128>
 80045d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d8:	f003 0301 	and.w	r3, r3, #1
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d00b      	beq.n	80045f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2204      	movs	r2, #4
 80045e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ee:	f043 0202 	orr.w	r2, r3, #2
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80045f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d017      	beq.n	8004634 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004608:	f003 0320 	and.w	r3, r3, #32
 800460c:	2b00      	cmp	r3, #0
 800460e:	d105      	bne.n	800461c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004610:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004614:	4b5a      	ldr	r3, [pc, #360]	; (8004780 <HAL_UART_IRQHandler+0x2b0>)
 8004616:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00b      	beq.n	8004634 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	2208      	movs	r2, #8
 8004622:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800462a:	f043 0208 	orr.w	r2, r3, #8
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004638:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800463c:	2b00      	cmp	r3, #0
 800463e:	d012      	beq.n	8004666 <HAL_UART_IRQHandler+0x196>
 8004640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00c      	beq.n	8004666 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004654:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800465c:	f043 0220 	orr.w	r2, r3, #32
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800466c:	2b00      	cmp	r3, #0
 800466e:	f000 823c 	beq.w	8004aea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004672:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004676:	f003 0320 	and.w	r3, r3, #32
 800467a:	2b00      	cmp	r3, #0
 800467c:	d013      	beq.n	80046a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800467e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004682:	f003 0320 	and.w	r3, r3, #32
 8004686:	2b00      	cmp	r3, #0
 8004688:	d105      	bne.n	8004696 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800468a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800468e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d007      	beq.n	80046a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d005      	beq.n	80046ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80046be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80046c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d04f      	beq.n	800476a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f814 	bl	80056f8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046da:	2b40      	cmp	r3, #64	; 0x40
 80046dc:	d141      	bne.n	8004762 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	3308      	adds	r3, #8
 80046e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	3308      	adds	r3, #8
 8004706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800470a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800470e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1d9      	bne.n	80046de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800472e:	2b00      	cmp	r3, #0
 8004730:	d013      	beq.n	800475a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004736:	4a14      	ldr	r2, [pc, #80]	; (8004788 <HAL_UART_IRQHandler+0x2b8>)
 8004738:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800473e:	4618      	mov	r0, r3
 8004740:	f7fc ff88 	bl	8001654 <HAL_DMA_Abort_IT>
 8004744:	4603      	mov	r3, r0
 8004746:	2b00      	cmp	r3, #0
 8004748:	d017      	beq.n	800477a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800474e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004754:	4610      	mov	r0, r2
 8004756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004758:	e00f      	b.n	800477a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f9da 	bl	8004b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004760:	e00b      	b.n	800477a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004762:	6878      	ldr	r0, [r7, #4]
 8004764:	f000 f9d6 	bl	8004b14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004768:	e007      	b.n	800477a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9d2 	bl	8004b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004778:	e1b7      	b.n	8004aea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800477a:	bf00      	nop
    return;
 800477c:	e1b5      	b.n	8004aea <HAL_UART_IRQHandler+0x61a>
 800477e:	bf00      	nop
 8004780:	10000001 	.word	0x10000001
 8004784:	04000120 	.word	0x04000120
 8004788:	080057c5 	.word	0x080057c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004790:	2b01      	cmp	r3, #1
 8004792:	f040 814a 	bne.w	8004a2a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004796:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800479a:	f003 0310 	and.w	r3, r3, #16
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 8143 	beq.w	8004a2a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80047a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047a8:	f003 0310 	and.w	r3, r3, #16
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 813c 	beq.w	8004a2a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2210      	movs	r2, #16
 80047b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	689b      	ldr	r3, [r3, #8]
 80047c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c4:	2b40      	cmp	r3, #64	; 0x40
 80047c6:	f040 80b5 	bne.w	8004934 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8187 	beq.w	8004aee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80047e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047ea:	429a      	cmp	r2, r3
 80047ec:	f080 817f 	bcs.w	8004aee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	f040 8086 	bne.w	8004918 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004814:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004818:	e853 3f00 	ldrex	r3, [r3]
 800481c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004820:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004828:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	461a      	mov	r2, r3
 8004832:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004836:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800483a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004842:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800484e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1da      	bne.n	800480c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	3308      	adds	r3, #8
 800485c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800485e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004860:	e853 3f00 	ldrex	r3, [r3]
 8004864:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004866:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004868:	f023 0301 	bic.w	r3, r3, #1
 800486c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3308      	adds	r3, #8
 8004876:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800487a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800487e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004882:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800488c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e1      	bne.n	8004856 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	3308      	adds	r3, #8
 8004898:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800489a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800489c:	e853 3f00 	ldrex	r3, [r3]
 80048a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80048bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80048be:	e841 2300 	strex	r3, r2, [r1]
 80048c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80048c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d1e3      	bne.n	8004892 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2220      	movs	r2, #32
 80048ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2200      	movs	r2, #0
 80048d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048e8:	f023 0310 	bic.w	r3, r3, #16
 80048ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80048fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80048fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004900:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e4      	bne.n	80048d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004912:	4618      	mov	r0, r3
 8004914:	f7fc fe45 	bl	80015a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004924:	b29b      	uxth	r3, r3
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	b29b      	uxth	r3, r3
 800492a:	4619      	mov	r1, r3
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f000 f8fb 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004932:	e0dc      	b.n	8004aee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004940:	b29b      	uxth	r3, r3
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800494e:	b29b      	uxth	r3, r3
 8004950:	2b00      	cmp	r3, #0
 8004952:	f000 80ce 	beq.w	8004af2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800495a:	2b00      	cmp	r3, #0
 800495c:	f000 80c9 	beq.w	8004af2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800496e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004970:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004974:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	461a      	mov	r2, r3
 800497e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004982:	647b      	str	r3, [r7, #68]	; 0x44
 8004984:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004988:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e4      	bne.n	8004960 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	3308      	adds	r3, #8
 800499c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	623b      	str	r3, [r7, #32]
   return(result);
 80049a6:	6a3b      	ldr	r3, [r7, #32]
 80049a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049ac:	f023 0301 	bic.w	r3, r3, #1
 80049b0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3308      	adds	r3, #8
 80049ba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80049be:	633a      	str	r2, [r7, #48]	; 0x30
 80049c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80049c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c6:	e841 2300 	strex	r3, r2, [r1]
 80049ca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80049cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1e1      	bne.n	8004996 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2220      	movs	r2, #32
 80049d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	2200      	movs	r2, #0
 80049de:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	e853 3f00 	ldrex	r3, [r3]
 80049f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f023 0310 	bic.w	r3, r3, #16
 80049fa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004a08:	61fb      	str	r3, [r7, #28]
 8004a0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a0c:	69b9      	ldr	r1, [r7, #24]
 8004a0e:	69fa      	ldr	r2, [r7, #28]
 8004a10:	e841 2300 	strex	r3, r2, [r1]
 8004a14:	617b      	str	r3, [r7, #20]
   return(result);
 8004a16:	697b      	ldr	r3, [r7, #20]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d1e4      	bne.n	80049e6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a20:	4619      	mov	r1, r3
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 f880 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a28:	e063      	b.n	8004af2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004a2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d00e      	beq.n	8004a54 <HAL_UART_IRQHandler+0x584>
 8004a36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d008      	beq.n	8004a54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004a4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	f001 fb57 	bl	8006100 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a52:	e051      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d014      	beq.n	8004a8a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d105      	bne.n	8004a78 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d008      	beq.n	8004a8a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d03a      	beq.n	8004af6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	4798      	blx	r3
    }
    return;
 8004a88:	e035      	b.n	8004af6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d009      	beq.n	8004aaa <HAL_UART_IRQHandler+0x5da>
 8004a96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d003      	beq.n	8004aaa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004aa2:	6878      	ldr	r0, [r7, #4]
 8004aa4:	f000 fea4 	bl	80057f0 <UART_EndTransmit_IT>
    return;
 8004aa8:	e026      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004aae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_UART_IRQHandler+0x5fa>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f001 fb30 	bl	8006128 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ac8:	e016      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ace:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d010      	beq.n	8004af8 <HAL_UART_IRQHandler+0x628>
 8004ad6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	da0c      	bge.n	8004af8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f001 fb18 	bl	8006114 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004ae4:	e008      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
      return;
 8004ae6:	bf00      	nop
 8004ae8:	e006      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
    return;
 8004aea:	bf00      	nop
 8004aec:	e004      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
      return;
 8004aee:	bf00      	nop
 8004af0:	e002      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
      return;
 8004af2:	bf00      	nop
 8004af4:	e000      	b.n	8004af8 <HAL_UART_IRQHandler+0x628>
    return;
 8004af6:	bf00      	nop
  }
}
 8004af8:	37e8      	adds	r7, #232	; 0xe8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
 8004afe:	bf00      	nop

08004b00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b26:	4770      	bx	lr

08004b28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b083      	sub	sp, #12
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	460b      	mov	r3, r1
 8004b32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b34:	bf00      	nop
 8004b36:	370c      	adds	r7, #12
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b44:	b08c      	sub	sp, #48	; 0x30
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	689a      	ldr	r2, [r3, #8]
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	431a      	orrs	r2, r3
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	695b      	ldr	r3, [r3, #20]
 8004b5e:	431a      	orrs	r2, r3
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	69db      	ldr	r3, [r3, #28]
 8004b64:	4313      	orrs	r3, r2
 8004b66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	4baa      	ldr	r3, [pc, #680]	; (8004e18 <UART_SetConfig+0x2d8>)
 8004b70:	4013      	ands	r3, r2
 8004b72:	697a      	ldr	r2, [r7, #20]
 8004b74:	6812      	ldr	r2, [r2, #0]
 8004b76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b78:	430b      	orrs	r3, r1
 8004b7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a9f      	ldr	r2, [pc, #636]	; (8004e1c <UART_SetConfig+0x2dc>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d004      	beq.n	8004bac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004bb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	6812      	ldr	r2, [r2, #0]
 8004bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bc0:	430b      	orrs	r3, r1
 8004bc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bca:	f023 010f 	bic.w	r1, r3, #15
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a90      	ldr	r2, [pc, #576]	; (8004e20 <UART_SetConfig+0x2e0>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d125      	bne.n	8004c30 <UART_SetConfig+0xf0>
 8004be4:	4b8f      	ldr	r3, [pc, #572]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	2b03      	cmp	r3, #3
 8004bf0:	d81a      	bhi.n	8004c28 <UART_SetConfig+0xe8>
 8004bf2:	a201      	add	r2, pc, #4	; (adr r2, 8004bf8 <UART_SetConfig+0xb8>)
 8004bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bf8:	08004c09 	.word	0x08004c09
 8004bfc:	08004c19 	.word	0x08004c19
 8004c00:	08004c11 	.word	0x08004c11
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	2301      	movs	r3, #1
 8004c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c0e:	e116      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c10:	2302      	movs	r3, #2
 8004c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c16:	e112      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c18:	2304      	movs	r3, #4
 8004c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c1e:	e10e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c20:	2308      	movs	r3, #8
 8004c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c26:	e10a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c28:	2310      	movs	r3, #16
 8004c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2e:	e106      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c30:	697b      	ldr	r3, [r7, #20]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a7c      	ldr	r2, [pc, #496]	; (8004e28 <UART_SetConfig+0x2e8>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d138      	bne.n	8004cac <UART_SetConfig+0x16c>
 8004c3a:	4b7a      	ldr	r3, [pc, #488]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b0c      	cmp	r3, #12
 8004c46:	d82d      	bhi.n	8004ca4 <UART_SetConfig+0x164>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <UART_SetConfig+0x110>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c85 	.word	0x08004c85
 8004c54:	08004ca5 	.word	0x08004ca5
 8004c58:	08004ca5 	.word	0x08004ca5
 8004c5c:	08004ca5 	.word	0x08004ca5
 8004c60:	08004c95 	.word	0x08004c95
 8004c64:	08004ca5 	.word	0x08004ca5
 8004c68:	08004ca5 	.word	0x08004ca5
 8004c6c:	08004ca5 	.word	0x08004ca5
 8004c70:	08004c8d 	.word	0x08004c8d
 8004c74:	08004ca5 	.word	0x08004ca5
 8004c78:	08004ca5 	.word	0x08004ca5
 8004c7c:	08004ca5 	.word	0x08004ca5
 8004c80:	08004c9d 	.word	0x08004c9d
 8004c84:	2300      	movs	r3, #0
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8a:	e0d8      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c8c:	2302      	movs	r3, #2
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e0d4      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c94:	2304      	movs	r3, #4
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e0d0      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004c9c:	2308      	movs	r3, #8
 8004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ca2:	e0cc      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004ca4:	2310      	movs	r3, #16
 8004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004caa:	e0c8      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a5e      	ldr	r2, [pc, #376]	; (8004e2c <UART_SetConfig+0x2ec>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d125      	bne.n	8004d02 <UART_SetConfig+0x1c2>
 8004cb6:	4b5b      	ldr	r3, [pc, #364]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004cc0:	2b30      	cmp	r3, #48	; 0x30
 8004cc2:	d016      	beq.n	8004cf2 <UART_SetConfig+0x1b2>
 8004cc4:	2b30      	cmp	r3, #48	; 0x30
 8004cc6:	d818      	bhi.n	8004cfa <UART_SetConfig+0x1ba>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d00a      	beq.n	8004ce2 <UART_SetConfig+0x1a2>
 8004ccc:	2b20      	cmp	r3, #32
 8004cce:	d814      	bhi.n	8004cfa <UART_SetConfig+0x1ba>
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <UART_SetConfig+0x19a>
 8004cd4:	2b10      	cmp	r3, #16
 8004cd6:	d008      	beq.n	8004cea <UART_SetConfig+0x1aa>
 8004cd8:	e00f      	b.n	8004cfa <UART_SetConfig+0x1ba>
 8004cda:	2300      	movs	r3, #0
 8004cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce0:	e0ad      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce8:	e0a9      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cea:	2304      	movs	r3, #4
 8004cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf0:	e0a5      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf8:	e0a1      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004cfa:	2310      	movs	r3, #16
 8004cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d00:	e09d      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a4a      	ldr	r2, [pc, #296]	; (8004e30 <UART_SetConfig+0x2f0>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d125      	bne.n	8004d58 <UART_SetConfig+0x218>
 8004d0c:	4b45      	ldr	r3, [pc, #276]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004d16:	2bc0      	cmp	r3, #192	; 0xc0
 8004d18:	d016      	beq.n	8004d48 <UART_SetConfig+0x208>
 8004d1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004d1c:	d818      	bhi.n	8004d50 <UART_SetConfig+0x210>
 8004d1e:	2b80      	cmp	r3, #128	; 0x80
 8004d20:	d00a      	beq.n	8004d38 <UART_SetConfig+0x1f8>
 8004d22:	2b80      	cmp	r3, #128	; 0x80
 8004d24:	d814      	bhi.n	8004d50 <UART_SetConfig+0x210>
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d002      	beq.n	8004d30 <UART_SetConfig+0x1f0>
 8004d2a:	2b40      	cmp	r3, #64	; 0x40
 8004d2c:	d008      	beq.n	8004d40 <UART_SetConfig+0x200>
 8004d2e:	e00f      	b.n	8004d50 <UART_SetConfig+0x210>
 8004d30:	2300      	movs	r3, #0
 8004d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d36:	e082      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d38:	2302      	movs	r3, #2
 8004d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3e:	e07e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d40:	2304      	movs	r3, #4
 8004d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d46:	e07a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d48:	2308      	movs	r3, #8
 8004d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4e:	e076      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d50:	2310      	movs	r3, #16
 8004d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d56:	e072      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a35      	ldr	r2, [pc, #212]	; (8004e34 <UART_SetConfig+0x2f4>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d12a      	bne.n	8004db8 <UART_SetConfig+0x278>
 8004d62:	4b30      	ldr	r3, [pc, #192]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d6c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d70:	d01a      	beq.n	8004da8 <UART_SetConfig+0x268>
 8004d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d76:	d81b      	bhi.n	8004db0 <UART_SetConfig+0x270>
 8004d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d7c:	d00c      	beq.n	8004d98 <UART_SetConfig+0x258>
 8004d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d82:	d815      	bhi.n	8004db0 <UART_SetConfig+0x270>
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d003      	beq.n	8004d90 <UART_SetConfig+0x250>
 8004d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d8c:	d008      	beq.n	8004da0 <UART_SetConfig+0x260>
 8004d8e:	e00f      	b.n	8004db0 <UART_SetConfig+0x270>
 8004d90:	2300      	movs	r3, #0
 8004d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d96:	e052      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9e:	e04e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004da0:	2304      	movs	r3, #4
 8004da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da6:	e04a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004da8:	2308      	movs	r3, #8
 8004daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dae:	e046      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004db0:	2310      	movs	r3, #16
 8004db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004db6:	e042      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004db8:	697b      	ldr	r3, [r7, #20]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <UART_SetConfig+0x2dc>)
 8004dbe:	4293      	cmp	r3, r2
 8004dc0:	d13a      	bne.n	8004e38 <UART_SetConfig+0x2f8>
 8004dc2:	4b18      	ldr	r3, [pc, #96]	; (8004e24 <UART_SetConfig+0x2e4>)
 8004dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dc8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004dcc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd0:	d01a      	beq.n	8004e08 <UART_SetConfig+0x2c8>
 8004dd2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004dd6:	d81b      	bhi.n	8004e10 <UART_SetConfig+0x2d0>
 8004dd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ddc:	d00c      	beq.n	8004df8 <UART_SetConfig+0x2b8>
 8004dde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004de2:	d815      	bhi.n	8004e10 <UART_SetConfig+0x2d0>
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d003      	beq.n	8004df0 <UART_SetConfig+0x2b0>
 8004de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dec:	d008      	beq.n	8004e00 <UART_SetConfig+0x2c0>
 8004dee:	e00f      	b.n	8004e10 <UART_SetConfig+0x2d0>
 8004df0:	2300      	movs	r3, #0
 8004df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df6:	e022      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004df8:	2302      	movs	r3, #2
 8004dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004dfe:	e01e      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e00:	2304      	movs	r3, #4
 8004e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e06:	e01a      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e0e:	e016      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e10:	2310      	movs	r3, #16
 8004e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e16:	e012      	b.n	8004e3e <UART_SetConfig+0x2fe>
 8004e18:	cfff69f3 	.word	0xcfff69f3
 8004e1c:	40008000 	.word	0x40008000
 8004e20:	40013800 	.word	0x40013800
 8004e24:	40021000 	.word	0x40021000
 8004e28:	40004400 	.word	0x40004400
 8004e2c:	40004800 	.word	0x40004800
 8004e30:	40004c00 	.word	0x40004c00
 8004e34:	40005000 	.word	0x40005000
 8004e38:	2310      	movs	r3, #16
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4aae      	ldr	r2, [pc, #696]	; (80050fc <UART_SetConfig+0x5bc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	f040 8097 	bne.w	8004f78 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	2b08      	cmp	r3, #8
 8004e50:	d823      	bhi.n	8004e9a <UART_SetConfig+0x35a>
 8004e52:	a201      	add	r2, pc, #4	; (adr r2, 8004e58 <UART_SetConfig+0x318>)
 8004e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e58:	08004e7d 	.word	0x08004e7d
 8004e5c:	08004e9b 	.word	0x08004e9b
 8004e60:	08004e85 	.word	0x08004e85
 8004e64:	08004e9b 	.word	0x08004e9b
 8004e68:	08004e8b 	.word	0x08004e8b
 8004e6c:	08004e9b 	.word	0x08004e9b
 8004e70:	08004e9b 	.word	0x08004e9b
 8004e74:	08004e9b 	.word	0x08004e9b
 8004e78:	08004e93 	.word	0x08004e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e7c:	f7fd fb7a 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8004e80:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e82:	e010      	b.n	8004ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e84:	4b9e      	ldr	r3, [pc, #632]	; (8005100 <UART_SetConfig+0x5c0>)
 8004e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e88:	e00d      	b.n	8004ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004e8a:	f7fd fb05 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8004e8e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004e90:	e009      	b.n	8004ea6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e96:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004e98:	e005      	b.n	8004ea6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ea4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f000 8130 	beq.w	800510e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	4a94      	ldr	r2, [pc, #592]	; (8005104 <UART_SetConfig+0x5c4>)
 8004eb4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004eb8:	461a      	mov	r2, r3
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ec0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	4613      	mov	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	4413      	add	r3, r2
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d305      	bcc.n	8004ede <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d903      	bls.n	8004ee6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004ee4:	e113      	b.n	800510e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee8:	2200      	movs	r2, #0
 8004eea:	60bb      	str	r3, [r7, #8]
 8004eec:	60fa      	str	r2, [r7, #12]
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef2:	4a84      	ldr	r2, [pc, #528]	; (8005104 <UART_SetConfig+0x5c4>)
 8004ef4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2200      	movs	r2, #0
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f04:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f08:	f7fb f9ea 	bl	80002e0 <__aeabi_uldivmod>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	460b      	mov	r3, r1
 8004f10:	4610      	mov	r0, r2
 8004f12:	4619      	mov	r1, r3
 8004f14:	f04f 0200 	mov.w	r2, #0
 8004f18:	f04f 0300 	mov.w	r3, #0
 8004f1c:	020b      	lsls	r3, r1, #8
 8004f1e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004f22:	0202      	lsls	r2, r0, #8
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	6849      	ldr	r1, [r1, #4]
 8004f28:	0849      	lsrs	r1, r1, #1
 8004f2a:	2000      	movs	r0, #0
 8004f2c:	460c      	mov	r4, r1
 8004f2e:	4605      	mov	r5, r0
 8004f30:	eb12 0804 	adds.w	r8, r2, r4
 8004f34:	eb43 0905 	adc.w	r9, r3, r5
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	685b      	ldr	r3, [r3, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	469a      	mov	sl, r3
 8004f40:	4693      	mov	fp, r2
 8004f42:	4652      	mov	r2, sl
 8004f44:	465b      	mov	r3, fp
 8004f46:	4640      	mov	r0, r8
 8004f48:	4649      	mov	r1, r9
 8004f4a:	f7fb f9c9 	bl	80002e0 <__aeabi_uldivmod>
 8004f4e:	4602      	mov	r2, r0
 8004f50:	460b      	mov	r3, r1
 8004f52:	4613      	mov	r3, r2
 8004f54:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004f56:	6a3b      	ldr	r3, [r7, #32]
 8004f58:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f5c:	d308      	bcc.n	8004f70 <UART_SetConfig+0x430>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004f64:	d204      	bcs.n	8004f70 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a3a      	ldr	r2, [r7, #32]
 8004f6c:	60da      	str	r2, [r3, #12]
 8004f6e:	e0ce      	b.n	800510e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f76:	e0ca      	b.n	800510e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004f78:	697b      	ldr	r3, [r7, #20]
 8004f7a:	69db      	ldr	r3, [r3, #28]
 8004f7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f80:	d166      	bne.n	8005050 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004f82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f86:	2b08      	cmp	r3, #8
 8004f88:	d827      	bhi.n	8004fda <UART_SetConfig+0x49a>
 8004f8a:	a201      	add	r2, pc, #4	; (adr r2, 8004f90 <UART_SetConfig+0x450>)
 8004f8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f90:	08004fb5 	.word	0x08004fb5
 8004f94:	08004fbd 	.word	0x08004fbd
 8004f98:	08004fc5 	.word	0x08004fc5
 8004f9c:	08004fdb 	.word	0x08004fdb
 8004fa0:	08004fcb 	.word	0x08004fcb
 8004fa4:	08004fdb 	.word	0x08004fdb
 8004fa8:	08004fdb 	.word	0x08004fdb
 8004fac:	08004fdb 	.word	0x08004fdb
 8004fb0:	08004fd3 	.word	0x08004fd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fb4:	f7fd fade 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8004fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fba:	e014      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fbc:	f7fd faf0 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8004fc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fc2:	e010      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fc4:	4b4e      	ldr	r3, [pc, #312]	; (8005100 <UART_SetConfig+0x5c0>)
 8004fc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fc8:	e00d      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fca:	f7fd fa65 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 8004fce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd0:	e009      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fd8:	e005      	b.n	8004fe6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004fe4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	f000 8090 	beq.w	800510e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	4a44      	ldr	r2, [pc, #272]	; (8005104 <UART_SetConfig+0x5c4>)
 8004ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005000:	005a      	lsls	r2, r3, #1
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	085b      	lsrs	r3, r3, #1
 8005008:	441a      	add	r2, r3
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005012:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005014:	6a3b      	ldr	r3, [r7, #32]
 8005016:	2b0f      	cmp	r3, #15
 8005018:	d916      	bls.n	8005048 <UART_SetConfig+0x508>
 800501a:	6a3b      	ldr	r3, [r7, #32]
 800501c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005020:	d212      	bcs.n	8005048 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005022:	6a3b      	ldr	r3, [r7, #32]
 8005024:	b29b      	uxth	r3, r3
 8005026:	f023 030f 	bic.w	r3, r3, #15
 800502a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800502c:	6a3b      	ldr	r3, [r7, #32]
 800502e:	085b      	lsrs	r3, r3, #1
 8005030:	b29b      	uxth	r3, r3
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	b29a      	uxth	r2, r3
 8005038:	8bfb      	ldrh	r3, [r7, #30]
 800503a:	4313      	orrs	r3, r2
 800503c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	8bfa      	ldrh	r2, [r7, #30]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	e062      	b.n	800510e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800504e:	e05e      	b.n	800510e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005050:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005054:	2b08      	cmp	r3, #8
 8005056:	d828      	bhi.n	80050aa <UART_SetConfig+0x56a>
 8005058:	a201      	add	r2, pc, #4	; (adr r2, 8005060 <UART_SetConfig+0x520>)
 800505a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800505e:	bf00      	nop
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	080050ab 	.word	0x080050ab
 8005070:	0800509b 	.word	0x0800509b
 8005074:	080050ab 	.word	0x080050ab
 8005078:	080050ab 	.word	0x080050ab
 800507c:	080050ab 	.word	0x080050ab
 8005080:	080050a3 	.word	0x080050a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005084:	f7fd fa76 	bl	8002574 <HAL_RCC_GetPCLK1Freq>
 8005088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800508a:	e014      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800508c:	f7fd fa88 	bl	80025a0 <HAL_RCC_GetPCLK2Freq>
 8005090:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005092:	e010      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <UART_SetConfig+0x5c0>)
 8005096:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005098:	e00d      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800509a:	f7fd f9fd 	bl	8002498 <HAL_RCC_GetSysClockFreq>
 800509e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80050a0:	e009      	b.n	80050b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80050a8:	e005      	b.n	80050b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80050ae:	2301      	movs	r3, #1
 80050b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80050b4:	bf00      	nop
    }

    if (pclk != 0U)
 80050b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d028      	beq.n	800510e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c0:	4a10      	ldr	r2, [pc, #64]	; (8005104 <UART_SetConfig+0x5c4>)
 80050c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80050c6:	461a      	mov	r2, r3
 80050c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	441a      	add	r2, r3
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	fbb2 f3f3 	udiv	r3, r2, r3
 80050de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050e0:	6a3b      	ldr	r3, [r7, #32]
 80050e2:	2b0f      	cmp	r3, #15
 80050e4:	d910      	bls.n	8005108 <UART_SetConfig+0x5c8>
 80050e6:	6a3b      	ldr	r3, [r7, #32]
 80050e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050ec:	d20c      	bcs.n	8005108 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	b29a      	uxth	r2, r3
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	60da      	str	r2, [r3, #12]
 80050f8:	e009      	b.n	800510e <UART_SetConfig+0x5ce>
 80050fa:	bf00      	nop
 80050fc:	40008000 	.word	0x40008000
 8005100:	00f42400 	.word	0x00f42400
 8005104:	08007bdc 	.word	0x08007bdc
      }
      else
      {
        ret = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2201      	movs	r2, #1
 8005112:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	2201      	movs	r2, #1
 800511a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2200      	movs	r2, #0
 8005122:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	2200      	movs	r2, #0
 8005128:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800512a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800512e:	4618      	mov	r0, r3
 8005130:	3730      	adds	r7, #48	; 0x30
 8005132:	46bd      	mov	sp, r7
 8005134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08005138 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005144:	f003 0301 	and.w	r3, r3, #1
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00a      	beq.n	8005162 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005166:	f003 0302 	and.w	r3, r3, #2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00a      	beq.n	8005184 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	430a      	orrs	r2, r1
 8005182:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	d00a      	beq.n	80051a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	430a      	orrs	r2, r1
 80051a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00a      	beq.n	80051c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	430a      	orrs	r2, r1
 80051c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00a      	beq.n	80051ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ee:	f003 0320 	and.w	r3, r3, #32
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00a      	beq.n	800520c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005214:	2b00      	cmp	r3, #0
 8005216:	d01a      	beq.n	800524e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	430a      	orrs	r2, r1
 800522c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005236:	d10a      	bne.n	800524e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	685b      	ldr	r3, [r3, #4]
 800523e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	430a      	orrs	r2, r1
 800524c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00a      	beq.n	8005270 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	430a      	orrs	r2, r1
 800526e:	605a      	str	r2, [r3, #4]
  }
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af02      	add	r7, sp, #8
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800528c:	f7fc f84c 	bl	8001328 <HAL_GetTick>
 8005290:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d10e      	bne.n	80052be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	2200      	movs	r2, #0
 80052aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 f82f 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d001      	beq.n	80052be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052ba:	2303      	movs	r3, #3
 80052bc:	e025      	b.n	800530a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b04      	cmp	r3, #4
 80052ca:	d10e      	bne.n	80052ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80052d0:	9300      	str	r3, [sp, #0]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 f819 	bl	8005312 <UART_WaitOnFlagUntilTimeout>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d001      	beq.n	80052ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052e6:	2303      	movs	r3, #3
 80052e8:	e00f      	b.n	800530a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2220      	movs	r2, #32
 80052ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2220      	movs	r2, #32
 80052f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3710      	adds	r7, #16
 800530e:	46bd      	mov	sp, r7
 8005310:	bd80      	pop	{r7, pc}

08005312 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005312:	b580      	push	{r7, lr}
 8005314:	b09c      	sub	sp, #112	; 0x70
 8005316:	af00      	add	r7, sp, #0
 8005318:	60f8      	str	r0, [r7, #12]
 800531a:	60b9      	str	r1, [r7, #8]
 800531c:	603b      	str	r3, [r7, #0]
 800531e:	4613      	mov	r3, r2
 8005320:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005322:	e0a9      	b.n	8005478 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005326:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800532a:	f000 80a5 	beq.w	8005478 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800532e:	f7fb fffb 	bl	8001328 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800533a:	429a      	cmp	r2, r3
 800533c:	d302      	bcc.n	8005344 <UART_WaitOnFlagUntilTimeout+0x32>
 800533e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005340:	2b00      	cmp	r3, #0
 8005342:	d140      	bne.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800534a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800534c:	e853 3f00 	ldrex	r3, [r3]
 8005350:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005354:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005358:	667b      	str	r3, [r7, #100]	; 0x64
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005362:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005364:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005366:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005368:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800536a:	e841 2300 	strex	r3, r2, [r1]
 800536e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005370:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005372:	2b00      	cmp	r3, #0
 8005374:	d1e6      	bne.n	8005344 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	3308      	adds	r3, #8
 800537c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800537e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005380:	e853 3f00 	ldrex	r3, [r3]
 8005384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005388:	f023 0301 	bic.w	r3, r3, #1
 800538c:	663b      	str	r3, [r7, #96]	; 0x60
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005396:	64ba      	str	r2, [r7, #72]	; 0x48
 8005398:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800539c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800539e:	e841 2300 	strex	r3, r2, [r1]
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80053a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d1e5      	bne.n	8005376 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2220      	movs	r2, #32
 80053ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	2220      	movs	r2, #32
 80053b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e069      	b.n	800549a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0304 	and.w	r3, r3, #4
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d051      	beq.n	8005478 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053e2:	d149      	bne.n	8005478 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80053ec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f6:	e853 3f00 	ldrex	r3, [r3]
 80053fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053fe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005402:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	461a      	mov	r2, r3
 800540a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800540c:	637b      	str	r3, [r7, #52]	; 0x34
 800540e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005410:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005414:	e841 2300 	strex	r3, r2, [r1]
 8005418:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	2b00      	cmp	r3, #0
 800541e:	d1e6      	bne.n	80053ee <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3308      	adds	r3, #8
 8005426:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	e853 3f00 	ldrex	r3, [r3]
 800542e:	613b      	str	r3, [r7, #16]
   return(result);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 0301 	bic.w	r3, r3, #1
 8005436:	66bb      	str	r3, [r7, #104]	; 0x68
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	3308      	adds	r3, #8
 800543e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005440:	623a      	str	r2, [r7, #32]
 8005442:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005444:	69f9      	ldr	r1, [r7, #28]
 8005446:	6a3a      	ldr	r2, [r7, #32]
 8005448:	e841 2300 	strex	r3, r2, [r1]
 800544c:	61bb      	str	r3, [r7, #24]
   return(result);
 800544e:	69bb      	ldr	r3, [r7, #24]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1e5      	bne.n	8005420 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2220      	movs	r2, #32
 8005458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2220      	movs	r2, #32
 8005460:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2220      	movs	r2, #32
 8005468:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	2200      	movs	r2, #0
 8005470:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005474:	2303      	movs	r3, #3
 8005476:	e010      	b.n	800549a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	69da      	ldr	r2, [r3, #28]
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	4013      	ands	r3, r2
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	429a      	cmp	r2, r3
 8005486:	bf0c      	ite	eq
 8005488:	2301      	moveq	r3, #1
 800548a:	2300      	movne	r3, #0
 800548c:	b2db      	uxtb	r3, r3
 800548e:	461a      	mov	r2, r3
 8005490:	79fb      	ldrb	r3, [r7, #7]
 8005492:	429a      	cmp	r2, r3
 8005494:	f43f af46 	beq.w	8005324 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005498:	2300      	movs	r3, #0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3770      	adds	r7, #112	; 0x70
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
	...

080054a4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054a4:	b480      	push	{r7}
 80054a6:	b0a3      	sub	sp, #140	; 0x8c
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	60f8      	str	r0, [r7, #12]
 80054ac:	60b9      	str	r1, [r7, #8]
 80054ae:	4613      	mov	r3, r2
 80054b0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	68ba      	ldr	r2, [r7, #8]
 80054b6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	88fa      	ldrh	r2, [r7, #6]
 80054bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	88fa      	ldrh	r2, [r7, #6]
 80054c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2200      	movs	r2, #0
 80054cc:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	d10e      	bne.n	80054f6 <UART_Start_Receive_IT+0x52>
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d105      	bne.n	80054ec <UART_Start_Receive_IT+0x48>
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80054e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054ea:	e02d      	b.n	8005548 <UART_Start_Receive_IT+0xa4>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	22ff      	movs	r2, #255	; 0xff
 80054f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80054f4:	e028      	b.n	8005548 <UART_Start_Receive_IT+0xa4>
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d10d      	bne.n	800551a <UART_Start_Receive_IT+0x76>
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	691b      	ldr	r3, [r3, #16]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d104      	bne.n	8005510 <UART_Start_Receive_IT+0x6c>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	22ff      	movs	r2, #255	; 0xff
 800550a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800550e:	e01b      	b.n	8005548 <UART_Start_Receive_IT+0xa4>
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	227f      	movs	r2, #127	; 0x7f
 8005514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005518:	e016      	b.n	8005548 <UART_Start_Receive_IT+0xa4>
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005522:	d10d      	bne.n	8005540 <UART_Start_Receive_IT+0x9c>
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <UART_Start_Receive_IT+0x92>
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	227f      	movs	r2, #127	; 0x7f
 8005530:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005534:	e008      	b.n	8005548 <UART_Start_Receive_IT+0xa4>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	223f      	movs	r2, #63	; 0x3f
 800553a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800553e:	e003      	b.n	8005548 <UART_Start_Receive_IT+0xa4>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2200      	movs	r2, #0
 8005544:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2200      	movs	r2, #0
 800554c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2222      	movs	r2, #34	; 0x22
 8005554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	3308      	adds	r3, #8
 800555e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005560:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005562:	e853 3f00 	ldrex	r3, [r3]
 8005566:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005568:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800556a:	f043 0301 	orr.w	r3, r3, #1
 800556e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	3308      	adds	r3, #8
 8005578:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800557c:	673a      	str	r2, [r7, #112]	; 0x70
 800557e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005580:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005582:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005584:	e841 2300 	strex	r3, r2, [r1]
 8005588:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800558a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800558c:	2b00      	cmp	r3, #0
 800558e:	d1e3      	bne.n	8005558 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005594:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005598:	d153      	bne.n	8005642 <UART_Start_Receive_IT+0x19e>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055a0:	88fa      	ldrh	r2, [r7, #6]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d34d      	bcc.n	8005642 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	689b      	ldr	r3, [r3, #8]
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d107      	bne.n	80055c0 <UART_Start_Receive_IT+0x11c>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	691b      	ldr	r3, [r3, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d103      	bne.n	80055c0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	4a4b      	ldr	r2, [pc, #300]	; (80056e8 <UART_Start_Receive_IT+0x244>)
 80055bc:	671a      	str	r2, [r3, #112]	; 0x70
 80055be:	e002      	b.n	80055c6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a4a      	ldr	r2, [pc, #296]	; (80056ec <UART_Start_Receive_IT+0x248>)
 80055c4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	691b      	ldr	r3, [r3, #16]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d01a      	beq.n	800560c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055de:	e853 3f00 	ldrex	r3, [r3]
 80055e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80055e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80055e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055ea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	461a      	mov	r2, r3
 80055f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055f8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80055fa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80055fe:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005600:	e841 2300 	strex	r3, r2, [r1]
 8005604:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005606:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005608:	2b00      	cmp	r3, #0
 800560a:	d1e4      	bne.n	80055d6 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	3308      	adds	r3, #8
 8005612:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005614:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005616:	e853 3f00 	ldrex	r3, [r3]
 800561a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800561c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800561e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005622:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	3308      	adds	r3, #8
 800562a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800562c:	64ba      	str	r2, [r7, #72]	; 0x48
 800562e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005632:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800563a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e5      	bne.n	800560c <UART_Start_Receive_IT+0x168>
 8005640:	e04a      	b.n	80056d8 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564a:	d107      	bne.n	800565c <UART_Start_Receive_IT+0x1b8>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d103      	bne.n	800565c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a26      	ldr	r2, [pc, #152]	; (80056f0 <UART_Start_Receive_IT+0x24c>)
 8005658:	671a      	str	r2, [r3, #112]	; 0x70
 800565a:	e002      	b.n	8005662 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4a25      	ldr	r2, [pc, #148]	; (80056f4 <UART_Start_Receive_IT+0x250>)
 8005660:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d019      	beq.n	80056a6 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	e853 3f00 	ldrex	r3, [r3]
 800567e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005686:	677b      	str	r3, [r7, #116]	; 0x74
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	461a      	mov	r2, r3
 800568e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005690:	637b      	str	r3, [r7, #52]	; 0x34
 8005692:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005694:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005696:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005698:	e841 2300 	strex	r3, r2, [r1]
 800569c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d1e6      	bne.n	8005672 <UART_Start_Receive_IT+0x1ce>
 80056a4:	e018      	b.n	80056d8 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	e853 3f00 	ldrex	r3, [r3]
 80056b2:	613b      	str	r3, [r7, #16]
   return(result);
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	f043 0320 	orr.w	r3, r3, #32
 80056ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	461a      	mov	r2, r3
 80056c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c4:	623b      	str	r3, [r7, #32]
 80056c6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	69f9      	ldr	r1, [r7, #28]
 80056ca:	6a3a      	ldr	r2, [r7, #32]
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e6      	bne.n	80056a6 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80056d8:	2300      	movs	r3, #0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	378c      	adds	r7, #140	; 0x8c
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr
 80056e6:	bf00      	nop
 80056e8:	08005e01 	.word	0x08005e01
 80056ec:	08005b09 	.word	0x08005b09
 80056f0:	080059a7 	.word	0x080059a7
 80056f4:	08005847 	.word	0x08005847

080056f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80056f8:	b480      	push	{r7}
 80056fa:	b095      	sub	sp, #84	; 0x54
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	e853 3f00 	ldrex	r3, [r3]
 800570c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005714:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	461a      	mov	r2, r3
 800571c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800571e:	643b      	str	r3, [r7, #64]	; 0x40
 8005720:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005724:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e6      	bne.n	8005700 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	3308      	adds	r3, #8
 8005738:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	e853 3f00 	ldrex	r3, [r3]
 8005740:	61fb      	str	r3, [r7, #28]
   return(result);
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	64bb      	str	r3, [r7, #72]	; 0x48
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	3308      	adds	r3, #8
 8005754:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005756:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005758:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800575c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800575e:	e841 2300 	strex	r3, r2, [r1]
 8005762:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1e3      	bne.n	8005732 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800576e:	2b01      	cmp	r3, #1
 8005770:	d118      	bne.n	80057a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	e853 3f00 	ldrex	r3, [r3]
 800577e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f023 0310 	bic.w	r3, r3, #16
 8005786:	647b      	str	r3, [r7, #68]	; 0x44
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005790:	61bb      	str	r3, [r7, #24]
 8005792:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005794:	6979      	ldr	r1, [r7, #20]
 8005796:	69ba      	ldr	r2, [r7, #24]
 8005798:	e841 2300 	strex	r3, r2, [r1]
 800579c:	613b      	str	r3, [r7, #16]
   return(result);
 800579e:	693b      	ldr	r3, [r7, #16]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d1e6      	bne.n	8005772 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2220      	movs	r2, #32
 80057a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80057b8:	bf00      	nop
 80057ba:	3754      	adds	r7, #84	; 0x54
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80057e2:	68f8      	ldr	r0, [r7, #12]
 80057e4:	f7ff f996 	bl	8004b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80057e8:	bf00      	nop
 80057ea:	3710      	adds	r7, #16
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b088      	sub	sp, #32
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	60bb      	str	r3, [r7, #8]
   return(result);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800580c:	61fb      	str	r3, [r7, #28]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	461a      	mov	r2, r3
 8005814:	69fb      	ldr	r3, [r7, #28]
 8005816:	61bb      	str	r3, [r7, #24]
 8005818:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	6979      	ldr	r1, [r7, #20]
 800581c:	69ba      	ldr	r2, [r7, #24]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	613b      	str	r3, [r7, #16]
   return(result);
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e6      	bne.n	80057f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff f961 	bl	8004b00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800583e:	bf00      	nop
 8005840:	3720      	adds	r7, #32
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}

08005846 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8005846:	b580      	push	{r7, lr}
 8005848:	b096      	sub	sp, #88	; 0x58
 800584a:	af00      	add	r7, sp, #0
 800584c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005854:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800585e:	2b22      	cmp	r3, #34	; 0x22
 8005860:	f040 8095 	bne.w	800598e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800586a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800586e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005872:	b2d9      	uxtb	r1, r3
 8005874:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005878:	b2da      	uxtb	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800587e:	400a      	ands	r2, r1
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005894:	b29b      	uxth	r3, r3
 8005896:	3b01      	subs	r3, #1
 8005898:	b29a      	uxth	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80058a6:	b29b      	uxth	r3, r3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d178      	bne.n	800599e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80058ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058c0:	653b      	str	r3, [r7, #80]	; 0x50
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	461a      	mov	r2, r3
 80058c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058ca:	647b      	str	r3, [r7, #68]	; 0x44
 80058cc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80058d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80058d2:	e841 2300 	strex	r3, r2, [r1]
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80058d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d1e6      	bne.n	80058ac <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3308      	adds	r3, #8
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	623b      	str	r3, [r7, #32]
   return(result);
 80058ee:	6a3b      	ldr	r3, [r7, #32]
 80058f0:	f023 0301 	bic.w	r3, r3, #1
 80058f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	3308      	adds	r3, #8
 80058fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058fe:	633a      	str	r2, [r7, #48]	; 0x30
 8005900:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005902:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005906:	e841 2300 	strex	r3, r2, [r1]
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1e5      	bne.n	80058de <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2220      	movs	r2, #32
 8005916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005924:	2b01      	cmp	r3, #1
 8005926:	d12e      	bne.n	8005986 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	60fb      	str	r3, [r7, #12]
   return(result);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f023 0310 	bic.w	r3, r3, #16
 8005942:	64bb      	str	r3, [r7, #72]	; 0x48
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	461a      	mov	r2, r3
 800594a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	69fa      	ldr	r2, [r7, #28]
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	617b      	str	r3, [r7, #20]
   return(result);
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e6      	bne.n	800592e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	69db      	ldr	r3, [r3, #28]
 8005966:	f003 0310 	and.w	r3, r3, #16
 800596a:	2b10      	cmp	r3, #16
 800596c:	d103      	bne.n	8005976 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	2210      	movs	r2, #16
 8005974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800597c:	4619      	mov	r1, r3
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	f7ff f8d2 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005984:	e00b      	b.n	800599e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f7fb f870 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 800598c:	e007      	b.n	800599e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	699a      	ldr	r2, [r3, #24]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f042 0208 	orr.w	r2, r2, #8
 800599c:	619a      	str	r2, [r3, #24]
}
 800599e:	bf00      	nop
 80059a0:	3758      	adds	r7, #88	; 0x58
 80059a2:	46bd      	mov	sp, r7
 80059a4:	bd80      	pop	{r7, pc}

080059a6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80059a6:	b580      	push	{r7, lr}
 80059a8:	b096      	sub	sp, #88	; 0x58
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80059b4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	2b22      	cmp	r3, #34	; 0x22
 80059c0:	f040 8095 	bne.w	8005aee <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059d2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80059d4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80059d8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80059dc:	4013      	ands	r3, r2
 80059de:	b29a      	uxth	r2, r3
 80059e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059e8:	1c9a      	adds	r2, r3, #2
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059f4:	b29b      	uxth	r3, r3
 80059f6:	3b01      	subs	r3, #1
 80059f8:	b29a      	uxth	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d178      	bne.n	8005afe <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	461a      	mov	r2, r3
 8005a28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a2a:	643b      	str	r3, [r7, #64]	; 0x40
 8005a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a32:	e841 2300 	strex	r3, r2, [r1]
 8005a36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d1e6      	bne.n	8005a0c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	3308      	adds	r3, #8
 8005a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a46:	6a3b      	ldr	r3, [r7, #32]
 8005a48:	e853 3f00 	ldrex	r3, [r3]
 8005a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	f023 0301 	bic.w	r3, r3, #1
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3308      	adds	r3, #8
 8005a5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a66:	e841 2300 	strex	r3, r2, [r1]
 8005a6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d1e5      	bne.n	8005a3e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d12e      	bne.n	8005ae6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	e853 3f00 	ldrex	r3, [r3]
 8005a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a9c:	68bb      	ldr	r3, [r7, #8]
 8005a9e:	f023 0310 	bic.w	r3, r3, #16
 8005aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aac:	61bb      	str	r3, [r7, #24]
 8005aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab0:	6979      	ldr	r1, [r7, #20]
 8005ab2:	69ba      	ldr	r2, [r7, #24]
 8005ab4:	e841 2300 	strex	r3, r2, [r1]
 8005ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8005aba:	693b      	ldr	r3, [r7, #16]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d1e6      	bne.n	8005a8e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	f003 0310 	and.w	r3, r3, #16
 8005aca:	2b10      	cmp	r3, #16
 8005acc:	d103      	bne.n	8005ad6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	2210      	movs	r2, #16
 8005ad4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005adc:	4619      	mov	r1, r3
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7ff f822 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005ae4:	e00b      	b.n	8005afe <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fa ffc0 	bl	8000a6c <HAL_UART_RxCpltCallback>
}
 8005aec:	e007      	b.n	8005afe <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	699a      	ldr	r2, [r3, #24]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f042 0208 	orr.w	r2, r2, #8
 8005afc:	619a      	str	r2, [r3, #24]
}
 8005afe:	bf00      	nop
 8005b00:	3758      	adds	r7, #88	; 0x58
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}
	...

08005b08 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b0a6      	sub	sp, #152	; 0x98
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b16:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69db      	ldr	r3, [r3, #28]
 8005b20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	f040 814f 	bne.w	8005de2 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b4a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005b4e:	e0f6      	b.n	8005d3e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005b5a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005b5e:	b2d9      	uxtb	r1, r3
 8005b60:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	400a      	ands	r2, r1
 8005b6c:	b2d2      	uxtb	r2, r2
 8005b6e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b80:	b29b      	uxth	r3, r3
 8005b82:	3b01      	subs	r3, #1
 8005b84:	b29a      	uxth	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005b96:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b9a:	f003 0307 	and.w	r3, r3, #7
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d053      	beq.n	8005c4a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ba2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ba6:	f003 0301 	and.w	r3, r3, #1
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d011      	beq.n	8005bd2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005bae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d00b      	beq.n	8005bd2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005bd6:	f003 0302 	and.w	r3, r3, #2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d011      	beq.n	8005c02 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005bde:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be2:	f003 0301 	and.w	r3, r3, #1
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d00b      	beq.n	8005c02 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c02:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c06:	f003 0304 	and.w	r3, r3, #4
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d011      	beq.n	8005c32 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005c0e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c12:	f003 0301 	and.w	r3, r3, #1
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d00b      	beq.n	8005c32 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	2204      	movs	r2, #4
 8005c20:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c28:	f043 0202 	orr.w	r2, r3, #2
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d006      	beq.n	8005c4a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f7fe ff69 	bl	8004b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d173      	bne.n	8005d3e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c5e:	e853 3f00 	ldrex	r3, [r3]
 8005c62:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005c64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005c66:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005c6a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	461a      	mov	r2, r3
 8005c74:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c78:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c7a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005c7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c80:	e841 2300 	strex	r3, r2, [r1]
 8005c84:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005c86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d1e4      	bne.n	8005c56 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	3308      	adds	r3, #8
 8005c92:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c96:	e853 3f00 	ldrex	r3, [r3]
 8005c9a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ca2:	f023 0301 	bic.w	r3, r3, #1
 8005ca6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	3308      	adds	r3, #8
 8005cae:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005cb0:	657a      	str	r2, [r7, #84]	; 0x54
 8005cb2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cb8:	e841 2300 	strex	r3, r2, [r1]
 8005cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005cbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1e3      	bne.n	8005c8c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2220      	movs	r2, #32
 8005cc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005cd6:	2b01      	cmp	r3, #1
 8005cd8:	d12e      	bne.n	8005d38 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ce8:	e853 3f00 	ldrex	r3, [r3]
 8005cec:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf0:	f023 0310 	bic.w	r3, r3, #16
 8005cf4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005cfe:	643b      	str	r3, [r7, #64]	; 0x40
 8005d00:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d02:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d06:	e841 2300 	strex	r3, r2, [r1]
 8005d0a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d1e6      	bne.n	8005ce0 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f003 0310 	and.w	r3, r3, #16
 8005d1c:	2b10      	cmp	r3, #16
 8005d1e:	d103      	bne.n	8005d28 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2210      	movs	r2, #16
 8005d26:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f7fe fef9 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
 8005d36:	e002      	b.n	8005d3e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005d38:	6878      	ldr	r0, [r7, #4]
 8005d3a:	f7fa fe97 	bl	8000a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d006      	beq.n	8005d54 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005d46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	f47f aefe 	bne.w	8005b50 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d5a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005d5e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d045      	beq.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d6c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d23e      	bcs.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d8a:	673b      	str	r3, [r7, #112]	; 0x70
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	3308      	adds	r3, #8
 8005d92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005d94:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d98:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d9c:	e841 2300 	strex	r3, r2, [r1]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1e5      	bne.n	8005d74 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a14      	ldr	r2, [pc, #80]	; (8005dfc <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005dac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	e853 3f00 	ldrex	r3, [r3]
 8005dba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	f043 0320 	orr.w	r3, r3, #32
 8005dc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd0:	6979      	ldr	r1, [r7, #20]
 8005dd2:	69ba      	ldr	r2, [r7, #24]
 8005dd4:	e841 2300 	strex	r3, r2, [r1]
 8005dd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d1e6      	bne.n	8005dae <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005de0:	e007      	b.n	8005df2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	699a      	ldr	r2, [r3, #24]
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f042 0208 	orr.w	r2, r2, #8
 8005df0:	619a      	str	r2, [r3, #24]
}
 8005df2:	bf00      	nop
 8005df4:	3798      	adds	r7, #152	; 0x98
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08005847 	.word	0x08005847

08005e00 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b0a8      	sub	sp, #160	; 0xa0
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005e0e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	69db      	ldr	r3, [r3, #28]
 8005e18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	689b      	ldr	r3, [r3, #8]
 8005e2c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e36:	2b22      	cmp	r3, #34	; 0x22
 8005e38:	f040 8153 	bne.w	80060e2 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e42:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005e46:	e0fa      	b.n	800603e <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e4e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005e5a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005e5e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005e62:	4013      	ands	r3, r2
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e6a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e70:	1c9a      	adds	r2, r3, #2
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005e92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e96:	f003 0307 	and.w	r3, r3, #7
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d053      	beq.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005e9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ea2:	f003 0301 	and.w	r3, r3, #1
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d011      	beq.n	8005ece <UART_RxISR_16BIT_FIFOEN+0xce>
 8005eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d00b      	beq.n	8005ece <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2201      	movs	r2, #1
 8005ebc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ec4:	f043 0201 	orr.w	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ece:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ed2:	f003 0302 	and.w	r3, r3, #2
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d011      	beq.n	8005efe <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005eda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d00b      	beq.n	8005efe <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2202      	movs	r2, #2
 8005eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ef4:	f043 0204 	orr.w	r2, r3, #4
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005efe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f02:	f003 0304 	and.w	r3, r3, #4
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d011      	beq.n	8005f2e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005f0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2204      	movs	r2, #4
 8005f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f24:	f043 0202 	orr.w	r2, r3, #2
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d006      	beq.n	8005f46 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7fe fdeb 	bl	8004b14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f4c:	b29b      	uxth	r3, r3
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d175      	bne.n	800603e <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f5a:	e853 3f00 	ldrex	r3, [r3]
 8005f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	461a      	mov	r2, r3
 8005f70:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005f74:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005f76:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f78:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f7a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f7c:	e841 2300 	strex	r3, r2, [r1]
 8005f80:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1e4      	bne.n	8005f52 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	3308      	adds	r3, #8
 8005f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f92:	e853 3f00 	ldrex	r3, [r3]
 8005f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	3308      	adds	r3, #8
 8005fac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005fb0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005fb2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005fb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005fbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e1      	bne.n	8005f88 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2220      	movs	r2, #32
 8005fc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d12e      	bne.n	8006038 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fe8:	e853 3f00 	ldrex	r3, [r3]
 8005fec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ff0:	f023 0310 	bic.w	r3, r3, #16
 8005ff4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005ffe:	647b      	str	r3, [r7, #68]	; 0x44
 8006000:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006004:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800600c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e6      	bne.n	8005fe0 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	69db      	ldr	r3, [r3, #28]
 8006018:	f003 0310 	and.w	r3, r3, #16
 800601c:	2b10      	cmp	r3, #16
 800601e:	d103      	bne.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2210      	movs	r2, #16
 8006026:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800602e:	4619      	mov	r1, r3
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f7fe fd79 	bl	8004b28 <HAL_UARTEx_RxEventCallback>
 8006036:	e002      	b.n	800603e <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f7fa fd17 	bl	8000a6c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800603e:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006042:	2b00      	cmp	r3, #0
 8006044:	d006      	beq.n	8006054 <UART_RxISR_16BIT_FIFOEN+0x254>
 8006046:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800604a:	f003 0320 	and.w	r3, r3, #32
 800604e:	2b00      	cmp	r3, #0
 8006050:	f47f aefa 	bne.w	8005e48 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800605a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800605e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006062:	2b00      	cmp	r3, #0
 8006064:	d045      	beq.n	80060f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800606c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006070:	429a      	cmp	r2, r3
 8006072:	d23e      	bcs.n	80060f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3308      	adds	r3, #8
 800607a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800607c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607e:	e853 3f00 	ldrex	r3, [r3]
 8006082:	623b      	str	r3, [r7, #32]
   return(result);
 8006084:	6a3b      	ldr	r3, [r7, #32]
 8006086:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800608a:	677b      	str	r3, [r7, #116]	; 0x74
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006094:	633a      	str	r2, [r7, #48]	; 0x30
 8006096:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800609a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80060a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e5      	bne.n	8006074 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	4a14      	ldr	r2, [pc, #80]	; (80060fc <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80060ac:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	e853 3f00 	ldrex	r3, [r3]
 80060ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f043 0320 	orr.w	r3, r3, #32
 80060c2:	673b      	str	r3, [r7, #112]	; 0x70
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	461a      	mov	r2, r3
 80060ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060cc:	61fb      	str	r3, [r7, #28]
 80060ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d0:	69b9      	ldr	r1, [r7, #24]
 80060d2:	69fa      	ldr	r2, [r7, #28]
 80060d4:	e841 2300 	strex	r3, r2, [r1]
 80060d8:	617b      	str	r3, [r7, #20]
   return(result);
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1e6      	bne.n	80060ae <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80060e0:	e007      	b.n	80060f2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	699a      	ldr	r2, [r3, #24]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	f042 0208 	orr.w	r2, r2, #8
 80060f0:	619a      	str	r2, [r3, #24]
}
 80060f2:	bf00      	nop
 80060f4:	37a0      	adds	r7, #160	; 0xa0
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	080059a7 	.word	0x080059a7

08006100 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006130:	bf00      	nop
 8006132:	370c      	adds	r7, #12
 8006134:	46bd      	mov	sp, r7
 8006136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613a:	4770      	bx	lr

0800613c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800614a:	2b01      	cmp	r3, #1
 800614c:	d101      	bne.n	8006152 <HAL_UARTEx_DisableFifoMode+0x16>
 800614e:	2302      	movs	r3, #2
 8006150:	e027      	b.n	80061a2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2201      	movs	r2, #1
 8006156:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2224      	movs	r2, #36	; 0x24
 800615e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 0201 	bic.w	r2, r2, #1
 8006178:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006180:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr

080061ae <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061ae:	b580      	push	{r7, lr}
 80061b0:	b084      	sub	sp, #16
 80061b2:	af00      	add	r7, sp, #0
 80061b4:	6078      	str	r0, [r7, #4]
 80061b6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061be:	2b01      	cmp	r3, #1
 80061c0:	d101      	bne.n	80061c6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061c2:	2302      	movs	r3, #2
 80061c4:	e02d      	b.n	8006222 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2224      	movs	r2, #36	; 0x24
 80061d2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f022 0201 	bic.w	r2, r2, #1
 80061ec:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	683a      	ldr	r2, [r7, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006202:	6878      	ldr	r0, [r7, #4]
 8006204:	f000 f850 	bl	80062a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	68fa      	ldr	r2, [r7, #12]
 800620e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2220      	movs	r2, #32
 8006214:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
 8006232:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800623a:	2b01      	cmp	r3, #1
 800623c:	d101      	bne.n	8006242 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800623e:	2302      	movs	r3, #2
 8006240:	e02d      	b.n	800629e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2201      	movs	r2, #1
 8006246:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2224      	movs	r2, #36	; 0x24
 800624e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 0201 	bic.w	r2, r2, #1
 8006268:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	683a      	ldr	r2, [r7, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f812 	bl	80062a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2220      	movs	r2, #32
 8006290:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3710      	adds	r7, #16
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d108      	bne.n	80062ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062c8:	e031      	b.n	800632e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ca:	2308      	movs	r3, #8
 80062cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062ce:	2308      	movs	r3, #8
 80062d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	689b      	ldr	r3, [r3, #8]
 80062d8:	0e5b      	lsrs	r3, r3, #25
 80062da:	b2db      	uxtb	r3, r3
 80062dc:	f003 0307 	and.w	r3, r3, #7
 80062e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	0f5b      	lsrs	r3, r3, #29
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	f003 0307 	and.w	r3, r3, #7
 80062f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80062f2:	7bbb      	ldrb	r3, [r7, #14]
 80062f4:	7b3a      	ldrb	r2, [r7, #12]
 80062f6:	4911      	ldr	r1, [pc, #68]	; (800633c <UARTEx_SetNbDataToProcess+0x94>)
 80062f8:	5c8a      	ldrb	r2, [r1, r2]
 80062fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80062fe:	7b3a      	ldrb	r2, [r7, #12]
 8006300:	490f      	ldr	r1, [pc, #60]	; (8006340 <UARTEx_SetNbDataToProcess+0x98>)
 8006302:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006304:	fb93 f3f2 	sdiv	r3, r3, r2
 8006308:	b29a      	uxth	r2, r3
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006310:	7bfb      	ldrb	r3, [r7, #15]
 8006312:	7b7a      	ldrb	r2, [r7, #13]
 8006314:	4909      	ldr	r1, [pc, #36]	; (800633c <UARTEx_SetNbDataToProcess+0x94>)
 8006316:	5c8a      	ldrb	r2, [r1, r2]
 8006318:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800631c:	7b7a      	ldrb	r2, [r7, #13]
 800631e:	4908      	ldr	r1, [pc, #32]	; (8006340 <UARTEx_SetNbDataToProcess+0x98>)
 8006320:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006322:	fb93 f3f2 	sdiv	r3, r3, r2
 8006326:	b29a      	uxth	r2, r3
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800632e:	bf00      	nop
 8006330:	3714      	adds	r7, #20
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr
 800633a:	bf00      	nop
 800633c:	08007bf4 	.word	0x08007bf4
 8006340:	08007bfc 	.word	0x08007bfc

08006344 <atoi>:
 8006344:	220a      	movs	r2, #10
 8006346:	2100      	movs	r1, #0
 8006348:	f000 b9d2 	b.w	80066f0 <strtol>

0800634c <__errno>:
 800634c:	4b01      	ldr	r3, [pc, #4]	; (8006354 <__errno+0x8>)
 800634e:	6818      	ldr	r0, [r3, #0]
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	200000f4 	.word	0x200000f4

08006358 <__libc_init_array>:
 8006358:	b570      	push	{r4, r5, r6, lr}
 800635a:	4d0d      	ldr	r5, [pc, #52]	; (8006390 <__libc_init_array+0x38>)
 800635c:	4c0d      	ldr	r4, [pc, #52]	; (8006394 <__libc_init_array+0x3c>)
 800635e:	1b64      	subs	r4, r4, r5
 8006360:	10a4      	asrs	r4, r4, #2
 8006362:	2600      	movs	r6, #0
 8006364:	42a6      	cmp	r6, r4
 8006366:	d109      	bne.n	800637c <__libc_init_array+0x24>
 8006368:	4d0b      	ldr	r5, [pc, #44]	; (8006398 <__libc_init_array+0x40>)
 800636a:	4c0c      	ldr	r4, [pc, #48]	; (800639c <__libc_init_array+0x44>)
 800636c:	f001 fb80 	bl	8007a70 <_init>
 8006370:	1b64      	subs	r4, r4, r5
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	2600      	movs	r6, #0
 8006376:	42a6      	cmp	r6, r4
 8006378:	d105      	bne.n	8006386 <__libc_init_array+0x2e>
 800637a:	bd70      	pop	{r4, r5, r6, pc}
 800637c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006380:	4798      	blx	r3
 8006382:	3601      	adds	r6, #1
 8006384:	e7ee      	b.n	8006364 <__libc_init_array+0xc>
 8006386:	f855 3b04 	ldr.w	r3, [r5], #4
 800638a:	4798      	blx	r3
 800638c:	3601      	adds	r6, #1
 800638e:	e7f2      	b.n	8006376 <__libc_init_array+0x1e>
 8006390:	08007e58 	.word	0x08007e58
 8006394:	08007e58 	.word	0x08007e58
 8006398:	08007e58 	.word	0x08007e58
 800639c:	08007e5c 	.word	0x08007e5c

080063a0 <memset>:
 80063a0:	4402      	add	r2, r0
 80063a2:	4603      	mov	r3, r0
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d100      	bne.n	80063aa <memset+0xa>
 80063a8:	4770      	bx	lr
 80063aa:	f803 1b01 	strb.w	r1, [r3], #1
 80063ae:	e7f9      	b.n	80063a4 <memset+0x4>

080063b0 <iprintf>:
 80063b0:	b40f      	push	{r0, r1, r2, r3}
 80063b2:	4b0a      	ldr	r3, [pc, #40]	; (80063dc <iprintf+0x2c>)
 80063b4:	b513      	push	{r0, r1, r4, lr}
 80063b6:	681c      	ldr	r4, [r3, #0]
 80063b8:	b124      	cbz	r4, 80063c4 <iprintf+0x14>
 80063ba:	69a3      	ldr	r3, [r4, #24]
 80063bc:	b913      	cbnz	r3, 80063c4 <iprintf+0x14>
 80063be:	4620      	mov	r0, r4
 80063c0:	f000 fb98 	bl	8006af4 <__sinit>
 80063c4:	ab05      	add	r3, sp, #20
 80063c6:	9a04      	ldr	r2, [sp, #16]
 80063c8:	68a1      	ldr	r1, [r4, #8]
 80063ca:	9301      	str	r3, [sp, #4]
 80063cc:	4620      	mov	r0, r4
 80063ce:	f000 ff17 	bl	8007200 <_vfiprintf_r>
 80063d2:	b002      	add	sp, #8
 80063d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80063d8:	b004      	add	sp, #16
 80063da:	4770      	bx	lr
 80063dc:	200000f4 	.word	0x200000f4

080063e0 <_puts_r>:
 80063e0:	b570      	push	{r4, r5, r6, lr}
 80063e2:	460e      	mov	r6, r1
 80063e4:	4605      	mov	r5, r0
 80063e6:	b118      	cbz	r0, 80063f0 <_puts_r+0x10>
 80063e8:	6983      	ldr	r3, [r0, #24]
 80063ea:	b90b      	cbnz	r3, 80063f0 <_puts_r+0x10>
 80063ec:	f000 fb82 	bl	8006af4 <__sinit>
 80063f0:	69ab      	ldr	r3, [r5, #24]
 80063f2:	68ac      	ldr	r4, [r5, #8]
 80063f4:	b913      	cbnz	r3, 80063fc <_puts_r+0x1c>
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 fb7c 	bl	8006af4 <__sinit>
 80063fc:	4b2c      	ldr	r3, [pc, #176]	; (80064b0 <_puts_r+0xd0>)
 80063fe:	429c      	cmp	r4, r3
 8006400:	d120      	bne.n	8006444 <_puts_r+0x64>
 8006402:	686c      	ldr	r4, [r5, #4]
 8006404:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006406:	07db      	lsls	r3, r3, #31
 8006408:	d405      	bmi.n	8006416 <_puts_r+0x36>
 800640a:	89a3      	ldrh	r3, [r4, #12]
 800640c:	0598      	lsls	r0, r3, #22
 800640e:	d402      	bmi.n	8006416 <_puts_r+0x36>
 8006410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006412:	f000 fc1f 	bl	8006c54 <__retarget_lock_acquire_recursive>
 8006416:	89a3      	ldrh	r3, [r4, #12]
 8006418:	0719      	lsls	r1, r3, #28
 800641a:	d51d      	bpl.n	8006458 <_puts_r+0x78>
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	b1db      	cbz	r3, 8006458 <_puts_r+0x78>
 8006420:	3e01      	subs	r6, #1
 8006422:	68a3      	ldr	r3, [r4, #8]
 8006424:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006428:	3b01      	subs	r3, #1
 800642a:	60a3      	str	r3, [r4, #8]
 800642c:	bb39      	cbnz	r1, 800647e <_puts_r+0x9e>
 800642e:	2b00      	cmp	r3, #0
 8006430:	da38      	bge.n	80064a4 <_puts_r+0xc4>
 8006432:	4622      	mov	r2, r4
 8006434:	210a      	movs	r1, #10
 8006436:	4628      	mov	r0, r5
 8006438:	f000 f964 	bl	8006704 <__swbuf_r>
 800643c:	3001      	adds	r0, #1
 800643e:	d011      	beq.n	8006464 <_puts_r+0x84>
 8006440:	250a      	movs	r5, #10
 8006442:	e011      	b.n	8006468 <_puts_r+0x88>
 8006444:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <_puts_r+0xd4>)
 8006446:	429c      	cmp	r4, r3
 8006448:	d101      	bne.n	800644e <_puts_r+0x6e>
 800644a:	68ac      	ldr	r4, [r5, #8]
 800644c:	e7da      	b.n	8006404 <_puts_r+0x24>
 800644e:	4b1a      	ldr	r3, [pc, #104]	; (80064b8 <_puts_r+0xd8>)
 8006450:	429c      	cmp	r4, r3
 8006452:	bf08      	it	eq
 8006454:	68ec      	ldreq	r4, [r5, #12]
 8006456:	e7d5      	b.n	8006404 <_puts_r+0x24>
 8006458:	4621      	mov	r1, r4
 800645a:	4628      	mov	r0, r5
 800645c:	f000 f9a4 	bl	80067a8 <__swsetup_r>
 8006460:	2800      	cmp	r0, #0
 8006462:	d0dd      	beq.n	8006420 <_puts_r+0x40>
 8006464:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006468:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800646a:	07da      	lsls	r2, r3, #31
 800646c:	d405      	bmi.n	800647a <_puts_r+0x9a>
 800646e:	89a3      	ldrh	r3, [r4, #12]
 8006470:	059b      	lsls	r3, r3, #22
 8006472:	d402      	bmi.n	800647a <_puts_r+0x9a>
 8006474:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006476:	f000 fbee 	bl	8006c56 <__retarget_lock_release_recursive>
 800647a:	4628      	mov	r0, r5
 800647c:	bd70      	pop	{r4, r5, r6, pc}
 800647e:	2b00      	cmp	r3, #0
 8006480:	da04      	bge.n	800648c <_puts_r+0xac>
 8006482:	69a2      	ldr	r2, [r4, #24]
 8006484:	429a      	cmp	r2, r3
 8006486:	dc06      	bgt.n	8006496 <_puts_r+0xb6>
 8006488:	290a      	cmp	r1, #10
 800648a:	d004      	beq.n	8006496 <_puts_r+0xb6>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	1c5a      	adds	r2, r3, #1
 8006490:	6022      	str	r2, [r4, #0]
 8006492:	7019      	strb	r1, [r3, #0]
 8006494:	e7c5      	b.n	8006422 <_puts_r+0x42>
 8006496:	4622      	mov	r2, r4
 8006498:	4628      	mov	r0, r5
 800649a:	f000 f933 	bl	8006704 <__swbuf_r>
 800649e:	3001      	adds	r0, #1
 80064a0:	d1bf      	bne.n	8006422 <_puts_r+0x42>
 80064a2:	e7df      	b.n	8006464 <_puts_r+0x84>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	250a      	movs	r5, #10
 80064a8:	1c5a      	adds	r2, r3, #1
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	701d      	strb	r5, [r3, #0]
 80064ae:	e7db      	b.n	8006468 <_puts_r+0x88>
 80064b0:	08007ddc 	.word	0x08007ddc
 80064b4:	08007dfc 	.word	0x08007dfc
 80064b8:	08007dbc 	.word	0x08007dbc

080064bc <puts>:
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <puts+0xc>)
 80064be:	4601      	mov	r1, r0
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	f7ff bf8d 	b.w	80063e0 <_puts_r>
 80064c6:	bf00      	nop
 80064c8:	200000f4 	.word	0x200000f4

080064cc <siprintf>:
 80064cc:	b40e      	push	{r1, r2, r3}
 80064ce:	b500      	push	{lr}
 80064d0:	b09c      	sub	sp, #112	; 0x70
 80064d2:	ab1d      	add	r3, sp, #116	; 0x74
 80064d4:	9002      	str	r0, [sp, #8]
 80064d6:	9006      	str	r0, [sp, #24]
 80064d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064dc:	4809      	ldr	r0, [pc, #36]	; (8006504 <siprintf+0x38>)
 80064de:	9107      	str	r1, [sp, #28]
 80064e0:	9104      	str	r1, [sp, #16]
 80064e2:	4909      	ldr	r1, [pc, #36]	; (8006508 <siprintf+0x3c>)
 80064e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e8:	9105      	str	r1, [sp, #20]
 80064ea:	6800      	ldr	r0, [r0, #0]
 80064ec:	9301      	str	r3, [sp, #4]
 80064ee:	a902      	add	r1, sp, #8
 80064f0:	f000 fd5c 	bl	8006fac <_svfiprintf_r>
 80064f4:	9b02      	ldr	r3, [sp, #8]
 80064f6:	2200      	movs	r2, #0
 80064f8:	701a      	strb	r2, [r3, #0]
 80064fa:	b01c      	add	sp, #112	; 0x70
 80064fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8006500:	b003      	add	sp, #12
 8006502:	4770      	bx	lr
 8006504:	200000f4 	.word	0x200000f4
 8006508:	ffff0208 	.word	0xffff0208

0800650c <strncmp>:
 800650c:	b510      	push	{r4, lr}
 800650e:	b17a      	cbz	r2, 8006530 <strncmp+0x24>
 8006510:	4603      	mov	r3, r0
 8006512:	3901      	subs	r1, #1
 8006514:	1884      	adds	r4, r0, r2
 8006516:	f813 0b01 	ldrb.w	r0, [r3], #1
 800651a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800651e:	4290      	cmp	r0, r2
 8006520:	d101      	bne.n	8006526 <strncmp+0x1a>
 8006522:	42a3      	cmp	r3, r4
 8006524:	d101      	bne.n	800652a <strncmp+0x1e>
 8006526:	1a80      	subs	r0, r0, r2
 8006528:	bd10      	pop	{r4, pc}
 800652a:	2800      	cmp	r0, #0
 800652c:	d1f3      	bne.n	8006516 <strncmp+0xa>
 800652e:	e7fa      	b.n	8006526 <strncmp+0x1a>
 8006530:	4610      	mov	r0, r2
 8006532:	e7f9      	b.n	8006528 <strncmp+0x1c>

08006534 <strtok>:
 8006534:	4b16      	ldr	r3, [pc, #88]	; (8006590 <strtok+0x5c>)
 8006536:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006538:	681e      	ldr	r6, [r3, #0]
 800653a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800653c:	4605      	mov	r5, r0
 800653e:	b9fc      	cbnz	r4, 8006580 <strtok+0x4c>
 8006540:	2050      	movs	r0, #80	; 0x50
 8006542:	9101      	str	r1, [sp, #4]
 8006544:	f000 fbee 	bl	8006d24 <malloc>
 8006548:	9901      	ldr	r1, [sp, #4]
 800654a:	65b0      	str	r0, [r6, #88]	; 0x58
 800654c:	4602      	mov	r2, r0
 800654e:	b920      	cbnz	r0, 800655a <strtok+0x26>
 8006550:	4b10      	ldr	r3, [pc, #64]	; (8006594 <strtok+0x60>)
 8006552:	4811      	ldr	r0, [pc, #68]	; (8006598 <strtok+0x64>)
 8006554:	2157      	movs	r1, #87	; 0x57
 8006556:	f000 f995 	bl	8006884 <__assert_func>
 800655a:	e9c0 4400 	strd	r4, r4, [r0]
 800655e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006562:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006566:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800656a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800656e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006572:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006576:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800657a:	6184      	str	r4, [r0, #24]
 800657c:	7704      	strb	r4, [r0, #28]
 800657e:	6244      	str	r4, [r0, #36]	; 0x24
 8006580:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006582:	2301      	movs	r3, #1
 8006584:	4628      	mov	r0, r5
 8006586:	b002      	add	sp, #8
 8006588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800658c:	f000 b806 	b.w	800659c <__strtok_r>
 8006590:	200000f4 	.word	0x200000f4
 8006594:	08007c08 	.word	0x08007c08
 8006598:	08007c1f 	.word	0x08007c1f

0800659c <__strtok_r>:
 800659c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659e:	b908      	cbnz	r0, 80065a4 <__strtok_r+0x8>
 80065a0:	6810      	ldr	r0, [r2, #0]
 80065a2:	b188      	cbz	r0, 80065c8 <__strtok_r+0x2c>
 80065a4:	4604      	mov	r4, r0
 80065a6:	4620      	mov	r0, r4
 80065a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80065ac:	460f      	mov	r7, r1
 80065ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80065b2:	b91e      	cbnz	r6, 80065bc <__strtok_r+0x20>
 80065b4:	b965      	cbnz	r5, 80065d0 <__strtok_r+0x34>
 80065b6:	6015      	str	r5, [r2, #0]
 80065b8:	4628      	mov	r0, r5
 80065ba:	e005      	b.n	80065c8 <__strtok_r+0x2c>
 80065bc:	42b5      	cmp	r5, r6
 80065be:	d1f6      	bne.n	80065ae <__strtok_r+0x12>
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d1f0      	bne.n	80065a6 <__strtok_r+0xa>
 80065c4:	6014      	str	r4, [r2, #0]
 80065c6:	7003      	strb	r3, [r0, #0]
 80065c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065ca:	461c      	mov	r4, r3
 80065cc:	e00c      	b.n	80065e8 <__strtok_r+0x4c>
 80065ce:	b915      	cbnz	r5, 80065d6 <__strtok_r+0x3a>
 80065d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80065d4:	460e      	mov	r6, r1
 80065d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80065da:	42ab      	cmp	r3, r5
 80065dc:	d1f7      	bne.n	80065ce <__strtok_r+0x32>
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d0f3      	beq.n	80065ca <__strtok_r+0x2e>
 80065e2:	2300      	movs	r3, #0
 80065e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80065e8:	6014      	str	r4, [r2, #0]
 80065ea:	e7ed      	b.n	80065c8 <__strtok_r+0x2c>

080065ec <_strtol_l.constprop.0>:
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f2:	d001      	beq.n	80065f8 <_strtol_l.constprop.0+0xc>
 80065f4:	2b24      	cmp	r3, #36	; 0x24
 80065f6:	d906      	bls.n	8006606 <_strtol_l.constprop.0+0x1a>
 80065f8:	f7ff fea8 	bl	800634c <__errno>
 80065fc:	2316      	movs	r3, #22
 80065fe:	6003      	str	r3, [r0, #0]
 8006600:	2000      	movs	r0, #0
 8006602:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006606:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80066ec <_strtol_l.constprop.0+0x100>
 800660a:	460d      	mov	r5, r1
 800660c:	462e      	mov	r6, r5
 800660e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006612:	f814 700c 	ldrb.w	r7, [r4, ip]
 8006616:	f017 0708 	ands.w	r7, r7, #8
 800661a:	d1f7      	bne.n	800660c <_strtol_l.constprop.0+0x20>
 800661c:	2c2d      	cmp	r4, #45	; 0x2d
 800661e:	d132      	bne.n	8006686 <_strtol_l.constprop.0+0x9a>
 8006620:	782c      	ldrb	r4, [r5, #0]
 8006622:	2701      	movs	r7, #1
 8006624:	1cb5      	adds	r5, r6, #2
 8006626:	2b00      	cmp	r3, #0
 8006628:	d05b      	beq.n	80066e2 <_strtol_l.constprop.0+0xf6>
 800662a:	2b10      	cmp	r3, #16
 800662c:	d109      	bne.n	8006642 <_strtol_l.constprop.0+0x56>
 800662e:	2c30      	cmp	r4, #48	; 0x30
 8006630:	d107      	bne.n	8006642 <_strtol_l.constprop.0+0x56>
 8006632:	782c      	ldrb	r4, [r5, #0]
 8006634:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006638:	2c58      	cmp	r4, #88	; 0x58
 800663a:	d14d      	bne.n	80066d8 <_strtol_l.constprop.0+0xec>
 800663c:	786c      	ldrb	r4, [r5, #1]
 800663e:	2310      	movs	r3, #16
 8006640:	3502      	adds	r5, #2
 8006642:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006646:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800664a:	f04f 0c00 	mov.w	ip, #0
 800664e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006652:	4666      	mov	r6, ip
 8006654:	fb03 8a19 	mls	sl, r3, r9, r8
 8006658:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800665c:	f1be 0f09 	cmp.w	lr, #9
 8006660:	d816      	bhi.n	8006690 <_strtol_l.constprop.0+0xa4>
 8006662:	4674      	mov	r4, lr
 8006664:	42a3      	cmp	r3, r4
 8006666:	dd24      	ble.n	80066b2 <_strtol_l.constprop.0+0xc6>
 8006668:	f1bc 0f00 	cmp.w	ip, #0
 800666c:	db1e      	blt.n	80066ac <_strtol_l.constprop.0+0xc0>
 800666e:	45b1      	cmp	r9, r6
 8006670:	d31c      	bcc.n	80066ac <_strtol_l.constprop.0+0xc0>
 8006672:	d101      	bne.n	8006678 <_strtol_l.constprop.0+0x8c>
 8006674:	45a2      	cmp	sl, r4
 8006676:	db19      	blt.n	80066ac <_strtol_l.constprop.0+0xc0>
 8006678:	fb06 4603 	mla	r6, r6, r3, r4
 800667c:	f04f 0c01 	mov.w	ip, #1
 8006680:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006684:	e7e8      	b.n	8006658 <_strtol_l.constprop.0+0x6c>
 8006686:	2c2b      	cmp	r4, #43	; 0x2b
 8006688:	bf04      	itt	eq
 800668a:	782c      	ldrbeq	r4, [r5, #0]
 800668c:	1cb5      	addeq	r5, r6, #2
 800668e:	e7ca      	b.n	8006626 <_strtol_l.constprop.0+0x3a>
 8006690:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006694:	f1be 0f19 	cmp.w	lr, #25
 8006698:	d801      	bhi.n	800669e <_strtol_l.constprop.0+0xb2>
 800669a:	3c37      	subs	r4, #55	; 0x37
 800669c:	e7e2      	b.n	8006664 <_strtol_l.constprop.0+0x78>
 800669e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80066a2:	f1be 0f19 	cmp.w	lr, #25
 80066a6:	d804      	bhi.n	80066b2 <_strtol_l.constprop.0+0xc6>
 80066a8:	3c57      	subs	r4, #87	; 0x57
 80066aa:	e7db      	b.n	8006664 <_strtol_l.constprop.0+0x78>
 80066ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80066b0:	e7e6      	b.n	8006680 <_strtol_l.constprop.0+0x94>
 80066b2:	f1bc 0f00 	cmp.w	ip, #0
 80066b6:	da05      	bge.n	80066c4 <_strtol_l.constprop.0+0xd8>
 80066b8:	2322      	movs	r3, #34	; 0x22
 80066ba:	6003      	str	r3, [r0, #0]
 80066bc:	4646      	mov	r6, r8
 80066be:	b942      	cbnz	r2, 80066d2 <_strtol_l.constprop.0+0xe6>
 80066c0:	4630      	mov	r0, r6
 80066c2:	e79e      	b.n	8006602 <_strtol_l.constprop.0+0x16>
 80066c4:	b107      	cbz	r7, 80066c8 <_strtol_l.constprop.0+0xdc>
 80066c6:	4276      	negs	r6, r6
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	d0f9      	beq.n	80066c0 <_strtol_l.constprop.0+0xd4>
 80066cc:	f1bc 0f00 	cmp.w	ip, #0
 80066d0:	d000      	beq.n	80066d4 <_strtol_l.constprop.0+0xe8>
 80066d2:	1e69      	subs	r1, r5, #1
 80066d4:	6011      	str	r1, [r2, #0]
 80066d6:	e7f3      	b.n	80066c0 <_strtol_l.constprop.0+0xd4>
 80066d8:	2430      	movs	r4, #48	; 0x30
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1b1      	bne.n	8006642 <_strtol_l.constprop.0+0x56>
 80066de:	2308      	movs	r3, #8
 80066e0:	e7af      	b.n	8006642 <_strtol_l.constprop.0+0x56>
 80066e2:	2c30      	cmp	r4, #48	; 0x30
 80066e4:	d0a5      	beq.n	8006632 <_strtol_l.constprop.0+0x46>
 80066e6:	230a      	movs	r3, #10
 80066e8:	e7ab      	b.n	8006642 <_strtol_l.constprop.0+0x56>
 80066ea:	bf00      	nop
 80066ec:	08007cb9 	.word	0x08007cb9

080066f0 <strtol>:
 80066f0:	4613      	mov	r3, r2
 80066f2:	460a      	mov	r2, r1
 80066f4:	4601      	mov	r1, r0
 80066f6:	4802      	ldr	r0, [pc, #8]	; (8006700 <strtol+0x10>)
 80066f8:	6800      	ldr	r0, [r0, #0]
 80066fa:	f7ff bf77 	b.w	80065ec <_strtol_l.constprop.0>
 80066fe:	bf00      	nop
 8006700:	200000f4 	.word	0x200000f4

08006704 <__swbuf_r>:
 8006704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006706:	460e      	mov	r6, r1
 8006708:	4614      	mov	r4, r2
 800670a:	4605      	mov	r5, r0
 800670c:	b118      	cbz	r0, 8006716 <__swbuf_r+0x12>
 800670e:	6983      	ldr	r3, [r0, #24]
 8006710:	b90b      	cbnz	r3, 8006716 <__swbuf_r+0x12>
 8006712:	f000 f9ef 	bl	8006af4 <__sinit>
 8006716:	4b21      	ldr	r3, [pc, #132]	; (800679c <__swbuf_r+0x98>)
 8006718:	429c      	cmp	r4, r3
 800671a:	d12b      	bne.n	8006774 <__swbuf_r+0x70>
 800671c:	686c      	ldr	r4, [r5, #4]
 800671e:	69a3      	ldr	r3, [r4, #24]
 8006720:	60a3      	str	r3, [r4, #8]
 8006722:	89a3      	ldrh	r3, [r4, #12]
 8006724:	071a      	lsls	r2, r3, #28
 8006726:	d52f      	bpl.n	8006788 <__swbuf_r+0x84>
 8006728:	6923      	ldr	r3, [r4, #16]
 800672a:	b36b      	cbz	r3, 8006788 <__swbuf_r+0x84>
 800672c:	6923      	ldr	r3, [r4, #16]
 800672e:	6820      	ldr	r0, [r4, #0]
 8006730:	1ac0      	subs	r0, r0, r3
 8006732:	6963      	ldr	r3, [r4, #20]
 8006734:	b2f6      	uxtb	r6, r6
 8006736:	4283      	cmp	r3, r0
 8006738:	4637      	mov	r7, r6
 800673a:	dc04      	bgt.n	8006746 <__swbuf_r+0x42>
 800673c:	4621      	mov	r1, r4
 800673e:	4628      	mov	r0, r5
 8006740:	f000 f944 	bl	80069cc <_fflush_r>
 8006744:	bb30      	cbnz	r0, 8006794 <__swbuf_r+0x90>
 8006746:	68a3      	ldr	r3, [r4, #8]
 8006748:	3b01      	subs	r3, #1
 800674a:	60a3      	str	r3, [r4, #8]
 800674c:	6823      	ldr	r3, [r4, #0]
 800674e:	1c5a      	adds	r2, r3, #1
 8006750:	6022      	str	r2, [r4, #0]
 8006752:	701e      	strb	r6, [r3, #0]
 8006754:	6963      	ldr	r3, [r4, #20]
 8006756:	3001      	adds	r0, #1
 8006758:	4283      	cmp	r3, r0
 800675a:	d004      	beq.n	8006766 <__swbuf_r+0x62>
 800675c:	89a3      	ldrh	r3, [r4, #12]
 800675e:	07db      	lsls	r3, r3, #31
 8006760:	d506      	bpl.n	8006770 <__swbuf_r+0x6c>
 8006762:	2e0a      	cmp	r6, #10
 8006764:	d104      	bne.n	8006770 <__swbuf_r+0x6c>
 8006766:	4621      	mov	r1, r4
 8006768:	4628      	mov	r0, r5
 800676a:	f000 f92f 	bl	80069cc <_fflush_r>
 800676e:	b988      	cbnz	r0, 8006794 <__swbuf_r+0x90>
 8006770:	4638      	mov	r0, r7
 8006772:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006774:	4b0a      	ldr	r3, [pc, #40]	; (80067a0 <__swbuf_r+0x9c>)
 8006776:	429c      	cmp	r4, r3
 8006778:	d101      	bne.n	800677e <__swbuf_r+0x7a>
 800677a:	68ac      	ldr	r4, [r5, #8]
 800677c:	e7cf      	b.n	800671e <__swbuf_r+0x1a>
 800677e:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <__swbuf_r+0xa0>)
 8006780:	429c      	cmp	r4, r3
 8006782:	bf08      	it	eq
 8006784:	68ec      	ldreq	r4, [r5, #12]
 8006786:	e7ca      	b.n	800671e <__swbuf_r+0x1a>
 8006788:	4621      	mov	r1, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f000 f80c 	bl	80067a8 <__swsetup_r>
 8006790:	2800      	cmp	r0, #0
 8006792:	d0cb      	beq.n	800672c <__swbuf_r+0x28>
 8006794:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006798:	e7ea      	b.n	8006770 <__swbuf_r+0x6c>
 800679a:	bf00      	nop
 800679c:	08007ddc 	.word	0x08007ddc
 80067a0:	08007dfc 	.word	0x08007dfc
 80067a4:	08007dbc 	.word	0x08007dbc

080067a8 <__swsetup_r>:
 80067a8:	4b32      	ldr	r3, [pc, #200]	; (8006874 <__swsetup_r+0xcc>)
 80067aa:	b570      	push	{r4, r5, r6, lr}
 80067ac:	681d      	ldr	r5, [r3, #0]
 80067ae:	4606      	mov	r6, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	b125      	cbz	r5, 80067be <__swsetup_r+0x16>
 80067b4:	69ab      	ldr	r3, [r5, #24]
 80067b6:	b913      	cbnz	r3, 80067be <__swsetup_r+0x16>
 80067b8:	4628      	mov	r0, r5
 80067ba:	f000 f99b 	bl	8006af4 <__sinit>
 80067be:	4b2e      	ldr	r3, [pc, #184]	; (8006878 <__swsetup_r+0xd0>)
 80067c0:	429c      	cmp	r4, r3
 80067c2:	d10f      	bne.n	80067e4 <__swsetup_r+0x3c>
 80067c4:	686c      	ldr	r4, [r5, #4]
 80067c6:	89a3      	ldrh	r3, [r4, #12]
 80067c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067cc:	0719      	lsls	r1, r3, #28
 80067ce:	d42c      	bmi.n	800682a <__swsetup_r+0x82>
 80067d0:	06dd      	lsls	r5, r3, #27
 80067d2:	d411      	bmi.n	80067f8 <__swsetup_r+0x50>
 80067d4:	2309      	movs	r3, #9
 80067d6:	6033      	str	r3, [r6, #0]
 80067d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067dc:	81a3      	strh	r3, [r4, #12]
 80067de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80067e2:	e03e      	b.n	8006862 <__swsetup_r+0xba>
 80067e4:	4b25      	ldr	r3, [pc, #148]	; (800687c <__swsetup_r+0xd4>)
 80067e6:	429c      	cmp	r4, r3
 80067e8:	d101      	bne.n	80067ee <__swsetup_r+0x46>
 80067ea:	68ac      	ldr	r4, [r5, #8]
 80067ec:	e7eb      	b.n	80067c6 <__swsetup_r+0x1e>
 80067ee:	4b24      	ldr	r3, [pc, #144]	; (8006880 <__swsetup_r+0xd8>)
 80067f0:	429c      	cmp	r4, r3
 80067f2:	bf08      	it	eq
 80067f4:	68ec      	ldreq	r4, [r5, #12]
 80067f6:	e7e6      	b.n	80067c6 <__swsetup_r+0x1e>
 80067f8:	0758      	lsls	r0, r3, #29
 80067fa:	d512      	bpl.n	8006822 <__swsetup_r+0x7a>
 80067fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067fe:	b141      	cbz	r1, 8006812 <__swsetup_r+0x6a>
 8006800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006804:	4299      	cmp	r1, r3
 8006806:	d002      	beq.n	800680e <__swsetup_r+0x66>
 8006808:	4630      	mov	r0, r6
 800680a:	f000 fa93 	bl	8006d34 <_free_r>
 800680e:	2300      	movs	r3, #0
 8006810:	6363      	str	r3, [r4, #52]	; 0x34
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	2300      	movs	r3, #0
 800681c:	6063      	str	r3, [r4, #4]
 800681e:	6923      	ldr	r3, [r4, #16]
 8006820:	6023      	str	r3, [r4, #0]
 8006822:	89a3      	ldrh	r3, [r4, #12]
 8006824:	f043 0308 	orr.w	r3, r3, #8
 8006828:	81a3      	strh	r3, [r4, #12]
 800682a:	6923      	ldr	r3, [r4, #16]
 800682c:	b94b      	cbnz	r3, 8006842 <__swsetup_r+0x9a>
 800682e:	89a3      	ldrh	r3, [r4, #12]
 8006830:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006838:	d003      	beq.n	8006842 <__swsetup_r+0x9a>
 800683a:	4621      	mov	r1, r4
 800683c:	4630      	mov	r0, r6
 800683e:	f000 fa31 	bl	8006ca4 <__smakebuf_r>
 8006842:	89a0      	ldrh	r0, [r4, #12]
 8006844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006848:	f010 0301 	ands.w	r3, r0, #1
 800684c:	d00a      	beq.n	8006864 <__swsetup_r+0xbc>
 800684e:	2300      	movs	r3, #0
 8006850:	60a3      	str	r3, [r4, #8]
 8006852:	6963      	ldr	r3, [r4, #20]
 8006854:	425b      	negs	r3, r3
 8006856:	61a3      	str	r3, [r4, #24]
 8006858:	6923      	ldr	r3, [r4, #16]
 800685a:	b943      	cbnz	r3, 800686e <__swsetup_r+0xc6>
 800685c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006860:	d1ba      	bne.n	80067d8 <__swsetup_r+0x30>
 8006862:	bd70      	pop	{r4, r5, r6, pc}
 8006864:	0781      	lsls	r1, r0, #30
 8006866:	bf58      	it	pl
 8006868:	6963      	ldrpl	r3, [r4, #20]
 800686a:	60a3      	str	r3, [r4, #8]
 800686c:	e7f4      	b.n	8006858 <__swsetup_r+0xb0>
 800686e:	2000      	movs	r0, #0
 8006870:	e7f7      	b.n	8006862 <__swsetup_r+0xba>
 8006872:	bf00      	nop
 8006874:	200000f4 	.word	0x200000f4
 8006878:	08007ddc 	.word	0x08007ddc
 800687c:	08007dfc 	.word	0x08007dfc
 8006880:	08007dbc 	.word	0x08007dbc

08006884 <__assert_func>:
 8006884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006886:	4614      	mov	r4, r2
 8006888:	461a      	mov	r2, r3
 800688a:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <__assert_func+0x2c>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4605      	mov	r5, r0
 8006890:	68d8      	ldr	r0, [r3, #12]
 8006892:	b14c      	cbz	r4, 80068a8 <__assert_func+0x24>
 8006894:	4b07      	ldr	r3, [pc, #28]	; (80068b4 <__assert_func+0x30>)
 8006896:	9100      	str	r1, [sp, #0]
 8006898:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800689c:	4906      	ldr	r1, [pc, #24]	; (80068b8 <__assert_func+0x34>)
 800689e:	462b      	mov	r3, r5
 80068a0:	f000 f9a6 	bl	8006bf0 <fiprintf>
 80068a4:	f000 ffd6 	bl	8007854 <abort>
 80068a8:	4b04      	ldr	r3, [pc, #16]	; (80068bc <__assert_func+0x38>)
 80068aa:	461c      	mov	r4, r3
 80068ac:	e7f3      	b.n	8006896 <__assert_func+0x12>
 80068ae:	bf00      	nop
 80068b0:	200000f4 	.word	0x200000f4
 80068b4:	08007c7c 	.word	0x08007c7c
 80068b8:	08007c89 	.word	0x08007c89
 80068bc:	08007cb7 	.word	0x08007cb7

080068c0 <__sflush_r>:
 80068c0:	898a      	ldrh	r2, [r1, #12]
 80068c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068c6:	4605      	mov	r5, r0
 80068c8:	0710      	lsls	r0, r2, #28
 80068ca:	460c      	mov	r4, r1
 80068cc:	d458      	bmi.n	8006980 <__sflush_r+0xc0>
 80068ce:	684b      	ldr	r3, [r1, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	dc05      	bgt.n	80068e0 <__sflush_r+0x20>
 80068d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	dc02      	bgt.n	80068e0 <__sflush_r+0x20>
 80068da:	2000      	movs	r0, #0
 80068dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e2:	2e00      	cmp	r6, #0
 80068e4:	d0f9      	beq.n	80068da <__sflush_r+0x1a>
 80068e6:	2300      	movs	r3, #0
 80068e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068ec:	682f      	ldr	r7, [r5, #0]
 80068ee:	602b      	str	r3, [r5, #0]
 80068f0:	d032      	beq.n	8006958 <__sflush_r+0x98>
 80068f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068f4:	89a3      	ldrh	r3, [r4, #12]
 80068f6:	075a      	lsls	r2, r3, #29
 80068f8:	d505      	bpl.n	8006906 <__sflush_r+0x46>
 80068fa:	6863      	ldr	r3, [r4, #4]
 80068fc:	1ac0      	subs	r0, r0, r3
 80068fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006900:	b10b      	cbz	r3, 8006906 <__sflush_r+0x46>
 8006902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006904:	1ac0      	subs	r0, r0, r3
 8006906:	2300      	movs	r3, #0
 8006908:	4602      	mov	r2, r0
 800690a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800690c:	6a21      	ldr	r1, [r4, #32]
 800690e:	4628      	mov	r0, r5
 8006910:	47b0      	blx	r6
 8006912:	1c43      	adds	r3, r0, #1
 8006914:	89a3      	ldrh	r3, [r4, #12]
 8006916:	d106      	bne.n	8006926 <__sflush_r+0x66>
 8006918:	6829      	ldr	r1, [r5, #0]
 800691a:	291d      	cmp	r1, #29
 800691c:	d82c      	bhi.n	8006978 <__sflush_r+0xb8>
 800691e:	4a2a      	ldr	r2, [pc, #168]	; (80069c8 <__sflush_r+0x108>)
 8006920:	40ca      	lsrs	r2, r1
 8006922:	07d6      	lsls	r6, r2, #31
 8006924:	d528      	bpl.n	8006978 <__sflush_r+0xb8>
 8006926:	2200      	movs	r2, #0
 8006928:	6062      	str	r2, [r4, #4]
 800692a:	04d9      	lsls	r1, r3, #19
 800692c:	6922      	ldr	r2, [r4, #16]
 800692e:	6022      	str	r2, [r4, #0]
 8006930:	d504      	bpl.n	800693c <__sflush_r+0x7c>
 8006932:	1c42      	adds	r2, r0, #1
 8006934:	d101      	bne.n	800693a <__sflush_r+0x7a>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	b903      	cbnz	r3, 800693c <__sflush_r+0x7c>
 800693a:	6560      	str	r0, [r4, #84]	; 0x54
 800693c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800693e:	602f      	str	r7, [r5, #0]
 8006940:	2900      	cmp	r1, #0
 8006942:	d0ca      	beq.n	80068da <__sflush_r+0x1a>
 8006944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006948:	4299      	cmp	r1, r3
 800694a:	d002      	beq.n	8006952 <__sflush_r+0x92>
 800694c:	4628      	mov	r0, r5
 800694e:	f000 f9f1 	bl	8006d34 <_free_r>
 8006952:	2000      	movs	r0, #0
 8006954:	6360      	str	r0, [r4, #52]	; 0x34
 8006956:	e7c1      	b.n	80068dc <__sflush_r+0x1c>
 8006958:	6a21      	ldr	r1, [r4, #32]
 800695a:	2301      	movs	r3, #1
 800695c:	4628      	mov	r0, r5
 800695e:	47b0      	blx	r6
 8006960:	1c41      	adds	r1, r0, #1
 8006962:	d1c7      	bne.n	80068f4 <__sflush_r+0x34>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d0c4      	beq.n	80068f4 <__sflush_r+0x34>
 800696a:	2b1d      	cmp	r3, #29
 800696c:	d001      	beq.n	8006972 <__sflush_r+0xb2>
 800696e:	2b16      	cmp	r3, #22
 8006970:	d101      	bne.n	8006976 <__sflush_r+0xb6>
 8006972:	602f      	str	r7, [r5, #0]
 8006974:	e7b1      	b.n	80068da <__sflush_r+0x1a>
 8006976:	89a3      	ldrh	r3, [r4, #12]
 8006978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800697c:	81a3      	strh	r3, [r4, #12]
 800697e:	e7ad      	b.n	80068dc <__sflush_r+0x1c>
 8006980:	690f      	ldr	r7, [r1, #16]
 8006982:	2f00      	cmp	r7, #0
 8006984:	d0a9      	beq.n	80068da <__sflush_r+0x1a>
 8006986:	0793      	lsls	r3, r2, #30
 8006988:	680e      	ldr	r6, [r1, #0]
 800698a:	bf08      	it	eq
 800698c:	694b      	ldreq	r3, [r1, #20]
 800698e:	600f      	str	r7, [r1, #0]
 8006990:	bf18      	it	ne
 8006992:	2300      	movne	r3, #0
 8006994:	eba6 0807 	sub.w	r8, r6, r7
 8006998:	608b      	str	r3, [r1, #8]
 800699a:	f1b8 0f00 	cmp.w	r8, #0
 800699e:	dd9c      	ble.n	80068da <__sflush_r+0x1a>
 80069a0:	6a21      	ldr	r1, [r4, #32]
 80069a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80069a4:	4643      	mov	r3, r8
 80069a6:	463a      	mov	r2, r7
 80069a8:	4628      	mov	r0, r5
 80069aa:	47b0      	blx	r6
 80069ac:	2800      	cmp	r0, #0
 80069ae:	dc06      	bgt.n	80069be <__sflush_r+0xfe>
 80069b0:	89a3      	ldrh	r3, [r4, #12]
 80069b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069b6:	81a3      	strh	r3, [r4, #12]
 80069b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069bc:	e78e      	b.n	80068dc <__sflush_r+0x1c>
 80069be:	4407      	add	r7, r0
 80069c0:	eba8 0800 	sub.w	r8, r8, r0
 80069c4:	e7e9      	b.n	800699a <__sflush_r+0xda>
 80069c6:	bf00      	nop
 80069c8:	20400001 	.word	0x20400001

080069cc <_fflush_r>:
 80069cc:	b538      	push	{r3, r4, r5, lr}
 80069ce:	690b      	ldr	r3, [r1, #16]
 80069d0:	4605      	mov	r5, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	b913      	cbnz	r3, 80069dc <_fflush_r+0x10>
 80069d6:	2500      	movs	r5, #0
 80069d8:	4628      	mov	r0, r5
 80069da:	bd38      	pop	{r3, r4, r5, pc}
 80069dc:	b118      	cbz	r0, 80069e6 <_fflush_r+0x1a>
 80069de:	6983      	ldr	r3, [r0, #24]
 80069e0:	b90b      	cbnz	r3, 80069e6 <_fflush_r+0x1a>
 80069e2:	f000 f887 	bl	8006af4 <__sinit>
 80069e6:	4b14      	ldr	r3, [pc, #80]	; (8006a38 <_fflush_r+0x6c>)
 80069e8:	429c      	cmp	r4, r3
 80069ea:	d11b      	bne.n	8006a24 <_fflush_r+0x58>
 80069ec:	686c      	ldr	r4, [r5, #4]
 80069ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0ef      	beq.n	80069d6 <_fflush_r+0xa>
 80069f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069f8:	07d0      	lsls	r0, r2, #31
 80069fa:	d404      	bmi.n	8006a06 <_fflush_r+0x3a>
 80069fc:	0599      	lsls	r1, r3, #22
 80069fe:	d402      	bmi.n	8006a06 <_fflush_r+0x3a>
 8006a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a02:	f000 f927 	bl	8006c54 <__retarget_lock_acquire_recursive>
 8006a06:	4628      	mov	r0, r5
 8006a08:	4621      	mov	r1, r4
 8006a0a:	f7ff ff59 	bl	80068c0 <__sflush_r>
 8006a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a10:	07da      	lsls	r2, r3, #31
 8006a12:	4605      	mov	r5, r0
 8006a14:	d4e0      	bmi.n	80069d8 <_fflush_r+0xc>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	059b      	lsls	r3, r3, #22
 8006a1a:	d4dd      	bmi.n	80069d8 <_fflush_r+0xc>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f000 f91a 	bl	8006c56 <__retarget_lock_release_recursive>
 8006a22:	e7d9      	b.n	80069d8 <_fflush_r+0xc>
 8006a24:	4b05      	ldr	r3, [pc, #20]	; (8006a3c <_fflush_r+0x70>)
 8006a26:	429c      	cmp	r4, r3
 8006a28:	d101      	bne.n	8006a2e <_fflush_r+0x62>
 8006a2a:	68ac      	ldr	r4, [r5, #8]
 8006a2c:	e7df      	b.n	80069ee <_fflush_r+0x22>
 8006a2e:	4b04      	ldr	r3, [pc, #16]	; (8006a40 <_fflush_r+0x74>)
 8006a30:	429c      	cmp	r4, r3
 8006a32:	bf08      	it	eq
 8006a34:	68ec      	ldreq	r4, [r5, #12]
 8006a36:	e7da      	b.n	80069ee <_fflush_r+0x22>
 8006a38:	08007ddc 	.word	0x08007ddc
 8006a3c:	08007dfc 	.word	0x08007dfc
 8006a40:	08007dbc 	.word	0x08007dbc

08006a44 <std>:
 8006a44:	2300      	movs	r3, #0
 8006a46:	b510      	push	{r4, lr}
 8006a48:	4604      	mov	r4, r0
 8006a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a52:	6083      	str	r3, [r0, #8]
 8006a54:	8181      	strh	r1, [r0, #12]
 8006a56:	6643      	str	r3, [r0, #100]	; 0x64
 8006a58:	81c2      	strh	r2, [r0, #14]
 8006a5a:	6183      	str	r3, [r0, #24]
 8006a5c:	4619      	mov	r1, r3
 8006a5e:	2208      	movs	r2, #8
 8006a60:	305c      	adds	r0, #92	; 0x5c
 8006a62:	f7ff fc9d 	bl	80063a0 <memset>
 8006a66:	4b05      	ldr	r3, [pc, #20]	; (8006a7c <std+0x38>)
 8006a68:	6263      	str	r3, [r4, #36]	; 0x24
 8006a6a:	4b05      	ldr	r3, [pc, #20]	; (8006a80 <std+0x3c>)
 8006a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a6e:	4b05      	ldr	r3, [pc, #20]	; (8006a84 <std+0x40>)
 8006a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a72:	4b05      	ldr	r3, [pc, #20]	; (8006a88 <std+0x44>)
 8006a74:	6224      	str	r4, [r4, #32]
 8006a76:	6323      	str	r3, [r4, #48]	; 0x30
 8006a78:	bd10      	pop	{r4, pc}
 8006a7a:	bf00      	nop
 8006a7c:	080077a9 	.word	0x080077a9
 8006a80:	080077cb 	.word	0x080077cb
 8006a84:	08007803 	.word	0x08007803
 8006a88:	08007827 	.word	0x08007827

08006a8c <_cleanup_r>:
 8006a8c:	4901      	ldr	r1, [pc, #4]	; (8006a94 <_cleanup_r+0x8>)
 8006a8e:	f000 b8c1 	b.w	8006c14 <_fwalk_reent>
 8006a92:	bf00      	nop
 8006a94:	080069cd 	.word	0x080069cd

08006a98 <__sfmoreglue>:
 8006a98:	b570      	push	{r4, r5, r6, lr}
 8006a9a:	2268      	movs	r2, #104	; 0x68
 8006a9c:	1e4d      	subs	r5, r1, #1
 8006a9e:	4355      	muls	r5, r2
 8006aa0:	460e      	mov	r6, r1
 8006aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006aa6:	f000 f9b1 	bl	8006e0c <_malloc_r>
 8006aaa:	4604      	mov	r4, r0
 8006aac:	b140      	cbz	r0, 8006ac0 <__sfmoreglue+0x28>
 8006aae:	2100      	movs	r1, #0
 8006ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8006ab4:	300c      	adds	r0, #12
 8006ab6:	60a0      	str	r0, [r4, #8]
 8006ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006abc:	f7ff fc70 	bl	80063a0 <memset>
 8006ac0:	4620      	mov	r0, r4
 8006ac2:	bd70      	pop	{r4, r5, r6, pc}

08006ac4 <__sfp_lock_acquire>:
 8006ac4:	4801      	ldr	r0, [pc, #4]	; (8006acc <__sfp_lock_acquire+0x8>)
 8006ac6:	f000 b8c5 	b.w	8006c54 <__retarget_lock_acquire_recursive>
 8006aca:	bf00      	nop
 8006acc:	2000031d 	.word	0x2000031d

08006ad0 <__sfp_lock_release>:
 8006ad0:	4801      	ldr	r0, [pc, #4]	; (8006ad8 <__sfp_lock_release+0x8>)
 8006ad2:	f000 b8c0 	b.w	8006c56 <__retarget_lock_release_recursive>
 8006ad6:	bf00      	nop
 8006ad8:	2000031d 	.word	0x2000031d

08006adc <__sinit_lock_acquire>:
 8006adc:	4801      	ldr	r0, [pc, #4]	; (8006ae4 <__sinit_lock_acquire+0x8>)
 8006ade:	f000 b8b9 	b.w	8006c54 <__retarget_lock_acquire_recursive>
 8006ae2:	bf00      	nop
 8006ae4:	2000031e 	.word	0x2000031e

08006ae8 <__sinit_lock_release>:
 8006ae8:	4801      	ldr	r0, [pc, #4]	; (8006af0 <__sinit_lock_release+0x8>)
 8006aea:	f000 b8b4 	b.w	8006c56 <__retarget_lock_release_recursive>
 8006aee:	bf00      	nop
 8006af0:	2000031e 	.word	0x2000031e

08006af4 <__sinit>:
 8006af4:	b510      	push	{r4, lr}
 8006af6:	4604      	mov	r4, r0
 8006af8:	f7ff fff0 	bl	8006adc <__sinit_lock_acquire>
 8006afc:	69a3      	ldr	r3, [r4, #24]
 8006afe:	b11b      	cbz	r3, 8006b08 <__sinit+0x14>
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f7ff bff0 	b.w	8006ae8 <__sinit_lock_release>
 8006b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b0e:	4b13      	ldr	r3, [pc, #76]	; (8006b5c <__sinit+0x68>)
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <__sinit+0x6c>)
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b16:	42a3      	cmp	r3, r4
 8006b18:	bf04      	itt	eq
 8006b1a:	2301      	moveq	r3, #1
 8006b1c:	61a3      	streq	r3, [r4, #24]
 8006b1e:	4620      	mov	r0, r4
 8006b20:	f000 f820 	bl	8006b64 <__sfp>
 8006b24:	6060      	str	r0, [r4, #4]
 8006b26:	4620      	mov	r0, r4
 8006b28:	f000 f81c 	bl	8006b64 <__sfp>
 8006b2c:	60a0      	str	r0, [r4, #8]
 8006b2e:	4620      	mov	r0, r4
 8006b30:	f000 f818 	bl	8006b64 <__sfp>
 8006b34:	2200      	movs	r2, #0
 8006b36:	60e0      	str	r0, [r4, #12]
 8006b38:	2104      	movs	r1, #4
 8006b3a:	6860      	ldr	r0, [r4, #4]
 8006b3c:	f7ff ff82 	bl	8006a44 <std>
 8006b40:	68a0      	ldr	r0, [r4, #8]
 8006b42:	2201      	movs	r2, #1
 8006b44:	2109      	movs	r1, #9
 8006b46:	f7ff ff7d 	bl	8006a44 <std>
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	2112      	movs	r1, #18
 8006b50:	f7ff ff78 	bl	8006a44 <std>
 8006b54:	2301      	movs	r3, #1
 8006b56:	61a3      	str	r3, [r4, #24]
 8006b58:	e7d2      	b.n	8006b00 <__sinit+0xc>
 8006b5a:	bf00      	nop
 8006b5c:	08007c04 	.word	0x08007c04
 8006b60:	08006a8d 	.word	0x08006a8d

08006b64 <__sfp>:
 8006b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b66:	4607      	mov	r7, r0
 8006b68:	f7ff ffac 	bl	8006ac4 <__sfp_lock_acquire>
 8006b6c:	4b1e      	ldr	r3, [pc, #120]	; (8006be8 <__sfp+0x84>)
 8006b6e:	681e      	ldr	r6, [r3, #0]
 8006b70:	69b3      	ldr	r3, [r6, #24]
 8006b72:	b913      	cbnz	r3, 8006b7a <__sfp+0x16>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f7ff ffbd 	bl	8006af4 <__sinit>
 8006b7a:	3648      	adds	r6, #72	; 0x48
 8006b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b80:	3b01      	subs	r3, #1
 8006b82:	d503      	bpl.n	8006b8c <__sfp+0x28>
 8006b84:	6833      	ldr	r3, [r6, #0]
 8006b86:	b30b      	cbz	r3, 8006bcc <__sfp+0x68>
 8006b88:	6836      	ldr	r6, [r6, #0]
 8006b8a:	e7f7      	b.n	8006b7c <__sfp+0x18>
 8006b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b90:	b9d5      	cbnz	r5, 8006bc8 <__sfp+0x64>
 8006b92:	4b16      	ldr	r3, [pc, #88]	; (8006bec <__sfp+0x88>)
 8006b94:	60e3      	str	r3, [r4, #12]
 8006b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8006b9c:	f000 f859 	bl	8006c52 <__retarget_lock_init_recursive>
 8006ba0:	f7ff ff96 	bl	8006ad0 <__sfp_lock_release>
 8006ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006bac:	6025      	str	r5, [r4, #0]
 8006bae:	61a5      	str	r5, [r4, #24]
 8006bb0:	2208      	movs	r2, #8
 8006bb2:	4629      	mov	r1, r5
 8006bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006bb8:	f7ff fbf2 	bl	80063a0 <memset>
 8006bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006bc4:	4620      	mov	r0, r4
 8006bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006bc8:	3468      	adds	r4, #104	; 0x68
 8006bca:	e7d9      	b.n	8006b80 <__sfp+0x1c>
 8006bcc:	2104      	movs	r1, #4
 8006bce:	4638      	mov	r0, r7
 8006bd0:	f7ff ff62 	bl	8006a98 <__sfmoreglue>
 8006bd4:	4604      	mov	r4, r0
 8006bd6:	6030      	str	r0, [r6, #0]
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1d5      	bne.n	8006b88 <__sfp+0x24>
 8006bdc:	f7ff ff78 	bl	8006ad0 <__sfp_lock_release>
 8006be0:	230c      	movs	r3, #12
 8006be2:	603b      	str	r3, [r7, #0]
 8006be4:	e7ee      	b.n	8006bc4 <__sfp+0x60>
 8006be6:	bf00      	nop
 8006be8:	08007c04 	.word	0x08007c04
 8006bec:	ffff0001 	.word	0xffff0001

08006bf0 <fiprintf>:
 8006bf0:	b40e      	push	{r1, r2, r3}
 8006bf2:	b503      	push	{r0, r1, lr}
 8006bf4:	4601      	mov	r1, r0
 8006bf6:	ab03      	add	r3, sp, #12
 8006bf8:	4805      	ldr	r0, [pc, #20]	; (8006c10 <fiprintf+0x20>)
 8006bfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bfe:	6800      	ldr	r0, [r0, #0]
 8006c00:	9301      	str	r3, [sp, #4]
 8006c02:	f000 fafd 	bl	8007200 <_vfiprintf_r>
 8006c06:	b002      	add	sp, #8
 8006c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c0c:	b003      	add	sp, #12
 8006c0e:	4770      	bx	lr
 8006c10:	200000f4 	.word	0x200000f4

08006c14 <_fwalk_reent>:
 8006c14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c18:	4606      	mov	r6, r0
 8006c1a:	4688      	mov	r8, r1
 8006c1c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c20:	2700      	movs	r7, #0
 8006c22:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c26:	f1b9 0901 	subs.w	r9, r9, #1
 8006c2a:	d505      	bpl.n	8006c38 <_fwalk_reent+0x24>
 8006c2c:	6824      	ldr	r4, [r4, #0]
 8006c2e:	2c00      	cmp	r4, #0
 8006c30:	d1f7      	bne.n	8006c22 <_fwalk_reent+0xe>
 8006c32:	4638      	mov	r0, r7
 8006c34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c38:	89ab      	ldrh	r3, [r5, #12]
 8006c3a:	2b01      	cmp	r3, #1
 8006c3c:	d907      	bls.n	8006c4e <_fwalk_reent+0x3a>
 8006c3e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c42:	3301      	adds	r3, #1
 8006c44:	d003      	beq.n	8006c4e <_fwalk_reent+0x3a>
 8006c46:	4629      	mov	r1, r5
 8006c48:	4630      	mov	r0, r6
 8006c4a:	47c0      	blx	r8
 8006c4c:	4307      	orrs	r7, r0
 8006c4e:	3568      	adds	r5, #104	; 0x68
 8006c50:	e7e9      	b.n	8006c26 <_fwalk_reent+0x12>

08006c52 <__retarget_lock_init_recursive>:
 8006c52:	4770      	bx	lr

08006c54 <__retarget_lock_acquire_recursive>:
 8006c54:	4770      	bx	lr

08006c56 <__retarget_lock_release_recursive>:
 8006c56:	4770      	bx	lr

08006c58 <__swhatbuf_r>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	460e      	mov	r6, r1
 8006c5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c60:	2900      	cmp	r1, #0
 8006c62:	b096      	sub	sp, #88	; 0x58
 8006c64:	4614      	mov	r4, r2
 8006c66:	461d      	mov	r5, r3
 8006c68:	da08      	bge.n	8006c7c <__swhatbuf_r+0x24>
 8006c6a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	602a      	str	r2, [r5, #0]
 8006c72:	061a      	lsls	r2, r3, #24
 8006c74:	d410      	bmi.n	8006c98 <__swhatbuf_r+0x40>
 8006c76:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006c7a:	e00e      	b.n	8006c9a <__swhatbuf_r+0x42>
 8006c7c:	466a      	mov	r2, sp
 8006c7e:	f000 fe01 	bl	8007884 <_fstat_r>
 8006c82:	2800      	cmp	r0, #0
 8006c84:	dbf1      	blt.n	8006c6a <__swhatbuf_r+0x12>
 8006c86:	9a01      	ldr	r2, [sp, #4]
 8006c88:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006c8c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006c90:	425a      	negs	r2, r3
 8006c92:	415a      	adcs	r2, r3
 8006c94:	602a      	str	r2, [r5, #0]
 8006c96:	e7ee      	b.n	8006c76 <__swhatbuf_r+0x1e>
 8006c98:	2340      	movs	r3, #64	; 0x40
 8006c9a:	2000      	movs	r0, #0
 8006c9c:	6023      	str	r3, [r4, #0]
 8006c9e:	b016      	add	sp, #88	; 0x58
 8006ca0:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ca4 <__smakebuf_r>:
 8006ca4:	898b      	ldrh	r3, [r1, #12]
 8006ca6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ca8:	079d      	lsls	r5, r3, #30
 8006caa:	4606      	mov	r6, r0
 8006cac:	460c      	mov	r4, r1
 8006cae:	d507      	bpl.n	8006cc0 <__smakebuf_r+0x1c>
 8006cb0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cb4:	6023      	str	r3, [r4, #0]
 8006cb6:	6123      	str	r3, [r4, #16]
 8006cb8:	2301      	movs	r3, #1
 8006cba:	6163      	str	r3, [r4, #20]
 8006cbc:	b002      	add	sp, #8
 8006cbe:	bd70      	pop	{r4, r5, r6, pc}
 8006cc0:	ab01      	add	r3, sp, #4
 8006cc2:	466a      	mov	r2, sp
 8006cc4:	f7ff ffc8 	bl	8006c58 <__swhatbuf_r>
 8006cc8:	9900      	ldr	r1, [sp, #0]
 8006cca:	4605      	mov	r5, r0
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f000 f89d 	bl	8006e0c <_malloc_r>
 8006cd2:	b948      	cbnz	r0, 8006ce8 <__smakebuf_r+0x44>
 8006cd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006cd8:	059a      	lsls	r2, r3, #22
 8006cda:	d4ef      	bmi.n	8006cbc <__smakebuf_r+0x18>
 8006cdc:	f023 0303 	bic.w	r3, r3, #3
 8006ce0:	f043 0302 	orr.w	r3, r3, #2
 8006ce4:	81a3      	strh	r3, [r4, #12]
 8006ce6:	e7e3      	b.n	8006cb0 <__smakebuf_r+0xc>
 8006ce8:	4b0d      	ldr	r3, [pc, #52]	; (8006d20 <__smakebuf_r+0x7c>)
 8006cea:	62b3      	str	r3, [r6, #40]	; 0x28
 8006cec:	89a3      	ldrh	r3, [r4, #12]
 8006cee:	6020      	str	r0, [r4, #0]
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf4:	81a3      	strh	r3, [r4, #12]
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	6163      	str	r3, [r4, #20]
 8006cfa:	9b01      	ldr	r3, [sp, #4]
 8006cfc:	6120      	str	r0, [r4, #16]
 8006cfe:	b15b      	cbz	r3, 8006d18 <__smakebuf_r+0x74>
 8006d00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d04:	4630      	mov	r0, r6
 8006d06:	f000 fdcf 	bl	80078a8 <_isatty_r>
 8006d0a:	b128      	cbz	r0, 8006d18 <__smakebuf_r+0x74>
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f023 0303 	bic.w	r3, r3, #3
 8006d12:	f043 0301 	orr.w	r3, r3, #1
 8006d16:	81a3      	strh	r3, [r4, #12]
 8006d18:	89a0      	ldrh	r0, [r4, #12]
 8006d1a:	4305      	orrs	r5, r0
 8006d1c:	81a5      	strh	r5, [r4, #12]
 8006d1e:	e7cd      	b.n	8006cbc <__smakebuf_r+0x18>
 8006d20:	08006a8d 	.word	0x08006a8d

08006d24 <malloc>:
 8006d24:	4b02      	ldr	r3, [pc, #8]	; (8006d30 <malloc+0xc>)
 8006d26:	4601      	mov	r1, r0
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	f000 b86f 	b.w	8006e0c <_malloc_r>
 8006d2e:	bf00      	nop
 8006d30:	200000f4 	.word	0x200000f4

08006d34 <_free_r>:
 8006d34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d044      	beq.n	8006dc4 <_free_r+0x90>
 8006d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d3e:	9001      	str	r0, [sp, #4]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	f1a1 0404 	sub.w	r4, r1, #4
 8006d46:	bfb8      	it	lt
 8006d48:	18e4      	addlt	r4, r4, r3
 8006d4a:	f000 fdf7 	bl	800793c <__malloc_lock>
 8006d4e:	4a1e      	ldr	r2, [pc, #120]	; (8006dc8 <_free_r+0x94>)
 8006d50:	9801      	ldr	r0, [sp, #4]
 8006d52:	6813      	ldr	r3, [r2, #0]
 8006d54:	b933      	cbnz	r3, 8006d64 <_free_r+0x30>
 8006d56:	6063      	str	r3, [r4, #4]
 8006d58:	6014      	str	r4, [r2, #0]
 8006d5a:	b003      	add	sp, #12
 8006d5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d60:	f000 bdf2 	b.w	8007948 <__malloc_unlock>
 8006d64:	42a3      	cmp	r3, r4
 8006d66:	d908      	bls.n	8006d7a <_free_r+0x46>
 8006d68:	6825      	ldr	r5, [r4, #0]
 8006d6a:	1961      	adds	r1, r4, r5
 8006d6c:	428b      	cmp	r3, r1
 8006d6e:	bf01      	itttt	eq
 8006d70:	6819      	ldreq	r1, [r3, #0]
 8006d72:	685b      	ldreq	r3, [r3, #4]
 8006d74:	1949      	addeq	r1, r1, r5
 8006d76:	6021      	streq	r1, [r4, #0]
 8006d78:	e7ed      	b.n	8006d56 <_free_r+0x22>
 8006d7a:	461a      	mov	r2, r3
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b10b      	cbz	r3, 8006d84 <_free_r+0x50>
 8006d80:	42a3      	cmp	r3, r4
 8006d82:	d9fa      	bls.n	8006d7a <_free_r+0x46>
 8006d84:	6811      	ldr	r1, [r2, #0]
 8006d86:	1855      	adds	r5, r2, r1
 8006d88:	42a5      	cmp	r5, r4
 8006d8a:	d10b      	bne.n	8006da4 <_free_r+0x70>
 8006d8c:	6824      	ldr	r4, [r4, #0]
 8006d8e:	4421      	add	r1, r4
 8006d90:	1854      	adds	r4, r2, r1
 8006d92:	42a3      	cmp	r3, r4
 8006d94:	6011      	str	r1, [r2, #0]
 8006d96:	d1e0      	bne.n	8006d5a <_free_r+0x26>
 8006d98:	681c      	ldr	r4, [r3, #0]
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	6053      	str	r3, [r2, #4]
 8006d9e:	4421      	add	r1, r4
 8006da0:	6011      	str	r1, [r2, #0]
 8006da2:	e7da      	b.n	8006d5a <_free_r+0x26>
 8006da4:	d902      	bls.n	8006dac <_free_r+0x78>
 8006da6:	230c      	movs	r3, #12
 8006da8:	6003      	str	r3, [r0, #0]
 8006daa:	e7d6      	b.n	8006d5a <_free_r+0x26>
 8006dac:	6825      	ldr	r5, [r4, #0]
 8006dae:	1961      	adds	r1, r4, r5
 8006db0:	428b      	cmp	r3, r1
 8006db2:	bf04      	itt	eq
 8006db4:	6819      	ldreq	r1, [r3, #0]
 8006db6:	685b      	ldreq	r3, [r3, #4]
 8006db8:	6063      	str	r3, [r4, #4]
 8006dba:	bf04      	itt	eq
 8006dbc:	1949      	addeq	r1, r1, r5
 8006dbe:	6021      	streq	r1, [r4, #0]
 8006dc0:	6054      	str	r4, [r2, #4]
 8006dc2:	e7ca      	b.n	8006d5a <_free_r+0x26>
 8006dc4:	b003      	add	sp, #12
 8006dc6:	bd30      	pop	{r4, r5, pc}
 8006dc8:	20000320 	.word	0x20000320

08006dcc <sbrk_aligned>:
 8006dcc:	b570      	push	{r4, r5, r6, lr}
 8006dce:	4e0e      	ldr	r6, [pc, #56]	; (8006e08 <sbrk_aligned+0x3c>)
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	6831      	ldr	r1, [r6, #0]
 8006dd4:	4605      	mov	r5, r0
 8006dd6:	b911      	cbnz	r1, 8006dde <sbrk_aligned+0x12>
 8006dd8:	f000 fcd6 	bl	8007788 <_sbrk_r>
 8006ddc:	6030      	str	r0, [r6, #0]
 8006dde:	4621      	mov	r1, r4
 8006de0:	4628      	mov	r0, r5
 8006de2:	f000 fcd1 	bl	8007788 <_sbrk_r>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	d00a      	beq.n	8006e00 <sbrk_aligned+0x34>
 8006dea:	1cc4      	adds	r4, r0, #3
 8006dec:	f024 0403 	bic.w	r4, r4, #3
 8006df0:	42a0      	cmp	r0, r4
 8006df2:	d007      	beq.n	8006e04 <sbrk_aligned+0x38>
 8006df4:	1a21      	subs	r1, r4, r0
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fcc6 	bl	8007788 <_sbrk_r>
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d101      	bne.n	8006e04 <sbrk_aligned+0x38>
 8006e00:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006e04:	4620      	mov	r0, r4
 8006e06:	bd70      	pop	{r4, r5, r6, pc}
 8006e08:	20000324 	.word	0x20000324

08006e0c <_malloc_r>:
 8006e0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e10:	1ccd      	adds	r5, r1, #3
 8006e12:	f025 0503 	bic.w	r5, r5, #3
 8006e16:	3508      	adds	r5, #8
 8006e18:	2d0c      	cmp	r5, #12
 8006e1a:	bf38      	it	cc
 8006e1c:	250c      	movcc	r5, #12
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	4607      	mov	r7, r0
 8006e22:	db01      	blt.n	8006e28 <_malloc_r+0x1c>
 8006e24:	42a9      	cmp	r1, r5
 8006e26:	d905      	bls.n	8006e34 <_malloc_r+0x28>
 8006e28:	230c      	movs	r3, #12
 8006e2a:	603b      	str	r3, [r7, #0]
 8006e2c:	2600      	movs	r6, #0
 8006e2e:	4630      	mov	r0, r6
 8006e30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e34:	4e2e      	ldr	r6, [pc, #184]	; (8006ef0 <_malloc_r+0xe4>)
 8006e36:	f000 fd81 	bl	800793c <__malloc_lock>
 8006e3a:	6833      	ldr	r3, [r6, #0]
 8006e3c:	461c      	mov	r4, r3
 8006e3e:	bb34      	cbnz	r4, 8006e8e <_malloc_r+0x82>
 8006e40:	4629      	mov	r1, r5
 8006e42:	4638      	mov	r0, r7
 8006e44:	f7ff ffc2 	bl	8006dcc <sbrk_aligned>
 8006e48:	1c43      	adds	r3, r0, #1
 8006e4a:	4604      	mov	r4, r0
 8006e4c:	d14d      	bne.n	8006eea <_malloc_r+0xde>
 8006e4e:	6834      	ldr	r4, [r6, #0]
 8006e50:	4626      	mov	r6, r4
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	d140      	bne.n	8006ed8 <_malloc_r+0xcc>
 8006e56:	6823      	ldr	r3, [r4, #0]
 8006e58:	4631      	mov	r1, r6
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	eb04 0803 	add.w	r8, r4, r3
 8006e60:	f000 fc92 	bl	8007788 <_sbrk_r>
 8006e64:	4580      	cmp	r8, r0
 8006e66:	d13a      	bne.n	8006ede <_malloc_r+0xd2>
 8006e68:	6821      	ldr	r1, [r4, #0]
 8006e6a:	3503      	adds	r5, #3
 8006e6c:	1a6d      	subs	r5, r5, r1
 8006e6e:	f025 0503 	bic.w	r5, r5, #3
 8006e72:	3508      	adds	r5, #8
 8006e74:	2d0c      	cmp	r5, #12
 8006e76:	bf38      	it	cc
 8006e78:	250c      	movcc	r5, #12
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	f7ff ffa5 	bl	8006dcc <sbrk_aligned>
 8006e82:	3001      	adds	r0, #1
 8006e84:	d02b      	beq.n	8006ede <_malloc_r+0xd2>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	442b      	add	r3, r5
 8006e8a:	6023      	str	r3, [r4, #0]
 8006e8c:	e00e      	b.n	8006eac <_malloc_r+0xa0>
 8006e8e:	6822      	ldr	r2, [r4, #0]
 8006e90:	1b52      	subs	r2, r2, r5
 8006e92:	d41e      	bmi.n	8006ed2 <_malloc_r+0xc6>
 8006e94:	2a0b      	cmp	r2, #11
 8006e96:	d916      	bls.n	8006ec6 <_malloc_r+0xba>
 8006e98:	1961      	adds	r1, r4, r5
 8006e9a:	42a3      	cmp	r3, r4
 8006e9c:	6025      	str	r5, [r4, #0]
 8006e9e:	bf18      	it	ne
 8006ea0:	6059      	strne	r1, [r3, #4]
 8006ea2:	6863      	ldr	r3, [r4, #4]
 8006ea4:	bf08      	it	eq
 8006ea6:	6031      	streq	r1, [r6, #0]
 8006ea8:	5162      	str	r2, [r4, r5]
 8006eaa:	604b      	str	r3, [r1, #4]
 8006eac:	4638      	mov	r0, r7
 8006eae:	f104 060b 	add.w	r6, r4, #11
 8006eb2:	f000 fd49 	bl	8007948 <__malloc_unlock>
 8006eb6:	f026 0607 	bic.w	r6, r6, #7
 8006eba:	1d23      	adds	r3, r4, #4
 8006ebc:	1af2      	subs	r2, r6, r3
 8006ebe:	d0b6      	beq.n	8006e2e <_malloc_r+0x22>
 8006ec0:	1b9b      	subs	r3, r3, r6
 8006ec2:	50a3      	str	r3, [r4, r2]
 8006ec4:	e7b3      	b.n	8006e2e <_malloc_r+0x22>
 8006ec6:	6862      	ldr	r2, [r4, #4]
 8006ec8:	42a3      	cmp	r3, r4
 8006eca:	bf0c      	ite	eq
 8006ecc:	6032      	streq	r2, [r6, #0]
 8006ece:	605a      	strne	r2, [r3, #4]
 8006ed0:	e7ec      	b.n	8006eac <_malloc_r+0xa0>
 8006ed2:	4623      	mov	r3, r4
 8006ed4:	6864      	ldr	r4, [r4, #4]
 8006ed6:	e7b2      	b.n	8006e3e <_malloc_r+0x32>
 8006ed8:	4634      	mov	r4, r6
 8006eda:	6876      	ldr	r6, [r6, #4]
 8006edc:	e7b9      	b.n	8006e52 <_malloc_r+0x46>
 8006ede:	230c      	movs	r3, #12
 8006ee0:	603b      	str	r3, [r7, #0]
 8006ee2:	4638      	mov	r0, r7
 8006ee4:	f000 fd30 	bl	8007948 <__malloc_unlock>
 8006ee8:	e7a1      	b.n	8006e2e <_malloc_r+0x22>
 8006eea:	6025      	str	r5, [r4, #0]
 8006eec:	e7de      	b.n	8006eac <_malloc_r+0xa0>
 8006eee:	bf00      	nop
 8006ef0:	20000320 	.word	0x20000320

08006ef4 <__ssputs_r>:
 8006ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ef8:	688e      	ldr	r6, [r1, #8]
 8006efa:	429e      	cmp	r6, r3
 8006efc:	4682      	mov	sl, r0
 8006efe:	460c      	mov	r4, r1
 8006f00:	4690      	mov	r8, r2
 8006f02:	461f      	mov	r7, r3
 8006f04:	d838      	bhi.n	8006f78 <__ssputs_r+0x84>
 8006f06:	898a      	ldrh	r2, [r1, #12]
 8006f08:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f0c:	d032      	beq.n	8006f74 <__ssputs_r+0x80>
 8006f0e:	6825      	ldr	r5, [r4, #0]
 8006f10:	6909      	ldr	r1, [r1, #16]
 8006f12:	eba5 0901 	sub.w	r9, r5, r1
 8006f16:	6965      	ldr	r5, [r4, #20]
 8006f18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f1c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f20:	3301      	adds	r3, #1
 8006f22:	444b      	add	r3, r9
 8006f24:	106d      	asrs	r5, r5, #1
 8006f26:	429d      	cmp	r5, r3
 8006f28:	bf38      	it	cc
 8006f2a:	461d      	movcc	r5, r3
 8006f2c:	0553      	lsls	r3, r2, #21
 8006f2e:	d531      	bpl.n	8006f94 <__ssputs_r+0xa0>
 8006f30:	4629      	mov	r1, r5
 8006f32:	f7ff ff6b 	bl	8006e0c <_malloc_r>
 8006f36:	4606      	mov	r6, r0
 8006f38:	b950      	cbnz	r0, 8006f50 <__ssputs_r+0x5c>
 8006f3a:	230c      	movs	r3, #12
 8006f3c:	f8ca 3000 	str.w	r3, [sl]
 8006f40:	89a3      	ldrh	r3, [r4, #12]
 8006f42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f46:	81a3      	strh	r3, [r4, #12]
 8006f48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f50:	6921      	ldr	r1, [r4, #16]
 8006f52:	464a      	mov	r2, r9
 8006f54:	f000 fcca 	bl	80078ec <memcpy>
 8006f58:	89a3      	ldrh	r3, [r4, #12]
 8006f5a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f62:	81a3      	strh	r3, [r4, #12]
 8006f64:	6126      	str	r6, [r4, #16]
 8006f66:	6165      	str	r5, [r4, #20]
 8006f68:	444e      	add	r6, r9
 8006f6a:	eba5 0509 	sub.w	r5, r5, r9
 8006f6e:	6026      	str	r6, [r4, #0]
 8006f70:	60a5      	str	r5, [r4, #8]
 8006f72:	463e      	mov	r6, r7
 8006f74:	42be      	cmp	r6, r7
 8006f76:	d900      	bls.n	8006f7a <__ssputs_r+0x86>
 8006f78:	463e      	mov	r6, r7
 8006f7a:	6820      	ldr	r0, [r4, #0]
 8006f7c:	4632      	mov	r2, r6
 8006f7e:	4641      	mov	r1, r8
 8006f80:	f000 fcc2 	bl	8007908 <memmove>
 8006f84:	68a3      	ldr	r3, [r4, #8]
 8006f86:	1b9b      	subs	r3, r3, r6
 8006f88:	60a3      	str	r3, [r4, #8]
 8006f8a:	6823      	ldr	r3, [r4, #0]
 8006f8c:	4433      	add	r3, r6
 8006f8e:	6023      	str	r3, [r4, #0]
 8006f90:	2000      	movs	r0, #0
 8006f92:	e7db      	b.n	8006f4c <__ssputs_r+0x58>
 8006f94:	462a      	mov	r2, r5
 8006f96:	f000 fcdd 	bl	8007954 <_realloc_r>
 8006f9a:	4606      	mov	r6, r0
 8006f9c:	2800      	cmp	r0, #0
 8006f9e:	d1e1      	bne.n	8006f64 <__ssputs_r+0x70>
 8006fa0:	6921      	ldr	r1, [r4, #16]
 8006fa2:	4650      	mov	r0, sl
 8006fa4:	f7ff fec6 	bl	8006d34 <_free_r>
 8006fa8:	e7c7      	b.n	8006f3a <__ssputs_r+0x46>
	...

08006fac <_svfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	4698      	mov	r8, r3
 8006fb2:	898b      	ldrh	r3, [r1, #12]
 8006fb4:	061b      	lsls	r3, r3, #24
 8006fb6:	b09d      	sub	sp, #116	; 0x74
 8006fb8:	4607      	mov	r7, r0
 8006fba:	460d      	mov	r5, r1
 8006fbc:	4614      	mov	r4, r2
 8006fbe:	d50e      	bpl.n	8006fde <_svfiprintf_r+0x32>
 8006fc0:	690b      	ldr	r3, [r1, #16]
 8006fc2:	b963      	cbnz	r3, 8006fde <_svfiprintf_r+0x32>
 8006fc4:	2140      	movs	r1, #64	; 0x40
 8006fc6:	f7ff ff21 	bl	8006e0c <_malloc_r>
 8006fca:	6028      	str	r0, [r5, #0]
 8006fcc:	6128      	str	r0, [r5, #16]
 8006fce:	b920      	cbnz	r0, 8006fda <_svfiprintf_r+0x2e>
 8006fd0:	230c      	movs	r3, #12
 8006fd2:	603b      	str	r3, [r7, #0]
 8006fd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fd8:	e0d1      	b.n	800717e <_svfiprintf_r+0x1d2>
 8006fda:	2340      	movs	r3, #64	; 0x40
 8006fdc:	616b      	str	r3, [r5, #20]
 8006fde:	2300      	movs	r3, #0
 8006fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe2:	2320      	movs	r3, #32
 8006fe4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006fe8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006fec:	2330      	movs	r3, #48	; 0x30
 8006fee:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007198 <_svfiprintf_r+0x1ec>
 8006ff2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ff6:	f04f 0901 	mov.w	r9, #1
 8006ffa:	4623      	mov	r3, r4
 8006ffc:	469a      	mov	sl, r3
 8006ffe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007002:	b10a      	cbz	r2, 8007008 <_svfiprintf_r+0x5c>
 8007004:	2a25      	cmp	r2, #37	; 0x25
 8007006:	d1f9      	bne.n	8006ffc <_svfiprintf_r+0x50>
 8007008:	ebba 0b04 	subs.w	fp, sl, r4
 800700c:	d00b      	beq.n	8007026 <_svfiprintf_r+0x7a>
 800700e:	465b      	mov	r3, fp
 8007010:	4622      	mov	r2, r4
 8007012:	4629      	mov	r1, r5
 8007014:	4638      	mov	r0, r7
 8007016:	f7ff ff6d 	bl	8006ef4 <__ssputs_r>
 800701a:	3001      	adds	r0, #1
 800701c:	f000 80aa 	beq.w	8007174 <_svfiprintf_r+0x1c8>
 8007020:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007022:	445a      	add	r2, fp
 8007024:	9209      	str	r2, [sp, #36]	; 0x24
 8007026:	f89a 3000 	ldrb.w	r3, [sl]
 800702a:	2b00      	cmp	r3, #0
 800702c:	f000 80a2 	beq.w	8007174 <_svfiprintf_r+0x1c8>
 8007030:	2300      	movs	r3, #0
 8007032:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007036:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800703a:	f10a 0a01 	add.w	sl, sl, #1
 800703e:	9304      	str	r3, [sp, #16]
 8007040:	9307      	str	r3, [sp, #28]
 8007042:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007046:	931a      	str	r3, [sp, #104]	; 0x68
 8007048:	4654      	mov	r4, sl
 800704a:	2205      	movs	r2, #5
 800704c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007050:	4851      	ldr	r0, [pc, #324]	; (8007198 <_svfiprintf_r+0x1ec>)
 8007052:	f7f9 f8f5 	bl	8000240 <memchr>
 8007056:	9a04      	ldr	r2, [sp, #16]
 8007058:	b9d8      	cbnz	r0, 8007092 <_svfiprintf_r+0xe6>
 800705a:	06d0      	lsls	r0, r2, #27
 800705c:	bf44      	itt	mi
 800705e:	2320      	movmi	r3, #32
 8007060:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007064:	0711      	lsls	r1, r2, #28
 8007066:	bf44      	itt	mi
 8007068:	232b      	movmi	r3, #43	; 0x2b
 800706a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800706e:	f89a 3000 	ldrb.w	r3, [sl]
 8007072:	2b2a      	cmp	r3, #42	; 0x2a
 8007074:	d015      	beq.n	80070a2 <_svfiprintf_r+0xf6>
 8007076:	9a07      	ldr	r2, [sp, #28]
 8007078:	4654      	mov	r4, sl
 800707a:	2000      	movs	r0, #0
 800707c:	f04f 0c0a 	mov.w	ip, #10
 8007080:	4621      	mov	r1, r4
 8007082:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007086:	3b30      	subs	r3, #48	; 0x30
 8007088:	2b09      	cmp	r3, #9
 800708a:	d94e      	bls.n	800712a <_svfiprintf_r+0x17e>
 800708c:	b1b0      	cbz	r0, 80070bc <_svfiprintf_r+0x110>
 800708e:	9207      	str	r2, [sp, #28]
 8007090:	e014      	b.n	80070bc <_svfiprintf_r+0x110>
 8007092:	eba0 0308 	sub.w	r3, r0, r8
 8007096:	fa09 f303 	lsl.w	r3, r9, r3
 800709a:	4313      	orrs	r3, r2
 800709c:	9304      	str	r3, [sp, #16]
 800709e:	46a2      	mov	sl, r4
 80070a0:	e7d2      	b.n	8007048 <_svfiprintf_r+0x9c>
 80070a2:	9b03      	ldr	r3, [sp, #12]
 80070a4:	1d19      	adds	r1, r3, #4
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	9103      	str	r1, [sp, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bfbb      	ittet	lt
 80070ae:	425b      	neglt	r3, r3
 80070b0:	f042 0202 	orrlt.w	r2, r2, #2
 80070b4:	9307      	strge	r3, [sp, #28]
 80070b6:	9307      	strlt	r3, [sp, #28]
 80070b8:	bfb8      	it	lt
 80070ba:	9204      	strlt	r2, [sp, #16]
 80070bc:	7823      	ldrb	r3, [r4, #0]
 80070be:	2b2e      	cmp	r3, #46	; 0x2e
 80070c0:	d10c      	bne.n	80070dc <_svfiprintf_r+0x130>
 80070c2:	7863      	ldrb	r3, [r4, #1]
 80070c4:	2b2a      	cmp	r3, #42	; 0x2a
 80070c6:	d135      	bne.n	8007134 <_svfiprintf_r+0x188>
 80070c8:	9b03      	ldr	r3, [sp, #12]
 80070ca:	1d1a      	adds	r2, r3, #4
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	9203      	str	r2, [sp, #12]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	bfb8      	it	lt
 80070d4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80070d8:	3402      	adds	r4, #2
 80070da:	9305      	str	r3, [sp, #20]
 80070dc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80071a8 <_svfiprintf_r+0x1fc>
 80070e0:	7821      	ldrb	r1, [r4, #0]
 80070e2:	2203      	movs	r2, #3
 80070e4:	4650      	mov	r0, sl
 80070e6:	f7f9 f8ab 	bl	8000240 <memchr>
 80070ea:	b140      	cbz	r0, 80070fe <_svfiprintf_r+0x152>
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	eba0 000a 	sub.w	r0, r0, sl
 80070f2:	fa03 f000 	lsl.w	r0, r3, r0
 80070f6:	9b04      	ldr	r3, [sp, #16]
 80070f8:	4303      	orrs	r3, r0
 80070fa:	3401      	adds	r4, #1
 80070fc:	9304      	str	r3, [sp, #16]
 80070fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007102:	4826      	ldr	r0, [pc, #152]	; (800719c <_svfiprintf_r+0x1f0>)
 8007104:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007108:	2206      	movs	r2, #6
 800710a:	f7f9 f899 	bl	8000240 <memchr>
 800710e:	2800      	cmp	r0, #0
 8007110:	d038      	beq.n	8007184 <_svfiprintf_r+0x1d8>
 8007112:	4b23      	ldr	r3, [pc, #140]	; (80071a0 <_svfiprintf_r+0x1f4>)
 8007114:	bb1b      	cbnz	r3, 800715e <_svfiprintf_r+0x1b2>
 8007116:	9b03      	ldr	r3, [sp, #12]
 8007118:	3307      	adds	r3, #7
 800711a:	f023 0307 	bic.w	r3, r3, #7
 800711e:	3308      	adds	r3, #8
 8007120:	9303      	str	r3, [sp, #12]
 8007122:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007124:	4433      	add	r3, r6
 8007126:	9309      	str	r3, [sp, #36]	; 0x24
 8007128:	e767      	b.n	8006ffa <_svfiprintf_r+0x4e>
 800712a:	fb0c 3202 	mla	r2, ip, r2, r3
 800712e:	460c      	mov	r4, r1
 8007130:	2001      	movs	r0, #1
 8007132:	e7a5      	b.n	8007080 <_svfiprintf_r+0xd4>
 8007134:	2300      	movs	r3, #0
 8007136:	3401      	adds	r4, #1
 8007138:	9305      	str	r3, [sp, #20]
 800713a:	4619      	mov	r1, r3
 800713c:	f04f 0c0a 	mov.w	ip, #10
 8007140:	4620      	mov	r0, r4
 8007142:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007146:	3a30      	subs	r2, #48	; 0x30
 8007148:	2a09      	cmp	r2, #9
 800714a:	d903      	bls.n	8007154 <_svfiprintf_r+0x1a8>
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0c5      	beq.n	80070dc <_svfiprintf_r+0x130>
 8007150:	9105      	str	r1, [sp, #20]
 8007152:	e7c3      	b.n	80070dc <_svfiprintf_r+0x130>
 8007154:	fb0c 2101 	mla	r1, ip, r1, r2
 8007158:	4604      	mov	r4, r0
 800715a:	2301      	movs	r3, #1
 800715c:	e7f0      	b.n	8007140 <_svfiprintf_r+0x194>
 800715e:	ab03      	add	r3, sp, #12
 8007160:	9300      	str	r3, [sp, #0]
 8007162:	462a      	mov	r2, r5
 8007164:	4b0f      	ldr	r3, [pc, #60]	; (80071a4 <_svfiprintf_r+0x1f8>)
 8007166:	a904      	add	r1, sp, #16
 8007168:	4638      	mov	r0, r7
 800716a:	f3af 8000 	nop.w
 800716e:	1c42      	adds	r2, r0, #1
 8007170:	4606      	mov	r6, r0
 8007172:	d1d6      	bne.n	8007122 <_svfiprintf_r+0x176>
 8007174:	89ab      	ldrh	r3, [r5, #12]
 8007176:	065b      	lsls	r3, r3, #25
 8007178:	f53f af2c 	bmi.w	8006fd4 <_svfiprintf_r+0x28>
 800717c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800717e:	b01d      	add	sp, #116	; 0x74
 8007180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007184:	ab03      	add	r3, sp, #12
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	462a      	mov	r2, r5
 800718a:	4b06      	ldr	r3, [pc, #24]	; (80071a4 <_svfiprintf_r+0x1f8>)
 800718c:	a904      	add	r1, sp, #16
 800718e:	4638      	mov	r0, r7
 8007190:	f000 f9d4 	bl	800753c <_printf_i>
 8007194:	e7eb      	b.n	800716e <_svfiprintf_r+0x1c2>
 8007196:	bf00      	nop
 8007198:	08007e1c 	.word	0x08007e1c
 800719c:	08007e26 	.word	0x08007e26
 80071a0:	00000000 	.word	0x00000000
 80071a4:	08006ef5 	.word	0x08006ef5
 80071a8:	08007e22 	.word	0x08007e22

080071ac <__sfputc_r>:
 80071ac:	6893      	ldr	r3, [r2, #8]
 80071ae:	3b01      	subs	r3, #1
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	b410      	push	{r4}
 80071b4:	6093      	str	r3, [r2, #8]
 80071b6:	da08      	bge.n	80071ca <__sfputc_r+0x1e>
 80071b8:	6994      	ldr	r4, [r2, #24]
 80071ba:	42a3      	cmp	r3, r4
 80071bc:	db01      	blt.n	80071c2 <__sfputc_r+0x16>
 80071be:	290a      	cmp	r1, #10
 80071c0:	d103      	bne.n	80071ca <__sfputc_r+0x1e>
 80071c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071c6:	f7ff ba9d 	b.w	8006704 <__swbuf_r>
 80071ca:	6813      	ldr	r3, [r2, #0]
 80071cc:	1c58      	adds	r0, r3, #1
 80071ce:	6010      	str	r0, [r2, #0]
 80071d0:	7019      	strb	r1, [r3, #0]
 80071d2:	4608      	mov	r0, r1
 80071d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071d8:	4770      	bx	lr

080071da <__sfputs_r>:
 80071da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071dc:	4606      	mov	r6, r0
 80071de:	460f      	mov	r7, r1
 80071e0:	4614      	mov	r4, r2
 80071e2:	18d5      	adds	r5, r2, r3
 80071e4:	42ac      	cmp	r4, r5
 80071e6:	d101      	bne.n	80071ec <__sfputs_r+0x12>
 80071e8:	2000      	movs	r0, #0
 80071ea:	e007      	b.n	80071fc <__sfputs_r+0x22>
 80071ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071f0:	463a      	mov	r2, r7
 80071f2:	4630      	mov	r0, r6
 80071f4:	f7ff ffda 	bl	80071ac <__sfputc_r>
 80071f8:	1c43      	adds	r3, r0, #1
 80071fa:	d1f3      	bne.n	80071e4 <__sfputs_r+0xa>
 80071fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007200 <_vfiprintf_r>:
 8007200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007204:	460d      	mov	r5, r1
 8007206:	b09d      	sub	sp, #116	; 0x74
 8007208:	4614      	mov	r4, r2
 800720a:	4698      	mov	r8, r3
 800720c:	4606      	mov	r6, r0
 800720e:	b118      	cbz	r0, 8007218 <_vfiprintf_r+0x18>
 8007210:	6983      	ldr	r3, [r0, #24]
 8007212:	b90b      	cbnz	r3, 8007218 <_vfiprintf_r+0x18>
 8007214:	f7ff fc6e 	bl	8006af4 <__sinit>
 8007218:	4b89      	ldr	r3, [pc, #548]	; (8007440 <_vfiprintf_r+0x240>)
 800721a:	429d      	cmp	r5, r3
 800721c:	d11b      	bne.n	8007256 <_vfiprintf_r+0x56>
 800721e:	6875      	ldr	r5, [r6, #4]
 8007220:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007222:	07d9      	lsls	r1, r3, #31
 8007224:	d405      	bmi.n	8007232 <_vfiprintf_r+0x32>
 8007226:	89ab      	ldrh	r3, [r5, #12]
 8007228:	059a      	lsls	r2, r3, #22
 800722a:	d402      	bmi.n	8007232 <_vfiprintf_r+0x32>
 800722c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800722e:	f7ff fd11 	bl	8006c54 <__retarget_lock_acquire_recursive>
 8007232:	89ab      	ldrh	r3, [r5, #12]
 8007234:	071b      	lsls	r3, r3, #28
 8007236:	d501      	bpl.n	800723c <_vfiprintf_r+0x3c>
 8007238:	692b      	ldr	r3, [r5, #16]
 800723a:	b9eb      	cbnz	r3, 8007278 <_vfiprintf_r+0x78>
 800723c:	4629      	mov	r1, r5
 800723e:	4630      	mov	r0, r6
 8007240:	f7ff fab2 	bl	80067a8 <__swsetup_r>
 8007244:	b1c0      	cbz	r0, 8007278 <_vfiprintf_r+0x78>
 8007246:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007248:	07dc      	lsls	r4, r3, #31
 800724a:	d50e      	bpl.n	800726a <_vfiprintf_r+0x6a>
 800724c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007250:	b01d      	add	sp, #116	; 0x74
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	4b7b      	ldr	r3, [pc, #492]	; (8007444 <_vfiprintf_r+0x244>)
 8007258:	429d      	cmp	r5, r3
 800725a:	d101      	bne.n	8007260 <_vfiprintf_r+0x60>
 800725c:	68b5      	ldr	r5, [r6, #8]
 800725e:	e7df      	b.n	8007220 <_vfiprintf_r+0x20>
 8007260:	4b79      	ldr	r3, [pc, #484]	; (8007448 <_vfiprintf_r+0x248>)
 8007262:	429d      	cmp	r5, r3
 8007264:	bf08      	it	eq
 8007266:	68f5      	ldreq	r5, [r6, #12]
 8007268:	e7da      	b.n	8007220 <_vfiprintf_r+0x20>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	0598      	lsls	r0, r3, #22
 800726e:	d4ed      	bmi.n	800724c <_vfiprintf_r+0x4c>
 8007270:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007272:	f7ff fcf0 	bl	8006c56 <__retarget_lock_release_recursive>
 8007276:	e7e9      	b.n	800724c <_vfiprintf_r+0x4c>
 8007278:	2300      	movs	r3, #0
 800727a:	9309      	str	r3, [sp, #36]	; 0x24
 800727c:	2320      	movs	r3, #32
 800727e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007282:	f8cd 800c 	str.w	r8, [sp, #12]
 8007286:	2330      	movs	r3, #48	; 0x30
 8007288:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800744c <_vfiprintf_r+0x24c>
 800728c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007290:	f04f 0901 	mov.w	r9, #1
 8007294:	4623      	mov	r3, r4
 8007296:	469a      	mov	sl, r3
 8007298:	f813 2b01 	ldrb.w	r2, [r3], #1
 800729c:	b10a      	cbz	r2, 80072a2 <_vfiprintf_r+0xa2>
 800729e:	2a25      	cmp	r2, #37	; 0x25
 80072a0:	d1f9      	bne.n	8007296 <_vfiprintf_r+0x96>
 80072a2:	ebba 0b04 	subs.w	fp, sl, r4
 80072a6:	d00b      	beq.n	80072c0 <_vfiprintf_r+0xc0>
 80072a8:	465b      	mov	r3, fp
 80072aa:	4622      	mov	r2, r4
 80072ac:	4629      	mov	r1, r5
 80072ae:	4630      	mov	r0, r6
 80072b0:	f7ff ff93 	bl	80071da <__sfputs_r>
 80072b4:	3001      	adds	r0, #1
 80072b6:	f000 80aa 	beq.w	800740e <_vfiprintf_r+0x20e>
 80072ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072bc:	445a      	add	r2, fp
 80072be:	9209      	str	r2, [sp, #36]	; 0x24
 80072c0:	f89a 3000 	ldrb.w	r3, [sl]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f000 80a2 	beq.w	800740e <_vfiprintf_r+0x20e>
 80072ca:	2300      	movs	r3, #0
 80072cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072d4:	f10a 0a01 	add.w	sl, sl, #1
 80072d8:	9304      	str	r3, [sp, #16]
 80072da:	9307      	str	r3, [sp, #28]
 80072dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80072e0:	931a      	str	r3, [sp, #104]	; 0x68
 80072e2:	4654      	mov	r4, sl
 80072e4:	2205      	movs	r2, #5
 80072e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ea:	4858      	ldr	r0, [pc, #352]	; (800744c <_vfiprintf_r+0x24c>)
 80072ec:	f7f8 ffa8 	bl	8000240 <memchr>
 80072f0:	9a04      	ldr	r2, [sp, #16]
 80072f2:	b9d8      	cbnz	r0, 800732c <_vfiprintf_r+0x12c>
 80072f4:	06d1      	lsls	r1, r2, #27
 80072f6:	bf44      	itt	mi
 80072f8:	2320      	movmi	r3, #32
 80072fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072fe:	0713      	lsls	r3, r2, #28
 8007300:	bf44      	itt	mi
 8007302:	232b      	movmi	r3, #43	; 0x2b
 8007304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007308:	f89a 3000 	ldrb.w	r3, [sl]
 800730c:	2b2a      	cmp	r3, #42	; 0x2a
 800730e:	d015      	beq.n	800733c <_vfiprintf_r+0x13c>
 8007310:	9a07      	ldr	r2, [sp, #28]
 8007312:	4654      	mov	r4, sl
 8007314:	2000      	movs	r0, #0
 8007316:	f04f 0c0a 	mov.w	ip, #10
 800731a:	4621      	mov	r1, r4
 800731c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007320:	3b30      	subs	r3, #48	; 0x30
 8007322:	2b09      	cmp	r3, #9
 8007324:	d94e      	bls.n	80073c4 <_vfiprintf_r+0x1c4>
 8007326:	b1b0      	cbz	r0, 8007356 <_vfiprintf_r+0x156>
 8007328:	9207      	str	r2, [sp, #28]
 800732a:	e014      	b.n	8007356 <_vfiprintf_r+0x156>
 800732c:	eba0 0308 	sub.w	r3, r0, r8
 8007330:	fa09 f303 	lsl.w	r3, r9, r3
 8007334:	4313      	orrs	r3, r2
 8007336:	9304      	str	r3, [sp, #16]
 8007338:	46a2      	mov	sl, r4
 800733a:	e7d2      	b.n	80072e2 <_vfiprintf_r+0xe2>
 800733c:	9b03      	ldr	r3, [sp, #12]
 800733e:	1d19      	adds	r1, r3, #4
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	9103      	str	r1, [sp, #12]
 8007344:	2b00      	cmp	r3, #0
 8007346:	bfbb      	ittet	lt
 8007348:	425b      	neglt	r3, r3
 800734a:	f042 0202 	orrlt.w	r2, r2, #2
 800734e:	9307      	strge	r3, [sp, #28]
 8007350:	9307      	strlt	r3, [sp, #28]
 8007352:	bfb8      	it	lt
 8007354:	9204      	strlt	r2, [sp, #16]
 8007356:	7823      	ldrb	r3, [r4, #0]
 8007358:	2b2e      	cmp	r3, #46	; 0x2e
 800735a:	d10c      	bne.n	8007376 <_vfiprintf_r+0x176>
 800735c:	7863      	ldrb	r3, [r4, #1]
 800735e:	2b2a      	cmp	r3, #42	; 0x2a
 8007360:	d135      	bne.n	80073ce <_vfiprintf_r+0x1ce>
 8007362:	9b03      	ldr	r3, [sp, #12]
 8007364:	1d1a      	adds	r2, r3, #4
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	9203      	str	r2, [sp, #12]
 800736a:	2b00      	cmp	r3, #0
 800736c:	bfb8      	it	lt
 800736e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007372:	3402      	adds	r4, #2
 8007374:	9305      	str	r3, [sp, #20]
 8007376:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800745c <_vfiprintf_r+0x25c>
 800737a:	7821      	ldrb	r1, [r4, #0]
 800737c:	2203      	movs	r2, #3
 800737e:	4650      	mov	r0, sl
 8007380:	f7f8 ff5e 	bl	8000240 <memchr>
 8007384:	b140      	cbz	r0, 8007398 <_vfiprintf_r+0x198>
 8007386:	2340      	movs	r3, #64	; 0x40
 8007388:	eba0 000a 	sub.w	r0, r0, sl
 800738c:	fa03 f000 	lsl.w	r0, r3, r0
 8007390:	9b04      	ldr	r3, [sp, #16]
 8007392:	4303      	orrs	r3, r0
 8007394:	3401      	adds	r4, #1
 8007396:	9304      	str	r3, [sp, #16]
 8007398:	f814 1b01 	ldrb.w	r1, [r4], #1
 800739c:	482c      	ldr	r0, [pc, #176]	; (8007450 <_vfiprintf_r+0x250>)
 800739e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073a2:	2206      	movs	r2, #6
 80073a4:	f7f8 ff4c 	bl	8000240 <memchr>
 80073a8:	2800      	cmp	r0, #0
 80073aa:	d03f      	beq.n	800742c <_vfiprintf_r+0x22c>
 80073ac:	4b29      	ldr	r3, [pc, #164]	; (8007454 <_vfiprintf_r+0x254>)
 80073ae:	bb1b      	cbnz	r3, 80073f8 <_vfiprintf_r+0x1f8>
 80073b0:	9b03      	ldr	r3, [sp, #12]
 80073b2:	3307      	adds	r3, #7
 80073b4:	f023 0307 	bic.w	r3, r3, #7
 80073b8:	3308      	adds	r3, #8
 80073ba:	9303      	str	r3, [sp, #12]
 80073bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073be:	443b      	add	r3, r7
 80073c0:	9309      	str	r3, [sp, #36]	; 0x24
 80073c2:	e767      	b.n	8007294 <_vfiprintf_r+0x94>
 80073c4:	fb0c 3202 	mla	r2, ip, r2, r3
 80073c8:	460c      	mov	r4, r1
 80073ca:	2001      	movs	r0, #1
 80073cc:	e7a5      	b.n	800731a <_vfiprintf_r+0x11a>
 80073ce:	2300      	movs	r3, #0
 80073d0:	3401      	adds	r4, #1
 80073d2:	9305      	str	r3, [sp, #20]
 80073d4:	4619      	mov	r1, r3
 80073d6:	f04f 0c0a 	mov.w	ip, #10
 80073da:	4620      	mov	r0, r4
 80073dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073e0:	3a30      	subs	r2, #48	; 0x30
 80073e2:	2a09      	cmp	r2, #9
 80073e4:	d903      	bls.n	80073ee <_vfiprintf_r+0x1ee>
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0c5      	beq.n	8007376 <_vfiprintf_r+0x176>
 80073ea:	9105      	str	r1, [sp, #20]
 80073ec:	e7c3      	b.n	8007376 <_vfiprintf_r+0x176>
 80073ee:	fb0c 2101 	mla	r1, ip, r1, r2
 80073f2:	4604      	mov	r4, r0
 80073f4:	2301      	movs	r3, #1
 80073f6:	e7f0      	b.n	80073da <_vfiprintf_r+0x1da>
 80073f8:	ab03      	add	r3, sp, #12
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	462a      	mov	r2, r5
 80073fe:	4b16      	ldr	r3, [pc, #88]	; (8007458 <_vfiprintf_r+0x258>)
 8007400:	a904      	add	r1, sp, #16
 8007402:	4630      	mov	r0, r6
 8007404:	f3af 8000 	nop.w
 8007408:	4607      	mov	r7, r0
 800740a:	1c78      	adds	r0, r7, #1
 800740c:	d1d6      	bne.n	80073bc <_vfiprintf_r+0x1bc>
 800740e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007410:	07d9      	lsls	r1, r3, #31
 8007412:	d405      	bmi.n	8007420 <_vfiprintf_r+0x220>
 8007414:	89ab      	ldrh	r3, [r5, #12]
 8007416:	059a      	lsls	r2, r3, #22
 8007418:	d402      	bmi.n	8007420 <_vfiprintf_r+0x220>
 800741a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800741c:	f7ff fc1b 	bl	8006c56 <__retarget_lock_release_recursive>
 8007420:	89ab      	ldrh	r3, [r5, #12]
 8007422:	065b      	lsls	r3, r3, #25
 8007424:	f53f af12 	bmi.w	800724c <_vfiprintf_r+0x4c>
 8007428:	9809      	ldr	r0, [sp, #36]	; 0x24
 800742a:	e711      	b.n	8007250 <_vfiprintf_r+0x50>
 800742c:	ab03      	add	r3, sp, #12
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	462a      	mov	r2, r5
 8007432:	4b09      	ldr	r3, [pc, #36]	; (8007458 <_vfiprintf_r+0x258>)
 8007434:	a904      	add	r1, sp, #16
 8007436:	4630      	mov	r0, r6
 8007438:	f000 f880 	bl	800753c <_printf_i>
 800743c:	e7e4      	b.n	8007408 <_vfiprintf_r+0x208>
 800743e:	bf00      	nop
 8007440:	08007ddc 	.word	0x08007ddc
 8007444:	08007dfc 	.word	0x08007dfc
 8007448:	08007dbc 	.word	0x08007dbc
 800744c:	08007e1c 	.word	0x08007e1c
 8007450:	08007e26 	.word	0x08007e26
 8007454:	00000000 	.word	0x00000000
 8007458:	080071db 	.word	0x080071db
 800745c:	08007e22 	.word	0x08007e22

08007460 <_printf_common>:
 8007460:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007464:	4616      	mov	r6, r2
 8007466:	4699      	mov	r9, r3
 8007468:	688a      	ldr	r2, [r1, #8]
 800746a:	690b      	ldr	r3, [r1, #16]
 800746c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007470:	4293      	cmp	r3, r2
 8007472:	bfb8      	it	lt
 8007474:	4613      	movlt	r3, r2
 8007476:	6033      	str	r3, [r6, #0]
 8007478:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800747c:	4607      	mov	r7, r0
 800747e:	460c      	mov	r4, r1
 8007480:	b10a      	cbz	r2, 8007486 <_printf_common+0x26>
 8007482:	3301      	adds	r3, #1
 8007484:	6033      	str	r3, [r6, #0]
 8007486:	6823      	ldr	r3, [r4, #0]
 8007488:	0699      	lsls	r1, r3, #26
 800748a:	bf42      	ittt	mi
 800748c:	6833      	ldrmi	r3, [r6, #0]
 800748e:	3302      	addmi	r3, #2
 8007490:	6033      	strmi	r3, [r6, #0]
 8007492:	6825      	ldr	r5, [r4, #0]
 8007494:	f015 0506 	ands.w	r5, r5, #6
 8007498:	d106      	bne.n	80074a8 <_printf_common+0x48>
 800749a:	f104 0a19 	add.w	sl, r4, #25
 800749e:	68e3      	ldr	r3, [r4, #12]
 80074a0:	6832      	ldr	r2, [r6, #0]
 80074a2:	1a9b      	subs	r3, r3, r2
 80074a4:	42ab      	cmp	r3, r5
 80074a6:	dc26      	bgt.n	80074f6 <_printf_common+0x96>
 80074a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074ac:	1e13      	subs	r3, r2, #0
 80074ae:	6822      	ldr	r2, [r4, #0]
 80074b0:	bf18      	it	ne
 80074b2:	2301      	movne	r3, #1
 80074b4:	0692      	lsls	r2, r2, #26
 80074b6:	d42b      	bmi.n	8007510 <_printf_common+0xb0>
 80074b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074bc:	4649      	mov	r1, r9
 80074be:	4638      	mov	r0, r7
 80074c0:	47c0      	blx	r8
 80074c2:	3001      	adds	r0, #1
 80074c4:	d01e      	beq.n	8007504 <_printf_common+0xa4>
 80074c6:	6823      	ldr	r3, [r4, #0]
 80074c8:	68e5      	ldr	r5, [r4, #12]
 80074ca:	6832      	ldr	r2, [r6, #0]
 80074cc:	f003 0306 	and.w	r3, r3, #6
 80074d0:	2b04      	cmp	r3, #4
 80074d2:	bf08      	it	eq
 80074d4:	1aad      	subeq	r5, r5, r2
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	6922      	ldr	r2, [r4, #16]
 80074da:	bf0c      	ite	eq
 80074dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074e0:	2500      	movne	r5, #0
 80074e2:	4293      	cmp	r3, r2
 80074e4:	bfc4      	itt	gt
 80074e6:	1a9b      	subgt	r3, r3, r2
 80074e8:	18ed      	addgt	r5, r5, r3
 80074ea:	2600      	movs	r6, #0
 80074ec:	341a      	adds	r4, #26
 80074ee:	42b5      	cmp	r5, r6
 80074f0:	d11a      	bne.n	8007528 <_printf_common+0xc8>
 80074f2:	2000      	movs	r0, #0
 80074f4:	e008      	b.n	8007508 <_printf_common+0xa8>
 80074f6:	2301      	movs	r3, #1
 80074f8:	4652      	mov	r2, sl
 80074fa:	4649      	mov	r1, r9
 80074fc:	4638      	mov	r0, r7
 80074fe:	47c0      	blx	r8
 8007500:	3001      	adds	r0, #1
 8007502:	d103      	bne.n	800750c <_printf_common+0xac>
 8007504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007508:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800750c:	3501      	adds	r5, #1
 800750e:	e7c6      	b.n	800749e <_printf_common+0x3e>
 8007510:	18e1      	adds	r1, r4, r3
 8007512:	1c5a      	adds	r2, r3, #1
 8007514:	2030      	movs	r0, #48	; 0x30
 8007516:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800751a:	4422      	add	r2, r4
 800751c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007520:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007524:	3302      	adds	r3, #2
 8007526:	e7c7      	b.n	80074b8 <_printf_common+0x58>
 8007528:	2301      	movs	r3, #1
 800752a:	4622      	mov	r2, r4
 800752c:	4649      	mov	r1, r9
 800752e:	4638      	mov	r0, r7
 8007530:	47c0      	blx	r8
 8007532:	3001      	adds	r0, #1
 8007534:	d0e6      	beq.n	8007504 <_printf_common+0xa4>
 8007536:	3601      	adds	r6, #1
 8007538:	e7d9      	b.n	80074ee <_printf_common+0x8e>
	...

0800753c <_printf_i>:
 800753c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007540:	7e0f      	ldrb	r7, [r1, #24]
 8007542:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007544:	2f78      	cmp	r7, #120	; 0x78
 8007546:	4691      	mov	r9, r2
 8007548:	4680      	mov	r8, r0
 800754a:	460c      	mov	r4, r1
 800754c:	469a      	mov	sl, r3
 800754e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007552:	d807      	bhi.n	8007564 <_printf_i+0x28>
 8007554:	2f62      	cmp	r7, #98	; 0x62
 8007556:	d80a      	bhi.n	800756e <_printf_i+0x32>
 8007558:	2f00      	cmp	r7, #0
 800755a:	f000 80d8 	beq.w	800770e <_printf_i+0x1d2>
 800755e:	2f58      	cmp	r7, #88	; 0x58
 8007560:	f000 80a3 	beq.w	80076aa <_printf_i+0x16e>
 8007564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007568:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800756c:	e03a      	b.n	80075e4 <_printf_i+0xa8>
 800756e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007572:	2b15      	cmp	r3, #21
 8007574:	d8f6      	bhi.n	8007564 <_printf_i+0x28>
 8007576:	a101      	add	r1, pc, #4	; (adr r1, 800757c <_printf_i+0x40>)
 8007578:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800757c:	080075d5 	.word	0x080075d5
 8007580:	080075e9 	.word	0x080075e9
 8007584:	08007565 	.word	0x08007565
 8007588:	08007565 	.word	0x08007565
 800758c:	08007565 	.word	0x08007565
 8007590:	08007565 	.word	0x08007565
 8007594:	080075e9 	.word	0x080075e9
 8007598:	08007565 	.word	0x08007565
 800759c:	08007565 	.word	0x08007565
 80075a0:	08007565 	.word	0x08007565
 80075a4:	08007565 	.word	0x08007565
 80075a8:	080076f5 	.word	0x080076f5
 80075ac:	08007619 	.word	0x08007619
 80075b0:	080076d7 	.word	0x080076d7
 80075b4:	08007565 	.word	0x08007565
 80075b8:	08007565 	.word	0x08007565
 80075bc:	08007717 	.word	0x08007717
 80075c0:	08007565 	.word	0x08007565
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007565 	.word	0x08007565
 80075cc:	08007565 	.word	0x08007565
 80075d0:	080076df 	.word	0x080076df
 80075d4:	682b      	ldr	r3, [r5, #0]
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	602a      	str	r2, [r5, #0]
 80075dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0a3      	b.n	8007730 <_printf_i+0x1f4>
 80075e8:	6820      	ldr	r0, [r4, #0]
 80075ea:	6829      	ldr	r1, [r5, #0]
 80075ec:	0606      	lsls	r6, r0, #24
 80075ee:	f101 0304 	add.w	r3, r1, #4
 80075f2:	d50a      	bpl.n	800760a <_printf_i+0xce>
 80075f4:	680e      	ldr	r6, [r1, #0]
 80075f6:	602b      	str	r3, [r5, #0]
 80075f8:	2e00      	cmp	r6, #0
 80075fa:	da03      	bge.n	8007604 <_printf_i+0xc8>
 80075fc:	232d      	movs	r3, #45	; 0x2d
 80075fe:	4276      	negs	r6, r6
 8007600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007604:	485e      	ldr	r0, [pc, #376]	; (8007780 <_printf_i+0x244>)
 8007606:	230a      	movs	r3, #10
 8007608:	e019      	b.n	800763e <_printf_i+0x102>
 800760a:	680e      	ldr	r6, [r1, #0]
 800760c:	602b      	str	r3, [r5, #0]
 800760e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007612:	bf18      	it	ne
 8007614:	b236      	sxthne	r6, r6
 8007616:	e7ef      	b.n	80075f8 <_printf_i+0xbc>
 8007618:	682b      	ldr	r3, [r5, #0]
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	1d19      	adds	r1, r3, #4
 800761e:	6029      	str	r1, [r5, #0]
 8007620:	0601      	lsls	r1, r0, #24
 8007622:	d501      	bpl.n	8007628 <_printf_i+0xec>
 8007624:	681e      	ldr	r6, [r3, #0]
 8007626:	e002      	b.n	800762e <_printf_i+0xf2>
 8007628:	0646      	lsls	r6, r0, #25
 800762a:	d5fb      	bpl.n	8007624 <_printf_i+0xe8>
 800762c:	881e      	ldrh	r6, [r3, #0]
 800762e:	4854      	ldr	r0, [pc, #336]	; (8007780 <_printf_i+0x244>)
 8007630:	2f6f      	cmp	r7, #111	; 0x6f
 8007632:	bf0c      	ite	eq
 8007634:	2308      	moveq	r3, #8
 8007636:	230a      	movne	r3, #10
 8007638:	2100      	movs	r1, #0
 800763a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800763e:	6865      	ldr	r5, [r4, #4]
 8007640:	60a5      	str	r5, [r4, #8]
 8007642:	2d00      	cmp	r5, #0
 8007644:	bfa2      	ittt	ge
 8007646:	6821      	ldrge	r1, [r4, #0]
 8007648:	f021 0104 	bicge.w	r1, r1, #4
 800764c:	6021      	strge	r1, [r4, #0]
 800764e:	b90e      	cbnz	r6, 8007654 <_printf_i+0x118>
 8007650:	2d00      	cmp	r5, #0
 8007652:	d04d      	beq.n	80076f0 <_printf_i+0x1b4>
 8007654:	4615      	mov	r5, r2
 8007656:	fbb6 f1f3 	udiv	r1, r6, r3
 800765a:	fb03 6711 	mls	r7, r3, r1, r6
 800765e:	5dc7      	ldrb	r7, [r0, r7]
 8007660:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007664:	4637      	mov	r7, r6
 8007666:	42bb      	cmp	r3, r7
 8007668:	460e      	mov	r6, r1
 800766a:	d9f4      	bls.n	8007656 <_printf_i+0x11a>
 800766c:	2b08      	cmp	r3, #8
 800766e:	d10b      	bne.n	8007688 <_printf_i+0x14c>
 8007670:	6823      	ldr	r3, [r4, #0]
 8007672:	07de      	lsls	r6, r3, #31
 8007674:	d508      	bpl.n	8007688 <_printf_i+0x14c>
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	6861      	ldr	r1, [r4, #4]
 800767a:	4299      	cmp	r1, r3
 800767c:	bfde      	ittt	le
 800767e:	2330      	movle	r3, #48	; 0x30
 8007680:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007684:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007688:	1b52      	subs	r2, r2, r5
 800768a:	6122      	str	r2, [r4, #16]
 800768c:	f8cd a000 	str.w	sl, [sp]
 8007690:	464b      	mov	r3, r9
 8007692:	aa03      	add	r2, sp, #12
 8007694:	4621      	mov	r1, r4
 8007696:	4640      	mov	r0, r8
 8007698:	f7ff fee2 	bl	8007460 <_printf_common>
 800769c:	3001      	adds	r0, #1
 800769e:	d14c      	bne.n	800773a <_printf_i+0x1fe>
 80076a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076a4:	b004      	add	sp, #16
 80076a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076aa:	4835      	ldr	r0, [pc, #212]	; (8007780 <_printf_i+0x244>)
 80076ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076b0:	6829      	ldr	r1, [r5, #0]
 80076b2:	6823      	ldr	r3, [r4, #0]
 80076b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80076b8:	6029      	str	r1, [r5, #0]
 80076ba:	061d      	lsls	r5, r3, #24
 80076bc:	d514      	bpl.n	80076e8 <_printf_i+0x1ac>
 80076be:	07df      	lsls	r7, r3, #31
 80076c0:	bf44      	itt	mi
 80076c2:	f043 0320 	orrmi.w	r3, r3, #32
 80076c6:	6023      	strmi	r3, [r4, #0]
 80076c8:	b91e      	cbnz	r6, 80076d2 <_printf_i+0x196>
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	f023 0320 	bic.w	r3, r3, #32
 80076d0:	6023      	str	r3, [r4, #0]
 80076d2:	2310      	movs	r3, #16
 80076d4:	e7b0      	b.n	8007638 <_printf_i+0xfc>
 80076d6:	6823      	ldr	r3, [r4, #0]
 80076d8:	f043 0320 	orr.w	r3, r3, #32
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	2378      	movs	r3, #120	; 0x78
 80076e0:	4828      	ldr	r0, [pc, #160]	; (8007784 <_printf_i+0x248>)
 80076e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80076e6:	e7e3      	b.n	80076b0 <_printf_i+0x174>
 80076e8:	0659      	lsls	r1, r3, #25
 80076ea:	bf48      	it	mi
 80076ec:	b2b6      	uxthmi	r6, r6
 80076ee:	e7e6      	b.n	80076be <_printf_i+0x182>
 80076f0:	4615      	mov	r5, r2
 80076f2:	e7bb      	b.n	800766c <_printf_i+0x130>
 80076f4:	682b      	ldr	r3, [r5, #0]
 80076f6:	6826      	ldr	r6, [r4, #0]
 80076f8:	6961      	ldr	r1, [r4, #20]
 80076fa:	1d18      	adds	r0, r3, #4
 80076fc:	6028      	str	r0, [r5, #0]
 80076fe:	0635      	lsls	r5, r6, #24
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	d501      	bpl.n	8007708 <_printf_i+0x1cc>
 8007704:	6019      	str	r1, [r3, #0]
 8007706:	e002      	b.n	800770e <_printf_i+0x1d2>
 8007708:	0670      	lsls	r0, r6, #25
 800770a:	d5fb      	bpl.n	8007704 <_printf_i+0x1c8>
 800770c:	8019      	strh	r1, [r3, #0]
 800770e:	2300      	movs	r3, #0
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	4615      	mov	r5, r2
 8007714:	e7ba      	b.n	800768c <_printf_i+0x150>
 8007716:	682b      	ldr	r3, [r5, #0]
 8007718:	1d1a      	adds	r2, r3, #4
 800771a:	602a      	str	r2, [r5, #0]
 800771c:	681d      	ldr	r5, [r3, #0]
 800771e:	6862      	ldr	r2, [r4, #4]
 8007720:	2100      	movs	r1, #0
 8007722:	4628      	mov	r0, r5
 8007724:	f7f8 fd8c 	bl	8000240 <memchr>
 8007728:	b108      	cbz	r0, 800772e <_printf_i+0x1f2>
 800772a:	1b40      	subs	r0, r0, r5
 800772c:	6060      	str	r0, [r4, #4]
 800772e:	6863      	ldr	r3, [r4, #4]
 8007730:	6123      	str	r3, [r4, #16]
 8007732:	2300      	movs	r3, #0
 8007734:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007738:	e7a8      	b.n	800768c <_printf_i+0x150>
 800773a:	6923      	ldr	r3, [r4, #16]
 800773c:	462a      	mov	r2, r5
 800773e:	4649      	mov	r1, r9
 8007740:	4640      	mov	r0, r8
 8007742:	47d0      	blx	sl
 8007744:	3001      	adds	r0, #1
 8007746:	d0ab      	beq.n	80076a0 <_printf_i+0x164>
 8007748:	6823      	ldr	r3, [r4, #0]
 800774a:	079b      	lsls	r3, r3, #30
 800774c:	d413      	bmi.n	8007776 <_printf_i+0x23a>
 800774e:	68e0      	ldr	r0, [r4, #12]
 8007750:	9b03      	ldr	r3, [sp, #12]
 8007752:	4298      	cmp	r0, r3
 8007754:	bfb8      	it	lt
 8007756:	4618      	movlt	r0, r3
 8007758:	e7a4      	b.n	80076a4 <_printf_i+0x168>
 800775a:	2301      	movs	r3, #1
 800775c:	4632      	mov	r2, r6
 800775e:	4649      	mov	r1, r9
 8007760:	4640      	mov	r0, r8
 8007762:	47d0      	blx	sl
 8007764:	3001      	adds	r0, #1
 8007766:	d09b      	beq.n	80076a0 <_printf_i+0x164>
 8007768:	3501      	adds	r5, #1
 800776a:	68e3      	ldr	r3, [r4, #12]
 800776c:	9903      	ldr	r1, [sp, #12]
 800776e:	1a5b      	subs	r3, r3, r1
 8007770:	42ab      	cmp	r3, r5
 8007772:	dcf2      	bgt.n	800775a <_printf_i+0x21e>
 8007774:	e7eb      	b.n	800774e <_printf_i+0x212>
 8007776:	2500      	movs	r5, #0
 8007778:	f104 0619 	add.w	r6, r4, #25
 800777c:	e7f5      	b.n	800776a <_printf_i+0x22e>
 800777e:	bf00      	nop
 8007780:	08007e2d 	.word	0x08007e2d
 8007784:	08007e3e 	.word	0x08007e3e

08007788 <_sbrk_r>:
 8007788:	b538      	push	{r3, r4, r5, lr}
 800778a:	4d06      	ldr	r5, [pc, #24]	; (80077a4 <_sbrk_r+0x1c>)
 800778c:	2300      	movs	r3, #0
 800778e:	4604      	mov	r4, r0
 8007790:	4608      	mov	r0, r1
 8007792:	602b      	str	r3, [r5, #0]
 8007794:	f7f9 fcf2 	bl	800117c <_sbrk>
 8007798:	1c43      	adds	r3, r0, #1
 800779a:	d102      	bne.n	80077a2 <_sbrk_r+0x1a>
 800779c:	682b      	ldr	r3, [r5, #0]
 800779e:	b103      	cbz	r3, 80077a2 <_sbrk_r+0x1a>
 80077a0:	6023      	str	r3, [r4, #0]
 80077a2:	bd38      	pop	{r3, r4, r5, pc}
 80077a4:	20000328 	.word	0x20000328

080077a8 <__sread>:
 80077a8:	b510      	push	{r4, lr}
 80077aa:	460c      	mov	r4, r1
 80077ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b0:	f000 f900 	bl	80079b4 <_read_r>
 80077b4:	2800      	cmp	r0, #0
 80077b6:	bfab      	itete	ge
 80077b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80077ba:	89a3      	ldrhlt	r3, [r4, #12]
 80077bc:	181b      	addge	r3, r3, r0
 80077be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80077c2:	bfac      	ite	ge
 80077c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80077c6:	81a3      	strhlt	r3, [r4, #12]
 80077c8:	bd10      	pop	{r4, pc}

080077ca <__swrite>:
 80077ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077ce:	461f      	mov	r7, r3
 80077d0:	898b      	ldrh	r3, [r1, #12]
 80077d2:	05db      	lsls	r3, r3, #23
 80077d4:	4605      	mov	r5, r0
 80077d6:	460c      	mov	r4, r1
 80077d8:	4616      	mov	r6, r2
 80077da:	d505      	bpl.n	80077e8 <__swrite+0x1e>
 80077dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077e0:	2302      	movs	r3, #2
 80077e2:	2200      	movs	r2, #0
 80077e4:	f000 f870 	bl	80078c8 <_lseek_r>
 80077e8:	89a3      	ldrh	r3, [r4, #12]
 80077ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	4632      	mov	r2, r6
 80077f6:	463b      	mov	r3, r7
 80077f8:	4628      	mov	r0, r5
 80077fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80077fe:	f000 b817 	b.w	8007830 <_write_r>

08007802 <__sseek>:
 8007802:	b510      	push	{r4, lr}
 8007804:	460c      	mov	r4, r1
 8007806:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800780a:	f000 f85d 	bl	80078c8 <_lseek_r>
 800780e:	1c43      	adds	r3, r0, #1
 8007810:	89a3      	ldrh	r3, [r4, #12]
 8007812:	bf15      	itete	ne
 8007814:	6560      	strne	r0, [r4, #84]	; 0x54
 8007816:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800781a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800781e:	81a3      	strheq	r3, [r4, #12]
 8007820:	bf18      	it	ne
 8007822:	81a3      	strhne	r3, [r4, #12]
 8007824:	bd10      	pop	{r4, pc}

08007826 <__sclose>:
 8007826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800782a:	f000 b81b 	b.w	8007864 <_close_r>
	...

08007830 <_write_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4d07      	ldr	r5, [pc, #28]	; (8007850 <_write_r+0x20>)
 8007834:	4604      	mov	r4, r0
 8007836:	4608      	mov	r0, r1
 8007838:	4611      	mov	r1, r2
 800783a:	2200      	movs	r2, #0
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f7f9 fc4b 	bl	80010da <_write>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_write_r+0x1e>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_write_r+0x1e>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20000328 	.word	0x20000328

08007854 <abort>:
 8007854:	b508      	push	{r3, lr}
 8007856:	2006      	movs	r0, #6
 8007858:	f000 f8e6 	bl	8007a28 <raise>
 800785c:	2001      	movs	r0, #1
 800785e:	f7f9 fc15 	bl	800108c <_exit>
	...

08007864 <_close_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d06      	ldr	r5, [pc, #24]	; (8007880 <_close_r+0x1c>)
 8007868:	2300      	movs	r3, #0
 800786a:	4604      	mov	r4, r0
 800786c:	4608      	mov	r0, r1
 800786e:	602b      	str	r3, [r5, #0]
 8007870:	f7f9 fc4f 	bl	8001112 <_close>
 8007874:	1c43      	adds	r3, r0, #1
 8007876:	d102      	bne.n	800787e <_close_r+0x1a>
 8007878:	682b      	ldr	r3, [r5, #0]
 800787a:	b103      	cbz	r3, 800787e <_close_r+0x1a>
 800787c:	6023      	str	r3, [r4, #0]
 800787e:	bd38      	pop	{r3, r4, r5, pc}
 8007880:	20000328 	.word	0x20000328

08007884 <_fstat_r>:
 8007884:	b538      	push	{r3, r4, r5, lr}
 8007886:	4d07      	ldr	r5, [pc, #28]	; (80078a4 <_fstat_r+0x20>)
 8007888:	2300      	movs	r3, #0
 800788a:	4604      	mov	r4, r0
 800788c:	4608      	mov	r0, r1
 800788e:	4611      	mov	r1, r2
 8007890:	602b      	str	r3, [r5, #0]
 8007892:	f7f9 fc4a 	bl	800112a <_fstat>
 8007896:	1c43      	adds	r3, r0, #1
 8007898:	d102      	bne.n	80078a0 <_fstat_r+0x1c>
 800789a:	682b      	ldr	r3, [r5, #0]
 800789c:	b103      	cbz	r3, 80078a0 <_fstat_r+0x1c>
 800789e:	6023      	str	r3, [r4, #0]
 80078a0:	bd38      	pop	{r3, r4, r5, pc}
 80078a2:	bf00      	nop
 80078a4:	20000328 	.word	0x20000328

080078a8 <_isatty_r>:
 80078a8:	b538      	push	{r3, r4, r5, lr}
 80078aa:	4d06      	ldr	r5, [pc, #24]	; (80078c4 <_isatty_r+0x1c>)
 80078ac:	2300      	movs	r3, #0
 80078ae:	4604      	mov	r4, r0
 80078b0:	4608      	mov	r0, r1
 80078b2:	602b      	str	r3, [r5, #0]
 80078b4:	f7f9 fc49 	bl	800114a <_isatty>
 80078b8:	1c43      	adds	r3, r0, #1
 80078ba:	d102      	bne.n	80078c2 <_isatty_r+0x1a>
 80078bc:	682b      	ldr	r3, [r5, #0]
 80078be:	b103      	cbz	r3, 80078c2 <_isatty_r+0x1a>
 80078c0:	6023      	str	r3, [r4, #0]
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	20000328 	.word	0x20000328

080078c8 <_lseek_r>:
 80078c8:	b538      	push	{r3, r4, r5, lr}
 80078ca:	4d07      	ldr	r5, [pc, #28]	; (80078e8 <_lseek_r+0x20>)
 80078cc:	4604      	mov	r4, r0
 80078ce:	4608      	mov	r0, r1
 80078d0:	4611      	mov	r1, r2
 80078d2:	2200      	movs	r2, #0
 80078d4:	602a      	str	r2, [r5, #0]
 80078d6:	461a      	mov	r2, r3
 80078d8:	f7f9 fc42 	bl	8001160 <_lseek>
 80078dc:	1c43      	adds	r3, r0, #1
 80078de:	d102      	bne.n	80078e6 <_lseek_r+0x1e>
 80078e0:	682b      	ldr	r3, [r5, #0]
 80078e2:	b103      	cbz	r3, 80078e6 <_lseek_r+0x1e>
 80078e4:	6023      	str	r3, [r4, #0]
 80078e6:	bd38      	pop	{r3, r4, r5, pc}
 80078e8:	20000328 	.word	0x20000328

080078ec <memcpy>:
 80078ec:	440a      	add	r2, r1
 80078ee:	4291      	cmp	r1, r2
 80078f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80078f4:	d100      	bne.n	80078f8 <memcpy+0xc>
 80078f6:	4770      	bx	lr
 80078f8:	b510      	push	{r4, lr}
 80078fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007902:	4291      	cmp	r1, r2
 8007904:	d1f9      	bne.n	80078fa <memcpy+0xe>
 8007906:	bd10      	pop	{r4, pc}

08007908 <memmove>:
 8007908:	4288      	cmp	r0, r1
 800790a:	b510      	push	{r4, lr}
 800790c:	eb01 0402 	add.w	r4, r1, r2
 8007910:	d902      	bls.n	8007918 <memmove+0x10>
 8007912:	4284      	cmp	r4, r0
 8007914:	4623      	mov	r3, r4
 8007916:	d807      	bhi.n	8007928 <memmove+0x20>
 8007918:	1e43      	subs	r3, r0, #1
 800791a:	42a1      	cmp	r1, r4
 800791c:	d008      	beq.n	8007930 <memmove+0x28>
 800791e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007922:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007926:	e7f8      	b.n	800791a <memmove+0x12>
 8007928:	4402      	add	r2, r0
 800792a:	4601      	mov	r1, r0
 800792c:	428a      	cmp	r2, r1
 800792e:	d100      	bne.n	8007932 <memmove+0x2a>
 8007930:	bd10      	pop	{r4, pc}
 8007932:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007936:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800793a:	e7f7      	b.n	800792c <memmove+0x24>

0800793c <__malloc_lock>:
 800793c:	4801      	ldr	r0, [pc, #4]	; (8007944 <__malloc_lock+0x8>)
 800793e:	f7ff b989 	b.w	8006c54 <__retarget_lock_acquire_recursive>
 8007942:	bf00      	nop
 8007944:	2000031c 	.word	0x2000031c

08007948 <__malloc_unlock>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__malloc_unlock+0x8>)
 800794a:	f7ff b984 	b.w	8006c56 <__retarget_lock_release_recursive>
 800794e:	bf00      	nop
 8007950:	2000031c 	.word	0x2000031c

08007954 <_realloc_r>:
 8007954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007958:	4680      	mov	r8, r0
 800795a:	4614      	mov	r4, r2
 800795c:	460e      	mov	r6, r1
 800795e:	b921      	cbnz	r1, 800796a <_realloc_r+0x16>
 8007960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007964:	4611      	mov	r1, r2
 8007966:	f7ff ba51 	b.w	8006e0c <_malloc_r>
 800796a:	b92a      	cbnz	r2, 8007978 <_realloc_r+0x24>
 800796c:	f7ff f9e2 	bl	8006d34 <_free_r>
 8007970:	4625      	mov	r5, r4
 8007972:	4628      	mov	r0, r5
 8007974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007978:	f000 f872 	bl	8007a60 <_malloc_usable_size_r>
 800797c:	4284      	cmp	r4, r0
 800797e:	4607      	mov	r7, r0
 8007980:	d802      	bhi.n	8007988 <_realloc_r+0x34>
 8007982:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007986:	d812      	bhi.n	80079ae <_realloc_r+0x5a>
 8007988:	4621      	mov	r1, r4
 800798a:	4640      	mov	r0, r8
 800798c:	f7ff fa3e 	bl	8006e0c <_malloc_r>
 8007990:	4605      	mov	r5, r0
 8007992:	2800      	cmp	r0, #0
 8007994:	d0ed      	beq.n	8007972 <_realloc_r+0x1e>
 8007996:	42bc      	cmp	r4, r7
 8007998:	4622      	mov	r2, r4
 800799a:	4631      	mov	r1, r6
 800799c:	bf28      	it	cs
 800799e:	463a      	movcs	r2, r7
 80079a0:	f7ff ffa4 	bl	80078ec <memcpy>
 80079a4:	4631      	mov	r1, r6
 80079a6:	4640      	mov	r0, r8
 80079a8:	f7ff f9c4 	bl	8006d34 <_free_r>
 80079ac:	e7e1      	b.n	8007972 <_realloc_r+0x1e>
 80079ae:	4635      	mov	r5, r6
 80079b0:	e7df      	b.n	8007972 <_realloc_r+0x1e>
	...

080079b4 <_read_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d07      	ldr	r5, [pc, #28]	; (80079d4 <_read_r+0x20>)
 80079b8:	4604      	mov	r4, r0
 80079ba:	4608      	mov	r0, r1
 80079bc:	4611      	mov	r1, r2
 80079be:	2200      	movs	r2, #0
 80079c0:	602a      	str	r2, [r5, #0]
 80079c2:	461a      	mov	r2, r3
 80079c4:	f7f9 fb6c 	bl	80010a0 <_read>
 80079c8:	1c43      	adds	r3, r0, #1
 80079ca:	d102      	bne.n	80079d2 <_read_r+0x1e>
 80079cc:	682b      	ldr	r3, [r5, #0]
 80079ce:	b103      	cbz	r3, 80079d2 <_read_r+0x1e>
 80079d0:	6023      	str	r3, [r4, #0]
 80079d2:	bd38      	pop	{r3, r4, r5, pc}
 80079d4:	20000328 	.word	0x20000328

080079d8 <_raise_r>:
 80079d8:	291f      	cmp	r1, #31
 80079da:	b538      	push	{r3, r4, r5, lr}
 80079dc:	4604      	mov	r4, r0
 80079de:	460d      	mov	r5, r1
 80079e0:	d904      	bls.n	80079ec <_raise_r+0x14>
 80079e2:	2316      	movs	r3, #22
 80079e4:	6003      	str	r3, [r0, #0]
 80079e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80079ea:	bd38      	pop	{r3, r4, r5, pc}
 80079ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80079ee:	b112      	cbz	r2, 80079f6 <_raise_r+0x1e>
 80079f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80079f4:	b94b      	cbnz	r3, 8007a0a <_raise_r+0x32>
 80079f6:	4620      	mov	r0, r4
 80079f8:	f000 f830 	bl	8007a5c <_getpid_r>
 80079fc:	462a      	mov	r2, r5
 80079fe:	4601      	mov	r1, r0
 8007a00:	4620      	mov	r0, r4
 8007a02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a06:	f000 b817 	b.w	8007a38 <_kill_r>
 8007a0a:	2b01      	cmp	r3, #1
 8007a0c:	d00a      	beq.n	8007a24 <_raise_r+0x4c>
 8007a0e:	1c59      	adds	r1, r3, #1
 8007a10:	d103      	bne.n	8007a1a <_raise_r+0x42>
 8007a12:	2316      	movs	r3, #22
 8007a14:	6003      	str	r3, [r0, #0]
 8007a16:	2001      	movs	r0, #1
 8007a18:	e7e7      	b.n	80079ea <_raise_r+0x12>
 8007a1a:	2400      	movs	r4, #0
 8007a1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007a20:	4628      	mov	r0, r5
 8007a22:	4798      	blx	r3
 8007a24:	2000      	movs	r0, #0
 8007a26:	e7e0      	b.n	80079ea <_raise_r+0x12>

08007a28 <raise>:
 8007a28:	4b02      	ldr	r3, [pc, #8]	; (8007a34 <raise+0xc>)
 8007a2a:	4601      	mov	r1, r0
 8007a2c:	6818      	ldr	r0, [r3, #0]
 8007a2e:	f7ff bfd3 	b.w	80079d8 <_raise_r>
 8007a32:	bf00      	nop
 8007a34:	200000f4 	.word	0x200000f4

08007a38 <_kill_r>:
 8007a38:	b538      	push	{r3, r4, r5, lr}
 8007a3a:	4d07      	ldr	r5, [pc, #28]	; (8007a58 <_kill_r+0x20>)
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	4604      	mov	r4, r0
 8007a40:	4608      	mov	r0, r1
 8007a42:	4611      	mov	r1, r2
 8007a44:	602b      	str	r3, [r5, #0]
 8007a46:	f7f9 fb11 	bl	800106c <_kill>
 8007a4a:	1c43      	adds	r3, r0, #1
 8007a4c:	d102      	bne.n	8007a54 <_kill_r+0x1c>
 8007a4e:	682b      	ldr	r3, [r5, #0]
 8007a50:	b103      	cbz	r3, 8007a54 <_kill_r+0x1c>
 8007a52:	6023      	str	r3, [r4, #0]
 8007a54:	bd38      	pop	{r3, r4, r5, pc}
 8007a56:	bf00      	nop
 8007a58:	20000328 	.word	0x20000328

08007a5c <_getpid_r>:
 8007a5c:	f7f9 bafe 	b.w	800105c <_getpid>

08007a60 <_malloc_usable_size_r>:
 8007a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a64:	1f18      	subs	r0, r3, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfbc      	itt	lt
 8007a6a:	580b      	ldrlt	r3, [r1, r0]
 8007a6c:	18c0      	addlt	r0, r0, r3
 8007a6e:	4770      	bx	lr

08007a70 <_init>:
 8007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a72:	bf00      	nop
 8007a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a76:	bc08      	pop	{r3}
 8007a78:	469e      	mov	lr, r3
 8007a7a:	4770      	bx	lr

08007a7c <_fini>:
 8007a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7e:	bf00      	nop
 8007a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a82:	bc08      	pop	{r3}
 8007a84:	469e      	mov	lr, r3
 8007a86:	4770      	bx	lr
