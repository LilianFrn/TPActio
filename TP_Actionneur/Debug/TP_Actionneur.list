
TP_Actionneur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007674  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  08007854  08007854  00017854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b00  08007b00  00020140  2**0
                  CONTENTS
  4 .ARM          00000008  08007b00  08007b00  00017b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b08  08007b08  00020140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b0c  08007b0c  00017b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000140  20000000  08007b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20000140  08007c50  00020140  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000310  08007c50  00020310  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020140  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014730  00000000  00000000  00020170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002829  00000000  00000000  000348a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000370d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001038  00000000  00000000  00038200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027220  00000000  00000000  00039238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013abb  00000000  00000000  00060458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fd38c  00000000  00000000  00073f13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017129f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005450  00000000  00000000  001712f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000140 	.word	0x20000140
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800783c 	.word	0x0800783c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000144 	.word	0x20000144
 800021c:	0800783c 	.word	0x0800783c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b082      	sub	sp, #8
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 80005ec:	1d39      	adds	r1, r7, #4
 80005ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80005f2:	2201      	movs	r2, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	; (8000604 <__io_putchar+0x20>)
 80005f6:	f003 fe20 	bl	800423a <HAL_UART_Transmit>
	return chr;
 80005fa:	687b      	ldr	r3, [r7, #4]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	200001a8 	.word	0x200001a8

08000608 <PWN_start>:

void PWN_start(void){
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 800060c:	2100      	movs	r1, #0
 800060e:	4808      	ldr	r0, [pc, #32]	; (8000630 <PWN_start+0x28>)
 8000610:	f002 faca 	bl	8002ba8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4806      	ldr	r0, [pc, #24]	; (8000630 <PWN_start+0x28>)
 8000618:	f003 fb32 	bl	8003c80 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 800061c:	2104      	movs	r1, #4
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <PWN_start+0x28>)
 8000620:	f002 fac2 	bl	8002ba8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000624:	2104      	movs	r1, #4
 8000626:	4802      	ldr	r0, [pc, #8]	; (8000630 <PWN_start+0x28>)
 8000628:	f003 fb2a 	bl	8003c80 <HAL_TIMEx_PWMN_Start>
}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	2000015c 	.word	0x2000015c

08000634 <PWN_stop>:

void PWN_stop(void){
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000638:	2100      	movs	r1, #0
 800063a:	4808      	ldr	r0, [pc, #32]	; (800065c <PWN_stop+0x28>)
 800063c:	f002 fbc6 	bl	8002dcc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000640:	2100      	movs	r1, #0
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <PWN_stop+0x28>)
 8000644:	f003 fbde 	bl	8003e04 <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8000648:	2104      	movs	r1, #4
 800064a:	4804      	ldr	r0, [pc, #16]	; (800065c <PWN_stop+0x28>)
 800064c:	f002 fbbe 	bl	8002dcc <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000650:	2104      	movs	r1, #4
 8000652:	4802      	ldr	r0, [pc, #8]	; (800065c <PWN_stop+0x28>)
 8000654:	f003 fbd6 	bl	8003e04 <HAL_TIMEx_PWMN_Stop>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	2000015c 	.word	0x2000015c

08000660 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
	  PWN_start();
 800066a:	f7ff ffcd 	bl	8000608 <PWN_start>
	  printf("Bouton\r\n");
 800066e:	4803      	ldr	r0, [pc, #12]	; (800067c <HAL_GPIO_EXTI_Callback+0x1c>)
 8000670:	f005 feaa 	bl	80063c8 <puts>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	08007854 	.word	0x08007854

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000684:	f000 fd8d 	bl	80011a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000688:	f000 f81a 	bl	80006c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068c:	f000 f96e 	bl	800096c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000690:	f000 f862 	bl	8000758 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000694:	f000 f91e 	bl	80008d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */



  shell_start();
 8000698:	f000 f9fa 	bl	8000a90 <shell_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uartRxReceived) {
 800069c:	4b06      	ldr	r3, [pc, #24]	; (80006b8 <main+0x38>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <main+0x28>
		  shell_process();
 80006a4:	f000 fa2e 	bl	8000b04 <shell_process>
	  }
	  if (cmd_ready) {
 80006a8:	4b04      	ldr	r3, [pc, #16]	; (80006bc <main+0x3c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d0f5      	beq.n	800069c <main+0x1c>
		  shell_execute();
 80006b0:	f000 faa2 	bl	8000bf8 <shell_execute>
	  if (uartRxReceived) {
 80006b4:	e7f2      	b.n	800069c <main+0x1c>
 80006b6:	bf00      	nop
 80006b8:	20000238 	.word	0x20000238
 80006bc:	20000280 	.word	0x20000280

080006c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b094      	sub	sp, #80	; 0x50
 80006c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c6:	f107 0318 	add.w	r3, r7, #24
 80006ca:	2238      	movs	r2, #56	; 0x38
 80006cc:	2100      	movs	r1, #0
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 fe04 	bl	80062dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d4:	1d3b      	adds	r3, r7, #4
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80006e2:	2000      	movs	r0, #0
 80006e4:	f001 f972 	bl	80019cc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e8:	2302      	movs	r3, #2
 80006ea:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006f2:	2340      	movs	r3, #64	; 0x40
 80006f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006f6:	2302      	movs	r3, #2
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006fa:	2302      	movs	r3, #2
 80006fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80006fe:	2304      	movs	r3, #4
 8000700:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000702:	2355      	movs	r3, #85	; 0x55
 8000704:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000706:	2302      	movs	r3, #2
 8000708:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800070a:	2302      	movs	r3, #2
 800070c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800070e:	2302      	movs	r3, #2
 8000710:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000712:	f107 0318 	add.w	r3, r7, #24
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fa0c 	bl	8001b34 <HAL_RCC_OscConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000722:	f000 f9af 	bl	8000a84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000726:	230f      	movs	r3, #15
 8000728:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	2303      	movs	r3, #3
 800072c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000736:	2300      	movs	r3, #0
 8000738:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2104      	movs	r1, #4
 800073e:	4618      	mov	r0, r3
 8000740:	f001 fd10 	bl	8002164 <HAL_RCC_ClockConfig>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800074a:	f000 f99b 	bl	8000a84 <Error_Handler>
  }
}
 800074e:	bf00      	nop
 8000750:	3750      	adds	r7, #80	; 0x50
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
	...

08000758 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09c      	sub	sp, #112	; 0x70
 800075c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800075e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000762:	2200      	movs	r2, #0
 8000764:	601a      	str	r2, [r3, #0]
 8000766:	605a      	str	r2, [r3, #4]
 8000768:	609a      	str	r2, [r3, #8]
 800076a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800076c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000778:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]
 8000788:	615a      	str	r2, [r3, #20]
 800078a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800078c:	1d3b      	adds	r3, r7, #4
 800078e:	2234      	movs	r2, #52	; 0x34
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fda2 	bl	80062dc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000798:	4b4c      	ldr	r3, [pc, #304]	; (80008cc <MX_TIM1_Init+0x174>)
 800079a:	4a4d      	ldr	r2, [pc, #308]	; (80008d0 <MX_TIM1_Init+0x178>)
 800079c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800079e:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_TIM1_Init+0x174>)
 80007a0:	2209      	movs	r2, #9
 80007a2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <MX_TIM1_Init+0x174>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <MX_TIM1_Init+0x174>)
 80007ac:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80007b0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007b2:	4b46      	ldr	r3, [pc, #280]	; (80008cc <MX_TIM1_Init+0x174>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007b8:	4b44      	ldr	r3, [pc, #272]	; (80008cc <MX_TIM1_Init+0x174>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007be:	4b43      	ldr	r3, [pc, #268]	; (80008cc <MX_TIM1_Init+0x174>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007c4:	4841      	ldr	r0, [pc, #260]	; (80008cc <MX_TIM1_Init+0x174>)
 80007c6:	f002 f937 	bl	8002a38 <HAL_TIM_Base_Init>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80007d0:	f000 f958 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80007de:	4619      	mov	r1, r3
 80007e0:	483a      	ldr	r0, [pc, #232]	; (80008cc <MX_TIM1_Init+0x174>)
 80007e2:	f002 fca3 	bl	800312c <HAL_TIM_ConfigClockSource>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80007ec:	f000 f94a 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007f0:	4836      	ldr	r0, [pc, #216]	; (80008cc <MX_TIM1_Init+0x174>)
 80007f2:	f002 f978 	bl	8002ae6 <HAL_TIM_PWM_Init>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80007fc:	f000 f942 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000800:	2300      	movs	r3, #0
 8000802:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000804:	2300      	movs	r3, #0
 8000806:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800080c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000810:	4619      	mov	r1, r3
 8000812:	482e      	ldr	r0, [pc, #184]	; (80008cc <MX_TIM1_Init+0x174>)
 8000814:	f003 fb54 	bl	8003ec0 <HAL_TIMEx_MasterConfigSynchronization>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800081e:	f000 f931 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000822:	2360      	movs	r3, #96	; 0x60
 8000824:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 613;
 8000826:	f240 2365 	movw	r3, #613	; 0x265
 800082a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800082c:	2300      	movs	r3, #0
 800082e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000830:	2300      	movs	r3, #0
 8000832:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000834:	2300      	movs	r3, #0
 8000836:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800083c:	2300      	movs	r3, #0
 800083e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000840:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	4820      	ldr	r0, [pc, #128]	; (80008cc <MX_TIM1_Init+0x174>)
 800084a:	f002 fb5b 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8000854:	f000 f916 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000858:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800085c:	2204      	movs	r2, #4
 800085e:	4619      	mov	r1, r3
 8000860:	481a      	ldr	r0, [pc, #104]	; (80008cc <MX_TIM1_Init+0x174>)
 8000862:	f002 fb4f 	bl	8002f04 <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 800086c:	f000 f90a 	bl	8000a84 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000870:	2300      	movs	r3, #0
 8000872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 800087c:	23d2      	movs	r3, #210	; 0xd2
 800087e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800088e:	2300      	movs	r3, #0
 8000890:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000892:	2300      	movs	r3, #0
 8000894:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000896:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80008a4:	2300      	movs	r3, #0
 80008a6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80008a8:	1d3b      	adds	r3, r7, #4
 80008aa:	4619      	mov	r1, r3
 80008ac:	4807      	ldr	r0, [pc, #28]	; (80008cc <MX_TIM1_Init+0x174>)
 80008ae:	f003 fb9d 	bl	8003fec <HAL_TIMEx_ConfigBreakDeadTime>
 80008b2:	4603      	mov	r3, r0
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 80008b8:	f000 f8e4 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80008bc:	4803      	ldr	r0, [pc, #12]	; (80008cc <MX_TIM1_Init+0x174>)
 80008be:	f000 fa9b 	bl	8000df8 <HAL_TIM_MspPostInit>

}
 80008c2:	bf00      	nop
 80008c4:	3770      	adds	r7, #112	; 0x70
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	2000015c 	.word	0x2000015c
 80008d0:	40012c00 	.word	0x40012c00

080008d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008d8:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_USART2_UART_Init+0x90>)
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <MX_USART2_UART_Init+0x94>)
 80008dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008de:	4b21      	ldr	r3, [pc, #132]	; (8000964 <MX_USART2_UART_Init+0x90>)
 80008e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008e6:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_USART2_UART_Init+0x90>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008ec:	4b1d      	ldr	r3, [pc, #116]	; (8000964 <MX_USART2_UART_Init+0x90>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <MX_USART2_UART_Init+0x90>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008f8:	4b1a      	ldr	r3, [pc, #104]	; (8000964 <MX_USART2_UART_Init+0x90>)
 80008fa:	220c      	movs	r2, #12
 80008fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008fe:	4b19      	ldr	r3, [pc, #100]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000900:	2200      	movs	r2, #0
 8000902:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000904:	4b17      	ldr	r3, [pc, #92]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000906:	2200      	movs	r2, #0
 8000908:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090a:	4b16      	ldr	r3, [pc, #88]	; (8000964 <MX_USART2_UART_Init+0x90>)
 800090c:	2200      	movs	r2, #0
 800090e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000910:	4b14      	ldr	r3, [pc, #80]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000912:	2200      	movs	r2, #0
 8000914:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000918:	2200      	movs	r2, #0
 800091a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091c:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x90>)
 800091e:	f003 fc3c 	bl	800419a <HAL_UART_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 f8ac 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800092c:	2100      	movs	r1, #0
 800092e:	480d      	ldr	r0, [pc, #52]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000930:	f005 fbdf 	bl	80060f2 <HAL_UARTEx_SetTxFifoThreshold>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800093a:	f000 f8a3 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800093e:	2100      	movs	r1, #0
 8000940:	4808      	ldr	r0, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000942:	f005 fc14 	bl	800616e <HAL_UARTEx_SetRxFifoThreshold>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800094c:	f000 f89a 	bl	8000a84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_USART2_UART_Init+0x90>)
 8000952:	f005 fb95 	bl	8006080 <HAL_UARTEx_DisableFifoMode>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800095c:	f000 f892 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200001a8 	.word	0x200001a8
 8000968:	40004400 	.word	0x40004400

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 030c 	add.w	r3, r7, #12
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	4b33      	ldr	r3, [pc, #204]	; (8000a50 <MX_GPIO_Init+0xe4>)
 8000984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000986:	4a32      	ldr	r2, [pc, #200]	; (8000a50 <MX_GPIO_Init+0xe4>)
 8000988:	f043 0304 	orr.w	r3, r3, #4
 800098c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800098e:	4b30      	ldr	r3, [pc, #192]	; (8000a50 <MX_GPIO_Init+0xe4>)
 8000990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000992:	f003 0304 	and.w	r3, r3, #4
 8000996:	60bb      	str	r3, [r7, #8]
 8000998:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800099a:	4b2d      	ldr	r3, [pc, #180]	; (8000a50 <MX_GPIO_Init+0xe4>)
 800099c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800099e:	4a2c      	ldr	r2, [pc, #176]	; (8000a50 <MX_GPIO_Init+0xe4>)
 80009a0:	f043 0320 	orr.w	r3, r3, #32
 80009a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a6:	4b2a      	ldr	r3, [pc, #168]	; (8000a50 <MX_GPIO_Init+0xe4>)
 80009a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009aa:	f003 0320 	and.w	r3, r3, #32
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_GPIO_Init+0xe4>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <MX_GPIO_Init+0xe4>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xe4>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	603b      	str	r3, [r7, #0]
 80009c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2108      	movs	r1, #8
 80009ce:	4821      	ldr	r0, [pc, #132]	; (8000a54 <MX_GPIO_Init+0xe8>)
 80009d0:	f000 ffcc 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	2120      	movs	r1, #32
 80009d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009dc:	f000 ffc6 	bl	800196c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009e4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4817      	ldr	r0, [pc, #92]	; (8000a54 <MX_GPIO_Init+0xe8>)
 80009f8:	f000 fe36 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 80009fc:	2308      	movs	r3, #8
 80009fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a0c:	f107 030c 	add.w	r3, r7, #12
 8000a10:	4619      	mov	r1, r3
 8000a12:	4810      	ldr	r0, [pc, #64]	; (8000a54 <MX_GPIO_Init+0xe8>)
 8000a14:	f000 fe28 	bl	8001668 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000a18:	2320      	movs	r3, #32
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1c:	2301      	movs	r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a24:	2300      	movs	r3, #0
 8000a26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f000 fe19 	bl	8001668 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2100      	movs	r1, #0
 8000a3a:	2028      	movs	r0, #40	; 0x28
 8000a3c:	f000 fd1f 	bl	800147e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a40:	2028      	movs	r0, #40	; 0x28
 8000a42:	f000 fd36 	bl	80014b2 <HAL_NVIC_EnableIRQ>

}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40021000 	.word	0x40021000
 8000a54:	48000800 	.word	0x48000800

08000a58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_UART_RxCpltCallback+0x20>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000a66:	2201      	movs	r2, #1
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <HAL_UART_RxCpltCallback+0x24>)
 8000a6a:	4805      	ldr	r0, [pc, #20]	; (8000a80 <HAL_UART_RxCpltCallback+0x28>)
 8000a6c:	f003 fc7c 	bl	8004368 <HAL_UART_Receive_IT>
}
 8000a70:	bf00      	nop
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000238 	.word	0x20000238
 8000a7c:	2000023c 	.word	0x2000023c
 8000a80:	200001a8 	.word	0x200001a8

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <shell_start>:
static int 			idx_cmd;
static char* 		argv[MAX_ARGS];
static int		 	argc = 0;
static char*		token;

void shell_start(void) {
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8000a94:	2224      	movs	r2, #36	; 0x24
 8000a96:	2100      	movs	r1, #0
 8000a98:	4813      	ldr	r0, [pc, #76]	; (8000ae8 <shell_start+0x58>)
 8000a9a:	f005 fc1f 	bl	80062dc <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 8000a9e:	2240      	movs	r2, #64	; 0x40
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4812      	ldr	r0, [pc, #72]	; (8000aec <shell_start+0x5c>)
 8000aa4:	f005 fc1a 	bl	80062dc <memset>
 8000aa8:	4b11      	ldr	r3, [pc, #68]	; (8000af0 <shell_start+0x60>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 8000aae:	2240      	movs	r2, #64	; 0x40
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	4810      	ldr	r0, [pc, #64]	; (8000af4 <shell_start+0x64>)
 8000ab4:	f005 fc12 	bl	80062dc <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000ab8:	2201      	movs	r2, #1
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <shell_start+0x60>)
 8000abc:	480e      	ldr	r0, [pc, #56]	; (8000af8 <shell_start+0x68>)
 8000abe:	f003 fc53 	bl	8004368 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8000ac2:	200a      	movs	r0, #10
 8000ac4:	f000 fbde 	bl	8001284 <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8000ac8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000acc:	2266      	movs	r2, #102	; 0x66
 8000ace:	490b      	ldr	r1, [pc, #44]	; (8000afc <shell_start+0x6c>)
 8000ad0:	4809      	ldr	r0, [pc, #36]	; (8000af8 <shell_start+0x68>)
 8000ad2:	f003 fbb2 	bl	800423a <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ada:	2218      	movs	r2, #24
 8000adc:	4908      	ldr	r1, [pc, #32]	; (8000b00 <shell_start+0x70>)
 8000ade:	4806      	ldr	r0, [pc, #24]	; (8000af8 <shell_start+0x68>)
 8000ae0:	f003 fbab 	bl	800423a <HAL_UART_Transmit>
}
 8000ae4:	bf00      	nop
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	200002cc 	.word	0x200002cc
 8000aec:	20000284 	.word	0x20000284
 8000af0:	2000023c 	.word	0x2000023c
 8000af4:	20000240 	.word	0x20000240
 8000af8:	200001a8 	.word	0x200001a8
 8000afc:	20000018 	.word	0x20000018
 8000b00:	20000000 	.word	0x20000000

08000b04 <shell_process>:

void shell_process(void) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
	switch(uartRxBuffer[0]){
 8000b08:	4b30      	ldr	r3, [pc, #192]	; (8000bcc <shell_process+0xc8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	2b0d      	cmp	r3, #13
 8000b0e:	d002      	beq.n	8000b16 <shell_process+0x12>
 8000b10:	2b7f      	cmp	r3, #127	; 0x7f
 8000b12:	d035      	beq.n	8000b80 <shell_process+0x7c>
 8000b14:	e044      	b.n	8000ba0 <shell_process+0x9c>
		// Nouvelle ligne, instruction à traiter
		case ASCII_CR:
		  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	492c      	ldr	r1, [pc, #176]	; (8000bd0 <shell_process+0xcc>)
 8000b1e:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <shell_process+0xd0>)
 8000b20:	f003 fb8b 	bl	800423a <HAL_UART_Transmit>
		  cmdBuffer[idx_cmd] = '\0';
 8000b24:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <shell_process+0xd4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a2c      	ldr	r2, [pc, #176]	; (8000bdc <shell_process+0xd8>)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	54d1      	strb	r1, [r2, r3]
		  argc = 0;
 8000b2e:	4b2c      	ldr	r3, [pc, #176]	; (8000be0 <shell_process+0xdc>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	601a      	str	r2, [r3, #0]
		  token = strtok(cmdBuffer, " ");
 8000b34:	492b      	ldr	r1, [pc, #172]	; (8000be4 <shell_process+0xe0>)
 8000b36:	4829      	ldr	r0, [pc, #164]	; (8000bdc <shell_process+0xd8>)
 8000b38:	f005 fc6e 	bl	8006418 <strtok>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b29      	ldr	r3, [pc, #164]	; (8000be8 <shell_process+0xe4>)
 8000b42:	601a      	str	r2, [r3, #0]
		  while(token!=NULL){
 8000b44:	e011      	b.n	8000b6a <shell_process+0x66>
			  argv[argc++] = token;
 8000b46:	4b26      	ldr	r3, [pc, #152]	; (8000be0 <shell_process+0xdc>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1c5a      	adds	r2, r3, #1
 8000b4c:	4924      	ldr	r1, [pc, #144]	; (8000be0 <shell_process+0xdc>)
 8000b4e:	600a      	str	r2, [r1, #0]
 8000b50:	4a25      	ldr	r2, [pc, #148]	; (8000be8 <shell_process+0xe4>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	4925      	ldr	r1, [pc, #148]	; (8000bec <shell_process+0xe8>)
 8000b56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  token = strtok(NULL, " ");
 8000b5a:	4922      	ldr	r1, [pc, #136]	; (8000be4 <shell_process+0xe0>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f005 fc5b 	bl	8006418 <strtok>
 8000b62:	4603      	mov	r3, r0
 8000b64:	461a      	mov	r2, r3
 8000b66:	4b20      	ldr	r3, [pc, #128]	; (8000be8 <shell_process+0xe4>)
 8000b68:	601a      	str	r2, [r3, #0]
		  while(token!=NULL){
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <shell_process+0xe4>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1e9      	bne.n	8000b46 <shell_process+0x42>
		  }

		  idx_cmd = 0;
 8000b72:	4b19      	ldr	r3, [pc, #100]	; (8000bd8 <shell_process+0xd4>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
		  cmd_ready = 1;
 8000b78:	4b1d      	ldr	r3, [pc, #116]	; (8000bf0 <shell_process+0xec>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	601a      	str	r2, [r3, #0]
		  break;
 8000b7e:	e01f      	b.n	8000bc0 <shell_process+0xbc>
		// Suppression du dernier caractère
		case ASCII_DEL:
		  cmdBuffer[idx_cmd--] = '\0';
 8000b80:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <shell_process+0xd4>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	1e5a      	subs	r2, r3, #1
 8000b86:	4914      	ldr	r1, [pc, #80]	; (8000bd8 <shell_process+0xd4>)
 8000b88:	600a      	str	r2, [r1, #0]
 8000b8a:	4a14      	ldr	r2, [pc, #80]	; (8000bdc <shell_process+0xd8>)
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000b90:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b94:	2201      	movs	r2, #1
 8000b96:	490d      	ldr	r1, [pc, #52]	; (8000bcc <shell_process+0xc8>)
 8000b98:	480e      	ldr	r0, [pc, #56]	; (8000bd4 <shell_process+0xd0>)
 8000b9a:	f003 fb4e 	bl	800423a <HAL_UART_Transmit>
		  break;
 8000b9e:	e00f      	b.n	8000bc0 <shell_process+0xbc>
		// Nouveau caractère
		default:
		  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000ba0:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <shell_process+0xd4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	490c      	ldr	r1, [pc, #48]	; (8000bd8 <shell_process+0xd4>)
 8000ba8:	600a      	str	r2, [r1, #0]
 8000baa:	4a08      	ldr	r2, [pc, #32]	; (8000bcc <shell_process+0xc8>)
 8000bac:	7811      	ldrb	r1, [r2, #0]
 8000bae:	4a0b      	ldr	r2, [pc, #44]	; (8000bdc <shell_process+0xd8>)
 8000bb0:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000bb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4904      	ldr	r1, [pc, #16]	; (8000bcc <shell_process+0xc8>)
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <shell_process+0xd0>)
 8000bbc:	f003 fb3d 	bl	800423a <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8000bc0:	4b0c      	ldr	r3, [pc, #48]	; (8000bf4 <shell_process+0xf0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2000023c 	.word	0x2000023c
 8000bd0:	20000080 	.word	0x20000080
 8000bd4:	200001a8 	.word	0x200001a8
 8000bd8:	200002c8 	.word	0x200002c8
 8000bdc:	20000284 	.word	0x20000284
 8000be0:	200002f0 	.word	0x200002f0
 8000be4:	08007934 	.word	0x08007934
 8000be8:	200002f4 	.word	0x200002f4
 8000bec:	200002cc 	.word	0x200002cc
 8000bf0:	20000280 	.word	0x20000280
 8000bf4:	20000238 	.word	0x20000238

08000bf8 <shell_execute>:

void shell_execute(void) {
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b084      	sub	sp, #16
 8000bfc:	af02      	add	r7, sp, #8
	/* HELP command */
	if(strcmp(argv[0],com[0])==0)
 8000bfe:	4b4f      	ldr	r3, [pc, #316]	; (8000d3c <shell_execute+0x144>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a4f      	ldr	r2, [pc, #316]	; (8000d40 <shell_execute+0x148>)
 8000c04:	6812      	ldr	r2, [r2, #0]
 8000c06:	4611      	mov	r1, r2
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f7ff fb09 	bl	8000220 <strcmp>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d117      	bne.n	8000c44 <shell_execute+0x4c>
	{
	  sprintf(uartTxBuffer,"Commands :\r\n%s\r\n%s\r\n%s\r\n%s\r\n", com[0], com[1], com[2], com[3]);
 8000c14:	4b4a      	ldr	r3, [pc, #296]	; (8000d40 <shell_execute+0x148>)
 8000c16:	6819      	ldr	r1, [r3, #0]
 8000c18:	4b49      	ldr	r3, [pc, #292]	; (8000d40 <shell_execute+0x148>)
 8000c1a:	6858      	ldr	r0, [r3, #4]
 8000c1c:	4b48      	ldr	r3, [pc, #288]	; (8000d40 <shell_execute+0x148>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	4a47      	ldr	r2, [pc, #284]	; (8000d40 <shell_execute+0x148>)
 8000c22:	68d2      	ldr	r2, [r2, #12]
 8000c24:	9201      	str	r2, [sp, #4]
 8000c26:	9300      	str	r3, [sp, #0]
 8000c28:	4603      	mov	r3, r0
 8000c2a:	460a      	mov	r2, r1
 8000c2c:	4945      	ldr	r1, [pc, #276]	; (8000d44 <shell_execute+0x14c>)
 8000c2e:	4846      	ldr	r0, [pc, #280]	; (8000d48 <shell_execute+0x150>)
 8000c30:	f005 fbd2 	bl	80063d8 <siprintf>
	  HAL_UART_Transmit(&huart2, uartTxBuffer, UART_TX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000c34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c38:	2240      	movs	r2, #64	; 0x40
 8000c3a:	4943      	ldr	r1, [pc, #268]	; (8000d48 <shell_execute+0x150>)
 8000c3c:	4843      	ldr	r0, [pc, #268]	; (8000d4c <shell_execute+0x154>)
 8000c3e:	f003 fafc 	bl	800423a <HAL_UART_Transmit>
 8000c42:	e06c      	b.n	8000d1e <shell_execute+0x126>
	}
	/* PINOUT command */
	else if(strcmp(argv[0],com[1])==0)
 8000c44:	4b3d      	ldr	r3, [pc, #244]	; (8000d3c <shell_execute+0x144>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a3d      	ldr	r2, [pc, #244]	; (8000d40 <shell_execute+0x148>)
 8000c4a:	6852      	ldr	r2, [r2, #4]
 8000c4c:	4611      	mov	r1, r2
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f7ff fae6 	bl	8000220 <strcmp>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d11e      	bne.n	8000c98 <shell_execute+0xa0>
	{
	  for (int i = 0; i < 10; i++) {
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	607b      	str	r3, [r7, #4]
 8000c5e:	e017      	b.n	8000c90 <shell_execute+0x98>
		  size = sprintf(uartTxBuffer,"%s\r\n", pins[i]);
 8000c60:	4a3b      	ldr	r2, [pc, #236]	; (8000d50 <shell_execute+0x158>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	461a      	mov	r2, r3
 8000c6a:	493a      	ldr	r1, [pc, #232]	; (8000d54 <shell_execute+0x15c>)
 8000c6c:	4836      	ldr	r0, [pc, #216]	; (8000d48 <shell_execute+0x150>)
 8000c6e:	f005 fbb3 	bl	80063d8 <siprintf>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a38      	ldr	r2, [pc, #224]	; (8000d58 <shell_execute+0x160>)
 8000c76:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8000c78:	4b37      	ldr	r3, [pc, #220]	; (8000d58 <shell_execute+0x160>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	b29a      	uxth	r2, r3
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c82:	4931      	ldr	r1, [pc, #196]	; (8000d48 <shell_execute+0x150>)
 8000c84:	4831      	ldr	r0, [pc, #196]	; (8000d4c <shell_execute+0x154>)
 8000c86:	f003 fad8 	bl	800423a <HAL_UART_Transmit>
	  for (int i = 0; i < 10; i++) {
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	3301      	adds	r3, #1
 8000c8e:	607b      	str	r3, [r7, #4]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	2b09      	cmp	r3, #9
 8000c94:	dde4      	ble.n	8000c60 <shell_execute+0x68>
 8000c96:	e042      	b.n	8000d1e <shell_execute+0x126>
	  }
	}
	/* START command */
	else if(strcmp(argv[0],com[2])==0)
 8000c98:	4b28      	ldr	r3, [pc, #160]	; (8000d3c <shell_execute+0x144>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a28      	ldr	r2, [pc, #160]	; (8000d40 <shell_execute+0x148>)
 8000c9e:	6892      	ldr	r2, [r2, #8]
 8000ca0:	4611      	mov	r1, r2
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f7ff fabc 	bl	8000220 <strcmp>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d112      	bne.n	8000cd4 <shell_execute+0xdc>
	{
		PWN_start();
 8000cae:	f7ff fcab 	bl	8000608 <PWN_start>
		size = sprintf(uartTxBuffer,"PWN ON\r\n");
 8000cb2:	492a      	ldr	r1, [pc, #168]	; (8000d5c <shell_execute+0x164>)
 8000cb4:	4824      	ldr	r0, [pc, #144]	; (8000d48 <shell_execute+0x150>)
 8000cb6:	f005 fb8f 	bl	80063d8 <siprintf>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	4a26      	ldr	r2, [pc, #152]	; (8000d58 <shell_execute+0x160>)
 8000cbe:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8000cc0:	4b25      	ldr	r3, [pc, #148]	; (8000d58 <shell_execute+0x160>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	491f      	ldr	r1, [pc, #124]	; (8000d48 <shell_execute+0x150>)
 8000ccc:	481f      	ldr	r0, [pc, #124]	; (8000d4c <shell_execute+0x154>)
 8000cce:	f003 fab4 	bl	800423a <HAL_UART_Transmit>
 8000cd2:	e024      	b.n	8000d1e <shell_execute+0x126>
	}
	/* STOP command */
	else if(strcmp(argv[0],com[3])==0)
 8000cd4:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <shell_execute+0x144>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a19      	ldr	r2, [pc, #100]	; (8000d40 <shell_execute+0x148>)
 8000cda:	68d2      	ldr	r2, [r2, #12]
 8000cdc:	4611      	mov	r1, r2
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff fa9e 	bl	8000220 <strcmp>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d112      	bne.n	8000d10 <shell_execute+0x118>
	{
		PWN_stop();
 8000cea:	f7ff fca3 	bl	8000634 <PWN_stop>
		size = sprintf(uartTxBuffer,"PWN OFF\r\n");
 8000cee:	491c      	ldr	r1, [pc, #112]	; (8000d60 <shell_execute+0x168>)
 8000cf0:	4815      	ldr	r0, [pc, #84]	; (8000d48 <shell_execute+0x150>)
 8000cf2:	f005 fb71 	bl	80063d8 <siprintf>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	4a17      	ldr	r2, [pc, #92]	; (8000d58 <shell_execute+0x160>)
 8000cfa:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8000cfc:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <shell_execute+0x160>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	b29a      	uxth	r2, r3
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d06:	4910      	ldr	r1, [pc, #64]	; (8000d48 <shell_execute+0x150>)
 8000d08:	4810      	ldr	r0, [pc, #64]	; (8000d4c <shell_execute+0x154>)
 8000d0a:	f003 fa96 	bl	800423a <HAL_UART_Transmit>
 8000d0e:	e006      	b.n	8000d1e <shell_execute+0x126>
	}
	else{
	  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000d10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d14:	2214      	movs	r2, #20
 8000d16:	4913      	ldr	r1, [pc, #76]	; (8000d64 <shell_execute+0x16c>)
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <shell_execute+0x154>)
 8000d1a:	f003 fa8e 	bl	800423a <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000d1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d22:	2218      	movs	r2, #24
 8000d24:	4910      	ldr	r1, [pc, #64]	; (8000d68 <shell_execute+0x170>)
 8000d26:	4809      	ldr	r0, [pc, #36]	; (8000d4c <shell_execute+0x154>)
 8000d28:	f003 fa87 	bl	800423a <HAL_UART_Transmit>
	cmd_ready = 0;
 8000d2c:	4b0f      	ldr	r3, [pc, #60]	; (8000d6c <shell_execute+0x174>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200002cc 	.word	0x200002cc
 8000d40:	20000098 	.word	0x20000098
 8000d44:	08007938 	.word	0x08007938
 8000d48:	20000240 	.word	0x20000240
 8000d4c:	200001a8 	.word	0x200001a8
 8000d50:	200000a8 	.word	0x200000a8
 8000d54:	08007958 	.word	0x08007958
 8000d58:	200002c4 	.word	0x200002c4
 8000d5c:	08007960 	.word	0x08007960
 8000d60:	0800796c 	.word	0x0800796c
 8000d64:	20000084 	.word	0x20000084
 8000d68:	20000000 	.word	0x20000000
 8000d6c:	20000280 	.word	0x20000280

08000d70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d76:	4b0f      	ldr	r3, [pc, #60]	; (8000db4 <HAL_MspInit+0x44>)
 8000d78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_MspInit+0x44>)
 8000d7c:	f043 0301 	orr.w	r3, r3, #1
 8000d80:	6613      	str	r3, [r2, #96]	; 0x60
 8000d82:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_MspInit+0x44>)
 8000d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d86:	f003 0301 	and.w	r3, r3, #1
 8000d8a:	607b      	str	r3, [r7, #4]
 8000d8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8e:	4b09      	ldr	r3, [pc, #36]	; (8000db4 <HAL_MspInit+0x44>)
 8000d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_MspInit+0x44>)
 8000d94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d98:	6593      	str	r3, [r2, #88]	; 0x58
 8000d9a:	4b06      	ldr	r3, [pc, #24]	; (8000db4 <HAL_MspInit+0x44>)
 8000d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000da2:	603b      	str	r3, [r7, #0]
 8000da4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000da6:	f000 feb5 	bl	8001b14 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000daa:	bf00      	nop
 8000dac:	3708      	adds	r7, #8
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40021000 	.word	0x40021000

08000db8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b085      	sub	sp, #20
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_TIM_Base_MspInit+0x38>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d10b      	bne.n	8000de2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000dca:	4b0a      	ldr	r3, [pc, #40]	; (8000df4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a09      	ldr	r2, [pc, #36]	; (8000df4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_TIM_Base_MspInit+0x3c>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dde:	60fb      	str	r3, [r7, #12]
 8000de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000de2:	bf00      	nop
 8000de4:	3714      	adds	r7, #20
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40012c00 	.word	0x40012c00
 8000df4:	40021000 	.word	0x40021000

08000df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b088      	sub	sp, #32
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 030c 	add.w	r3, r7, #12
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <HAL_TIM_MspPostInit+0x68>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d11d      	bne.n	8000e56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e1a:	4b12      	ldr	r3, [pc, #72]	; (8000e64 <HAL_TIM_MspPostInit+0x6c>)
 8000e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e1e:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <HAL_TIM_MspPostInit+0x6c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e26:	4b0f      	ldr	r3, [pc, #60]	; (8000e64 <HAL_TIM_MspPostInit+0x6c>)
 8000e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8000e32:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8000e36:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000e44:	2306      	movs	r3, #6
 8000e46:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e48:	f107 030c 	add.w	r3, r7, #12
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e52:	f000 fc09 	bl	8001668 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000e56:	bf00      	nop
 8000e58:	3720      	adds	r7, #32
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	40021000 	.word	0x40021000

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b09e      	sub	sp, #120	; 0x78
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e80:	f107 0310 	add.w	r3, r7, #16
 8000e84:	2254      	movs	r2, #84	; 0x54
 8000e86:	2100      	movs	r1, #0
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f005 fa27 	bl	80062dc <memset>
  if(huart->Instance==USART2)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a23      	ldr	r2, [pc, #140]	; (8000f20 <HAL_UART_MspInit+0xb8>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d13e      	bne.n	8000f16 <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ea0:	f107 0310 	add.w	r3, r7, #16
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f001 fb79 	bl	800259c <HAL_RCCEx_PeriphCLKConfig>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000eb0:	f7ff fde8 	bl	8000a84 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000eb4:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eb8:	4a1a      	ldr	r2, [pc, #104]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebe:	6593      	str	r3, [r2, #88]	; 0x58
 8000ec0:	4b18      	ldr	r3, [pc, #96]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ecc:	4b15      	ldr	r3, [pc, #84]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed0:	4a14      	ldr	r2, [pc, #80]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000ed2:	f043 0301 	orr.w	r3, r3, #1
 8000ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ed8:	4b12      	ldr	r3, [pc, #72]	; (8000f24 <HAL_UART_MspInit+0xbc>)
 8000eda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000edc:	f003 0301 	and.w	r3, r3, #1
 8000ee0:	60bb      	str	r3, [r7, #8]
 8000ee2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ee4:	230c      	movs	r3, #12
 8000ee6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee8:	2302      	movs	r3, #2
 8000eea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ef4:	2307      	movs	r3, #7
 8000ef6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000efc:	4619      	mov	r1, r3
 8000efe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f02:	f000 fbb1 	bl	8001668 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2100      	movs	r1, #0
 8000f0a:	2026      	movs	r0, #38	; 0x26
 8000f0c:	f000 fab7 	bl	800147e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f10:	2026      	movs	r0, #38	; 0x26
 8000f12:	f000 face 	bl	80014b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f16:	bf00      	nop
 8000f18:	3778      	adds	r7, #120	; 0x78
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40004400 	.word	0x40004400
 8000f24:	40021000 	.word	0x40021000

08000f28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f2c:	e7fe      	b.n	8000f2c <NMI_Handler+0x4>

08000f2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f2e:	b480      	push	{r7}
 8000f30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f32:	e7fe      	b.n	8000f32 <HardFault_Handler+0x4>

08000f34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <MemManage_Handler+0x4>

08000f3a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3e:	e7fe      	b.n	8000f3e <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	e7fe      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f46:	b480      	push	{r7}
 8000f48:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f52:	4770      	bx	lr

08000f54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b480      	push	{r7}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f74:	f000 f968 	bl	8001248 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f78:	bf00      	nop
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f80:	4802      	ldr	r0, [pc, #8]	; (8000f8c <USART2_IRQHandler+0x10>)
 8000f82:	f003 fa47 	bl	8004414 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	200001a8 	.word	0x200001a8

08000f90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000f94:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f98:	f000 fd00 	bl	800199c <HAL_GPIO_EXTI_IRQHandler>

  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f9c:	bf00      	nop
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	af00      	add	r7, sp, #0
	return 1;
 8000fa4:	2301      	movs	r3, #1
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <_kill>:

int _kill(int pid, int sig)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
 8000fb8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000fba:	f005 f965 	bl	8006288 <__errno>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2216      	movs	r2, #22
 8000fc2:	601a      	str	r2, [r3, #0]
	return -1;
 8000fc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <_exit>:

void _exit (int status)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000fd8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ffe7 	bl	8000fb0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000fe2:	e7fe      	b.n	8000fe2 <_exit+0x12>

08000fe4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b086      	sub	sp, #24
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
 8000ff4:	e00a      	b.n	800100c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ff6:	f3af 8000 	nop.w
 8000ffa:	4601      	mov	r1, r0
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	60ba      	str	r2, [r7, #8]
 8001002:	b2ca      	uxtb	r2, r1
 8001004:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	3301      	adds	r3, #1
 800100a:	617b      	str	r3, [r7, #20]
 800100c:	697a      	ldr	r2, [r7, #20]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	429a      	cmp	r2, r3
 8001012:	dbf0      	blt.n	8000ff6 <_read+0x12>
	}

return len;
 8001014:	687b      	ldr	r3, [r7, #4]
}
 8001016:	4618      	mov	r0, r3
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b086      	sub	sp, #24
 8001022:	af00      	add	r7, sp, #0
 8001024:	60f8      	str	r0, [r7, #12]
 8001026:	60b9      	str	r1, [r7, #8]
 8001028:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102a:	2300      	movs	r3, #0
 800102c:	617b      	str	r3, [r7, #20]
 800102e:	e009      	b.n	8001044 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001030:	68bb      	ldr	r3, [r7, #8]
 8001032:	1c5a      	adds	r2, r3, #1
 8001034:	60ba      	str	r2, [r7, #8]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fad3 	bl	80005e4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800103e:	697b      	ldr	r3, [r7, #20]
 8001040:	3301      	adds	r3, #1
 8001042:	617b      	str	r3, [r7, #20]
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	429a      	cmp	r2, r3
 800104a:	dbf1      	blt.n	8001030 <_write+0x12>
	}
	return len;
 800104c:	687b      	ldr	r3, [r7, #4]
}
 800104e:	4618      	mov	r0, r3
 8001050:	3718      	adds	r7, #24
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <_close>:

int _close(int file)
{
 8001056:	b480      	push	{r7}
 8001058:	b083      	sub	sp, #12
 800105a:	af00      	add	r7, sp, #0
 800105c:	6078      	str	r0, [r7, #4]
	return -1;
 800105e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001062:	4618      	mov	r0, r3
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr

0800106e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800106e:	b480      	push	{r7}
 8001070:	b083      	sub	sp, #12
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800107e:	605a      	str	r2, [r3, #4]
	return 0;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_isatty>:

int _isatty(int file)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
	return 1;
 8001096:	2301      	movs	r3, #1
}
 8001098:	4618      	mov	r0, r3
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	60f8      	str	r0, [r7, #12]
 80010ac:	60b9      	str	r1, [r7, #8]
 80010ae:	607a      	str	r2, [r7, #4]
	return 0;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
	...

080010c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b086      	sub	sp, #24
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010c8:	4a14      	ldr	r2, [pc, #80]	; (800111c <_sbrk+0x5c>)
 80010ca:	4b15      	ldr	r3, [pc, #84]	; (8001120 <_sbrk+0x60>)
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010d0:	697b      	ldr	r3, [r7, #20]
 80010d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <_sbrk+0x64>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d102      	bne.n	80010e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <_sbrk+0x64>)
 80010de:	4a12      	ldr	r2, [pc, #72]	; (8001128 <_sbrk+0x68>)
 80010e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010e2:	4b10      	ldr	r3, [pc, #64]	; (8001124 <_sbrk+0x64>)
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4413      	add	r3, r2
 80010ea:	693a      	ldr	r2, [r7, #16]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d207      	bcs.n	8001100 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010f0:	f005 f8ca 	bl	8006288 <__errno>
 80010f4:	4603      	mov	r3, r0
 80010f6:	220c      	movs	r2, #12
 80010f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010fe:	e009      	b.n	8001114 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <_sbrk+0x64>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001106:	4b07      	ldr	r3, [pc, #28]	; (8001124 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	4a05      	ldr	r2, [pc, #20]	; (8001124 <_sbrk+0x64>)
 8001110:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	4618      	mov	r0, r3
 8001116:	3718      	adds	r7, #24
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20020000 	.word	0x20020000
 8001120:	00000400 	.word	0x00000400
 8001124:	200002f8 	.word	0x200002f8
 8001128:	20000310 	.word	0x20000310

0800112c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	; (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001150:	480d      	ldr	r0, [pc, #52]	; (8001188 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001152:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001154:	480d      	ldr	r0, [pc, #52]	; (800118c <LoopForever+0x6>)
  ldr r1, =_edata
 8001156:	490e      	ldr	r1, [pc, #56]	; (8001190 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001158:	4a0e      	ldr	r2, [pc, #56]	; (8001194 <LoopForever+0xe>)
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800115c:	e002      	b.n	8001164 <LoopCopyDataInit>

0800115e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001160:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001162:	3304      	adds	r3, #4

08001164 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001164:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001166:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001168:	d3f9      	bcc.n	800115e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116a:	4a0b      	ldr	r2, [pc, #44]	; (8001198 <LoopForever+0x12>)
  ldr r4, =_ebss
 800116c:	4c0b      	ldr	r4, [pc, #44]	; (800119c <LoopForever+0x16>)
  movs r3, #0
 800116e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001170:	e001      	b.n	8001176 <LoopFillZerobss>

08001172 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001172:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001174:	3204      	adds	r2, #4

08001176 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001176:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001178:	d3fb      	bcc.n	8001172 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800117a:	f7ff ffd7 	bl	800112c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 f889 	bl	8006294 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001182:	f7ff fa7d 	bl	8000680 <main>

08001186 <LoopForever>:

LoopForever:
    b LoopForever
 8001186:	e7fe      	b.n	8001186 <LoopForever>
  ldr   r0, =_estack
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	20000140 	.word	0x20000140
  ldr r2, =_sidata
 8001194:	08007b10 	.word	0x08007b10
  ldr r2, =_sbss
 8001198:	20000140 	.word	0x20000140
  ldr r4, =_ebss
 800119c:	20000310 	.word	0x20000310

080011a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC1_2_IRQHandler>

080011a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b082      	sub	sp, #8
 80011a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ac:	2003      	movs	r0, #3
 80011ae:	f000 f95b 	bl	8001468 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011b2:	2000      	movs	r0, #0
 80011b4:	f000 f80e 	bl	80011d4 <HAL_InitTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d002      	beq.n	80011c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e001      	b.n	80011c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011c4:	f7ff fdd4 	bl	8000d70 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011c8:	79fb      	ldrb	r3, [r7, #7]

}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
	...

080011d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011dc:	2300      	movs	r3, #0
 80011de:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <HAL_InitTick+0x68>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d022      	beq.n	800122e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011e8:	4b15      	ldr	r3, [pc, #84]	; (8001240 <HAL_InitTick+0x6c>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_InitTick+0x68>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80011f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fc:	4618      	mov	r0, r3
 80011fe:	f000 f966 	bl	80014ce <HAL_SYSTICK_Config>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d10f      	bne.n	8001228 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b0f      	cmp	r3, #15
 800120c:	d809      	bhi.n	8001222 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800120e:	2200      	movs	r2, #0
 8001210:	6879      	ldr	r1, [r7, #4]
 8001212:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001216:	f000 f932 	bl	800147e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800121a:	4a0a      	ldr	r2, [pc, #40]	; (8001244 <HAL_InitTick+0x70>)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	6013      	str	r3, [r2, #0]
 8001220:	e007      	b.n	8001232 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	73fb      	strb	r3, [r7, #15]
 8001226:	e004      	b.n	8001232 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	73fb      	strb	r3, [r7, #15]
 800122c:	e001      	b.n	8001232 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001232:	7bfb      	ldrb	r3, [r7, #15]
}
 8001234:	4618      	mov	r0, r3
 8001236:	3710      	adds	r7, #16
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	200000d8 	.word	0x200000d8
 8001240:	200000d0 	.word	0x200000d0
 8001244:	200000d4 	.word	0x200000d4

08001248 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800124c:	4b05      	ldr	r3, [pc, #20]	; (8001264 <HAL_IncTick+0x1c>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	4b05      	ldr	r3, [pc, #20]	; (8001268 <HAL_IncTick+0x20>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4413      	add	r3, r2
 8001256:	4a03      	ldr	r2, [pc, #12]	; (8001264 <HAL_IncTick+0x1c>)
 8001258:	6013      	str	r3, [r2, #0]
}
 800125a:	bf00      	nop
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	200002fc 	.word	0x200002fc
 8001268:	200000d8 	.word	0x200000d8

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	200002fc 	.word	0x200002fc

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800129c:	d004      	beq.n	80012a8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <HAL_Delay+0x40>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	68fa      	ldr	r2, [r7, #12]
 80012a4:	4413      	add	r3, r2
 80012a6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012a8:	bf00      	nop
 80012aa:	f7ff ffdf 	bl	800126c <HAL_GetTick>
 80012ae:	4602      	mov	r2, r0
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	68fa      	ldr	r2, [r7, #12]
 80012b6:	429a      	cmp	r2, r3
 80012b8:	d8f7      	bhi.n	80012aa <HAL_Delay+0x26>
  {
  }
}
 80012ba:	bf00      	nop
 80012bc:	bf00      	nop
 80012be:	3710      	adds	r7, #16
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	200000d8 	.word	0x200000d8

080012c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b085      	sub	sp, #20
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	f003 0307 	and.w	r3, r3, #7
 80012d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012de:	68ba      	ldr	r2, [r7, #8]
 80012e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e4:	4013      	ands	r3, r2
 80012e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x44>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001314:	4b04      	ldr	r3, [pc, #16]	; (8001328 <__NVIC_GetPriorityGrouping+0x18>)
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	0a1b      	lsrs	r3, r3, #8
 800131a:	f003 0307 	and.w	r3, r3, #7
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000ed00 	.word	0xe000ed00

0800132c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133a:	2b00      	cmp	r3, #0
 800133c:	db0b      	blt.n	8001356 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800133e:	79fb      	ldrb	r3, [r7, #7]
 8001340:	f003 021f 	and.w	r2, r3, #31
 8001344:	4907      	ldr	r1, [pc, #28]	; (8001364 <__NVIC_EnableIRQ+0x38>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	095b      	lsrs	r3, r3, #5
 800134c:	2001      	movs	r0, #1
 800134e:	fa00 f202 	lsl.w	r2, r0, r2
 8001352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	e000e100 	.word	0xe000e100

08001368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	4603      	mov	r3, r0
 8001370:	6039      	str	r1, [r7, #0]
 8001372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001378:	2b00      	cmp	r3, #0
 800137a:	db0a      	blt.n	8001392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	b2da      	uxtb	r2, r3
 8001380:	490c      	ldr	r1, [pc, #48]	; (80013b4 <__NVIC_SetPriority+0x4c>)
 8001382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001386:	0112      	lsls	r2, r2, #4
 8001388:	b2d2      	uxtb	r2, r2
 800138a:	440b      	add	r3, r1
 800138c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001390:	e00a      	b.n	80013a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	b2da      	uxtb	r2, r3
 8001396:	4908      	ldr	r1, [pc, #32]	; (80013b8 <__NVIC_SetPriority+0x50>)
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f003 030f 	and.w	r3, r3, #15
 800139e:	3b04      	subs	r3, #4
 80013a0:	0112      	lsls	r2, r2, #4
 80013a2:	b2d2      	uxtb	r2, r2
 80013a4:	440b      	add	r3, r1
 80013a6:	761a      	strb	r2, [r3, #24]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000e100 	.word	0xe000e100
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013bc:	b480      	push	{r7}
 80013be:	b089      	sub	sp, #36	; 0x24
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	60f8      	str	r0, [r7, #12]
 80013c4:	60b9      	str	r1, [r7, #8]
 80013c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	f003 0307 	and.w	r3, r3, #7
 80013ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d0:	69fb      	ldr	r3, [r7, #28]
 80013d2:	f1c3 0307 	rsb	r3, r3, #7
 80013d6:	2b04      	cmp	r3, #4
 80013d8:	bf28      	it	cs
 80013da:	2304      	movcs	r3, #4
 80013dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	3304      	adds	r3, #4
 80013e2:	2b06      	cmp	r3, #6
 80013e4:	d902      	bls.n	80013ec <NVIC_EncodePriority+0x30>
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3b03      	subs	r3, #3
 80013ea:	e000      	b.n	80013ee <NVIC_EncodePriority+0x32>
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	401a      	ands	r2, r3
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	fa01 f303 	lsl.w	r3, r1, r3
 800140e:	43d9      	mvns	r1, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	4313      	orrs	r3, r2
         );
}
 8001416:	4618      	mov	r0, r3
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	3b01      	subs	r3, #1
 8001430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001434:	d301      	bcc.n	800143a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001436:	2301      	movs	r3, #1
 8001438:	e00f      	b.n	800145a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800143a:	4a0a      	ldr	r2, [pc, #40]	; (8001464 <SysTick_Config+0x40>)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	3b01      	subs	r3, #1
 8001440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001442:	210f      	movs	r1, #15
 8001444:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001448:	f7ff ff8e 	bl	8001368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144c:	4b05      	ldr	r3, [pc, #20]	; (8001464 <SysTick_Config+0x40>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001452:	4b04      	ldr	r3, [pc, #16]	; (8001464 <SysTick_Config+0x40>)
 8001454:	2207      	movs	r2, #7
 8001456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001458:	2300      	movs	r3, #0
}
 800145a:	4618      	mov	r0, r3
 800145c:	3708      	adds	r7, #8
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	e000e010 	.word	0xe000e010

08001468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001470:	6878      	ldr	r0, [r7, #4]
 8001472:	f7ff ff29 	bl	80012c8 <__NVIC_SetPriorityGrouping>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b086      	sub	sp, #24
 8001482:	af00      	add	r7, sp, #0
 8001484:	4603      	mov	r3, r0
 8001486:	60b9      	str	r1, [r7, #8]
 8001488:	607a      	str	r2, [r7, #4]
 800148a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148c:	f7ff ff40 	bl	8001310 <__NVIC_GetPriorityGrouping>
 8001490:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	68b9      	ldr	r1, [r7, #8]
 8001496:	6978      	ldr	r0, [r7, #20]
 8001498:	f7ff ff90 	bl	80013bc <NVIC_EncodePriority>
 800149c:	4602      	mov	r2, r0
 800149e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a2:	4611      	mov	r1, r2
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff5f 	bl	8001368 <__NVIC_SetPriority>
}
 80014aa:	bf00      	nop
 80014ac:	3718      	adds	r7, #24
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b082      	sub	sp, #8
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	4603      	mov	r3, r0
 80014ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ff33 	bl	800132c <__NVIC_EnableIRQ>
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f7ff ffa4 	bl	8001424 <SysTick_Config>
 80014dc:	4603      	mov	r3, r0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014ee:	2300      	movs	r3, #0
 80014f0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d005      	beq.n	800150a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2204      	movs	r2, #4
 8001502:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001504:	2301      	movs	r3, #1
 8001506:	73fb      	strb	r3, [r7, #15]
 8001508:	e037      	b.n	800157a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 020e 	bic.w	r2, r2, #14
 8001518:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001528:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153e:	f003 021f 	and.w	r2, r3, #31
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	2101      	movs	r1, #1
 8001548:	fa01 f202 	lsl.w	r2, r1, r2
 800154c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001556:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800155c:	2b00      	cmp	r3, #0
 800155e:	d00c      	beq.n	800157a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800156a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800156e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001578:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	2200      	movs	r2, #0
 8001586:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800158a:	7bfb      	ldrb	r3, [r7, #15]
}
 800158c:	4618      	mov	r0, r3
 800158e:	3714      	adds	r7, #20
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr

08001598 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015a0:	2300      	movs	r3, #0
 80015a2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d00d      	beq.n	80015cc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2204      	movs	r2, #4
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80015c6:	2301      	movs	r3, #1
 80015c8:	73fb      	strb	r3, [r7, #15]
 80015ca:	e047      	b.n	800165c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681a      	ldr	r2, [r3, #0]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f022 020e 	bic.w	r2, r2, #14
 80015da:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 0201 	bic.w	r2, r2, #1
 80015ea:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	2101      	movs	r1, #1
 800160a:	fa01 f202 	lsl.w	r2, r1, r2
 800160e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001614:	687a      	ldr	r2, [r7, #4]
 8001616:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001618:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00c      	beq.n	800163c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001630:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800163a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2201      	movs	r2, #1
 8001640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2200      	movs	r2, #0
 8001648:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001650:	2b00      	cmp	r3, #0
 8001652:	d003      	beq.n	800165c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	4798      	blx	r3
    }
  }
  return status;
 800165c:	7bfb      	ldrb	r3, [r7, #15]
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
	...

08001668 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001668:	b480      	push	{r7}
 800166a:	b087      	sub	sp, #28
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
 8001670:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001676:	e15a      	b.n	800192e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	681a      	ldr	r2, [r3, #0]
 800167c:	2101      	movs	r1, #1
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	fa01 f303 	lsl.w	r3, r1, r3
 8001684:	4013      	ands	r3, r2
 8001686:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 814c 	beq.w	8001928 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f003 0303 	and.w	r3, r3, #3
 8001698:	2b01      	cmp	r3, #1
 800169a:	d005      	beq.n	80016a8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d130      	bne.n	800170a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	689b      	ldr	r3, [r3, #8]
 80016ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	fa02 f303 	lsl.w	r3, r2, r3
 80016b8:	43db      	mvns	r3, r3
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	4013      	ands	r3, r2
 80016be:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	68da      	ldr	r2, [r3, #12]
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	fa02 f303 	lsl.w	r3, r2, r3
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	4313      	orrs	r3, r2
 80016d0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	693a      	ldr	r2, [r7, #16]
 80016d6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016de:	2201      	movs	r2, #1
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	693a      	ldr	r2, [r7, #16]
 80016ea:	4013      	ands	r3, r2
 80016ec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	091b      	lsrs	r3, r3, #4
 80016f4:	f003 0201 	and.w	r2, r3, #1
 80016f8:	697b      	ldr	r3, [r7, #20]
 80016fa:	fa02 f303 	lsl.w	r3, r2, r3
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	4313      	orrs	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	2b03      	cmp	r3, #3
 8001714:	d017      	beq.n	8001746 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	68db      	ldr	r3, [r3, #12]
 800171a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	2203      	movs	r2, #3
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43db      	mvns	r3, r3
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	4313      	orrs	r3, r2
 800173e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d123      	bne.n	800179a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	08da      	lsrs	r2, r3, #3
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	3208      	adds	r2, #8
 800175a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800175e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	f003 0307 	and.w	r3, r3, #7
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	220f      	movs	r2, #15
 800176a:	fa02 f303 	lsl.w	r3, r2, r3
 800176e:	43db      	mvns	r3, r3
 8001770:	693a      	ldr	r2, [r7, #16]
 8001772:	4013      	ands	r3, r2
 8001774:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	691a      	ldr	r2, [r3, #16]
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	009b      	lsls	r3, r3, #2
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	08da      	lsrs	r2, r3, #3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	3208      	adds	r2, #8
 8001794:	6939      	ldr	r1, [r7, #16]
 8001796:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	2203      	movs	r2, #3
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	693a      	ldr	r2, [r7, #16]
 80017ae:	4013      	ands	r3, r2
 80017b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f003 0203 	and.w	r2, r3, #3
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	005b      	lsls	r3, r3, #1
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	693a      	ldr	r2, [r7, #16]
 80017cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	f000 80a6 	beq.w	8001928 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017dc:	4b5b      	ldr	r3, [pc, #364]	; (800194c <HAL_GPIO_Init+0x2e4>)
 80017de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017e0:	4a5a      	ldr	r2, [pc, #360]	; (800194c <HAL_GPIO_Init+0x2e4>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6613      	str	r3, [r2, #96]	; 0x60
 80017e8:	4b58      	ldr	r3, [pc, #352]	; (800194c <HAL_GPIO_Init+0x2e4>)
 80017ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017f4:	4a56      	ldr	r2, [pc, #344]	; (8001950 <HAL_GPIO_Init+0x2e8>)
 80017f6:	697b      	ldr	r3, [r7, #20]
 80017f8:	089b      	lsrs	r3, r3, #2
 80017fa:	3302      	adds	r3, #2
 80017fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001800:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f003 0303 	and.w	r3, r3, #3
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	220f      	movs	r2, #15
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	693a      	ldr	r2, [r7, #16]
 8001814:	4013      	ands	r3, r2
 8001816:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800181e:	d01f      	beq.n	8001860 <HAL_GPIO_Init+0x1f8>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	4a4c      	ldr	r2, [pc, #304]	; (8001954 <HAL_GPIO_Init+0x2ec>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d019      	beq.n	800185c <HAL_GPIO_Init+0x1f4>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a4b      	ldr	r2, [pc, #300]	; (8001958 <HAL_GPIO_Init+0x2f0>)
 800182c:	4293      	cmp	r3, r2
 800182e:	d013      	beq.n	8001858 <HAL_GPIO_Init+0x1f0>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	4a4a      	ldr	r2, [pc, #296]	; (800195c <HAL_GPIO_Init+0x2f4>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d00d      	beq.n	8001854 <HAL_GPIO_Init+0x1ec>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	4a49      	ldr	r2, [pc, #292]	; (8001960 <HAL_GPIO_Init+0x2f8>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d007      	beq.n	8001850 <HAL_GPIO_Init+0x1e8>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	4a48      	ldr	r2, [pc, #288]	; (8001964 <HAL_GPIO_Init+0x2fc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d101      	bne.n	800184c <HAL_GPIO_Init+0x1e4>
 8001848:	2305      	movs	r3, #5
 800184a:	e00a      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 800184c:	2306      	movs	r3, #6
 800184e:	e008      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001850:	2304      	movs	r3, #4
 8001852:	e006      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001854:	2303      	movs	r3, #3
 8001856:	e004      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001858:	2302      	movs	r3, #2
 800185a:	e002      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 800185c:	2301      	movs	r3, #1
 800185e:	e000      	b.n	8001862 <HAL_GPIO_Init+0x1fa>
 8001860:	2300      	movs	r3, #0
 8001862:	697a      	ldr	r2, [r7, #20]
 8001864:	f002 0203 	and.w	r2, r2, #3
 8001868:	0092      	lsls	r2, r2, #2
 800186a:	4093      	lsls	r3, r2
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	4313      	orrs	r3, r2
 8001870:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001872:	4937      	ldr	r1, [pc, #220]	; (8001950 <HAL_GPIO_Init+0x2e8>)
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	3302      	adds	r3, #2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001880:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_GPIO_Init+0x300>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800189c:	693a      	ldr	r2, [r7, #16]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018a4:	4a30      	ldr	r2, [pc, #192]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018a6:	693b      	ldr	r3, [r7, #16]
 80018a8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018aa:	4b2f      	ldr	r3, [pc, #188]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018ac:	68db      	ldr	r3, [r3, #12]
 80018ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	4313      	orrs	r3, r2
 80018cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018ce:	4a26      	ldr	r2, [pc, #152]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80018d4:	4b24      	ldr	r3, [pc, #144]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	4313      	orrs	r3, r2
 80018f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80018f8:	4a1b      	ldr	r2, [pc, #108]	; (8001968 <HAL_GPIO_Init+0x300>)
 80018fa:	693b      	ldr	r3, [r7, #16]
 80018fc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <HAL_GPIO_Init+0x300>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001916:	2b00      	cmp	r3, #0
 8001918:	d003      	beq.n	8001922 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4313      	orrs	r3, r2
 8001920:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001922:	4a11      	ldr	r2, [pc, #68]	; (8001968 <HAL_GPIO_Init+0x300>)
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	3301      	adds	r3, #1
 800192c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	fa22 f303 	lsr.w	r3, r2, r3
 8001938:	2b00      	cmp	r3, #0
 800193a:	f47f ae9d 	bne.w	8001678 <HAL_GPIO_Init+0x10>
  }
}
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	371c      	adds	r7, #28
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	40021000 	.word	0x40021000
 8001950:	40010000 	.word	0x40010000
 8001954:	48000400 	.word	0x48000400
 8001958:	48000800 	.word	0x48000800
 800195c:	48000c00 	.word	0x48000c00
 8001960:	48001000 	.word	0x48001000
 8001964:	48001400 	.word	0x48001400
 8001968:	40010400 	.word	0x40010400

0800196c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	807b      	strh	r3, [r7, #2]
 8001978:	4613      	mov	r3, r2
 800197a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800197c:	787b      	ldrb	r3, [r7, #1]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001982:	887a      	ldrh	r2, [r7, #2]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001988:	e002      	b.n	8001990 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800198a:	887a      	ldrh	r2, [r7, #2]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019a6:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	4013      	ands	r3, r2
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d006      	beq.n	80019c0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019b2:	4a05      	ldr	r2, [pc, #20]	; (80019c8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019b4:	88fb      	ldrh	r3, [r7, #6]
 80019b6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019b8:	88fb      	ldrh	r3, [r7, #6]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7fe fe50 	bl	8000660 <HAL_GPIO_EXTI_Callback>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3708      	adds	r7, #8
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40010400 	.word	0x40010400

080019cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d141      	bne.n	8001a5e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80019da:	4b4b      	ldr	r3, [pc, #300]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80019e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80019e6:	d131      	bne.n	8001a4c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80019e8:	4b47      	ldr	r3, [pc, #284]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80019ee:	4a46      	ldr	r2, [pc, #280]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80019f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f8:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a00:	4a41      	ldr	r2, [pc, #260]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a06:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a08:	4b40      	ldr	r3, [pc, #256]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2232      	movs	r2, #50	; 0x32
 8001a0e:	fb02 f303 	mul.w	r3, r2, r3
 8001a12:	4a3f      	ldr	r2, [pc, #252]	; (8001b10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001a14:	fba2 2303 	umull	r2, r3, r2, r3
 8001a18:	0c9b      	lsrs	r3, r3, #18
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a1e:	e002      	b.n	8001a26 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a26:	4b38      	ldr	r3, [pc, #224]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a28:	695b      	ldr	r3, [r3, #20]
 8001a2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a32:	d102      	bne.n	8001a3a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d1f2      	bne.n	8001a20 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a3c:	695b      	ldr	r3, [r3, #20]
 8001a3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a46:	d158      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e057      	b.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a4c:	4b2e      	ldr	r3, [pc, #184]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a52:	4a2d      	ldr	r2, [pc, #180]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a54:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001a58:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001a5c:	e04d      	b.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d141      	bne.n	8001aea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a66:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a72:	d131      	bne.n	8001ad8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001a7a:	4a23      	ldr	r2, [pc, #140]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a80:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a8c:	4a1e      	ldr	r2, [pc, #120]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001a8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a92:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2232      	movs	r2, #50	; 0x32
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	4a1c      	ldr	r2, [pc, #112]	; (8001b10 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa4:	0c9b      	lsrs	r3, r3, #18
 8001aa6:	3301      	adds	r3, #1
 8001aa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001aaa:	e002      	b.n	8001ab2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001aba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001abe:	d102      	bne.n	8001ac6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d1f2      	bne.n	8001aac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	695b      	ldr	r3, [r3, #20]
 8001aca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ad2:	d112      	bne.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e011      	b.n	8001afc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad8:	4b0b      	ldr	r3, [pc, #44]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ada:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ade:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ae4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001ae8:	e007      	b.n	8001afa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aea:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001af8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001afa:	2300      	movs	r3, #0
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	200000d0 	.word	0x200000d0
 8001b10:	431bde83 	.word	0x431bde83

08001b14 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001b18:	4b05      	ldr	r3, [pc, #20]	; (8001b30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	4a04      	ldr	r2, [pc, #16]	; (8001b30 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001b1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b22:	6093      	str	r3, [r2, #8]
}
 8001b24:	bf00      	nop
 8001b26:	46bd      	mov	sp, r7
 8001b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2c:	4770      	bx	lr
 8001b2e:	bf00      	nop
 8001b30:	40007000 	.word	0x40007000

08001b34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b088      	sub	sp, #32
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d101      	bne.n	8001b46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e306      	b.n	8002154 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d075      	beq.n	8001c3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b52:	4b97      	ldr	r3, [pc, #604]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 030c 	and.w	r3, r3, #12
 8001b5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b5c:	4b94      	ldr	r3, [pc, #592]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f003 0303 	and.w	r3, r3, #3
 8001b64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b0c      	cmp	r3, #12
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_OscConfig+0x3e>
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d002      	beq.n	8001b78 <HAL_RCC_OscConfig+0x44>
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	2b08      	cmp	r3, #8
 8001b76:	d10b      	bne.n	8001b90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b78:	4b8d      	ldr	r3, [pc, #564]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d05b      	beq.n	8001c3c <HAL_RCC_OscConfig+0x108>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d157      	bne.n	8001c3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e2e1      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b98:	d106      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x74>
 8001b9a:	4b85      	ldr	r3, [pc, #532]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a84      	ldr	r2, [pc, #528]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001ba0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ba4:	6013      	str	r3, [r2, #0]
 8001ba6:	e01d      	b.n	8001be4 <HAL_RCC_OscConfig+0xb0>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x98>
 8001bb2:	4b7f      	ldr	r3, [pc, #508]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a7e      	ldr	r2, [pc, #504]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bb8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	4b7c      	ldr	r3, [pc, #496]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a7b      	ldr	r2, [pc, #492]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc8:	6013      	str	r3, [r2, #0]
 8001bca:	e00b      	b.n	8001be4 <HAL_RCC_OscConfig+0xb0>
 8001bcc:	4b78      	ldr	r3, [pc, #480]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4a77      	ldr	r2, [pc, #476]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd6:	6013      	str	r3, [r2, #0]
 8001bd8:	4b75      	ldr	r3, [pc, #468]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a74      	ldr	r2, [pc, #464]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001bde:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001be2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d013      	beq.n	8001c14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7ff fb3e 	bl	800126c <HAL_GetTick>
 8001bf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bf2:	e008      	b.n	8001c06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf4:	f7ff fb3a 	bl	800126c <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	2b64      	cmp	r3, #100	; 0x64
 8001c00:	d901      	bls.n	8001c06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e2a6      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c06:	4b6a      	ldr	r3, [pc, #424]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d0f0      	beq.n	8001bf4 <HAL_RCC_OscConfig+0xc0>
 8001c12:	e014      	b.n	8001c3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c14:	f7ff fb2a 	bl	800126c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c1c:	f7ff fb26 	bl	800126c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b64      	cmp	r3, #100	; 0x64
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e292      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0xe8>
 8001c3a:	e000      	b.n	8001c3e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d075      	beq.n	8001d36 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c4a:	4b59      	ldr	r3, [pc, #356]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	f003 030c 	and.w	r3, r3, #12
 8001c52:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c54:	4b56      	ldr	r3, [pc, #344]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001c5e:	69bb      	ldr	r3, [r7, #24]
 8001c60:	2b0c      	cmp	r3, #12
 8001c62:	d102      	bne.n	8001c6a <HAL_RCC_OscConfig+0x136>
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d002      	beq.n	8001c70 <HAL_RCC_OscConfig+0x13c>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b04      	cmp	r3, #4
 8001c6e:	d11f      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c70:	4b4f      	ldr	r3, [pc, #316]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <HAL_RCC_OscConfig+0x154>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d101      	bne.n	8001c88 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e265      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c88:	4b49      	ldr	r3, [pc, #292]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	691b      	ldr	r3, [r3, #16]
 8001c94:	061b      	lsls	r3, r3, #24
 8001c96:	4946      	ldr	r1, [pc, #280]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c9c:	4b45      	ldr	r3, [pc, #276]	; (8001db4 <HAL_RCC_OscConfig+0x280>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fa97 	bl	80011d4 <HAL_InitTick>
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d043      	beq.n	8001d34 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e251      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	68db      	ldr	r3, [r3, #12]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d023      	beq.n	8001d00 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001cb8:	4b3d      	ldr	r3, [pc, #244]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a3c      	ldr	r2, [pc, #240]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc4:	f7ff fad2 	bl	800126c <HAL_GetTick>
 8001cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cca:	e008      	b.n	8001cde <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ccc:	f7ff face 	bl	800126c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	693b      	ldr	r3, [r7, #16]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	d901      	bls.n	8001cde <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	e23a      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cde:	4b34      	ldr	r3, [pc, #208]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d0f0      	beq.n	8001ccc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cea:	4b31      	ldr	r3, [pc, #196]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	691b      	ldr	r3, [r3, #16]
 8001cf6:	061b      	lsls	r3, r3, #24
 8001cf8:	492d      	ldr	r1, [pc, #180]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	604b      	str	r3, [r1, #4]
 8001cfe:	e01a      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001d00:	4b2b      	ldr	r3, [pc, #172]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a2a      	ldr	r2, [pc, #168]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d0c:	f7ff faae 	bl	800126c <HAL_GetTick>
 8001d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d12:	e008      	b.n	8001d26 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d14:	f7ff faaa 	bl	800126c <HAL_GetTick>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	2b02      	cmp	r3, #2
 8001d20:	d901      	bls.n	8001d26 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001d22:	2303      	movs	r3, #3
 8001d24:	e216      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001d26:	4b22      	ldr	r3, [pc, #136]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d1f0      	bne.n	8001d14 <HAL_RCC_OscConfig+0x1e0>
 8001d32:	e000      	b.n	8001d36 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 0308 	and.w	r3, r3, #8
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d041      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d01c      	beq.n	8001d84 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d4a:	4b19      	ldr	r3, [pc, #100]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d50:	4a17      	ldr	r2, [pc, #92]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d5a:	f7ff fa87 	bl	800126c <HAL_GetTick>
 8001d5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d60:	e008      	b.n	8001d74 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d62:	f7ff fa83 	bl	800126c <HAL_GetTick>
 8001d66:	4602      	mov	r2, r0
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	2b02      	cmp	r3, #2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e1ef      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d74:	4b0e      	ldr	r3, [pc, #56]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0ef      	beq.n	8001d62 <HAL_RCC_OscConfig+0x22e>
 8001d82:	e020      	b.n	8001dc6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d84:	4b0a      	ldr	r3, [pc, #40]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d8a:	4a09      	ldr	r2, [pc, #36]	; (8001db0 <HAL_RCC_OscConfig+0x27c>)
 8001d8c:	f023 0301 	bic.w	r3, r3, #1
 8001d90:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d94:	f7ff fa6a 	bl	800126c <HAL_GetTick>
 8001d98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d9a:	e00d      	b.n	8001db8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d9c:	f7ff fa66 	bl	800126c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b02      	cmp	r3, #2
 8001da8:	d906      	bls.n	8001db8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e1d2      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000
 8001db4:	200000d4 	.word	0x200000d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001db8:	4b8c      	ldr	r3, [pc, #560]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001dba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ea      	bne.n	8001d9c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f003 0304 	and.w	r3, r3, #4
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f000 80a6 	beq.w	8001f20 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001dd8:	4b84      	ldr	r3, [pc, #528]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d101      	bne.n	8001de8 <HAL_RCC_OscConfig+0x2b4>
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <HAL_RCC_OscConfig+0x2b6>
 8001de8:	2300      	movs	r3, #0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00d      	beq.n	8001e0a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dee:	4b7f      	ldr	r3, [pc, #508]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df2:	4a7e      	ldr	r2, [pc, #504]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001df8:	6593      	str	r3, [r2, #88]	; 0x58
 8001dfa:	4b7c      	ldr	r3, [pc, #496]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e02:	60fb      	str	r3, [r7, #12]
 8001e04:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001e06:	2301      	movs	r3, #1
 8001e08:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0a:	4b79      	ldr	r3, [pc, #484]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d118      	bne.n	8001e48 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e16:	4b76      	ldr	r3, [pc, #472]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a75      	ldr	r2, [pc, #468]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001e22:	f7ff fa23 	bl	800126c <HAL_GetTick>
 8001e26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e28:	e008      	b.n	8001e3c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2a:	f7ff fa1f 	bl	800126c <HAL_GetTick>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	1ad3      	subs	r3, r2, r3
 8001e34:	2b02      	cmp	r3, #2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e18b      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e3c:	4b6c      	ldr	r3, [pc, #432]	; (8001ff0 <HAL_RCC_OscConfig+0x4bc>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0f0      	beq.n	8001e2a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d108      	bne.n	8001e62 <HAL_RCC_OscConfig+0x32e>
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e56:	4a65      	ldr	r2, [pc, #404]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e60:	e024      	b.n	8001eac <HAL_RCC_OscConfig+0x378>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	2b05      	cmp	r3, #5
 8001e68:	d110      	bne.n	8001e8c <HAL_RCC_OscConfig+0x358>
 8001e6a:	4b60      	ldr	r3, [pc, #384]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	4a5e      	ldr	r2, [pc, #376]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e72:	f043 0304 	orr.w	r3, r3, #4
 8001e76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e80:	4a5a      	ldr	r2, [pc, #360]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e82:	f043 0301 	orr.w	r3, r3, #1
 8001e86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e8a:	e00f      	b.n	8001eac <HAL_RCC_OscConfig+0x378>
 8001e8c:	4b57      	ldr	r3, [pc, #348]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a56      	ldr	r2, [pc, #344]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e94:	f023 0301 	bic.w	r3, r3, #1
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e9c:	4b53      	ldr	r3, [pc, #332]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea2:	4a52      	ldr	r2, [pc, #328]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001ea4:	f023 0304 	bic.w	r3, r3, #4
 8001ea8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d016      	beq.n	8001ee2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eb4:	f7ff f9da 	bl	800126c <HAL_GetTick>
 8001eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eba:	e00a      	b.n	8001ed2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7ff f9d6 	bl	800126c <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e140      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ed2:	4b46      	ldr	r3, [pc, #280]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed8:	f003 0302 	and.w	r3, r3, #2
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0ed      	beq.n	8001ebc <HAL_RCC_OscConfig+0x388>
 8001ee0:	e015      	b.n	8001f0e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ee2:	f7ff f9c3 	bl	800126c <HAL_GetTick>
 8001ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ee8:	e00a      	b.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eea:	f7ff f9bf 	bl	800126c <HAL_GetTick>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	1ad3      	subs	r3, r2, r3
 8001ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e129      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001f00:	4b3a      	ldr	r3, [pc, #232]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f003 0302 	and.w	r3, r3, #2
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1ed      	bne.n	8001eea <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001f0e:	7ffb      	ldrb	r3, [r7, #31]
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d105      	bne.n	8001f20 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f14:	4b35      	ldr	r3, [pc, #212]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	4a34      	ldr	r2, [pc, #208]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f003 0320 	and.w	r3, r3, #32
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d03c      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d01c      	beq.n	8001f6e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001f34:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f36:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f3a:	4a2c      	ldr	r2, [pc, #176]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f44:	f7ff f992 	bl	800126c <HAL_GetTick>
 8001f48:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f4c:	f7ff f98e 	bl	800126c <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b02      	cmp	r3, #2
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e0fa      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001f5e:	4b23      	ldr	r3, [pc, #140]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f60:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f64:	f003 0302 	and.w	r3, r3, #2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0ef      	beq.n	8001f4c <HAL_RCC_OscConfig+0x418>
 8001f6c:	e01b      	b.n	8001fa6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001f6e:	4b1f      	ldr	r3, [pc, #124]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f70:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f74:	4a1d      	ldr	r2, [pc, #116]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f76:	f023 0301 	bic.w	r3, r3, #1
 8001f7a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f7e:	f7ff f975 	bl	800126c <HAL_GetTick>
 8001f82:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f84:	e008      	b.n	8001f98 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001f86:	f7ff f971 	bl	800126c <HAL_GetTick>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	1ad3      	subs	r3, r2, r3
 8001f90:	2b02      	cmp	r3, #2
 8001f92:	d901      	bls.n	8001f98 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8001f94:	2303      	movs	r3, #3
 8001f96:	e0dd      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001f98:	4b14      	ldr	r3, [pc, #80]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001f9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d1ef      	bne.n	8001f86 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	69db      	ldr	r3, [r3, #28]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 80d1 	beq.w	8002152 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001fb0:	4b0e      	ldr	r3, [pc, #56]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	f003 030c 	and.w	r3, r3, #12
 8001fb8:	2b0c      	cmp	r3, #12
 8001fba:	f000 808b 	beq.w	80020d4 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d15e      	bne.n	8002084 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc6:	4b09      	ldr	r3, [pc, #36]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a08      	ldr	r2, [pc, #32]	; (8001fec <HAL_RCC_OscConfig+0x4b8>)
 8001fcc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff f94b 	bl	800126c <HAL_GetTick>
 8001fd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fd8:	e00c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fda:	f7ff f947 	bl	800126c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d905      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e0b3      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ff4:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d1ec      	bne.n	8001fda <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002000:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002002:	68da      	ldr	r2, [r3, #12]
 8002004:	4b56      	ldr	r3, [pc, #344]	; (8002160 <HAL_RCC_OscConfig+0x62c>)
 8002006:	4013      	ands	r3, r2
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6a11      	ldr	r1, [r2, #32]
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002010:	3a01      	subs	r2, #1
 8002012:	0112      	lsls	r2, r2, #4
 8002014:	4311      	orrs	r1, r2
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800201a:	0212      	lsls	r2, r2, #8
 800201c:	4311      	orrs	r1, r2
 800201e:	687a      	ldr	r2, [r7, #4]
 8002020:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002022:	0852      	lsrs	r2, r2, #1
 8002024:	3a01      	subs	r2, #1
 8002026:	0552      	lsls	r2, r2, #21
 8002028:	4311      	orrs	r1, r2
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800202e:	0852      	lsrs	r2, r2, #1
 8002030:	3a01      	subs	r2, #1
 8002032:	0652      	lsls	r2, r2, #25
 8002034:	4311      	orrs	r1, r2
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800203a:	06d2      	lsls	r2, r2, #27
 800203c:	430a      	orrs	r2, r1
 800203e:	4947      	ldr	r1, [pc, #284]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002040:	4313      	orrs	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002044:	4b45      	ldr	r3, [pc, #276]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a44      	ldr	r2, [pc, #272]	; (800215c <HAL_RCC_OscConfig+0x628>)
 800204a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002050:	4b42      	ldr	r3, [pc, #264]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002052:	68db      	ldr	r3, [r3, #12]
 8002054:	4a41      	ldr	r2, [pc, #260]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800205a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7ff f906 	bl	800126c <HAL_GetTick>
 8002060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002062:	e008      	b.n	8002076 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f902 	bl	800126c <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e06e      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002076:	4b39      	ldr	r3, [pc, #228]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x530>
 8002082:	e066      	b.n	8002152 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b35      	ldr	r3, [pc, #212]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a34      	ldr	r2, [pc, #208]	; (800215c <HAL_RCC_OscConfig+0x628>)
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	4a31      	ldr	r2, [pc, #196]	; (800215c <HAL_RCC_OscConfig+0x628>)
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800209c:	4b2f      	ldr	r3, [pc, #188]	; (800215c <HAL_RCC_OscConfig+0x628>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	4a2e      	ldr	r2, [pc, #184]	; (800215c <HAL_RCC_OscConfig+0x628>)
 80020a2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff f8de 	bl	800126c <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b4:	f7ff f8da 	bl	800126c <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e046      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020c6:	4b25      	ldr	r3, [pc, #148]	; (800215c <HAL_RCC_OscConfig+0x628>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d1f0      	bne.n	80020b4 <HAL_RCC_OscConfig+0x580>
 80020d2:	e03e      	b.n	8002152 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	69db      	ldr	r3, [r3, #28]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80020dc:	2301      	movs	r3, #1
 80020de:	e039      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80020e0:	4b1e      	ldr	r3, [pc, #120]	; (800215c <HAL_RCC_OscConfig+0x628>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f003 0203 	and.w	r2, r3, #3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d12c      	bne.n	800214e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	3b01      	subs	r3, #1
 8002100:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002102:	429a      	cmp	r2, r3
 8002104:	d123      	bne.n	800214e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002110:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002112:	429a      	cmp	r2, r3
 8002114:	d11b      	bne.n	800214e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002122:	429a      	cmp	r2, r3
 8002124:	d113      	bne.n	800214e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002130:	085b      	lsrs	r3, r3, #1
 8002132:	3b01      	subs	r3, #1
 8002134:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002136:	429a      	cmp	r2, r3
 8002138:	d109      	bne.n	800214e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	3b01      	subs	r3, #1
 8002148:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800214a:	429a      	cmp	r2, r3
 800214c:	d001      	beq.n	8002152 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e000      	b.n	8002154 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3720      	adds	r7, #32
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40021000 	.word	0x40021000
 8002160:	019f800c 	.word	0x019f800c

08002164 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
 800216c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800216e:	2300      	movs	r3, #0
 8002170:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002178:	2301      	movs	r3, #1
 800217a:	e11e      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800217c:	4b91      	ldr	r3, [pc, #580]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f003 030f 	and.w	r3, r3, #15
 8002184:	683a      	ldr	r2, [r7, #0]
 8002186:	429a      	cmp	r2, r3
 8002188:	d910      	bls.n	80021ac <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800218a:	4b8e      	ldr	r3, [pc, #568]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 020f 	bic.w	r2, r3, #15
 8002192:	498c      	ldr	r1, [pc, #560]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219a:	4b8a      	ldr	r3, [pc, #552]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d001      	beq.n	80021ac <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e106      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0301 	and.w	r3, r3, #1
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d073      	beq.n	80022a0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	2b03      	cmp	r3, #3
 80021be:	d129      	bne.n	8002214 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80021c0:	4b81      	ldr	r3, [pc, #516]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e0f4      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80021d0:	f000 f99e 	bl	8002510 <RCC_GetSysClockFreqFromPLLSource>
 80021d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4a7c      	ldr	r2, [pc, #496]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d93f      	bls.n	800225e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021de:	4b7a      	ldr	r3, [pc, #488]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d009      	beq.n	80021fe <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d033      	beq.n	800225e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d12f      	bne.n	800225e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80021fe:	4b72      	ldr	r3, [pc, #456]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002206:	4a70      	ldr	r2, [pc, #448]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002208:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800220c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800220e:	2380      	movs	r3, #128	; 0x80
 8002210:	617b      	str	r3, [r7, #20]
 8002212:	e024      	b.n	800225e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	2b02      	cmp	r3, #2
 800221a:	d107      	bne.n	800222c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800221c:	4b6a      	ldr	r3, [pc, #424]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002224:	2b00      	cmp	r3, #0
 8002226:	d109      	bne.n	800223c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0c6      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800222c:	4b66      	ldr	r3, [pc, #408]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002234:	2b00      	cmp	r3, #0
 8002236:	d101      	bne.n	800223c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0be      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800223c:	f000 f8ce 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002240:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4a61      	ldr	r2, [pc, #388]	; (80023cc <HAL_RCC_ClockConfig+0x268>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d909      	bls.n	800225e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800224a:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002252:	4a5d      	ldr	r2, [pc, #372]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002258:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800225a:	2380      	movs	r3, #128	; 0x80
 800225c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800225e:	4b5a      	ldr	r3, [pc, #360]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	f023 0203 	bic.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4957      	ldr	r1, [pc, #348]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800226c:	4313      	orrs	r3, r2
 800226e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002270:	f7fe fffc 	bl	800126c <HAL_GetTick>
 8002274:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002276:	e00a      	b.n	800228e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002278:	f7fe fff8 	bl	800126c <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	f241 3288 	movw	r2, #5000	; 0x1388
 8002286:	4293      	cmp	r3, r2
 8002288:	d901      	bls.n	800228e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e095      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800228e:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	f003 020c 	and.w	r2, r3, #12
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	429a      	cmp	r2, r3
 800229e:	d1eb      	bne.n	8002278 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d023      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0304 	and.w	r3, r3, #4
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d005      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b8:	4b43      	ldr	r3, [pc, #268]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	4a42      	ldr	r2, [pc, #264]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022be:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022c2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 0308 	and.w	r3, r3, #8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d007      	beq.n	80022e0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80022d0:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022d2:	689b      	ldr	r3, [r3, #8]
 80022d4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80022d8:	4a3b      	ldr	r2, [pc, #236]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80022de:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4b39      	ldr	r3, [pc, #228]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	4936      	ldr	r1, [pc, #216]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	608b      	str	r3, [r1, #8]
 80022f2:	e008      	b.n	8002306 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	2b80      	cmp	r3, #128	; 0x80
 80022f8:	d105      	bne.n	8002306 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80022fa:	4b33      	ldr	r3, [pc, #204]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	4a32      	ldr	r2, [pc, #200]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002300:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002304:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002306:	4b2f      	ldr	r3, [pc, #188]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	683a      	ldr	r2, [r7, #0]
 8002310:	429a      	cmp	r2, r3
 8002312:	d21d      	bcs.n	8002350 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002314:	4b2b      	ldr	r3, [pc, #172]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 020f 	bic.w	r2, r3, #15
 800231c:	4929      	ldr	r1, [pc, #164]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	4313      	orrs	r3, r2
 8002322:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002324:	f7fe ffa2 	bl	800126c <HAL_GetTick>
 8002328:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800232a:	e00a      	b.n	8002342 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800232c:	f7fe ff9e 	bl	800126c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	f241 3288 	movw	r2, #5000	; 0x1388
 800233a:	4293      	cmp	r3, r2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e03b      	b.n	80023ba <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002342:	4b20      	ldr	r3, [pc, #128]	; (80023c4 <HAL_RCC_ClockConfig+0x260>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 030f 	and.w	r3, r3, #15
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	429a      	cmp	r2, r3
 800234e:	d1ed      	bne.n	800232c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	4917      	ldr	r1, [pc, #92]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800236a:	4313      	orrs	r3, r2
 800236c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0308 	and.w	r3, r3, #8
 8002376:	2b00      	cmp	r3, #0
 8002378:	d009      	beq.n	800238e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800237a:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	490f      	ldr	r1, [pc, #60]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 800238a:	4313      	orrs	r3, r2
 800238c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800238e:	f000 f825 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8002392:	4602      	mov	r2, r0
 8002394:	4b0c      	ldr	r3, [pc, #48]	; (80023c8 <HAL_RCC_ClockConfig+0x264>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	091b      	lsrs	r3, r3, #4
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	490c      	ldr	r1, [pc, #48]	; (80023d0 <HAL_RCC_ClockConfig+0x26c>)
 80023a0:	5ccb      	ldrb	r3, [r1, r3]
 80023a2:	f003 031f 	and.w	r3, r3, #31
 80023a6:	fa22 f303 	lsr.w	r3, r2, r3
 80023aa:	4a0a      	ldr	r2, [pc, #40]	; (80023d4 <HAL_RCC_ClockConfig+0x270>)
 80023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80023ae:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <HAL_RCC_ClockConfig+0x274>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4618      	mov	r0, r3
 80023b4:	f7fe ff0e 	bl	80011d4 <HAL_InitTick>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3718      	adds	r7, #24
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40022000 	.word	0x40022000
 80023c8:	40021000 	.word	0x40021000
 80023cc:	04c4b400 	.word	0x04c4b400
 80023d0:	08007978 	.word	0x08007978
 80023d4:	200000d0 	.word	0x200000d0
 80023d8:	200000d4 	.word	0x200000d4

080023dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	b087      	sub	sp, #28
 80023e0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80023e2:	4b2c      	ldr	r3, [pc, #176]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b04      	cmp	r3, #4
 80023ec:	d102      	bne.n	80023f4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80023ee:	4b2a      	ldr	r3, [pc, #168]	; (8002498 <HAL_RCC_GetSysClockFreq+0xbc>)
 80023f0:	613b      	str	r3, [r7, #16]
 80023f2:	e047      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80023f4:	4b27      	ldr	r3, [pc, #156]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	f003 030c 	and.w	r3, r3, #12
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d102      	bne.n	8002406 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002400:	4b26      	ldr	r3, [pc, #152]	; (800249c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	e03e      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002406:	4b23      	ldr	r3, [pc, #140]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	f003 030c 	and.w	r3, r3, #12
 800240e:	2b0c      	cmp	r3, #12
 8002410:	d136      	bne.n	8002480 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002412:	4b20      	ldr	r3, [pc, #128]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002414:	68db      	ldr	r3, [r3, #12]
 8002416:	f003 0303 	and.w	r3, r3, #3
 800241a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800241c:	4b1d      	ldr	r3, [pc, #116]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	091b      	lsrs	r3, r3, #4
 8002422:	f003 030f 	and.w	r3, r3, #15
 8002426:	3301      	adds	r3, #1
 8002428:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2b03      	cmp	r3, #3
 800242e:	d10c      	bne.n	800244a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002430:	4a1a      	ldr	r2, [pc, #104]	; (800249c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	fbb2 f3f3 	udiv	r3, r2, r3
 8002438:	4a16      	ldr	r2, [pc, #88]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 800243a:	68d2      	ldr	r2, [r2, #12]
 800243c:	0a12      	lsrs	r2, r2, #8
 800243e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002442:	fb02 f303 	mul.w	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
      break;
 8002448:	e00c      	b.n	8002464 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800244a:	4a13      	ldr	r2, [pc, #76]	; (8002498 <HAL_RCC_GetSysClockFreq+0xbc>)
 800244c:	68bb      	ldr	r3, [r7, #8]
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4a10      	ldr	r2, [pc, #64]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002454:	68d2      	ldr	r2, [r2, #12]
 8002456:	0a12      	lsrs	r2, r2, #8
 8002458:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800245c:	fb02 f303 	mul.w	r3, r2, r3
 8002460:	617b      	str	r3, [r7, #20]
      break;
 8002462:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002464:	4b0b      	ldr	r3, [pc, #44]	; (8002494 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	0e5b      	lsrs	r3, r3, #25
 800246a:	f003 0303 	and.w	r3, r3, #3
 800246e:	3301      	adds	r3, #1
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002474:	697a      	ldr	r2, [r7, #20]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	fbb2 f3f3 	udiv	r3, r2, r3
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	e001      	b.n	8002484 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002480:	2300      	movs	r3, #0
 8002482:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002484:	693b      	ldr	r3, [r7, #16]
}
 8002486:	4618      	mov	r0, r3
 8002488:	371c      	adds	r7, #28
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000
 8002498:	00f42400 	.word	0x00f42400
 800249c:	016e3600 	.word	0x016e3600

080024a0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024a4:	4b03      	ldr	r3, [pc, #12]	; (80024b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80024a6:	681b      	ldr	r3, [r3, #0]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	200000d0 	.word	0x200000d0

080024b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80024bc:	f7ff fff0 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024c0:	4602      	mov	r2, r0
 80024c2:	4b06      	ldr	r3, [pc, #24]	; (80024dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	f003 0307 	and.w	r3, r3, #7
 80024cc:	4904      	ldr	r1, [pc, #16]	; (80024e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024ce:	5ccb      	ldrb	r3, [r1, r3]
 80024d0:	f003 031f 	and.w	r3, r3, #31
 80024d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024d8:	4618      	mov	r0, r3
 80024da:	bd80      	pop	{r7, pc}
 80024dc:	40021000 	.word	0x40021000
 80024e0:	08007988 	.word	0x08007988

080024e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80024e8:	f7ff ffda 	bl	80024a0 <HAL_RCC_GetHCLKFreq>
 80024ec:	4602      	mov	r2, r0
 80024ee:	4b06      	ldr	r3, [pc, #24]	; (8002508 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	0adb      	lsrs	r3, r3, #11
 80024f4:	f003 0307 	and.w	r3, r3, #7
 80024f8:	4904      	ldr	r1, [pc, #16]	; (800250c <HAL_RCC_GetPCLK2Freq+0x28>)
 80024fa:	5ccb      	ldrb	r3, [r1, r3]
 80024fc:	f003 031f 	and.w	r3, r3, #31
 8002500:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002504:	4618      	mov	r0, r3
 8002506:	bd80      	pop	{r7, pc}
 8002508:	40021000 	.word	0x40021000
 800250c:	08007988 	.word	0x08007988

08002510 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002516:	4b1e      	ldr	r3, [pc, #120]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	091b      	lsrs	r3, r3, #4
 8002526:	f003 030f 	and.w	r3, r3, #15
 800252a:	3301      	adds	r3, #1
 800252c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	2b03      	cmp	r3, #3
 8002532:	d10c      	bne.n	800254e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002534:	4a17      	ldr	r2, [pc, #92]	; (8002594 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	fbb2 f3f3 	udiv	r3, r2, r3
 800253c:	4a14      	ldr	r2, [pc, #80]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800253e:	68d2      	ldr	r2, [r2, #12]
 8002540:	0a12      	lsrs	r2, r2, #8
 8002542:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	617b      	str	r3, [r7, #20]
    break;
 800254c:	e00c      	b.n	8002568 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800254e:	4a12      	ldr	r2, [pc, #72]	; (8002598 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	4a0e      	ldr	r2, [pc, #56]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	0a12      	lsrs	r2, r2, #8
 800255c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002560:	fb02 f303 	mul.w	r3, r2, r3
 8002564:	617b      	str	r3, [r7, #20]
    break;
 8002566:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002568:	4b09      	ldr	r3, [pc, #36]	; (8002590 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0e5b      	lsrs	r3, r3, #25
 800256e:	f003 0303 	and.w	r3, r3, #3
 8002572:	3301      	adds	r3, #1
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002578:	697a      	ldr	r2, [r7, #20]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002580:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002582:	687b      	ldr	r3, [r7, #4]
}
 8002584:	4618      	mov	r0, r3
 8002586:	371c      	adds	r7, #28
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr
 8002590:	40021000 	.word	0x40021000
 8002594:	016e3600 	.word	0x016e3600
 8002598:	00f42400 	.word	0x00f42400

0800259c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025a4:	2300      	movs	r3, #0
 80025a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025a8:	2300      	movs	r3, #0
 80025aa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 8098 	beq.w	80026ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025be:	4b43      	ldr	r3, [pc, #268]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d10d      	bne.n	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025ca:	4b40      	ldr	r3, [pc, #256]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025ce:	4a3f      	ldr	r2, [pc, #252]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d4:	6593      	str	r3, [r2, #88]	; 0x58
 80025d6:	4b3d      	ldr	r3, [pc, #244]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80025d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025de:	60bb      	str	r3, [r7, #8]
 80025e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025e2:	2301      	movs	r3, #1
 80025e4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025e6:	4b3a      	ldr	r3, [pc, #232]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a39      	ldr	r2, [pc, #228]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80025ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025f2:	f7fe fe3b 	bl	800126c <HAL_GetTick>
 80025f6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025f8:	e009      	b.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025fa:	f7fe fe37 	bl	800126c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b02      	cmp	r3, #2
 8002606:	d902      	bls.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002608:	2303      	movs	r3, #3
 800260a:	74fb      	strb	r3, [r7, #19]
        break;
 800260c:	e005      	b.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800260e:	4b30      	ldr	r3, [pc, #192]	; (80026d0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0ef      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800261a:	7cfb      	ldrb	r3, [r7, #19]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d159      	bne.n	80026d4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002620:	4b2a      	ldr	r3, [pc, #168]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002626:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800262a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d01e      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	429a      	cmp	r2, r3
 800263a:	d019      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800263c:	4b23      	ldr	r3, [pc, #140]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800263e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002642:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002646:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002648:	4b20      	ldr	r3, [pc, #128]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800264a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800264e:	4a1f      	ldr	r2, [pc, #124]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002658:	4b1c      	ldr	r3, [pc, #112]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800265a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265e:	4a1b      	ldr	r2, [pc, #108]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002664:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002668:	4a18      	ldr	r2, [pc, #96]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d016      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267a:	f7fe fdf7 	bl	800126c <HAL_GetTick>
 800267e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002680:	e00b      	b.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7fe fdf3 	bl	800126c <HAL_GetTick>
 8002686:	4602      	mov	r2, r0
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	1ad3      	subs	r3, r2, r3
 800268c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002690:	4293      	cmp	r3, r2
 8002692:	d902      	bls.n	800269a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002694:	2303      	movs	r3, #3
 8002696:	74fb      	strb	r3, [r7, #19]
            break;
 8002698:	e006      	b.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800269a:	4b0c      	ldr	r3, [pc, #48]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800269c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a0:	f003 0302 	and.w	r3, r3, #2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d0ec      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80026a8:	7cfb      	ldrb	r3, [r7, #19]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026bc:	4903      	ldr	r1, [pc, #12]	; (80026cc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026c4:	e008      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026c6:	7cfb      	ldrb	r3, [r7, #19]
 80026c8:	74bb      	strb	r3, [r7, #18]
 80026ca:	e005      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80026cc:	40021000 	.word	0x40021000
 80026d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026d8:	7c7b      	ldrb	r3, [r7, #17]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d105      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026de:	4ba7      	ldr	r3, [pc, #668]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e2:	4aa6      	ldr	r2, [pc, #664]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026e8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00a      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026f6:	4ba1      	ldr	r3, [pc, #644]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 0203 	bic.w	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	499d      	ldr	r1, [pc, #628]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002706:	4313      	orrs	r3, r2
 8002708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d00a      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002718:	4b98      	ldr	r3, [pc, #608]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	f023 020c 	bic.w	r2, r3, #12
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	4995      	ldr	r1, [pc, #596]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002728:	4313      	orrs	r3, r2
 800272a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0304 	and.w	r3, r3, #4
 8002736:	2b00      	cmp	r3, #0
 8002738:	d00a      	beq.n	8002750 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800273a:	4b90      	ldr	r3, [pc, #576]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800273c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002740:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	498c      	ldr	r1, [pc, #560]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0308 	and.w	r3, r3, #8
 8002758:	2b00      	cmp	r3, #0
 800275a:	d00a      	beq.n	8002772 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800275c:	4b87      	ldr	r3, [pc, #540]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800275e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002762:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	691b      	ldr	r3, [r3, #16]
 800276a:	4984      	ldr	r1, [pc, #528]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 0310 	and.w	r3, r3, #16
 800277a:	2b00      	cmp	r3, #0
 800277c:	d00a      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800277e:	4b7f      	ldr	r3, [pc, #508]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	695b      	ldr	r3, [r3, #20]
 800278c:	497b      	ldr	r1, [pc, #492]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800278e:	4313      	orrs	r3, r2
 8002790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0320 	and.w	r3, r3, #32
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00a      	beq.n	80027b6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80027a0:	4b76      	ldr	r3, [pc, #472]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	699b      	ldr	r3, [r3, #24]
 80027ae:	4973      	ldr	r1, [pc, #460]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d00a      	beq.n	80027d8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027c2:	4b6e      	ldr	r3, [pc, #440]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	496a      	ldr	r1, [pc, #424]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027d2:	4313      	orrs	r3, r2
 80027d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00a      	beq.n	80027fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80027e4:	4b65      	ldr	r3, [pc, #404]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ea:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6a1b      	ldr	r3, [r3, #32]
 80027f2:	4962      	ldr	r1, [pc, #392]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002806:	4b5d      	ldr	r3, [pc, #372]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002808:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002814:	4959      	ldr	r1, [pc, #356]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002816:	4313      	orrs	r3, r2
 8002818:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d00a      	beq.n	800283e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002828:	4b54      	ldr	r3, [pc, #336]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800282a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800282e:	f023 0203 	bic.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	4951      	ldr	r1, [pc, #324]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002838:	4313      	orrs	r3, r2
 800283a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002846:	2b00      	cmp	r3, #0
 8002848:	d00a      	beq.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800284a:	4b4c      	ldr	r3, [pc, #304]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800284c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002850:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002858:	4948      	ldr	r1, [pc, #288]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800285a:	4313      	orrs	r3, r2
 800285c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002868:	2b00      	cmp	r3, #0
 800286a:	d015      	beq.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800286c:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800286e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002872:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800287a:	4940      	ldr	r1, [pc, #256]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800287c:	4313      	orrs	r3, r2
 800287e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002886:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800288a:	d105      	bne.n	8002898 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800288c:	4b3b      	ldr	r3, [pc, #236]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	4a3a      	ldr	r2, [pc, #232]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002896:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d015      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80028a4:	4b35      	ldr	r3, [pc, #212]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028aa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028b2:	4932      	ldr	r1, [pc, #200]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028c2:	d105      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028c4:	4b2d      	ldr	r3, [pc, #180]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	4a2c      	ldr	r2, [pc, #176]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028ce:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80028dc:	4b27      	ldr	r3, [pc, #156]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ea:	4924      	ldr	r1, [pc, #144]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028fa:	d105      	bne.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80028fc:	4b1f      	ldr	r3, [pc, #124]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a1e      	ldr	r2, [pc, #120]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002906:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002910:	2b00      	cmp	r3, #0
 8002912:	d015      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002914:	4b19      	ldr	r3, [pc, #100]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002922:	4916      	ldr	r1, [pc, #88]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002924:	4313      	orrs	r3, r2
 8002926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002932:	d105      	bne.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800293a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800293e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d019      	beq.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800294e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002952:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800295c:	4313      	orrs	r3, r2
 800295e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002966:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800296a:	d109      	bne.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	4a02      	ldr	r2, [pc, #8]	; (800297c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002976:	60d3      	str	r3, [r2, #12]
 8002978:	e002      	b.n	8002980 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800297a:	bf00      	nop
 800297c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d015      	beq.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800298c:	4b29      	ldr	r3, [pc, #164]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800298e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002992:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4926      	ldr	r1, [pc, #152]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800299c:	4313      	orrs	r3, r2
 800299e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029aa:	d105      	bne.n	80029b8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d015      	beq.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80029c4:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ca:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d2:	4918      	ldr	r1, [pc, #96]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e2:	d105      	bne.n	80029f0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ee:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d015      	beq.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029fc:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80029fe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a02:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a0a:	490a      	ldr	r1, [pc, #40]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a0c:	4313      	orrs	r3, r2
 8002a0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a16:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a1a:	d105      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a1e:	68db      	ldr	r3, [r3, #12]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a26:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002a28:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3718      	adds	r7, #24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	40021000 	.word	0x40021000

08002a38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d101      	bne.n	8002a4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e049      	b.n	8002ade <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d106      	bne.n	8002a64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f7fe f9aa 	bl	8000db8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2202      	movs	r2, #2
 8002a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	3304      	adds	r3, #4
 8002a74:	4619      	mov	r1, r3
 8002a76:	4610      	mov	r0, r2
 8002a78:	f000 fc6e 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2201      	movs	r2, #1
 8002ad0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002adc:	2300      	movs	r3, #0
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b082      	sub	sp, #8
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e049      	b.n	8002b8c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afe:	b2db      	uxtb	r3, r3
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d106      	bne.n	8002b12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f841 	bl	8002b94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2202      	movs	r2, #2
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	3304      	adds	r3, #4
 8002b22:	4619      	mov	r1, r3
 8002b24:	4610      	mov	r0, r2
 8002b26:	f000 fc17 	bl	8003358 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2201      	movs	r2, #1
 8002b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3708      	adds	r7, #8
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b084      	sub	sp, #16
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d109      	bne.n	8002bcc <HAL_TIM_PWM_Start+0x24>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	e03c      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b04      	cmp	r3, #4
 8002bd0:	d109      	bne.n	8002be6 <HAL_TIM_PWM_Start+0x3e>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	bf14      	ite	ne
 8002bde:	2301      	movne	r3, #1
 8002be0:	2300      	moveq	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e02f      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d109      	bne.n	8002c00 <HAL_TIM_PWM_Start+0x58>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	bf14      	ite	ne
 8002bf8:	2301      	movne	r3, #1
 8002bfa:	2300      	moveq	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	e022      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	2b0c      	cmp	r3, #12
 8002c04:	d109      	bne.n	8002c1a <HAL_TIM_PWM_Start+0x72>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c0c:	b2db      	uxtb	r3, r3
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	bf14      	ite	ne
 8002c12:	2301      	movne	r3, #1
 8002c14:	2300      	moveq	r3, #0
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	e015      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	2b10      	cmp	r3, #16
 8002c1e:	d109      	bne.n	8002c34 <HAL_TIM_PWM_Start+0x8c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	bf14      	ite	ne
 8002c2c:	2301      	movne	r3, #1
 8002c2e:	2300      	moveq	r3, #0
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	e008      	b.n	8002c46 <HAL_TIM_PWM_Start+0x9e>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	bf14      	ite	ne
 8002c40:	2301      	movne	r3, #1
 8002c42:	2300      	moveq	r3, #0
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d001      	beq.n	8002c4e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e0a6      	b.n	8002d9c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xb6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c5c:	e023      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b04      	cmp	r3, #4
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xc6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c6c:	e01b      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d104      	bne.n	8002c7e <HAL_TIM_PWM_Start+0xd6>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2202      	movs	r2, #2
 8002c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c7c:	e013      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d104      	bne.n	8002c8e <HAL_TIM_PWM_Start+0xe6>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2202      	movs	r2, #2
 8002c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c8c:	e00b      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	2b10      	cmp	r3, #16
 8002c92:	d104      	bne.n	8002c9e <HAL_TIM_PWM_Start+0xf6>
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c9c:	e003      	b.n	8002ca6 <HAL_TIM_PWM_Start+0xfe>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	2201      	movs	r2, #1
 8002cac:	6839      	ldr	r1, [r7, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 ffc0 	bl	8003c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a3a      	ldr	r2, [pc, #232]	; (8002da4 <HAL_TIM_PWM_Start+0x1fc>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d018      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a39      	ldr	r2, [pc, #228]	; (8002da8 <HAL_TIM_PWM_Start+0x200>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d013      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a37      	ldr	r2, [pc, #220]	; (8002dac <HAL_TIM_PWM_Start+0x204>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d00e      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a36      	ldr	r2, [pc, #216]	; (8002db0 <HAL_TIM_PWM_Start+0x208>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d009      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a34      	ldr	r2, [pc, #208]	; (8002db4 <HAL_TIM_PWM_Start+0x20c>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d004      	beq.n	8002cf0 <HAL_TIM_PWM_Start+0x148>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a33      	ldr	r2, [pc, #204]	; (8002db8 <HAL_TIM_PWM_Start+0x210>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d101      	bne.n	8002cf4 <HAL_TIM_PWM_Start+0x14c>
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e000      	b.n	8002cf6 <HAL_TIM_PWM_Start+0x14e>
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d007      	beq.n	8002d0a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d08:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a25      	ldr	r2, [pc, #148]	; (8002da4 <HAL_TIM_PWM_Start+0x1fc>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d022      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d1c:	d01d      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4a26      	ldr	r2, [pc, #152]	; (8002dbc <HAL_TIM_PWM_Start+0x214>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d018      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <HAL_TIM_PWM_Start+0x218>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d013      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a23      	ldr	r2, [pc, #140]	; (8002dc4 <HAL_TIM_PWM_Start+0x21c>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d00e      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a19      	ldr	r2, [pc, #100]	; (8002da8 <HAL_TIM_PWM_Start+0x200>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d009      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a18      	ldr	r2, [pc, #96]	; (8002dac <HAL_TIM_PWM_Start+0x204>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d004      	beq.n	8002d5a <HAL_TIM_PWM_Start+0x1b2>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a18      	ldr	r2, [pc, #96]	; (8002db8 <HAL_TIM_PWM_Start+0x210>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d115      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689a      	ldr	r2, [r3, #8]
 8002d60:	4b19      	ldr	r3, [pc, #100]	; (8002dc8 <HAL_TIM_PWM_Start+0x220>)
 8002d62:	4013      	ands	r3, r2
 8002d64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2b06      	cmp	r3, #6
 8002d6a:	d015      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x1f0>
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d72:	d011      	beq.n	8002d98 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f042 0201 	orr.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d84:	e008      	b.n	8002d98 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f042 0201 	orr.w	r2, r2, #1
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e000      	b.n	8002d9a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d98:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3710      	adds	r7, #16
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40013400 	.word	0x40013400
 8002dac:	40014000 	.word	0x40014000
 8002db0:	40014400 	.word	0x40014400
 8002db4:	40014800 	.word	0x40014800
 8002db8:	40015000 	.word	0x40015000
 8002dbc:	40000400 	.word	0x40000400
 8002dc0:	40000800 	.word	0x40000800
 8002dc4:	40000c00 	.word	0x40000c00
 8002dc8:	00010007 	.word	0x00010007

08002dcc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f000 ff28 	bl	8003c34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a40      	ldr	r2, [pc, #256]	; (8002eec <HAL_TIM_PWM_Stop+0x120>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d018      	beq.n	8002e20 <HAL_TIM_PWM_Stop+0x54>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a3f      	ldr	r2, [pc, #252]	; (8002ef0 <HAL_TIM_PWM_Stop+0x124>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d013      	beq.n	8002e20 <HAL_TIM_PWM_Stop+0x54>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a3d      	ldr	r2, [pc, #244]	; (8002ef4 <HAL_TIM_PWM_Stop+0x128>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d00e      	beq.n	8002e20 <HAL_TIM_PWM_Stop+0x54>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a3c      	ldr	r2, [pc, #240]	; (8002ef8 <HAL_TIM_PWM_Stop+0x12c>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d009      	beq.n	8002e20 <HAL_TIM_PWM_Stop+0x54>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a3a      	ldr	r2, [pc, #232]	; (8002efc <HAL_TIM_PWM_Stop+0x130>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d004      	beq.n	8002e20 <HAL_TIM_PWM_Stop+0x54>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a39      	ldr	r2, [pc, #228]	; (8002f00 <HAL_TIM_PWM_Stop+0x134>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_TIM_PWM_Stop+0x58>
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_TIM_PWM_Stop+0x5a>
 8002e24:	2300      	movs	r3, #0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d017      	beq.n	8002e5a <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	6a1a      	ldr	r2, [r3, #32]
 8002e30:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e34:	4013      	ands	r3, r2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d10f      	bne.n	8002e5a <HAL_TIM_PWM_Stop+0x8e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a1a      	ldr	r2, [r3, #32]
 8002e40:	f244 4344 	movw	r3, #17476	; 0x4444
 8002e44:	4013      	ands	r3, r2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d107      	bne.n	8002e5a <HAL_TIM_PWM_Stop+0x8e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	6a1a      	ldr	r2, [r3, #32]
 8002e60:	f241 1311 	movw	r3, #4369	; 0x1111
 8002e64:	4013      	ands	r3, r2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d10f      	bne.n	8002e8a <HAL_TIM_PWM_Stop+0xbe>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	6a1a      	ldr	r2, [r3, #32]
 8002e70:	f244 4344 	movw	r3, #17476	; 0x4444
 8002e74:	4013      	ands	r3, r2
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <HAL_TIM_PWM_Stop+0xbe>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f022 0201 	bic.w	r2, r2, #1
 8002e88:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d104      	bne.n	8002e9a <HAL_TIM_PWM_Stop+0xce>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e98:	e023      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0x116>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	2b04      	cmp	r3, #4
 8002e9e:	d104      	bne.n	8002eaa <HAL_TIM_PWM_Stop+0xde>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2201      	movs	r2, #1
 8002ea4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ea8:	e01b      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0x116>
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	2b08      	cmp	r3, #8
 8002eae:	d104      	bne.n	8002eba <HAL_TIM_PWM_Stop+0xee>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002eb8:	e013      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0x116>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b0c      	cmp	r3, #12
 8002ebe:	d104      	bne.n	8002eca <HAL_TIM_PWM_Stop+0xfe>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002ec8:	e00b      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0x116>
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	2b10      	cmp	r3, #16
 8002ece:	d104      	bne.n	8002eda <HAL_TIM_PWM_Stop+0x10e>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ed8:	e003      	b.n	8002ee2 <HAL_TIM_PWM_Stop+0x116>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3708      	adds	r7, #8
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd80      	pop	{r7, pc}
 8002eec:	40012c00 	.word	0x40012c00
 8002ef0:	40013400 	.word	0x40013400
 8002ef4:	40014000 	.word	0x40014000
 8002ef8:	40014400 	.word	0x40014400
 8002efc:	40014800 	.word	0x40014800
 8002f00:	40015000 	.word	0x40015000

08002f04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f10:	2300      	movs	r3, #0
 8002f12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d101      	bne.n	8002f22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	e0ff      	b.n	8003122 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2201      	movs	r2, #1
 8002f26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b14      	cmp	r3, #20
 8002f2e:	f200 80f0 	bhi.w	8003112 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f32:	a201      	add	r2, pc, #4	; (adr r2, 8002f38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f38:	08002f8d 	.word	0x08002f8d
 8002f3c:	08003113 	.word	0x08003113
 8002f40:	08003113 	.word	0x08003113
 8002f44:	08003113 	.word	0x08003113
 8002f48:	08002fcd 	.word	0x08002fcd
 8002f4c:	08003113 	.word	0x08003113
 8002f50:	08003113 	.word	0x08003113
 8002f54:	08003113 	.word	0x08003113
 8002f58:	0800300f 	.word	0x0800300f
 8002f5c:	08003113 	.word	0x08003113
 8002f60:	08003113 	.word	0x08003113
 8002f64:	08003113 	.word	0x08003113
 8002f68:	0800304f 	.word	0x0800304f
 8002f6c:	08003113 	.word	0x08003113
 8002f70:	08003113 	.word	0x08003113
 8002f74:	08003113 	.word	0x08003113
 8002f78:	08003091 	.word	0x08003091
 8002f7c:	08003113 	.word	0x08003113
 8002f80:	08003113 	.word	0x08003113
 8002f84:	08003113 	.word	0x08003113
 8002f88:	080030d1 	.word	0x080030d1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa88 	bl	80034a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	699a      	ldr	r2, [r3, #24]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 0208 	orr.w	r2, r2, #8
 8002fa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699a      	ldr	r2, [r3, #24]
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0204 	bic.w	r2, r2, #4
 8002fb6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	6999      	ldr	r1, [r3, #24]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	691a      	ldr	r2, [r3, #16]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	619a      	str	r2, [r3, #24]
      break;
 8002fca:	e0a5      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68b9      	ldr	r1, [r7, #8]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f000 fb02 	bl	80035dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	699a      	ldr	r2, [r3, #24]
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fe6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	699a      	ldr	r2, [r3, #24]
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ff6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6999      	ldr	r1, [r3, #24]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	021a      	lsls	r2, r3, #8
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	619a      	str	r2, [r3, #24]
      break;
 800300c:	e084      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	4618      	mov	r0, r3
 8003016:	f000 fb75 	bl	8003704 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	69da      	ldr	r2, [r3, #28]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f042 0208 	orr.w	r2, r2, #8
 8003028:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	69da      	ldr	r2, [r3, #28]
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0204 	bic.w	r2, r2, #4
 8003038:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	69d9      	ldr	r1, [r3, #28]
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	61da      	str	r2, [r3, #28]
      break;
 800304c:	e064      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	68b9      	ldr	r1, [r7, #8]
 8003054:	4618      	mov	r0, r3
 8003056:	f000 fbe7 	bl	8003828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	69da      	ldr	r2, [r3, #28]
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003068:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	69da      	ldr	r2, [r3, #28]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69d9      	ldr	r1, [r3, #28]
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	021a      	lsls	r2, r3, #8
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	430a      	orrs	r2, r1
 800308c:	61da      	str	r2, [r3, #28]
      break;
 800308e:	e043      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68b9      	ldr	r1, [r7, #8]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 fc5a 	bl	8003950 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0208 	orr.w	r2, r2, #8
 80030aa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f022 0204 	bic.w	r2, r2, #4
 80030ba:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	430a      	orrs	r2, r1
 80030cc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80030ce:	e023      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	68b9      	ldr	r1, [r7, #8]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fca4 	bl	8003a24 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ea:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030fa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	691b      	ldr	r3, [r3, #16]
 8003106:	021a      	lsls	r2, r3, #8
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	430a      	orrs	r2, r1
 800310e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003110:	e002      	b.n	8003118 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	75fb      	strb	r3, [r7, #23]
      break;
 8003116:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2200      	movs	r2, #0
 800311c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003120:	7dfb      	ldrb	r3, [r7, #23]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
 8003134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003140:	2b01      	cmp	r3, #1
 8003142:	d101      	bne.n	8003148 <HAL_TIM_ConfigClockSource+0x1c>
 8003144:	2302      	movs	r3, #2
 8003146:	e0f6      	b.n	8003336 <HAL_TIM_ConfigClockSource+0x20a>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2201      	movs	r2, #1
 800314c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2202      	movs	r2, #2
 8003154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8003166:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800316a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003172:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a6f      	ldr	r2, [pc, #444]	; (8003340 <HAL_TIM_ConfigClockSource+0x214>)
 8003182:	4293      	cmp	r3, r2
 8003184:	f000 80c1 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 8003188:	4a6d      	ldr	r2, [pc, #436]	; (8003340 <HAL_TIM_ConfigClockSource+0x214>)
 800318a:	4293      	cmp	r3, r2
 800318c:	f200 80c6 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 8003190:	4a6c      	ldr	r2, [pc, #432]	; (8003344 <HAL_TIM_ConfigClockSource+0x218>)
 8003192:	4293      	cmp	r3, r2
 8003194:	f000 80b9 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 8003198:	4a6a      	ldr	r2, [pc, #424]	; (8003344 <HAL_TIM_ConfigClockSource+0x218>)
 800319a:	4293      	cmp	r3, r2
 800319c:	f200 80be 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 80031a0:	4a69      	ldr	r2, [pc, #420]	; (8003348 <HAL_TIM_ConfigClockSource+0x21c>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	f000 80b1 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 80031a8:	4a67      	ldr	r2, [pc, #412]	; (8003348 <HAL_TIM_ConfigClockSource+0x21c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	f200 80b6 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 80031b0:	4a66      	ldr	r2, [pc, #408]	; (800334c <HAL_TIM_ConfigClockSource+0x220>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	f000 80a9 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 80031b8:	4a64      	ldr	r2, [pc, #400]	; (800334c <HAL_TIM_ConfigClockSource+0x220>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	f200 80ae 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 80031c0:	4a63      	ldr	r2, [pc, #396]	; (8003350 <HAL_TIM_ConfigClockSource+0x224>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	f000 80a1 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 80031c8:	4a61      	ldr	r2, [pc, #388]	; (8003350 <HAL_TIM_ConfigClockSource+0x224>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	f200 80a6 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 80031d0:	4a60      	ldr	r2, [pc, #384]	; (8003354 <HAL_TIM_ConfigClockSource+0x228>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	f000 8099 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 80031d8:	4a5e      	ldr	r2, [pc, #376]	; (8003354 <HAL_TIM_ConfigClockSource+0x228>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	f200 809e 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 80031e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80031e4:	f000 8091 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 80031e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80031ec:	f200 8096 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 80031f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f4:	f000 8089 	beq.w	800330a <HAL_TIM_ConfigClockSource+0x1de>
 80031f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031fc:	f200 808e 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 8003200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003204:	d03e      	beq.n	8003284 <HAL_TIM_ConfigClockSource+0x158>
 8003206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320a:	f200 8087 	bhi.w	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 800320e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003212:	f000 8086 	beq.w	8003322 <HAL_TIM_ConfigClockSource+0x1f6>
 8003216:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321a:	d87f      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 800321c:	2b70      	cmp	r3, #112	; 0x70
 800321e:	d01a      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x12a>
 8003220:	2b70      	cmp	r3, #112	; 0x70
 8003222:	d87b      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 8003224:	2b60      	cmp	r3, #96	; 0x60
 8003226:	d050      	beq.n	80032ca <HAL_TIM_ConfigClockSource+0x19e>
 8003228:	2b60      	cmp	r3, #96	; 0x60
 800322a:	d877      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 800322c:	2b50      	cmp	r3, #80	; 0x50
 800322e:	d03c      	beq.n	80032aa <HAL_TIM_ConfigClockSource+0x17e>
 8003230:	2b50      	cmp	r3, #80	; 0x50
 8003232:	d873      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 8003234:	2b40      	cmp	r3, #64	; 0x40
 8003236:	d058      	beq.n	80032ea <HAL_TIM_ConfigClockSource+0x1be>
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d86f      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 800323c:	2b30      	cmp	r3, #48	; 0x30
 800323e:	d064      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x1de>
 8003240:	2b30      	cmp	r3, #48	; 0x30
 8003242:	d86b      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 8003244:	2b20      	cmp	r3, #32
 8003246:	d060      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x1de>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d867      	bhi.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d05c      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x1de>
 8003250:	2b10      	cmp	r3, #16
 8003252:	d05a      	beq.n	800330a <HAL_TIM_ConfigClockSource+0x1de>
 8003254:	e062      	b.n	800331c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6899      	ldr	r1, [r3, #8]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	68db      	ldr	r3, [r3, #12]
 8003266:	f000 fcc5 	bl	8003bf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003278:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68ba      	ldr	r2, [r7, #8]
 8003280:	609a      	str	r2, [r3, #8]
      break;
 8003282:	e04f      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6818      	ldr	r0, [r3, #0]
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	6899      	ldr	r1, [r3, #8]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	f000 fcae 	bl	8003bf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	689a      	ldr	r2, [r3, #8]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032a6:	609a      	str	r2, [r3, #8]
      break;
 80032a8:	e03c      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6859      	ldr	r1, [r3, #4]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	461a      	mov	r2, r3
 80032b8:	f000 fc20 	bl	8003afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2150      	movs	r1, #80	; 0x50
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fc79 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80032c8:	e02c      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	6859      	ldr	r1, [r3, #4]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	461a      	mov	r2, r3
 80032d8:	f000 fc3f 	bl	8003b5a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	2160      	movs	r1, #96	; 0x60
 80032e2:	4618      	mov	r0, r3
 80032e4:	f000 fc69 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 80032e8:	e01c      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6818      	ldr	r0, [r3, #0]
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	6859      	ldr	r1, [r3, #4]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	461a      	mov	r2, r3
 80032f8:	f000 fc00 	bl	8003afc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2140      	movs	r1, #64	; 0x40
 8003302:	4618      	mov	r0, r3
 8003304:	f000 fc59 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 8003308:	e00c      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4619      	mov	r1, r3
 8003314:	4610      	mov	r0, r2
 8003316:	f000 fc50 	bl	8003bba <TIM_ITRx_SetConfig>
      break;
 800331a:	e003      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	73fb      	strb	r3, [r7, #15]
      break;
 8003320:	e000      	b.n	8003324 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003322:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2200      	movs	r2, #0
 8003330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003334:	7bfb      	ldrb	r3, [r7, #15]
}
 8003336:	4618      	mov	r0, r3
 8003338:	3710      	adds	r7, #16
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	00100070 	.word	0x00100070
 8003344:	00100060 	.word	0x00100060
 8003348:	00100050 	.word	0x00100050
 800334c:	00100040 	.word	0x00100040
 8003350:	00100030 	.word	0x00100030
 8003354:	00100020 	.word	0x00100020

08003358 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003358:	b480      	push	{r7}
 800335a:	b085      	sub	sp, #20
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a46      	ldr	r2, [pc, #280]	; (8003484 <TIM_Base_SetConfig+0x12c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d017      	beq.n	80033a0 <TIM_Base_SetConfig+0x48>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003376:	d013      	beq.n	80033a0 <TIM_Base_SetConfig+0x48>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	4a43      	ldr	r2, [pc, #268]	; (8003488 <TIM_Base_SetConfig+0x130>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d00f      	beq.n	80033a0 <TIM_Base_SetConfig+0x48>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a42      	ldr	r2, [pc, #264]	; (800348c <TIM_Base_SetConfig+0x134>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00b      	beq.n	80033a0 <TIM_Base_SetConfig+0x48>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	4a41      	ldr	r2, [pc, #260]	; (8003490 <TIM_Base_SetConfig+0x138>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d007      	beq.n	80033a0 <TIM_Base_SetConfig+0x48>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	4a40      	ldr	r2, [pc, #256]	; (8003494 <TIM_Base_SetConfig+0x13c>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d003      	beq.n	80033a0 <TIM_Base_SetConfig+0x48>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	4a3f      	ldr	r2, [pc, #252]	; (8003498 <TIM_Base_SetConfig+0x140>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d108      	bne.n	80033b2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a33      	ldr	r2, [pc, #204]	; (8003484 <TIM_Base_SetConfig+0x12c>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d023      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033c0:	d01f      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a30      	ldr	r2, [pc, #192]	; (8003488 <TIM_Base_SetConfig+0x130>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01b      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a2f      	ldr	r2, [pc, #188]	; (800348c <TIM_Base_SetConfig+0x134>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d017      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a2e      	ldr	r2, [pc, #184]	; (8003490 <TIM_Base_SetConfig+0x138>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a2d      	ldr	r2, [pc, #180]	; (8003494 <TIM_Base_SetConfig+0x13c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00f      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a2d      	ldr	r2, [pc, #180]	; (800349c <TIM_Base_SetConfig+0x144>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d00b      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a2c      	ldr	r2, [pc, #176]	; (80034a0 <TIM_Base_SetConfig+0x148>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d007      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	4a2b      	ldr	r2, [pc, #172]	; (80034a4 <TIM_Base_SetConfig+0x14c>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d003      	beq.n	8003402 <TIM_Base_SetConfig+0xaa>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a26      	ldr	r2, [pc, #152]	; (8003498 <TIM_Base_SetConfig+0x140>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d108      	bne.n	8003414 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003408:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	4313      	orrs	r3, r2
 8003412:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	689a      	ldr	r2, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	4a12      	ldr	r2, [pc, #72]	; (8003484 <TIM_Base_SetConfig+0x12c>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d013      	beq.n	8003468 <TIM_Base_SetConfig+0x110>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	4a14      	ldr	r2, [pc, #80]	; (8003494 <TIM_Base_SetConfig+0x13c>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d00f      	beq.n	8003468 <TIM_Base_SetConfig+0x110>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	4a14      	ldr	r2, [pc, #80]	; (800349c <TIM_Base_SetConfig+0x144>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d00b      	beq.n	8003468 <TIM_Base_SetConfig+0x110>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	4a13      	ldr	r2, [pc, #76]	; (80034a0 <TIM_Base_SetConfig+0x148>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d007      	beq.n	8003468 <TIM_Base_SetConfig+0x110>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a12      	ldr	r2, [pc, #72]	; (80034a4 <TIM_Base_SetConfig+0x14c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d003      	beq.n	8003468 <TIM_Base_SetConfig+0x110>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a0d      	ldr	r2, [pc, #52]	; (8003498 <TIM_Base_SetConfig+0x140>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d103      	bne.n	8003470 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	691a      	ldr	r2, [r3, #16]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	615a      	str	r2, [r3, #20]
}
 8003476:	bf00      	nop
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	40012c00 	.word	0x40012c00
 8003488:	40000400 	.word	0x40000400
 800348c:	40000800 	.word	0x40000800
 8003490:	40000c00 	.word	0x40000c00
 8003494:	40013400 	.word	0x40013400
 8003498:	40015000 	.word	0x40015000
 800349c:	40014000 	.word	0x40014000
 80034a0:	40014400 	.word	0x40014400
 80034a4:	40014800 	.word	0x40014800

080034a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b087      	sub	sp, #28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
 80034b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6a1b      	ldr	r3, [r3, #32]
 80034b6:	f023 0201 	bic.w	r2, r3, #1
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a1b      	ldr	r3, [r3, #32]
 80034c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f023 0303 	bic.w	r3, r3, #3
 80034e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	f023 0302 	bic.w	r3, r3, #2
 80034f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a30      	ldr	r2, [pc, #192]	; (80035c4 <TIM_OC1_SetConfig+0x11c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d013      	beq.n	8003530 <TIM_OC1_SetConfig+0x88>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a2f      	ldr	r2, [pc, #188]	; (80035c8 <TIM_OC1_SetConfig+0x120>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d00f      	beq.n	8003530 <TIM_OC1_SetConfig+0x88>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a2e      	ldr	r2, [pc, #184]	; (80035cc <TIM_OC1_SetConfig+0x124>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d00b      	beq.n	8003530 <TIM_OC1_SetConfig+0x88>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a2d      	ldr	r2, [pc, #180]	; (80035d0 <TIM_OC1_SetConfig+0x128>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d007      	beq.n	8003530 <TIM_OC1_SetConfig+0x88>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	4a2c      	ldr	r2, [pc, #176]	; (80035d4 <TIM_OC1_SetConfig+0x12c>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d003      	beq.n	8003530 <TIM_OC1_SetConfig+0x88>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a2b      	ldr	r2, [pc, #172]	; (80035d8 <TIM_OC1_SetConfig+0x130>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d10c      	bne.n	800354a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	f023 0308 	bic.w	r3, r3, #8
 8003536:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	697a      	ldr	r2, [r7, #20]
 800353e:	4313      	orrs	r3, r2
 8003540:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	f023 0304 	bic.w	r3, r3, #4
 8003548:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1d      	ldr	r2, [pc, #116]	; (80035c4 <TIM_OC1_SetConfig+0x11c>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <TIM_OC1_SetConfig+0xd2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a1c      	ldr	r2, [pc, #112]	; (80035c8 <TIM_OC1_SetConfig+0x120>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00f      	beq.n	800357a <TIM_OC1_SetConfig+0xd2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a1b      	ldr	r2, [pc, #108]	; (80035cc <TIM_OC1_SetConfig+0x124>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d00b      	beq.n	800357a <TIM_OC1_SetConfig+0xd2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a1a      	ldr	r2, [pc, #104]	; (80035d0 <TIM_OC1_SetConfig+0x128>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d007      	beq.n	800357a <TIM_OC1_SetConfig+0xd2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a19      	ldr	r2, [pc, #100]	; (80035d4 <TIM_OC1_SetConfig+0x12c>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d003      	beq.n	800357a <TIM_OC1_SetConfig+0xd2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a18      	ldr	r2, [pc, #96]	; (80035d8 <TIM_OC1_SetConfig+0x130>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d111      	bne.n	800359e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003580:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003588:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	4313      	orrs	r3, r2
 8003592:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	699b      	ldr	r3, [r3, #24]
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	693a      	ldr	r2, [r7, #16]
 80035a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	697a      	ldr	r2, [r7, #20]
 80035b6:	621a      	str	r2, [r3, #32]
}
 80035b8:	bf00      	nop
 80035ba:	371c      	adds	r7, #28
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	40012c00 	.word	0x40012c00
 80035c8:	40013400 	.word	0x40013400
 80035cc:	40014000 	.word	0x40014000
 80035d0:	40014400 	.word	0x40014400
 80035d4:	40014800 	.word	0x40014800
 80035d8:	40015000 	.word	0x40015000

080035dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035dc:	b480      	push	{r7}
 80035de:	b087      	sub	sp, #28
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
 80035e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a1b      	ldr	r3, [r3, #32]
 80035ea:	f023 0210 	bic.w	r2, r3, #16
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a1b      	ldr	r3, [r3, #32]
 80035f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	699b      	ldr	r3, [r3, #24]
 8003602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800360a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800360e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003616:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	021b      	lsls	r3, r3, #8
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	4313      	orrs	r3, r2
 8003622:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	f023 0320 	bic.w	r3, r3, #32
 800362a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	4313      	orrs	r3, r2
 8003636:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a2c      	ldr	r2, [pc, #176]	; (80036ec <TIM_OC2_SetConfig+0x110>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d007      	beq.n	8003650 <TIM_OC2_SetConfig+0x74>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a2b      	ldr	r2, [pc, #172]	; (80036f0 <TIM_OC2_SetConfig+0x114>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d003      	beq.n	8003650 <TIM_OC2_SetConfig+0x74>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	4a2a      	ldr	r2, [pc, #168]	; (80036f4 <TIM_OC2_SetConfig+0x118>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d10d      	bne.n	800366c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003656:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	4313      	orrs	r3, r2
 8003662:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800366a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	4a1f      	ldr	r2, [pc, #124]	; (80036ec <TIM_OC2_SetConfig+0x110>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d013      	beq.n	800369c <TIM_OC2_SetConfig+0xc0>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <TIM_OC2_SetConfig+0x114>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00f      	beq.n	800369c <TIM_OC2_SetConfig+0xc0>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	4a1e      	ldr	r2, [pc, #120]	; (80036f8 <TIM_OC2_SetConfig+0x11c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d00b      	beq.n	800369c <TIM_OC2_SetConfig+0xc0>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a1d      	ldr	r2, [pc, #116]	; (80036fc <TIM_OC2_SetConfig+0x120>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_OC2_SetConfig+0xc0>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <TIM_OC2_SetConfig+0x124>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_OC2_SetConfig+0xc0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a17      	ldr	r2, [pc, #92]	; (80036f4 <TIM_OC2_SetConfig+0x118>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d113      	bne.n	80036c4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	695b      	ldr	r3, [r3, #20]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	693a      	ldr	r2, [r7, #16]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	621a      	str	r2, [r3, #32]
}
 80036de:	bf00      	nop
 80036e0:	371c      	adds	r7, #28
 80036e2:	46bd      	mov	sp, r7
 80036e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e8:	4770      	bx	lr
 80036ea:	bf00      	nop
 80036ec:	40012c00 	.word	0x40012c00
 80036f0:	40013400 	.word	0x40013400
 80036f4:	40015000 	.word	0x40015000
 80036f8:	40014000 	.word	0x40014000
 80036fc:	40014400 	.word	0x40014400
 8003700:	40014800 	.word	0x40014800

08003704 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6a1b      	ldr	r3, [r3, #32]
 8003712:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003732:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003736:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	f023 0303 	bic.w	r3, r3, #3
 800373e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	68fa      	ldr	r2, [r7, #12]
 8003746:	4313      	orrs	r3, r2
 8003748:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003750:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a2b      	ldr	r2, [pc, #172]	; (8003810 <TIM_OC3_SetConfig+0x10c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d007      	beq.n	8003776 <TIM_OC3_SetConfig+0x72>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	4a2a      	ldr	r2, [pc, #168]	; (8003814 <TIM_OC3_SetConfig+0x110>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d003      	beq.n	8003776 <TIM_OC3_SetConfig+0x72>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	4a29      	ldr	r2, [pc, #164]	; (8003818 <TIM_OC3_SetConfig+0x114>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d10d      	bne.n	8003792 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800377c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	021b      	lsls	r3, r3, #8
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	4313      	orrs	r3, r2
 8003788:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800378a:	697b      	ldr	r3, [r7, #20]
 800378c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003790:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a1e      	ldr	r2, [pc, #120]	; (8003810 <TIM_OC3_SetConfig+0x10c>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d013      	beq.n	80037c2 <TIM_OC3_SetConfig+0xbe>
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a1d      	ldr	r2, [pc, #116]	; (8003814 <TIM_OC3_SetConfig+0x110>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d00f      	beq.n	80037c2 <TIM_OC3_SetConfig+0xbe>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	4a1d      	ldr	r2, [pc, #116]	; (800381c <TIM_OC3_SetConfig+0x118>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <TIM_OC3_SetConfig+0xbe>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	4a1c      	ldr	r2, [pc, #112]	; (8003820 <TIM_OC3_SetConfig+0x11c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d007      	beq.n	80037c2 <TIM_OC3_SetConfig+0xbe>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	4a1b      	ldr	r2, [pc, #108]	; (8003824 <TIM_OC3_SetConfig+0x120>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d003      	beq.n	80037c2 <TIM_OC3_SetConfig+0xbe>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	4a16      	ldr	r2, [pc, #88]	; (8003818 <TIM_OC3_SetConfig+0x114>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d113      	bne.n	80037ea <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037c8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	011b      	lsls	r3, r3, #4
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	4313      	orrs	r3, r2
 80037dc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	693a      	ldr	r2, [r7, #16]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	693a      	ldr	r2, [r7, #16]
 80037ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	697a      	ldr	r2, [r7, #20]
 8003802:	621a      	str	r2, [r3, #32]
}
 8003804:	bf00      	nop
 8003806:	371c      	adds	r7, #28
 8003808:	46bd      	mov	sp, r7
 800380a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380e:	4770      	bx	lr
 8003810:	40012c00 	.word	0x40012c00
 8003814:	40013400 	.word	0x40013400
 8003818:	40015000 	.word	0x40015000
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a2c      	ldr	r2, [pc, #176]	; (8003938 <TIM_OC4_SetConfig+0x110>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d007      	beq.n	800389c <TIM_OC4_SetConfig+0x74>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a2b      	ldr	r2, [pc, #172]	; (800393c <TIM_OC4_SetConfig+0x114>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d003      	beq.n	800389c <TIM_OC4_SetConfig+0x74>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a2a      	ldr	r2, [pc, #168]	; (8003940 <TIM_OC4_SetConfig+0x118>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d10d      	bne.n	80038b8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	031b      	lsls	r3, r3, #12
 80038aa:	697a      	ldr	r2, [r7, #20]
 80038ac:	4313      	orrs	r3, r2
 80038ae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038b6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1f      	ldr	r2, [pc, #124]	; (8003938 <TIM_OC4_SetConfig+0x110>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d013      	beq.n	80038e8 <TIM_OC4_SetConfig+0xc0>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <TIM_OC4_SetConfig+0x114>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d00f      	beq.n	80038e8 <TIM_OC4_SetConfig+0xc0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1e      	ldr	r2, [pc, #120]	; (8003944 <TIM_OC4_SetConfig+0x11c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d00b      	beq.n	80038e8 <TIM_OC4_SetConfig+0xc0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a1d      	ldr	r2, [pc, #116]	; (8003948 <TIM_OC4_SetConfig+0x120>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d007      	beq.n	80038e8 <TIM_OC4_SetConfig+0xc0>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a1c      	ldr	r2, [pc, #112]	; (800394c <TIM_OC4_SetConfig+0x124>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d003      	beq.n	80038e8 <TIM_OC4_SetConfig+0xc0>
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <TIM_OC4_SetConfig+0x118>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d113      	bne.n	8003910 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ee:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038f6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	695b      	ldr	r3, [r3, #20]
 80038fc:	019b      	lsls	r3, r3, #6
 80038fe:	693a      	ldr	r2, [r7, #16]
 8003900:	4313      	orrs	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	019b      	lsls	r3, r3, #6
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	4313      	orrs	r3, r2
 800390e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40012c00 	.word	0x40012c00
 800393c:	40013400 	.word	0x40013400
 8003940:	40015000 	.word	0x40015000
 8003944:	40014000 	.word	0x40014000
 8003948:	40014400 	.word	0x40014400
 800394c:	40014800 	.word	0x40014800

08003950 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003950:	b480      	push	{r7}
 8003952:	b087      	sub	sp, #28
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a1b      	ldr	r3, [r3, #32]
 800395e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
 800396a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800397e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003994:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	041b      	lsls	r3, r3, #16
 800399c:	693a      	ldr	r2, [r7, #16]
 800399e:	4313      	orrs	r3, r2
 80039a0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a19      	ldr	r2, [pc, #100]	; (8003a0c <TIM_OC5_SetConfig+0xbc>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d013      	beq.n	80039d2 <TIM_OC5_SetConfig+0x82>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a18      	ldr	r2, [pc, #96]	; (8003a10 <TIM_OC5_SetConfig+0xc0>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d00f      	beq.n	80039d2 <TIM_OC5_SetConfig+0x82>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a17      	ldr	r2, [pc, #92]	; (8003a14 <TIM_OC5_SetConfig+0xc4>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <TIM_OC5_SetConfig+0x82>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a16      	ldr	r2, [pc, #88]	; (8003a18 <TIM_OC5_SetConfig+0xc8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d007      	beq.n	80039d2 <TIM_OC5_SetConfig+0x82>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a15      	ldr	r2, [pc, #84]	; (8003a1c <TIM_OC5_SetConfig+0xcc>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d003      	beq.n	80039d2 <TIM_OC5_SetConfig+0x82>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a14      	ldr	r2, [pc, #80]	; (8003a20 <TIM_OC5_SetConfig+0xd0>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d109      	bne.n	80039e6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	695b      	ldr	r3, [r3, #20]
 80039de:	021b      	lsls	r3, r3, #8
 80039e0:	697a      	ldr	r2, [r7, #20]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	685a      	ldr	r2, [r3, #4]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	621a      	str	r2, [r3, #32]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	40012c00 	.word	0x40012c00
 8003a10:	40013400 	.word	0x40013400
 8003a14:	40014000 	.word	0x40014000
 8003a18:	40014400 	.word	0x40014400
 8003a1c:	40014800 	.word	0x40014800
 8003a20:	40015000 	.word	0x40015000

08003a24 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b087      	sub	sp, #28
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	021b      	lsls	r3, r3, #8
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	051b      	lsls	r3, r3, #20
 8003a72:	693a      	ldr	r2, [r7, #16]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a1a      	ldr	r2, [pc, #104]	; (8003ae4 <TIM_OC6_SetConfig+0xc0>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x84>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	4a19      	ldr	r2, [pc, #100]	; (8003ae8 <TIM_OC6_SetConfig+0xc4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d00f      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x84>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a18      	ldr	r2, [pc, #96]	; (8003aec <TIM_OC6_SetConfig+0xc8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x84>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <TIM_OC6_SetConfig+0xcc>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x84>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a16      	ldr	r2, [pc, #88]	; (8003af4 <TIM_OC6_SetConfig+0xd0>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_OC6_SetConfig+0x84>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a15      	ldr	r2, [pc, #84]	; (8003af8 <TIM_OC6_SetConfig+0xd4>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d109      	bne.n	8003abc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003aae:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	695b      	ldr	r3, [r3, #20]
 8003ab4:	029b      	lsls	r3, r3, #10
 8003ab6:	697a      	ldr	r2, [r7, #20]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	621a      	str	r2, [r3, #32]
}
 8003ad6:	bf00      	nop
 8003ad8:	371c      	adds	r7, #28
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	40012c00 	.word	0x40012c00
 8003ae8:	40013400 	.word	0x40013400
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400
 8003af4:	40014800 	.word	0x40014800
 8003af8:	40015000 	.word	0x40015000

08003afc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b087      	sub	sp, #28
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	60f8      	str	r0, [r7, #12]
 8003b04:	60b9      	str	r1, [r7, #8]
 8003b06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6a1b      	ldr	r3, [r3, #32]
 8003b0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	f023 0201 	bic.w	r2, r3, #1
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	693a      	ldr	r2, [r7, #16]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b32:	697b      	ldr	r3, [r7, #20]
 8003b34:	f023 030a 	bic.w	r3, r3, #10
 8003b38:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b3a:	697a      	ldr	r2, [r7, #20]
 8003b3c:	68bb      	ldr	r3, [r7, #8]
 8003b3e:	4313      	orrs	r3, r2
 8003b40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	697a      	ldr	r2, [r7, #20]
 8003b4c:	621a      	str	r2, [r3, #32]
}
 8003b4e:	bf00      	nop
 8003b50:	371c      	adds	r7, #28
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr

08003b5a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	f023 0210 	bic.w	r2, r3, #16
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	031b      	lsls	r3, r3, #12
 8003b8a:	697a      	ldr	r2, [r7, #20]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b96:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	693a      	ldr	r2, [r7, #16]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	697a      	ldr	r2, [r7, #20]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b085      	sub	sp, #20
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	6078      	str	r0, [r7, #4]
 8003bc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8003bd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003bd6:	683a      	ldr	r2, [r7, #0]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	f043 0307 	orr.w	r3, r3, #7
 8003be0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	3714      	adds	r7, #20
 8003bec:	46bd      	mov	sp, r7
 8003bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf2:	4770      	bx	lr

08003bf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	607a      	str	r2, [r7, #4]
 8003c00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	021a      	lsls	r2, r3, #8
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	431a      	orrs	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	609a      	str	r2, [r3, #8]
}
 8003c28:	bf00      	nop
 8003c2a:	371c      	adds	r7, #28
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr

08003c34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b087      	sub	sp, #28
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	60f8      	str	r0, [r7, #12]
 8003c3c:	60b9      	str	r1, [r7, #8]
 8003c3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a1a      	ldr	r2, [r3, #32]
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	43db      	mvns	r3, r3
 8003c56:	401a      	ands	r2, r3
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1a      	ldr	r2, [r3, #32]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f003 031f 	and.w	r3, r3, #31
 8003c66:	6879      	ldr	r1, [r7, #4]
 8003c68:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6c:	431a      	orrs	r2, r3
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	bf00      	nop
 8003c74:	371c      	adds	r7, #28
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d109      	bne.n	8003ca4 <HAL_TIMEx_PWMN_Start+0x24>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	bf14      	ite	ne
 8003c9c:	2301      	movne	r3, #1
 8003c9e:	2300      	moveq	r3, #0
 8003ca0:	b2db      	uxtb	r3, r3
 8003ca2:	e022      	b.n	8003cea <HAL_TIMEx_PWMN_Start+0x6a>
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d109      	bne.n	8003cbe <HAL_TIMEx_PWMN_Start+0x3e>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	bf14      	ite	ne
 8003cb6:	2301      	movne	r3, #1
 8003cb8:	2300      	moveq	r3, #0
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	e015      	b.n	8003cea <HAL_TIMEx_PWMN_Start+0x6a>
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d109      	bne.n	8003cd8 <HAL_TIMEx_PWMN_Start+0x58>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003cca:	b2db      	uxtb	r3, r3
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	bf14      	ite	ne
 8003cd0:	2301      	movne	r3, #1
 8003cd2:	2300      	moveq	r3, #0
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	e008      	b.n	8003cea <HAL_TIMEx_PWMN_Start+0x6a>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	bf14      	ite	ne
 8003ce4:	2301      	movne	r3, #1
 8003ce6:	2300      	moveq	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e073      	b.n	8003dda <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d104      	bne.n	8003d02 <HAL_TIMEx_PWMN_Start+0x82>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d00:	e013      	b.n	8003d2a <HAL_TIMEx_PWMN_Start+0xaa>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d104      	bne.n	8003d12 <HAL_TIMEx_PWMN_Start+0x92>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2202      	movs	r2, #2
 8003d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d10:	e00b      	b.n	8003d2a <HAL_TIMEx_PWMN_Start+0xaa>
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	2b08      	cmp	r3, #8
 8003d16:	d104      	bne.n	8003d22 <HAL_TIMEx_PWMN_Start+0xa2>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003d20:	e003      	b.n	8003d2a <HAL_TIMEx_PWMN_Start+0xaa>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2202      	movs	r2, #2
 8003d26:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2204      	movs	r2, #4
 8003d30:	6839      	ldr	r1, [r7, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fa0c 	bl	8004150 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d46:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <HAL_TIMEx_PWMN_Start+0x164>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d5a:	d01d      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <HAL_TIMEx_PWMN_Start+0x168>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a20      	ldr	r2, [pc, #128]	; (8003dec <HAL_TIMEx_PWMN_Start+0x16c>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <HAL_TIMEx_PWMN_Start+0x170>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a1d      	ldr	r2, [pc, #116]	; (8003df4 <HAL_TIMEx_PWMN_Start+0x174>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a1b      	ldr	r2, [pc, #108]	; (8003df8 <HAL_TIMEx_PWMN_Start+0x178>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <HAL_TIMEx_PWMN_Start+0x118>
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a1a      	ldr	r2, [pc, #104]	; (8003dfc <HAL_TIMEx_PWMN_Start+0x17c>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d115      	bne.n	8003dc4 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	4b18      	ldr	r3, [pc, #96]	; (8003e00 <HAL_TIMEx_PWMN_Start+0x180>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d015      	beq.n	8003dd6 <HAL_TIMEx_PWMN_Start+0x156>
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003db0:	d011      	beq.n	8003dd6 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dc2:	e008      	b.n	8003dd6 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f042 0201 	orr.w	r2, r2, #1
 8003dd2:	601a      	str	r2, [r3, #0]
 8003dd4:	e000      	b.n	8003dd8 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dd6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3710      	adds	r7, #16
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40012c00 	.word	0x40012c00
 8003de8:	40000400 	.word	0x40000400
 8003dec:	40000800 	.word	0x40000800
 8003df0:	40000c00 	.word	0x40000c00
 8003df4:	40013400 	.word	0x40013400
 8003df8:	40014000 	.word	0x40014000
 8003dfc:	40015000 	.word	0x40015000
 8003e00:	00010007 	.word	0x00010007

08003e04 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	6839      	ldr	r1, [r7, #0]
 8003e16:	4618      	mov	r0, r3
 8003e18:	f000 f99a 	bl	8004150 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a1a      	ldr	r2, [r3, #32]
 8003e22:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10f      	bne.n	8003e4c <HAL_TIMEx_PWMN_Stop+0x48>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	6a1a      	ldr	r2, [r3, #32]
 8003e32:	f244 4344 	movw	r3, #17476	; 0x4444
 8003e36:	4013      	ands	r3, r2
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d107      	bne.n	8003e4c <HAL_TIMEx_PWMN_Stop+0x48>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	6a1a      	ldr	r2, [r3, #32]
 8003e52:	f241 1311 	movw	r3, #4369	; 0x1111
 8003e56:	4013      	ands	r3, r2
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10f      	bne.n	8003e7c <HAL_TIMEx_PWMN_Stop+0x78>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	6a1a      	ldr	r2, [r3, #32]
 8003e62:	f244 4344 	movw	r3, #17476	; 0x4444
 8003e66:	4013      	ands	r3, r2
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d107      	bne.n	8003e7c <HAL_TIMEx_PWMN_Stop+0x78>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f022 0201 	bic.w	r2, r2, #1
 8003e7a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <HAL_TIMEx_PWMN_Stop+0x88>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2201      	movs	r2, #1
 8003e86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e8a:	e013      	b.n	8003eb4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	2b04      	cmp	r3, #4
 8003e90:	d104      	bne.n	8003e9c <HAL_TIMEx_PWMN_Stop+0x98>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2201      	movs	r2, #1
 8003e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e9a:	e00b      	b.n	8003eb4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	2b08      	cmp	r3, #8
 8003ea0:	d104      	bne.n	8003eac <HAL_TIMEx_PWMN_Stop+0xa8>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003eaa:	e003      	b.n	8003eb4 <HAL_TIMEx_PWMN_Stop+0xb0>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3708      	adds	r7, #8
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
	...

08003ec0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b085      	sub	sp, #20
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d101      	bne.n	8003ed8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	e074      	b.n	8003fc2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2201      	movs	r2, #1
 8003edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a34      	ldr	r2, [pc, #208]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d009      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a33      	ldr	r2, [pc, #204]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d004      	beq.n	8003f16 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a31      	ldr	r2, [pc, #196]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d108      	bne.n	8003f28 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003f1c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a21      	ldr	r2, [pc, #132]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d022      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f58:	d01d      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d018      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1d      	ldr	r2, [pc, #116]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d013      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a1c      	ldr	r2, [pc, #112]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00e      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a15      	ldr	r2, [pc, #84]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d009      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a18      	ldr	r2, [pc, #96]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d004      	beq.n	8003f96 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a11      	ldr	r2, [pc, #68]	; (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d10c      	bne.n	8003fb0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f9c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	68ba      	ldr	r2, [r7, #8]
 8003fae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fc0:	2300      	movs	r3, #0
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3714      	adds	r7, #20
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40013400 	.word	0x40013400
 8003fd8:	40015000 	.word	0x40015000
 8003fdc:	40000400 	.word	0x40000400
 8003fe0:	40000800 	.word	0x40000800
 8003fe4:	40000c00 	.word	0x40000c00
 8003fe8:	40014000 	.word	0x40014000

08003fec <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004000:	2b01      	cmp	r3, #1
 8004002:	d101      	bne.n	8004008 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004004:	2302      	movs	r3, #2
 8004006:	e096      	b.n	8004136 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2201      	movs	r2, #1
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	68db      	ldr	r3, [r3, #12]
 800401a:	4313      	orrs	r3, r2
 800401c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4313      	orrs	r3, r2
 8004046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	695b      	ldr	r3, [r3, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406e:	4313      	orrs	r3, r2
 8004070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	699b      	ldr	r3, [r3, #24]
 800407c:	041b      	lsls	r3, r3, #16
 800407e:	4313      	orrs	r3, r2
 8004080:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2f      	ldr	r2, [pc, #188]	; (8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2d      	ldr	r2, [pc, #180]	; (8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d004      	beq.n	80040a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a2c      	ldr	r2, [pc, #176]	; (800414c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d106      	bne.n	80040ae <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	69db      	ldr	r3, [r3, #28]
 80040aa:	4313      	orrs	r3, r2
 80040ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a24      	ldr	r2, [pc, #144]	; (8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d009      	beq.n	80040cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a22      	ldr	r2, [pc, #136]	; (8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d004      	beq.n	80040cc <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d12b      	bne.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d6:	051b      	lsls	r3, r3, #20
 80040d8:	4313      	orrs	r3, r2
 80040da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	4313      	orrs	r3, r2
 80040f6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d009      	beq.n	8004116 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a10      	ldr	r2, [pc, #64]	; (8004148 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d004      	beq.n	8004116 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a0e      	ldr	r2, [pc, #56]	; (800414c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d106      	bne.n	8004124 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3714      	adds	r7, #20
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	40012c00 	.word	0x40012c00
 8004148:	40013400 	.word	0x40013400
 800414c:	40015000 	.word	0x40015000

08004150 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	f003 031f 	and.w	r3, r3, #31
 8004162:	2204      	movs	r2, #4
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	6a1a      	ldr	r2, [r3, #32]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	43db      	mvns	r3, r3
 8004172:	401a      	ands	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1a      	ldr	r2, [r3, #32]
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	f003 031f 	and.w	r3, r3, #31
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	fa01 f303 	lsl.w	r3, r1, r3
 8004188:	431a      	orrs	r2, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	621a      	str	r2, [r3, #32]
}
 800418e:	bf00      	nop
 8004190:	371c      	adds	r7, #28
 8004192:	46bd      	mov	sp, r7
 8004194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004198:	4770      	bx	lr

0800419a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d101      	bne.n	80041ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e042      	b.n	8004232 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d106      	bne.n	80041c4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f7fc fe52 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2224      	movs	r2, #36	; 0x24
 80041c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0201 	bic.w	r2, r2, #1
 80041da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	f000 fc51 	bl	8004a84 <UART_SetConfig>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d101      	bne.n	80041ec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e022      	b.n	8004232 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 ff41 	bl	800507c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004208:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689a      	ldr	r2, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004218:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0201 	orr.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 ffc8 	bl	80051c0 <UART_CheckIdleState>
 8004230:	4603      	mov	r3, r0
}
 8004232:	4618      	mov	r0, r3
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b08a      	sub	sp, #40	; 0x28
 800423e:	af02      	add	r7, sp, #8
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	603b      	str	r3, [r7, #0]
 8004246:	4613      	mov	r3, r2
 8004248:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004250:	2b20      	cmp	r3, #32
 8004252:	f040 8083 	bne.w	800435c <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <HAL_UART_Transmit+0x28>
 800425c:	88fb      	ldrh	r3, [r7, #6]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d101      	bne.n	8004266 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e07b      	b.n	800435e <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <HAL_UART_Transmit+0x3a>
 8004270:	2302      	movs	r3, #2
 8004272:	e074      	b.n	800435e <HAL_UART_Transmit+0x124>
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2221      	movs	r2, #33	; 0x21
 8004288:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800428c:	f7fc ffee 	bl	800126c <HAL_GetTick>
 8004290:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	88fa      	ldrh	r2, [r7, #6]
 800429e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042aa:	d108      	bne.n	80042be <HAL_UART_Transmit+0x84>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	691b      	ldr	r3, [r3, #16]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d104      	bne.n	80042be <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80042b4:	2300      	movs	r3, #0
 80042b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	61bb      	str	r3, [r7, #24]
 80042bc:	e003      	b.n	80042c6 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80042ce:	e02c      	b.n	800432a <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	9300      	str	r3, [sp, #0]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	2200      	movs	r2, #0
 80042d8:	2180      	movs	r1, #128	; 0x80
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 ffbb 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e039      	b.n	800435e <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10b      	bne.n	8004308 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	881b      	ldrh	r3, [r3, #0]
 80042f4:	461a      	mov	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	3302      	adds	r3, #2
 8004304:	61bb      	str	r3, [r7, #24]
 8004306:	e007      	b.n	8004318 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	781a      	ldrb	r2, [r3, #0]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	3301      	adds	r3, #1
 8004316:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800431e:	b29b      	uxth	r3, r3
 8004320:	3b01      	subs	r3, #1
 8004322:	b29a      	uxth	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8004330:	b29b      	uxth	r3, r3
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1cc      	bne.n	80042d0 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	9300      	str	r3, [sp, #0]
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	2200      	movs	r2, #0
 800433e:	2140      	movs	r1, #64	; 0x40
 8004340:	68f8      	ldr	r0, [r7, #12]
 8004342:	f000 ff88 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8004346:	4603      	mov	r3, r0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d001      	beq.n	8004350 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e006      	b.n	800435e <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2220      	movs	r2, #32
 8004354:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004358:	2300      	movs	r3, #0
 800435a:	e000      	b.n	800435e <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800435c:	2302      	movs	r3, #2
  }
}
 800435e:	4618      	mov	r0, r3
 8004360:	3720      	adds	r7, #32
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
	...

08004368 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b08a      	sub	sp, #40	; 0x28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	60b9      	str	r1, [r7, #8]
 8004372:	4613      	mov	r3, r2
 8004374:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437c:	2b20      	cmp	r3, #32
 800437e:	d142      	bne.n	8004406 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d002      	beq.n	800438c <HAL_UART_Receive_IT+0x24>
 8004386:	88fb      	ldrh	r3, [r7, #6]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d101      	bne.n	8004390 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800438c:	2301      	movs	r3, #1
 800438e:	e03b      	b.n	8004408 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004396:	2b01      	cmp	r3, #1
 8004398:	d101      	bne.n	800439e <HAL_UART_Receive_IT+0x36>
 800439a:	2302      	movs	r3, #2
 800439c:	e034      	b.n	8004408 <HAL_UART_Receive_IT+0xa0>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2200      	movs	r2, #0
 80043aa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4a17      	ldr	r2, [pc, #92]	; (8004410 <HAL_UART_Receive_IT+0xa8>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01f      	beq.n	80043f6 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d018      	beq.n	80043f6 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	613b      	str	r3, [r7, #16]
   return(result);
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043d8:	627b      	str	r3, [r7, #36]	; 0x24
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	623b      	str	r3, [r7, #32]
 80043e4:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	69f9      	ldr	r1, [r7, #28]
 80043e8:	6a3a      	ldr	r2, [r7, #32]
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	61bb      	str	r3, [r7, #24]
   return(result);
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80043f6:	88fb      	ldrh	r3, [r7, #6]
 80043f8:	461a      	mov	r2, r3
 80043fa:	68b9      	ldr	r1, [r7, #8]
 80043fc:	68f8      	ldr	r0, [r7, #12]
 80043fe:	f000 fff3 	bl	80053e8 <UART_Start_Receive_IT>
 8004402:	4603      	mov	r3, r0
 8004404:	e000      	b.n	8004408 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8004406:	2302      	movs	r3, #2
  }
}
 8004408:	4618      	mov	r0, r3
 800440a:	3728      	adds	r7, #40	; 0x28
 800440c:	46bd      	mov	sp, r7
 800440e:	bd80      	pop	{r7, pc}
 8004410:	40008000 	.word	0x40008000

08004414 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b0ba      	sub	sp, #232	; 0xe8
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800443a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800443e:	f640 030f 	movw	r3, #2063	; 0x80f
 8004442:	4013      	ands	r3, r2
 8004444:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004448:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800444c:	2b00      	cmp	r3, #0
 800444e:	d11b      	bne.n	8004488 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004454:	f003 0320 	and.w	r3, r3, #32
 8004458:	2b00      	cmp	r3, #0
 800445a:	d015      	beq.n	8004488 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800445c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004460:	f003 0320 	and.w	r3, r3, #32
 8004464:	2b00      	cmp	r3, #0
 8004466:	d105      	bne.n	8004474 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004468:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800446c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d009      	beq.n	8004488 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 82d6 	beq.w	8004a2a <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	4798      	blx	r3
      }
      return;
 8004486:	e2d0      	b.n	8004a2a <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004488:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800448c:	2b00      	cmp	r3, #0
 800448e:	f000 811f 	beq.w	80046d0 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004492:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004496:	4b8b      	ldr	r3, [pc, #556]	; (80046c4 <HAL_UART_IRQHandler+0x2b0>)
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d106      	bne.n	80044ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800449e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80044a2:	4b89      	ldr	r3, [pc, #548]	; (80046c8 <HAL_UART_IRQHandler+0x2b4>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	f000 8112 	beq.w	80046d0 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80044ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044b0:	f003 0301 	and.w	r3, r3, #1
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d011      	beq.n	80044dc <HAL_UART_IRQHandler+0xc8>
 80044b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d00b      	beq.n	80044dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	2201      	movs	r2, #1
 80044ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044d2:	f043 0201 	orr.w	r2, r3, #1
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80044dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d011      	beq.n	800450c <HAL_UART_IRQHandler+0xf8>
 80044e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80044ec:	f003 0301 	and.w	r3, r3, #1
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00b      	beq.n	800450c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	2202      	movs	r2, #2
 80044fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004502:	f043 0204 	orr.w	r2, r3, #4
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800450c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d011      	beq.n	800453c <HAL_UART_IRQHandler+0x128>
 8004518:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d00b      	beq.n	800453c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	2204      	movs	r2, #4
 800452a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004532:	f043 0202 	orr.w	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800453c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004540:	f003 0308 	and.w	r3, r3, #8
 8004544:	2b00      	cmp	r3, #0
 8004546:	d017      	beq.n	8004578 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004548:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d105      	bne.n	8004560 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004554:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004558:	4b5a      	ldr	r3, [pc, #360]	; (80046c4 <HAL_UART_IRQHandler+0x2b0>)
 800455a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00b      	beq.n	8004578 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	2208      	movs	r2, #8
 8004566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800456e:	f043 0208 	orr.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <HAL_UART_IRQHandler+0x196>
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004598:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045a0:	f043 0220 	orr.w	r2, r3, #32
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 823c 	beq.w	8004a2e <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80045b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ba:	f003 0320 	and.w	r3, r3, #32
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d013      	beq.n	80045ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80045c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045c6:	f003 0320 	and.w	r3, r3, #32
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d105      	bne.n	80045da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80045ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d007      	beq.n	80045ea <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045f0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045fe:	2b40      	cmp	r3, #64	; 0x40
 8004600:	d005      	beq.n	800460e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004606:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800460a:	2b00      	cmp	r3, #0
 800460c:	d04f      	beq.n	80046ae <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f001 f814 	bl	800563c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800461e:	2b40      	cmp	r3, #64	; 0x40
 8004620:	d141      	bne.n	80046a6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	3308      	adds	r3, #8
 8004628:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004638:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800463c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	3308      	adds	r3, #8
 800464a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800464e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004652:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004656:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800465a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800465e:	e841 2300 	strex	r3, r2, [r1]
 8004662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004666:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1d9      	bne.n	8004622 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004672:	2b00      	cmp	r3, #0
 8004674:	d013      	beq.n	800469e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800467a:	4a14      	ldr	r2, [pc, #80]	; (80046cc <HAL_UART_IRQHandler+0x2b8>)
 800467c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004682:	4618      	mov	r0, r3
 8004684:	f7fc ff88 	bl	8001598 <HAL_DMA_Abort_IT>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d017      	beq.n	80046be <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004698:	4610      	mov	r0, r2
 800469a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800469c:	e00f      	b.n	80046be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f9da 	bl	8004a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a4:	e00b      	b.n	80046be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 f9d6 	bl	8004a58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046ac:	e007      	b.n	80046be <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80046ae:	6878      	ldr	r0, [r7, #4]
 80046b0:	f000 f9d2 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80046bc:	e1b7      	b.n	8004a2e <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046be:	bf00      	nop
    return;
 80046c0:	e1b5      	b.n	8004a2e <HAL_UART_IRQHandler+0x61a>
 80046c2:	bf00      	nop
 80046c4:	10000001 	.word	0x10000001
 80046c8:	04000120 	.word	0x04000120
 80046cc:	08005709 	.word	0x08005709

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	f040 814a 	bne.w	800496e <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80046da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046de:	f003 0310 	and.w	r3, r3, #16
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 8143 	beq.w	800496e <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80046e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	f000 813c 	beq.w	800496e <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	2210      	movs	r2, #16
 80046fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004708:	2b40      	cmp	r3, #64	; 0x40
 800470a:	f040 80b5 	bne.w	8004878 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800471a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8187 	beq.w	8004a32 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800472a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800472e:	429a      	cmp	r2, r3
 8004730:	f080 817f 	bcs.w	8004a32 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800473a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	f040 8086 	bne.w	800485c <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800475c:	e853 3f00 	ldrex	r3, [r3]
 8004760:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004764:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004768:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800476c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	461a      	mov	r2, r3
 8004776:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800477a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800477e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004782:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004786:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800478a:	e841 2300 	strex	r3, r2, [r1]
 800478e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004792:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1da      	bne.n	8004750 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80047aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	3308      	adds	r3, #8
 80047ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80047be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80047c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80047c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80047ca:	e841 2300 	strex	r3, r2, [r1]
 80047ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80047d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d1e1      	bne.n	800479a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	3308      	adds	r3, #8
 80047dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80047e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	3308      	adds	r3, #8
 80047f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80047fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004800:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004802:	e841 2300 	strex	r3, r2, [r1]
 8004806:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004808:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1e3      	bne.n	80047d6 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2220      	movs	r2, #32
 8004812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004822:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004824:	e853 3f00 	ldrex	r3, [r3]
 8004828:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800482a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800482c:	f023 0310 	bic.w	r3, r3, #16
 8004830:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	461a      	mov	r2, r3
 800483a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800483e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004840:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004842:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004844:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004846:	e841 2300 	strex	r3, r2, [r1]
 800484a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800484c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1e4      	bne.n	800481c <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004856:	4618      	mov	r0, r3
 8004858:	f7fc fe45 	bl	80014e6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004868:	b29b      	uxth	r3, r3
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	b29b      	uxth	r3, r3
 800486e:	4619      	mov	r1, r3
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f8fb 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004876:	e0dc      	b.n	8004a32 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004884:	b29b      	uxth	r3, r3
 8004886:	1ad3      	subs	r3, r2, r3
 8004888:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004892:	b29b      	uxth	r3, r3
 8004894:	2b00      	cmp	r3, #0
 8004896:	f000 80ce 	beq.w	8004a36 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800489a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 80c9 	beq.w	8004a36 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80048b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80048c6:	647b      	str	r3, [r7, #68]	; 0x44
 80048c8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80048cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80048ce:	e841 2300 	strex	r3, r2, [r1]
 80048d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80048d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e4      	bne.n	80048a4 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	3308      	adds	r3, #8
 80048e0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048e4:	e853 3f00 	ldrex	r3, [r3]
 80048e8:	623b      	str	r3, [r7, #32]
   return(result);
 80048ea:	6a3b      	ldr	r3, [r7, #32]
 80048ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004902:	633a      	str	r2, [r7, #48]	; 0x30
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004908:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800490a:	e841 2300 	strex	r3, r2, [r1]
 800490e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1e1      	bne.n	80048da <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2220      	movs	r2, #32
 800491a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	e853 3f00 	ldrex	r3, [r3]
 8004936:	60fb      	str	r3, [r7, #12]
   return(result);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	f023 0310 	bic.w	r3, r3, #16
 800493e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800494c:	61fb      	str	r3, [r7, #28]
 800494e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004950:	69b9      	ldr	r1, [r7, #24]
 8004952:	69fa      	ldr	r2, [r7, #28]
 8004954:	e841 2300 	strex	r3, r2, [r1]
 8004958:	617b      	str	r3, [r7, #20]
   return(result);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1e4      	bne.n	800492a <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004960:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004964:	4619      	mov	r1, r3
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f000 f880 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800496c:	e063      	b.n	8004a36 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800496e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00e      	beq.n	8004998 <HAL_UART_IRQHandler+0x584>
 800497a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d008      	beq.n	8004998 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800498e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f001 fb57 	bl	8006044 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004996:	e051      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d014      	beq.n	80049ce <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80049a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d105      	bne.n	80049bc <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80049b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d03a      	beq.n	8004a3a <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
    }
    return;
 80049cc:	e035      	b.n	8004a3a <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80049ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d009      	beq.n	80049ee <HAL_UART_IRQHandler+0x5da>
 80049da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d003      	beq.n	80049ee <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fea4 	bl	8005734 <UART_EndTransmit_IT>
    return;
 80049ec:	e026      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d009      	beq.n	8004a0e <HAL_UART_IRQHandler+0x5fa>
 80049fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d003      	beq.n	8004a0e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f001 fb30 	bl	800606c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a0c:	e016      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a12:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d010      	beq.n	8004a3c <HAL_UART_IRQHandler+0x628>
 8004a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	da0c      	bge.n	8004a3c <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f001 fb18 	bl	8006058 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004a28:	e008      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
      return;
 8004a2a:	bf00      	nop
 8004a2c:	e006      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
    return;
 8004a2e:	bf00      	nop
 8004a30:	e004      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
      return;
 8004a32:	bf00      	nop
 8004a34:	e002      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
      return;
 8004a36:	bf00      	nop
 8004a38:	e000      	b.n	8004a3c <HAL_UART_IRQHandler+0x628>
    return;
 8004a3a:	bf00      	nop
  }
}
 8004a3c:	37e8      	adds	r7, #232	; 0xe8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop

08004a44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b083      	sub	sp, #12
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004a4c:	bf00      	nop
 8004a4e:	370c      	adds	r7, #12
 8004a50:	46bd      	mov	sp, r7
 8004a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a56:	4770      	bx	lr

08004a58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	b083      	sub	sp, #12
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004a60:	bf00      	nop
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004a88:	b08c      	sub	sp, #48	; 0x30
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	695b      	ldr	r3, [r3, #20]
 8004aa2:	431a      	orrs	r2, r3
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	4baa      	ldr	r3, [pc, #680]	; (8004d5c <UART_SetConfig+0x2d8>)
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	6812      	ldr	r2, [r2, #0]
 8004aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004abc:	430b      	orrs	r3, r1
 8004abe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	68da      	ldr	r2, [r3, #12]
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	430a      	orrs	r2, r1
 8004ad4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	4a9f      	ldr	r2, [pc, #636]	; (8004d60 <UART_SetConfig+0x2dc>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d004      	beq.n	8004af0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	6a1b      	ldr	r3, [r3, #32]
 8004aea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004aec:	4313      	orrs	r3, r2
 8004aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004af0:	697b      	ldr	r3, [r7, #20]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004afa:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	6812      	ldr	r2, [r2, #0]
 8004b02:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b0e:	f023 010f 	bic.w	r1, r3, #15
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	430a      	orrs	r2, r1
 8004b1c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a90      	ldr	r2, [pc, #576]	; (8004d64 <UART_SetConfig+0x2e0>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d125      	bne.n	8004b74 <UART_SetConfig+0xf0>
 8004b28:	4b8f      	ldr	r3, [pc, #572]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b2e:	f003 0303 	and.w	r3, r3, #3
 8004b32:	2b03      	cmp	r3, #3
 8004b34:	d81a      	bhi.n	8004b6c <UART_SetConfig+0xe8>
 8004b36:	a201      	add	r2, pc, #4	; (adr r2, 8004b3c <UART_SetConfig+0xb8>)
 8004b38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b3c:	08004b4d 	.word	0x08004b4d
 8004b40:	08004b5d 	.word	0x08004b5d
 8004b44:	08004b55 	.word	0x08004b55
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b52:	e116      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004b54:	2302      	movs	r3, #2
 8004b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b5a:	e112      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004b5c:	2304      	movs	r3, #4
 8004b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b62:	e10e      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004b64:	2308      	movs	r3, #8
 8004b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b6a:	e10a      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004b6c:	2310      	movs	r3, #16
 8004b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004b72:	e106      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a7c      	ldr	r2, [pc, #496]	; (8004d6c <UART_SetConfig+0x2e8>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d138      	bne.n	8004bf0 <UART_SetConfig+0x16c>
 8004b7e:	4b7a      	ldr	r3, [pc, #488]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b84:	f003 030c 	and.w	r3, r3, #12
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d82d      	bhi.n	8004be8 <UART_SetConfig+0x164>
 8004b8c:	a201      	add	r2, pc, #4	; (adr r2, 8004b94 <UART_SetConfig+0x110>)
 8004b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b92:	bf00      	nop
 8004b94:	08004bc9 	.word	0x08004bc9
 8004b98:	08004be9 	.word	0x08004be9
 8004b9c:	08004be9 	.word	0x08004be9
 8004ba0:	08004be9 	.word	0x08004be9
 8004ba4:	08004bd9 	.word	0x08004bd9
 8004ba8:	08004be9 	.word	0x08004be9
 8004bac:	08004be9 	.word	0x08004be9
 8004bb0:	08004be9 	.word	0x08004be9
 8004bb4:	08004bd1 	.word	0x08004bd1
 8004bb8:	08004be9 	.word	0x08004be9
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004be1 	.word	0x08004be1
 8004bc8:	2300      	movs	r3, #0
 8004bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bce:	e0d8      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bd6:	e0d4      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bde:	e0d0      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004be0:	2308      	movs	r3, #8
 8004be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004be6:	e0cc      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004be8:	2310      	movs	r3, #16
 8004bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004bee:	e0c8      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004bf0:	697b      	ldr	r3, [r7, #20]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a5e      	ldr	r2, [pc, #376]	; (8004d70 <UART_SetConfig+0x2ec>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d125      	bne.n	8004c46 <UART_SetConfig+0x1c2>
 8004bfa:	4b5b      	ldr	r3, [pc, #364]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c00:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004c04:	2b30      	cmp	r3, #48	; 0x30
 8004c06:	d016      	beq.n	8004c36 <UART_SetConfig+0x1b2>
 8004c08:	2b30      	cmp	r3, #48	; 0x30
 8004c0a:	d818      	bhi.n	8004c3e <UART_SetConfig+0x1ba>
 8004c0c:	2b20      	cmp	r3, #32
 8004c0e:	d00a      	beq.n	8004c26 <UART_SetConfig+0x1a2>
 8004c10:	2b20      	cmp	r3, #32
 8004c12:	d814      	bhi.n	8004c3e <UART_SetConfig+0x1ba>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <UART_SetConfig+0x19a>
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	d008      	beq.n	8004c2e <UART_SetConfig+0x1aa>
 8004c1c:	e00f      	b.n	8004c3e <UART_SetConfig+0x1ba>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c24:	e0ad      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c26:	2302      	movs	r3, #2
 8004c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c2c:	e0a9      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c2e:	2304      	movs	r3, #4
 8004c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c34:	e0a5      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c36:	2308      	movs	r3, #8
 8004c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c3c:	e0a1      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c3e:	2310      	movs	r3, #16
 8004c40:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c44:	e09d      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c46:	697b      	ldr	r3, [r7, #20]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a4a      	ldr	r2, [pc, #296]	; (8004d74 <UART_SetConfig+0x2f0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d125      	bne.n	8004c9c <UART_SetConfig+0x218>
 8004c50:	4b45      	ldr	r3, [pc, #276]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c56:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c5a:	2bc0      	cmp	r3, #192	; 0xc0
 8004c5c:	d016      	beq.n	8004c8c <UART_SetConfig+0x208>
 8004c5e:	2bc0      	cmp	r3, #192	; 0xc0
 8004c60:	d818      	bhi.n	8004c94 <UART_SetConfig+0x210>
 8004c62:	2b80      	cmp	r3, #128	; 0x80
 8004c64:	d00a      	beq.n	8004c7c <UART_SetConfig+0x1f8>
 8004c66:	2b80      	cmp	r3, #128	; 0x80
 8004c68:	d814      	bhi.n	8004c94 <UART_SetConfig+0x210>
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d002      	beq.n	8004c74 <UART_SetConfig+0x1f0>
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d008      	beq.n	8004c84 <UART_SetConfig+0x200>
 8004c72:	e00f      	b.n	8004c94 <UART_SetConfig+0x210>
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c7a:	e082      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c82:	e07e      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c84:	2304      	movs	r3, #4
 8004c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c8a:	e07a      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c8c:	2308      	movs	r3, #8
 8004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c92:	e076      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c94:	2310      	movs	r3, #16
 8004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004c9a:	e072      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004c9c:	697b      	ldr	r3, [r7, #20]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a35      	ldr	r2, [pc, #212]	; (8004d78 <UART_SetConfig+0x2f4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d12a      	bne.n	8004cfc <UART_SetConfig+0x278>
 8004ca6:	4b30      	ldr	r3, [pc, #192]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cb0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cb4:	d01a      	beq.n	8004cec <UART_SetConfig+0x268>
 8004cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cba:	d81b      	bhi.n	8004cf4 <UART_SetConfig+0x270>
 8004cbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc0:	d00c      	beq.n	8004cdc <UART_SetConfig+0x258>
 8004cc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cc6:	d815      	bhi.n	8004cf4 <UART_SetConfig+0x270>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <UART_SetConfig+0x250>
 8004ccc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd0:	d008      	beq.n	8004ce4 <UART_SetConfig+0x260>
 8004cd2:	e00f      	b.n	8004cf4 <UART_SetConfig+0x270>
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cda:	e052      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004cdc:	2302      	movs	r3, #2
 8004cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ce2:	e04e      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004ce4:	2304      	movs	r3, #4
 8004ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cea:	e04a      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004cec:	2308      	movs	r3, #8
 8004cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cf2:	e046      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004cf4:	2310      	movs	r3, #16
 8004cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004cfa:	e042      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a17      	ldr	r2, [pc, #92]	; (8004d60 <UART_SetConfig+0x2dc>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d13a      	bne.n	8004d7c <UART_SetConfig+0x2f8>
 8004d06:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <UART_SetConfig+0x2e4>)
 8004d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d0c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004d10:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d14:	d01a      	beq.n	8004d4c <UART_SetConfig+0x2c8>
 8004d16:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004d1a:	d81b      	bhi.n	8004d54 <UART_SetConfig+0x2d0>
 8004d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d20:	d00c      	beq.n	8004d3c <UART_SetConfig+0x2b8>
 8004d22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d26:	d815      	bhi.n	8004d54 <UART_SetConfig+0x2d0>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <UART_SetConfig+0x2b0>
 8004d2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d30:	d008      	beq.n	8004d44 <UART_SetConfig+0x2c0>
 8004d32:	e00f      	b.n	8004d54 <UART_SetConfig+0x2d0>
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d3a:	e022      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d42:	e01e      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004d44:	2304      	movs	r3, #4
 8004d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d4a:	e01a      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004d4c:	2308      	movs	r3, #8
 8004d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d52:	e016      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004d54:	2310      	movs	r3, #16
 8004d56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d5a:	e012      	b.n	8004d82 <UART_SetConfig+0x2fe>
 8004d5c:	cfff69f3 	.word	0xcfff69f3
 8004d60:	40008000 	.word	0x40008000
 8004d64:	40013800 	.word	0x40013800
 8004d68:	40021000 	.word	0x40021000
 8004d6c:	40004400 	.word	0x40004400
 8004d70:	40004800 	.word	0x40004800
 8004d74:	40004c00 	.word	0x40004c00
 8004d78:	40005000 	.word	0x40005000
 8004d7c:	2310      	movs	r3, #16
 8004d7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4aae      	ldr	r2, [pc, #696]	; (8005040 <UART_SetConfig+0x5bc>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	f040 8097 	bne.w	8004ebc <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004d8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d823      	bhi.n	8004dde <UART_SetConfig+0x35a>
 8004d96:	a201      	add	r2, pc, #4	; (adr r2, 8004d9c <UART_SetConfig+0x318>)
 8004d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d9c:	08004dc1 	.word	0x08004dc1
 8004da0:	08004ddf 	.word	0x08004ddf
 8004da4:	08004dc9 	.word	0x08004dc9
 8004da8:	08004ddf 	.word	0x08004ddf
 8004dac:	08004dcf 	.word	0x08004dcf
 8004db0:	08004ddf 	.word	0x08004ddf
 8004db4:	08004ddf 	.word	0x08004ddf
 8004db8:	08004ddf 	.word	0x08004ddf
 8004dbc:	08004dd7 	.word	0x08004dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dc0:	f7fd fb7a 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8004dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dc6:	e010      	b.n	8004dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b9e      	ldr	r3, [pc, #632]	; (8005044 <UART_SetConfig+0x5c0>)
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004dcc:	e00d      	b.n	8004dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dce:	f7fd fb05 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8004dd2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004dd4:	e009      	b.n	8004dea <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004ddc:	e005      	b.n	8004dea <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004dde:	2300      	movs	r3, #0
 8004de0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004de8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 8130 	beq.w	8005052 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df6:	4a94      	ldr	r2, [pc, #592]	; (8005048 <UART_SetConfig+0x5c4>)
 8004df8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e00:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e04:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	685a      	ldr	r2, [r3, #4]
 8004e0a:	4613      	mov	r3, r2
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	4413      	add	r3, r2
 8004e10:	69ba      	ldr	r2, [r7, #24]
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d305      	bcc.n	8004e22 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e1c:	69ba      	ldr	r2, [r7, #24]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d903      	bls.n	8004e2a <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004e28:	e113      	b.n	8005052 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	60fa      	str	r2, [r7, #12]
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e36:	4a84      	ldr	r2, [pc, #528]	; (8005048 <UART_SetConfig+0x5c4>)
 8004e38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2200      	movs	r2, #0
 8004e40:	603b      	str	r3, [r7, #0]
 8004e42:	607a      	str	r2, [r7, #4]
 8004e44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e48:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e4c:	f7fb fa48 	bl	80002e0 <__aeabi_uldivmod>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	4610      	mov	r0, r2
 8004e56:	4619      	mov	r1, r3
 8004e58:	f04f 0200 	mov.w	r2, #0
 8004e5c:	f04f 0300 	mov.w	r3, #0
 8004e60:	020b      	lsls	r3, r1, #8
 8004e62:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e66:	0202      	lsls	r2, r0, #8
 8004e68:	6979      	ldr	r1, [r7, #20]
 8004e6a:	6849      	ldr	r1, [r1, #4]
 8004e6c:	0849      	lsrs	r1, r1, #1
 8004e6e:	2000      	movs	r0, #0
 8004e70:	460c      	mov	r4, r1
 8004e72:	4605      	mov	r5, r0
 8004e74:	eb12 0804 	adds.w	r8, r2, r4
 8004e78:	eb43 0905 	adc.w	r9, r3, r5
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	469a      	mov	sl, r3
 8004e84:	4693      	mov	fp, r2
 8004e86:	4652      	mov	r2, sl
 8004e88:	465b      	mov	r3, fp
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb fa27 	bl	80002e0 <__aeabi_uldivmod>
 8004e92:	4602      	mov	r2, r0
 8004e94:	460b      	mov	r3, r1
 8004e96:	4613      	mov	r3, r2
 8004e98:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ea0:	d308      	bcc.n	8004eb4 <UART_SetConfig+0x430>
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ea8:	d204      	bcs.n	8004eb4 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6a3a      	ldr	r2, [r7, #32]
 8004eb0:	60da      	str	r2, [r3, #12]
 8004eb2:	e0ce      	b.n	8005052 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004eba:	e0ca      	b.n	8005052 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	69db      	ldr	r3, [r3, #28]
 8004ec0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ec4:	d166      	bne.n	8004f94 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004ec6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004eca:	2b08      	cmp	r3, #8
 8004ecc:	d827      	bhi.n	8004f1e <UART_SetConfig+0x49a>
 8004ece:	a201      	add	r2, pc, #4	; (adr r2, 8004ed4 <UART_SetConfig+0x450>)
 8004ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed4:	08004ef9 	.word	0x08004ef9
 8004ed8:	08004f01 	.word	0x08004f01
 8004edc:	08004f09 	.word	0x08004f09
 8004ee0:	08004f1f 	.word	0x08004f1f
 8004ee4:	08004f0f 	.word	0x08004f0f
 8004ee8:	08004f1f 	.word	0x08004f1f
 8004eec:	08004f1f 	.word	0x08004f1f
 8004ef0:	08004f1f 	.word	0x08004f1f
 8004ef4:	08004f17 	.word	0x08004f17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ef8:	f7fd fade 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8004efc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004efe:	e014      	b.n	8004f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f00:	f7fd faf0 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 8004f04:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f06:	e010      	b.n	8004f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f08:	4b4e      	ldr	r3, [pc, #312]	; (8005044 <UART_SetConfig+0x5c0>)
 8004f0a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f0c:	e00d      	b.n	8004f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0e:	f7fd fa65 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8004f12:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f14:	e009      	b.n	8004f2a <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f1a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f1c:	e005      	b.n	8004f2a <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f22:	2301      	movs	r3, #1
 8004f24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	f000 8090 	beq.w	8005052 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f36:	4a44      	ldr	r2, [pc, #272]	; (8005048 <UART_SetConfig+0x5c4>)
 8004f38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f3c:	461a      	mov	r2, r3
 8004f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f44:	005a      	lsls	r2, r3, #1
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	685b      	ldr	r3, [r3, #4]
 8004f4a:	085b      	lsrs	r3, r3, #1
 8004f4c:	441a      	add	r2, r3
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f56:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f58:	6a3b      	ldr	r3, [r7, #32]
 8004f5a:	2b0f      	cmp	r3, #15
 8004f5c:	d916      	bls.n	8004f8c <UART_SetConfig+0x508>
 8004f5e:	6a3b      	ldr	r3, [r7, #32]
 8004f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f64:	d212      	bcs.n	8004f8c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	f023 030f 	bic.w	r3, r3, #15
 8004f6e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f70:	6a3b      	ldr	r3, [r7, #32]
 8004f72:	085b      	lsrs	r3, r3, #1
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	8bfb      	ldrh	r3, [r7, #30]
 8004f7e:	4313      	orrs	r3, r2
 8004f80:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	8bfa      	ldrh	r2, [r7, #30]
 8004f88:	60da      	str	r2, [r3, #12]
 8004f8a:	e062      	b.n	8005052 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f92:	e05e      	b.n	8005052 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004f98:	2b08      	cmp	r3, #8
 8004f9a:	d828      	bhi.n	8004fee <UART_SetConfig+0x56a>
 8004f9c:	a201      	add	r2, pc, #4	; (adr r2, 8004fa4 <UART_SetConfig+0x520>)
 8004f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fa2:	bf00      	nop
 8004fa4:	08004fc9 	.word	0x08004fc9
 8004fa8:	08004fd1 	.word	0x08004fd1
 8004fac:	08004fd9 	.word	0x08004fd9
 8004fb0:	08004fef 	.word	0x08004fef
 8004fb4:	08004fdf 	.word	0x08004fdf
 8004fb8:	08004fef 	.word	0x08004fef
 8004fbc:	08004fef 	.word	0x08004fef
 8004fc0:	08004fef 	.word	0x08004fef
 8004fc4:	08004fe7 	.word	0x08004fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fc8:	f7fd fa76 	bl	80024b8 <HAL_RCC_GetPCLK1Freq>
 8004fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fce:	e014      	b.n	8004ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004fd0:	f7fd fa88 	bl	80024e4 <HAL_RCC_GetPCLK2Freq>
 8004fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fd6:	e010      	b.n	8004ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004fd8:	4b1a      	ldr	r3, [pc, #104]	; (8005044 <UART_SetConfig+0x5c0>)
 8004fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fdc:	e00d      	b.n	8004ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fde:	f7fd f9fd 	bl	80023dc <HAL_RCC_GetSysClockFreq>
 8004fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004fe4:	e009      	b.n	8004ffa <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004fec:	e005      	b.n	8004ffa <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004ff8:	bf00      	nop
    }

    if (pclk != 0U)
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d028      	beq.n	8005052 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005004:	4a10      	ldr	r2, [pc, #64]	; (8005048 <UART_SetConfig+0x5c4>)
 8005006:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800500a:	461a      	mov	r2, r3
 800500c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	085b      	lsrs	r3, r3, #1
 8005018:	441a      	add	r2, r3
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005022:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005024:	6a3b      	ldr	r3, [r7, #32]
 8005026:	2b0f      	cmp	r3, #15
 8005028:	d910      	bls.n	800504c <UART_SetConfig+0x5c8>
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005030:	d20c      	bcs.n	800504c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005032:	6a3b      	ldr	r3, [r7, #32]
 8005034:	b29a      	uxth	r2, r3
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	60da      	str	r2, [r3, #12]
 800503c:	e009      	b.n	8005052 <UART_SetConfig+0x5ce>
 800503e:	bf00      	nop
 8005040:	40008000 	.word	0x40008000
 8005044:	00f42400 	.word	0x00f42400
 8005048:	08007990 	.word	0x08007990
      }
      else
      {
        ret = HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	2201      	movs	r2, #1
 8005056:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2201      	movs	r2, #1
 800505e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2200      	movs	r2, #0
 8005066:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	2200      	movs	r2, #0
 800506c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800506e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8005072:	4618      	mov	r0, r3
 8005074:	3730      	adds	r7, #48	; 0x30
 8005076:	46bd      	mov	sp, r7
 8005078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800507c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d00a      	beq.n	80050a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	430a      	orrs	r2, r1
 80050a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050aa:	f003 0302 	and.w	r3, r3, #2
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00a      	beq.n	80050c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685b      	ldr	r3, [r3, #4]
 80050b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	430a      	orrs	r2, r1
 80050c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050cc:	f003 0304 	and.w	r3, r3, #4
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d00a      	beq.n	80050ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ee:	f003 0308 	and.w	r3, r3, #8
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d00a      	beq.n	800510c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	430a      	orrs	r2, r1
 800510a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005110:	f003 0310 	and.w	r3, r3, #16
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00a      	beq.n	800512e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	689b      	ldr	r3, [r3, #8]
 800511e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	430a      	orrs	r2, r1
 800512c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	f003 0320 	and.w	r3, r3, #32
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00a      	beq.n	8005150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	430a      	orrs	r2, r1
 800514e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01a      	beq.n	8005192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	430a      	orrs	r2, r1
 8005170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800517a:	d10a      	bne.n	8005192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	430a      	orrs	r2, r1
 8005190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00a      	beq.n	80051b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	430a      	orrs	r2, r1
 80051b2:	605a      	str	r2, [r3, #4]
  }
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051be:	4770      	bx	lr

080051c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051d0:	f7fc f84c 	bl	800126c <HAL_GetTick>
 80051d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f003 0308 	and.w	r3, r3, #8
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d10e      	bne.n	8005202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e8:	9300      	str	r3, [sp, #0]
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	2200      	movs	r2, #0
 80051ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f82f 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e025      	b.n	800524e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b04      	cmp	r3, #4
 800520e:	d10e      	bne.n	800522e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005214:	9300      	str	r3, [sp, #0]
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f819 	bl	8005256 <UART_WaitOnFlagUntilTimeout>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	d001      	beq.n	800522e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e00f      	b.n	800524e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2220      	movs	r2, #32
 8005232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2220      	movs	r2, #32
 800523a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2200      	movs	r2, #0
 8005242:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800524c:	2300      	movs	r3, #0
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}

08005256 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b09c      	sub	sp, #112	; 0x70
 800525a:	af00      	add	r7, sp, #0
 800525c:	60f8      	str	r0, [r7, #12]
 800525e:	60b9      	str	r1, [r7, #8]
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	4613      	mov	r3, r2
 8005264:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005266:	e0a9      	b.n	80053bc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005268:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800526a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800526e:	f000 80a5 	beq.w	80053bc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005272:	f7fb fffb 	bl	800126c <HAL_GetTick>
 8005276:	4602      	mov	r2, r0
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	1ad3      	subs	r3, r2, r3
 800527c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800527e:	429a      	cmp	r2, r3
 8005280:	d302      	bcc.n	8005288 <UART_WaitOnFlagUntilTimeout+0x32>
 8005282:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005284:	2b00      	cmp	r3, #0
 8005286:	d140      	bne.n	800530a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800528e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005290:	e853 3f00 	ldrex	r3, [r3]
 8005294:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005296:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005298:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800529c:	667b      	str	r3, [r7, #100]	; 0x64
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	461a      	mov	r2, r3
 80052a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80052a6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052a8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052aa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80052ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80052ae:	e841 2300 	strex	r3, r2, [r1]
 80052b2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80052b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d1e6      	bne.n	8005288 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	3308      	adds	r3, #8
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052c4:	e853 3f00 	ldrex	r3, [r3]
 80052c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052cc:	f023 0301 	bic.w	r3, r3, #1
 80052d0:	663b      	str	r3, [r7, #96]	; 0x60
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	3308      	adds	r3, #8
 80052d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80052da:	64ba      	str	r2, [r7, #72]	; 0x48
 80052dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80052e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80052e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e5      	bne.n	80052ba <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2220      	movs	r2, #32
 80052fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2200      	movs	r2, #0
 8005302:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005306:	2303      	movs	r3, #3
 8005308:	e069      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d051      	beq.n	80053bc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005322:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005326:	d149      	bne.n	80053bc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005330:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533a:	e853 3f00 	ldrex	r3, [r3]
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005342:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005346:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
 8005352:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005354:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005356:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005358:	e841 2300 	strex	r3, r2, [r1]
 800535c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d1e6      	bne.n	8005332 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	3308      	adds	r3, #8
 800536a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	e853 3f00 	ldrex	r3, [r3]
 8005372:	613b      	str	r3, [r7, #16]
   return(result);
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f023 0301 	bic.w	r3, r3, #1
 800537a:	66bb      	str	r3, [r7, #104]	; 0x68
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	3308      	adds	r3, #8
 8005382:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005384:	623a      	str	r2, [r7, #32]
 8005386:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005388:	69f9      	ldr	r1, [r7, #28]
 800538a:	6a3a      	ldr	r2, [r7, #32]
 800538c:	e841 2300 	strex	r3, r2, [r1]
 8005390:	61bb      	str	r3, [r7, #24]
   return(result);
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d1e5      	bne.n	8005364 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2220      	movs	r2, #32
 800539c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2220      	movs	r2, #32
 80053a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2220      	movs	r2, #32
 80053ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e010      	b.n	80053de <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	69da      	ldr	r2, [r3, #28]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	4013      	ands	r3, r2
 80053c6:	68ba      	ldr	r2, [r7, #8]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	461a      	mov	r2, r3
 80053d4:	79fb      	ldrb	r3, [r7, #7]
 80053d6:	429a      	cmp	r2, r3
 80053d8:	f43f af46 	beq.w	8005268 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3770      	adds	r7, #112	; 0x70
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
	...

080053e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b0a3      	sub	sp, #140	; 0x8c
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	60f8      	str	r0, [r7, #12]
 80053f0:	60b9      	str	r1, [r7, #8]
 80053f2:	4613      	mov	r3, r2
 80053f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	88fa      	ldrh	r2, [r7, #6]
 8005400:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	88fa      	ldrh	r2, [r7, #6]
 8005408:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2200      	movs	r2, #0
 8005410:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541a:	d10e      	bne.n	800543a <UART_Start_Receive_IT+0x52>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d105      	bne.n	8005430 <UART_Start_Receive_IT+0x48>
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f240 12ff 	movw	r2, #511	; 0x1ff
 800542a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800542e:	e02d      	b.n	800548c <UART_Start_Receive_IT+0xa4>
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	22ff      	movs	r2, #255	; 0xff
 8005434:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005438:	e028      	b.n	800548c <UART_Start_Receive_IT+0xa4>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d10d      	bne.n	800545e <UART_Start_Receive_IT+0x76>
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d104      	bne.n	8005454 <UART_Start_Receive_IT+0x6c>
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	22ff      	movs	r2, #255	; 0xff
 800544e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005452:	e01b      	b.n	800548c <UART_Start_Receive_IT+0xa4>
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	227f      	movs	r2, #127	; 0x7f
 8005458:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800545c:	e016      	b.n	800548c <UART_Start_Receive_IT+0xa4>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	689b      	ldr	r3, [r3, #8]
 8005462:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005466:	d10d      	bne.n	8005484 <UART_Start_Receive_IT+0x9c>
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d104      	bne.n	800547a <UART_Start_Receive_IT+0x92>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	227f      	movs	r2, #127	; 0x7f
 8005474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005478:	e008      	b.n	800548c <UART_Start_Receive_IT+0xa4>
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	223f      	movs	r2, #63	; 0x3f
 800547e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005482:	e003      	b.n	800548c <UART_Start_Receive_IT+0xa4>
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2200      	movs	r2, #0
 8005488:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2222      	movs	r2, #34	; 0x22
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3308      	adds	r3, #8
 80054a2:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054a6:	e853 3f00 	ldrex	r3, [r3]
 80054aa:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80054ac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3308      	adds	r3, #8
 80054bc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80054c0:	673a      	str	r2, [r7, #112]	; 0x70
 80054c2:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c4:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80054c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80054c8:	e841 2300 	strex	r3, r2, [r1]
 80054cc:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80054ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d1e3      	bne.n	800549c <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054dc:	d153      	bne.n	8005586 <UART_Start_Receive_IT+0x19e>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054e4:	88fa      	ldrh	r2, [r7, #6]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d34d      	bcc.n	8005586 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	d107      	bne.n	8005504 <UART_Start_Receive_IT+0x11c>
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	691b      	ldr	r3, [r3, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d103      	bne.n	8005504 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4a4b      	ldr	r2, [pc, #300]	; (800562c <UART_Start_Receive_IT+0x244>)
 8005500:	671a      	str	r2, [r3, #112]	; 0x70
 8005502:	e002      	b.n	800550a <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	4a4a      	ldr	r2, [pc, #296]	; (8005630 <UART_Start_Receive_IT+0x248>)
 8005508:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d01a      	beq.n	8005550 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005522:	e853 3f00 	ldrex	r3, [r3]
 8005526:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800552a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800552e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	461a      	mov	r2, r3
 8005538:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800553c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800553e:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005540:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005542:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005544:	e841 2300 	strex	r3, r2, [r1]
 8005548:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800554a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800554c:	2b00      	cmp	r3, #0
 800554e:	d1e4      	bne.n	800551a <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3308      	adds	r3, #8
 8005556:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005562:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005566:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	3308      	adds	r3, #8
 800556e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005570:	64ba      	str	r2, [r7, #72]	; 0x48
 8005572:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005576:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800557e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e5      	bne.n	8005550 <UART_Start_Receive_IT+0x168>
 8005584:	e04a      	b.n	800561c <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800558e:	d107      	bne.n	80055a0 <UART_Start_Receive_IT+0x1b8>
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4a26      	ldr	r2, [pc, #152]	; (8005634 <UART_Start_Receive_IT+0x24c>)
 800559c:	671a      	str	r2, [r3, #112]	; 0x70
 800559e:	e002      	b.n	80055a6 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	4a25      	ldr	r2, [pc, #148]	; (8005638 <UART_Start_Receive_IT+0x250>)
 80055a4:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	2200      	movs	r2, #0
 80055aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d019      	beq.n	80055ea <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055be:	e853 3f00 	ldrex	r3, [r3]
 80055c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c6:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80055ca:	677b      	str	r3, [r7, #116]	; 0x74
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	461a      	mov	r2, r3
 80055d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80055d4:	637b      	str	r3, [r7, #52]	; 0x34
 80055d6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80055da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055dc:	e841 2300 	strex	r3, r2, [r1]
 80055e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80055e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d1e6      	bne.n	80055b6 <UART_Start_Receive_IT+0x1ce>
 80055e8:	e018      	b.n	800561c <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f0:	697b      	ldr	r3, [r7, #20]
 80055f2:	e853 3f00 	ldrex	r3, [r3]
 80055f6:	613b      	str	r3, [r7, #16]
   return(result);
 80055f8:	693b      	ldr	r3, [r7, #16]
 80055fa:	f043 0320 	orr.w	r3, r3, #32
 80055fe:	67bb      	str	r3, [r7, #120]	; 0x78
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	461a      	mov	r2, r3
 8005606:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005608:	623b      	str	r3, [r7, #32]
 800560a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800560c:	69f9      	ldr	r1, [r7, #28]
 800560e:	6a3a      	ldr	r2, [r7, #32]
 8005610:	e841 2300 	strex	r3, r2, [r1]
 8005614:	61bb      	str	r3, [r7, #24]
   return(result);
 8005616:	69bb      	ldr	r3, [r7, #24]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d1e6      	bne.n	80055ea <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	378c      	adds	r7, #140	; 0x8c
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	08005d45 	.word	0x08005d45
 8005630:	08005a4d 	.word	0x08005a4d
 8005634:	080058eb 	.word	0x080058eb
 8005638:	0800578b 	.word	0x0800578b

0800563c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b095      	sub	sp, #84	; 0x54
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800564a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005658:	64fb      	str	r3, [r7, #76]	; 0x4c
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	461a      	mov	r2, r3
 8005660:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005662:	643b      	str	r3, [r7, #64]	; 0x40
 8005664:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005666:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005668:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005672:	2b00      	cmp	r3, #0
 8005674:	d1e6      	bne.n	8005644 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3308      	adds	r3, #8
 800567c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	e853 3f00 	ldrex	r3, [r3]
 8005684:	61fb      	str	r3, [r7, #28]
   return(result);
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	64bb      	str	r3, [r7, #72]	; 0x48
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3308      	adds	r3, #8
 8005698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800569a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800569c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80056a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80056a2:	e841 2300 	strex	r3, r2, [r1]
 80056a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80056a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d1e3      	bne.n	8005676 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d118      	bne.n	80056e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	e853 3f00 	ldrex	r3, [r3]
 80056c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	f023 0310 	bic.w	r3, r3, #16
 80056ca:	647b      	str	r3, [r7, #68]	; 0x44
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	461a      	mov	r2, r3
 80056d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056d4:	61bb      	str	r3, [r7, #24]
 80056d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d8:	6979      	ldr	r1, [r7, #20]
 80056da:	69ba      	ldr	r2, [r7, #24]
 80056dc:	e841 2300 	strex	r3, r2, [r1]
 80056e0:	613b      	str	r3, [r7, #16]
   return(result);
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1e6      	bne.n	80056b6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	671a      	str	r2, [r3, #112]	; 0x70
}
 80056fc:	bf00      	nop
 80056fe:	3754      	adds	r7, #84	; 0x54
 8005700:	46bd      	mov	sp, r7
 8005702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005706:	4770      	bx	lr

08005708 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b084      	sub	sp, #16
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005714:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f7ff f996 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800572c:	bf00      	nop
 800572e:	3710      	adds	r7, #16
 8005730:	46bd      	mov	sp, r7
 8005732:	bd80      	pop	{r7, pc}

08005734 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b088      	sub	sp, #32
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	60bb      	str	r3, [r7, #8]
   return(result);
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	461a      	mov	r2, r3
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	61bb      	str	r3, [r7, #24]
 800575c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6979      	ldr	r1, [r7, #20]
 8005760:	69ba      	ldr	r2, [r7, #24]
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	613b      	str	r3, [r7, #16]
   return(result);
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e6      	bne.n	800573c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f7ff f961 	bl	8004a44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005782:	bf00      	nop
 8005784:	3720      	adds	r7, #32
 8005786:	46bd      	mov	sp, r7
 8005788:	bd80      	pop	{r7, pc}

0800578a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800578a:	b580      	push	{r7, lr}
 800578c:	b096      	sub	sp, #88	; 0x58
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005798:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80057a2:	2b22      	cmp	r3, #34	; 0x22
 80057a4:	f040 8095 	bne.w	80058d2 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ae:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80057b2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80057b6:	b2d9      	uxtb	r1, r3
 80057b8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c2:	400a      	ands	r2, r1
 80057c4:	b2d2      	uxtb	r2, r2
 80057c6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057cc:	1c5a      	adds	r2, r3, #1
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057d8:	b29b      	uxth	r3, r3
 80057da:	3b01      	subs	r3, #1
 80057dc:	b29a      	uxth	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d178      	bne.n	80058e2 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005800:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005804:	653b      	str	r3, [r7, #80]	; 0x50
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800580e:	647b      	str	r3, [r7, #68]	; 0x44
 8005810:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005812:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005814:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800581c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e6      	bne.n	80057f0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3308      	adds	r3, #8
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	623b      	str	r3, [r7, #32]
   return(result);
 8005832:	6a3b      	ldr	r3, [r7, #32]
 8005834:	f023 0301 	bic.w	r3, r3, #1
 8005838:	64fb      	str	r3, [r7, #76]	; 0x4c
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005842:	633a      	str	r2, [r7, #48]	; 0x30
 8005844:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005848:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e5      	bne.n	8005822 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2220      	movs	r2, #32
 800585a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2200      	movs	r2, #0
 8005862:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005868:	2b01      	cmp	r3, #1
 800586a:	d12e      	bne.n	80058ca <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2200      	movs	r2, #0
 8005870:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	e853 3f00 	ldrex	r3, [r3]
 800587e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f023 0310 	bic.w	r3, r3, #16
 8005886:	64bb      	str	r3, [r7, #72]	; 0x48
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	461a      	mov	r2, r3
 800588e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005890:	61fb      	str	r3, [r7, #28]
 8005892:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005894:	69b9      	ldr	r1, [r7, #24]
 8005896:	69fa      	ldr	r2, [r7, #28]
 8005898:	e841 2300 	strex	r3, r2, [r1]
 800589c:	617b      	str	r3, [r7, #20]
   return(result);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d1e6      	bne.n	8005872 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f003 0310 	and.w	r3, r3, #16
 80058ae:	2b10      	cmp	r3, #16
 80058b0:	d103      	bne.n	80058ba <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	2210      	movs	r2, #16
 80058b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80058c0:	4619      	mov	r1, r3
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7ff f8d2 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058c8:	e00b      	b.n	80058e2 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f7fb f8c4 	bl	8000a58 <HAL_UART_RxCpltCallback>
}
 80058d0:	e007      	b.n	80058e2 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	699a      	ldr	r2, [r3, #24]
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0208 	orr.w	r2, r2, #8
 80058e0:	619a      	str	r2, [r3, #24]
}
 80058e2:	bf00      	nop
 80058e4:	3758      	adds	r7, #88	; 0x58
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80058ea:	b580      	push	{r7, lr}
 80058ec:	b096      	sub	sp, #88	; 0x58
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058f8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	2b22      	cmp	r3, #34	; 0x22
 8005904:	f040 8095 	bne.w	8005a32 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005918:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800591c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005920:	4013      	ands	r3, r2
 8005922:	b29a      	uxth	r2, r3
 8005924:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005926:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800592c:	1c9a      	adds	r2, r3, #2
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800594a:	b29b      	uxth	r3, r3
 800594c:	2b00      	cmp	r3, #0
 800594e:	d178      	bne.n	8005a42 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800595e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005960:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800596e:	643b      	str	r3, [r7, #64]	; 0x40
 8005970:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005974:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800597c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	61fb      	str	r3, [r7, #28]
   return(result);
 8005992:	69fb      	ldr	r3, [r7, #28]
 8005994:	f023 0301 	bic.w	r3, r3, #1
 8005998:	64bb      	str	r3, [r7, #72]	; 0x48
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80059a4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80059a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2220      	movs	r2, #32
 80059ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d12e      	bne.n	8005a2a <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	e853 3f00 	ldrex	r3, [r3]
 80059de:	60bb      	str	r3, [r7, #8]
   return(result);
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	f023 0310 	bic.w	r3, r3, #16
 80059e6:	647b      	str	r3, [r7, #68]	; 0x44
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	461a      	mov	r2, r3
 80059ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f4:	6979      	ldr	r1, [r7, #20]
 80059f6:	69ba      	ldr	r2, [r7, #24]
 80059f8:	e841 2300 	strex	r3, r2, [r1]
 80059fc:	613b      	str	r3, [r7, #16]
   return(result);
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d1e6      	bne.n	80059d2 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d103      	bne.n	8005a1a <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	2210      	movs	r2, #16
 8005a18:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a20:	4619      	mov	r1, r3
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff f822 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a28:	e00b      	b.n	8005a42 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f7fb f814 	bl	8000a58 <HAL_UART_RxCpltCallback>
}
 8005a30:	e007      	b.n	8005a42 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	699a      	ldr	r2, [r3, #24]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f042 0208 	orr.w	r2, r2, #8
 8005a40:	619a      	str	r2, [r3, #24]
}
 8005a42:	bf00      	nop
 8005a44:	3758      	adds	r7, #88	; 0x58
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b0a6      	sub	sp, #152	; 0x98
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a5a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	69db      	ldr	r3, [r3, #28]
 8005a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a82:	2b22      	cmp	r3, #34	; 0x22
 8005a84:	f040 814f 	bne.w	8005d26 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a8e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005a92:	e0f6      	b.n	8005c82 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a9e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005aa2:	b2d9      	uxtb	r1, r3
 8005aa4:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005aae:	400a      	ands	r2, r1
 8005ab0:	b2d2      	uxtb	r2, r2
 8005ab2:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab8:	1c5a      	adds	r2, r3, #1
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	3b01      	subs	r3, #1
 8005ac8:	b29a      	uxth	r2, r3
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69db      	ldr	r3, [r3, #28]
 8005ad6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005ada:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d053      	beq.n	8005b8e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ae6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005aea:	f003 0301 	and.w	r3, r3, #1
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d011      	beq.n	8005b16 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005af2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005af6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d00b      	beq.n	8005b16 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2201      	movs	r2, #1
 8005b04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0c:	f043 0201 	orr.w	r2, r3, #1
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b1a:	f003 0302 	and.w	r3, r3, #2
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d011      	beq.n	8005b46 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005b22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00b      	beq.n	8005b46 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2202      	movs	r2, #2
 8005b34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b3c:	f043 0204 	orr.w	r2, r3, #4
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005b46:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005b4a:	f003 0304 	and.w	r3, r3, #4
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d011      	beq.n	8005b76 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005b52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005b56:	f003 0301 	and.w	r3, r3, #1
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d00b      	beq.n	8005b76 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	2204      	movs	r2, #4
 8005b64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b6c:	f043 0202 	orr.w	r2, r3, #2
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d006      	beq.n	8005b8e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b80:	6878      	ldr	r0, [r7, #4]
 8005b82:	f7fe ff69 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b94:	b29b      	uxth	r3, r3
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d173      	bne.n	8005c82 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ba2:	e853 3f00 	ldrex	r3, [r3]
 8005ba6:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005ba8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005baa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005bbc:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bbe:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc0:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005bc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005bc4:	e841 2300 	strex	r3, r2, [r1]
 8005bc8:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005bca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e4      	bne.n	8005b9a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3308      	adds	r3, #8
 8005bd6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005bda:	e853 3f00 	ldrex	r3, [r3]
 8005bde:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005be0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005be2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005be6:	f023 0301 	bic.w	r3, r3, #1
 8005bea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005bf4:	657a      	str	r2, [r7, #84]	; 0x54
 8005bf6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005bfa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005bfc:	e841 2300 	strex	r3, r2, [r1]
 8005c00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005c02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d1e3      	bne.n	8005bd0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c1a:	2b01      	cmp	r3, #1
 8005c1c:	d12e      	bne.n	8005c7c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c34:	f023 0310 	bic.w	r3, r3, #16
 8005c38:	67bb      	str	r3, [r7, #120]	; 0x78
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	461a      	mov	r2, r3
 8005c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c42:	643b      	str	r3, [r7, #64]	; 0x40
 8005c44:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c46:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005c48:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c4a:	e841 2300 	strex	r3, r2, [r1]
 8005c4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1e6      	bne.n	8005c24 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	f003 0310 	and.w	r3, r3, #16
 8005c60:	2b10      	cmp	r3, #16
 8005c62:	d103      	bne.n	8005c6c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2210      	movs	r2, #16
 8005c6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005c72:	4619      	mov	r1, r3
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f7fe fef9 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
 8005c7a:	e002      	b.n	8005c82 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f7fa feeb 	bl	8000a58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005c82:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d006      	beq.n	8005c98 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005c8a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c8e:	f003 0320 	and.w	r3, r3, #32
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	f47f aefe 	bne.w	8005a94 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c9e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ca2:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d045      	beq.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005cb0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d23e      	bcs.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	3308      	adds	r3, #8
 8005cbe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	e853 3f00 	ldrex	r3, [r3]
 8005cc6:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cce:	673b      	str	r3, [r7, #112]	; 0x70
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3308      	adds	r3, #8
 8005cd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005cd8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ce0:	e841 2300 	strex	r3, r2, [r1]
 8005ce4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d1e5      	bne.n	8005cb8 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a14      	ldr	r2, [pc, #80]	; (8005d40 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005cf0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	e853 3f00 	ldrex	r3, [r3]
 8005cfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	f043 0320 	orr.w	r3, r3, #32
 8005d06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	461a      	mov	r2, r3
 8005d0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d10:	61bb      	str	r3, [r7, #24]
 8005d12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d14:	6979      	ldr	r1, [r7, #20]
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	e841 2300 	strex	r3, r2, [r1]
 8005d1c:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d1e6      	bne.n	8005cf2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005d24:	e007      	b.n	8005d36 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	699a      	ldr	r2, [r3, #24]
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f042 0208 	orr.w	r2, r2, #8
 8005d34:	619a      	str	r2, [r3, #24]
}
 8005d36:	bf00      	nop
 8005d38:	3798      	adds	r7, #152	; 0x98
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	bd80      	pop	{r7, pc}
 8005d3e:	bf00      	nop
 8005d40:	0800578b 	.word	0x0800578b

08005d44 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b0a8      	sub	sp, #160	; 0xa0
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005d52:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	69db      	ldr	r3, [r3, #28]
 8005d5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d7a:	2b22      	cmp	r3, #34	; 0x22
 8005d7c:	f040 8153 	bne.w	8006026 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005d86:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005d8a:	e0fa      	b.n	8005f82 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d92:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005d9e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005da2:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005da6:	4013      	ands	r3, r2
 8005da8:	b29a      	uxth	r2, r3
 8005daa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dae:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db4:	1c9a      	adds	r2, r3, #2
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dc0:	b29b      	uxth	r3, r3
 8005dc2:	3b01      	subs	r3, #1
 8005dc4:	b29a      	uxth	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005dd6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005dda:	f003 0307 	and.w	r3, r3, #7
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d053      	beq.n	8005e8a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005de2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005de6:	f003 0301 	and.w	r3, r3, #1
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d011      	beq.n	8005e12 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005dee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d00b      	beq.n	8005e12 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e08:	f043 0201 	orr.w	r2, r3, #1
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e16:	f003 0302 	and.w	r3, r3, #2
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d011      	beq.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e22:	f003 0301 	and.w	r3, r3, #1
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d00b      	beq.n	8005e42 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2202      	movs	r2, #2
 8005e30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e38:	f043 0204 	orr.w	r2, r3, #4
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e42:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005e46:	f003 0304 	and.w	r3, r3, #4
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d011      	beq.n	8005e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005e4e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e52:	f003 0301 	and.w	r3, r3, #1
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00b      	beq.n	8005e72 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	2204      	movs	r2, #4
 8005e60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e68:	f043 0202 	orr.w	r2, r3, #2
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d006      	beq.n	8005e8a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7fe fdeb 	bl	8004a58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2200      	movs	r2, #0
 8005e86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e90:	b29b      	uxth	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d175      	bne.n	8005f82 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e9e:	e853 3f00 	ldrex	r3, [r3]
 8005ea2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ea6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eaa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eba:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ebe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005ec0:	e841 2300 	strex	r3, r2, [r1]
 8005ec4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ec6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1e4      	bne.n	8005e96 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	3308      	adds	r3, #8
 8005ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ed6:	e853 3f00 	ldrex	r3, [r3]
 8005eda:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	3308      	adds	r3, #8
 8005ef0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ef4:	65ba      	str	r2, [r7, #88]	; 0x58
 8005ef6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005efa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005efc:	e841 2300 	strex	r3, r2, [r1]
 8005f00:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d1e1      	bne.n	8005ecc <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2220      	movs	r2, #32
 8005f0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2200      	movs	r2, #0
 8005f14:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d12e      	bne.n	8005f7c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2c:	e853 3f00 	ldrex	r3, [r3]
 8005f30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f34:	f023 0310 	bic.w	r3, r3, #16
 8005f38:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005f42:	647b      	str	r3, [r7, #68]	; 0x44
 8005f44:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005f48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f4a:	e841 2300 	strex	r3, r2, [r1]
 8005f4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005f50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d1e6      	bne.n	8005f24 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	f003 0310 	and.w	r3, r3, #16
 8005f60:	2b10      	cmp	r3, #16
 8005f62:	d103      	bne.n	8005f6c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2210      	movs	r2, #16
 8005f6a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7fe fd79 	bl	8004a6c <HAL_UARTEx_RxEventCallback>
 8005f7a:	e002      	b.n	8005f82 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7fa fd6b 	bl	8000a58 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005f82:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d006      	beq.n	8005f98 <UART_RxISR_16BIT_FIFOEN+0x254>
 8005f8a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f8e:	f003 0320 	and.w	r3, r3, #32
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f47f aefa 	bne.w	8005d8c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f9e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005fa2:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d045      	beq.n	8006036 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005fb0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d23e      	bcs.n	8006036 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	3308      	adds	r3, #8
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fc2:	e853 3f00 	ldrex	r3, [r3]
 8005fc6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fc8:	6a3b      	ldr	r3, [r7, #32]
 8005fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fce:	677b      	str	r3, [r7, #116]	; 0x74
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	3308      	adds	r3, #8
 8005fd6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8005fd8:	633a      	str	r2, [r7, #48]	; 0x30
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005fde:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fe0:	e841 2300 	strex	r3, r2, [r1]
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d1e5      	bne.n	8005fb8 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	4a14      	ldr	r2, [pc, #80]	; (8006040 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8005ff0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	693b      	ldr	r3, [r7, #16]
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f043 0320 	orr.w	r3, r3, #32
 8006006:	673b      	str	r3, [r7, #112]	; 0x70
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	461a      	mov	r2, r3
 800600e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006010:	61fb      	str	r3, [r7, #28]
 8006012:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006014:	69b9      	ldr	r1, [r7, #24]
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	e841 2300 	strex	r3, r2, [r1]
 800601c:	617b      	str	r3, [r7, #20]
   return(result);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d1e6      	bne.n	8005ff2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006024:	e007      	b.n	8006036 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0208 	orr.w	r2, r2, #8
 8006034:	619a      	str	r2, [r3, #24]
}
 8006036:	bf00      	nop
 8006038:	37a0      	adds	r7, #160	; 0xa0
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	080058eb 	.word	0x080058eb

08006044 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006044:	b480      	push	{r7}
 8006046:	b083      	sub	sp, #12
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006060:	bf00      	nop
 8006062:	370c      	adds	r7, #12
 8006064:	46bd      	mov	sp, r7
 8006066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606a:	4770      	bx	lr

0800606c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800606c:	b480      	push	{r7}
 800606e:	b083      	sub	sp, #12
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006074:	bf00      	nop
 8006076:	370c      	adds	r7, #12
 8006078:	46bd      	mov	sp, r7
 800607a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607e:	4770      	bx	lr

08006080 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006080:	b480      	push	{r7}
 8006082:	b085      	sub	sp, #20
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800608e:	2b01      	cmp	r3, #1
 8006090:	d101      	bne.n	8006096 <HAL_UARTEx_DisableFifoMode+0x16>
 8006092:	2302      	movs	r3, #2
 8006094:	e027      	b.n	80060e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2201      	movs	r2, #1
 800609a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2224      	movs	r2, #36	; 0x24
 80060a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 0201 	bic.w	r2, r2, #1
 80060bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80060c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68fa      	ldr	r2, [r7, #12]
 80060d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3714      	adds	r7, #20
 80060ea:	46bd      	mov	sp, r7
 80060ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f0:	4770      	bx	lr

080060f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
 80060fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006102:	2b01      	cmp	r3, #1
 8006104:	d101      	bne.n	800610a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006106:	2302      	movs	r3, #2
 8006108:	e02d      	b.n	8006166 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2224      	movs	r2, #36	; 0x24
 8006116:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0201 	bic.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	689b      	ldr	r3, [r3, #8]
 8006138:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	683a      	ldr	r2, [r7, #0]
 8006142:	430a      	orrs	r2, r1
 8006144:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 f850 	bl	80061ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2220      	movs	r2, #32
 8006158:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2200      	movs	r2, #0
 8006160:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006164:	2300      	movs	r3, #0
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800616e:	b580      	push	{r7, lr}
 8006170:	b084      	sub	sp, #16
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800617e:	2b01      	cmp	r3, #1
 8006180:	d101      	bne.n	8006186 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006182:	2302      	movs	r3, #2
 8006184:	e02d      	b.n	80061e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2201      	movs	r2, #1
 800618a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2224      	movs	r2, #36	; 0x24
 8006192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f022 0201 	bic.w	r2, r2, #1
 80061ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	430a      	orrs	r2, r1
 80061c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f812 	bl	80061ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	68fa      	ldr	r2, [r7, #12]
 80061ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2220      	movs	r2, #32
 80061d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}
	...

080061ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b085      	sub	sp, #20
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d108      	bne.n	800620e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800620c:	e031      	b.n	8006272 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800620e:	2308      	movs	r3, #8
 8006210:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006212:	2308      	movs	r3, #8
 8006214:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	0e5b      	lsrs	r3, r3, #25
 800621e:	b2db      	uxtb	r3, r3
 8006220:	f003 0307 	and.w	r3, r3, #7
 8006224:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689b      	ldr	r3, [r3, #8]
 800622c:	0f5b      	lsrs	r3, r3, #29
 800622e:	b2db      	uxtb	r3, r3
 8006230:	f003 0307 	and.w	r3, r3, #7
 8006234:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006236:	7bbb      	ldrb	r3, [r7, #14]
 8006238:	7b3a      	ldrb	r2, [r7, #12]
 800623a:	4911      	ldr	r1, [pc, #68]	; (8006280 <UARTEx_SetNbDataToProcess+0x94>)
 800623c:	5c8a      	ldrb	r2, [r1, r2]
 800623e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006242:	7b3a      	ldrb	r2, [r7, #12]
 8006244:	490f      	ldr	r1, [pc, #60]	; (8006284 <UARTEx_SetNbDataToProcess+0x98>)
 8006246:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006248:	fb93 f3f2 	sdiv	r3, r3, r2
 800624c:	b29a      	uxth	r2, r3
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006254:	7bfb      	ldrb	r3, [r7, #15]
 8006256:	7b7a      	ldrb	r2, [r7, #13]
 8006258:	4909      	ldr	r1, [pc, #36]	; (8006280 <UARTEx_SetNbDataToProcess+0x94>)
 800625a:	5c8a      	ldrb	r2, [r1, r2]
 800625c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006260:	7b7a      	ldrb	r2, [r7, #13]
 8006262:	4908      	ldr	r1, [pc, #32]	; (8006284 <UARTEx_SetNbDataToProcess+0x98>)
 8006264:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006266:	fb93 f3f2 	sdiv	r3, r3, r2
 800626a:	b29a      	uxth	r2, r3
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006272:	bf00      	nop
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	080079a8 	.word	0x080079a8
 8006284:	080079b0 	.word	0x080079b0

08006288 <__errno>:
 8006288:	4b01      	ldr	r3, [pc, #4]	; (8006290 <__errno+0x8>)
 800628a:	6818      	ldr	r0, [r3, #0]
 800628c:	4770      	bx	lr
 800628e:	bf00      	nop
 8006290:	200000dc 	.word	0x200000dc

08006294 <__libc_init_array>:
 8006294:	b570      	push	{r4, r5, r6, lr}
 8006296:	4d0d      	ldr	r5, [pc, #52]	; (80062cc <__libc_init_array+0x38>)
 8006298:	4c0d      	ldr	r4, [pc, #52]	; (80062d0 <__libc_init_array+0x3c>)
 800629a:	1b64      	subs	r4, r4, r5
 800629c:	10a4      	asrs	r4, r4, #2
 800629e:	2600      	movs	r6, #0
 80062a0:	42a6      	cmp	r6, r4
 80062a2:	d109      	bne.n	80062b8 <__libc_init_array+0x24>
 80062a4:	4d0b      	ldr	r5, [pc, #44]	; (80062d4 <__libc_init_array+0x40>)
 80062a6:	4c0c      	ldr	r4, [pc, #48]	; (80062d8 <__libc_init_array+0x44>)
 80062a8:	f001 fac8 	bl	800783c <_init>
 80062ac:	1b64      	subs	r4, r4, r5
 80062ae:	10a4      	asrs	r4, r4, #2
 80062b0:	2600      	movs	r6, #0
 80062b2:	42a6      	cmp	r6, r4
 80062b4:	d105      	bne.n	80062c2 <__libc_init_array+0x2e>
 80062b6:	bd70      	pop	{r4, r5, r6, pc}
 80062b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062bc:	4798      	blx	r3
 80062be:	3601      	adds	r6, #1
 80062c0:	e7ee      	b.n	80062a0 <__libc_init_array+0xc>
 80062c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062c6:	4798      	blx	r3
 80062c8:	3601      	adds	r6, #1
 80062ca:	e7f2      	b.n	80062b2 <__libc_init_array+0x1e>
 80062cc:	08007b08 	.word	0x08007b08
 80062d0:	08007b08 	.word	0x08007b08
 80062d4:	08007b08 	.word	0x08007b08
 80062d8:	08007b0c 	.word	0x08007b0c

080062dc <memset>:
 80062dc:	4402      	add	r2, r0
 80062de:	4603      	mov	r3, r0
 80062e0:	4293      	cmp	r3, r2
 80062e2:	d100      	bne.n	80062e6 <memset+0xa>
 80062e4:	4770      	bx	lr
 80062e6:	f803 1b01 	strb.w	r1, [r3], #1
 80062ea:	e7f9      	b.n	80062e0 <memset+0x4>

080062ec <_puts_r>:
 80062ec:	b570      	push	{r4, r5, r6, lr}
 80062ee:	460e      	mov	r6, r1
 80062f0:	4605      	mov	r5, r0
 80062f2:	b118      	cbz	r0, 80062fc <_puts_r+0x10>
 80062f4:	6983      	ldr	r3, [r0, #24]
 80062f6:	b90b      	cbnz	r3, 80062fc <_puts_r+0x10>
 80062f8:	f000 fae2 	bl	80068c0 <__sinit>
 80062fc:	69ab      	ldr	r3, [r5, #24]
 80062fe:	68ac      	ldr	r4, [r5, #8]
 8006300:	b913      	cbnz	r3, 8006308 <_puts_r+0x1c>
 8006302:	4628      	mov	r0, r5
 8006304:	f000 fadc 	bl	80068c0 <__sinit>
 8006308:	4b2c      	ldr	r3, [pc, #176]	; (80063bc <_puts_r+0xd0>)
 800630a:	429c      	cmp	r4, r3
 800630c:	d120      	bne.n	8006350 <_puts_r+0x64>
 800630e:	686c      	ldr	r4, [r5, #4]
 8006310:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006312:	07db      	lsls	r3, r3, #31
 8006314:	d405      	bmi.n	8006322 <_puts_r+0x36>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	0598      	lsls	r0, r3, #22
 800631a:	d402      	bmi.n	8006322 <_puts_r+0x36>
 800631c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800631e:	f000 fb7f 	bl	8006a20 <__retarget_lock_acquire_recursive>
 8006322:	89a3      	ldrh	r3, [r4, #12]
 8006324:	0719      	lsls	r1, r3, #28
 8006326:	d51d      	bpl.n	8006364 <_puts_r+0x78>
 8006328:	6923      	ldr	r3, [r4, #16]
 800632a:	b1db      	cbz	r3, 8006364 <_puts_r+0x78>
 800632c:	3e01      	subs	r6, #1
 800632e:	68a3      	ldr	r3, [r4, #8]
 8006330:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006334:	3b01      	subs	r3, #1
 8006336:	60a3      	str	r3, [r4, #8]
 8006338:	bb39      	cbnz	r1, 800638a <_puts_r+0x9e>
 800633a:	2b00      	cmp	r3, #0
 800633c:	da38      	bge.n	80063b0 <_puts_r+0xc4>
 800633e:	4622      	mov	r2, r4
 8006340:	210a      	movs	r1, #10
 8006342:	4628      	mov	r0, r5
 8006344:	f000 f8c4 	bl	80064d0 <__swbuf_r>
 8006348:	3001      	adds	r0, #1
 800634a:	d011      	beq.n	8006370 <_puts_r+0x84>
 800634c:	250a      	movs	r5, #10
 800634e:	e011      	b.n	8006374 <_puts_r+0x88>
 8006350:	4b1b      	ldr	r3, [pc, #108]	; (80063c0 <_puts_r+0xd4>)
 8006352:	429c      	cmp	r4, r3
 8006354:	d101      	bne.n	800635a <_puts_r+0x6e>
 8006356:	68ac      	ldr	r4, [r5, #8]
 8006358:	e7da      	b.n	8006310 <_puts_r+0x24>
 800635a:	4b1a      	ldr	r3, [pc, #104]	; (80063c4 <_puts_r+0xd8>)
 800635c:	429c      	cmp	r4, r3
 800635e:	bf08      	it	eq
 8006360:	68ec      	ldreq	r4, [r5, #12]
 8006362:	e7d5      	b.n	8006310 <_puts_r+0x24>
 8006364:	4621      	mov	r1, r4
 8006366:	4628      	mov	r0, r5
 8006368:	f000 f904 	bl	8006574 <__swsetup_r>
 800636c:	2800      	cmp	r0, #0
 800636e:	d0dd      	beq.n	800632c <_puts_r+0x40>
 8006370:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8006374:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006376:	07da      	lsls	r2, r3, #31
 8006378:	d405      	bmi.n	8006386 <_puts_r+0x9a>
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	059b      	lsls	r3, r3, #22
 800637e:	d402      	bmi.n	8006386 <_puts_r+0x9a>
 8006380:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006382:	f000 fb4e 	bl	8006a22 <__retarget_lock_release_recursive>
 8006386:	4628      	mov	r0, r5
 8006388:	bd70      	pop	{r4, r5, r6, pc}
 800638a:	2b00      	cmp	r3, #0
 800638c:	da04      	bge.n	8006398 <_puts_r+0xac>
 800638e:	69a2      	ldr	r2, [r4, #24]
 8006390:	429a      	cmp	r2, r3
 8006392:	dc06      	bgt.n	80063a2 <_puts_r+0xb6>
 8006394:	290a      	cmp	r1, #10
 8006396:	d004      	beq.n	80063a2 <_puts_r+0xb6>
 8006398:	6823      	ldr	r3, [r4, #0]
 800639a:	1c5a      	adds	r2, r3, #1
 800639c:	6022      	str	r2, [r4, #0]
 800639e:	7019      	strb	r1, [r3, #0]
 80063a0:	e7c5      	b.n	800632e <_puts_r+0x42>
 80063a2:	4622      	mov	r2, r4
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 f893 	bl	80064d0 <__swbuf_r>
 80063aa:	3001      	adds	r0, #1
 80063ac:	d1bf      	bne.n	800632e <_puts_r+0x42>
 80063ae:	e7df      	b.n	8006370 <_puts_r+0x84>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	250a      	movs	r5, #10
 80063b4:	1c5a      	adds	r2, r3, #1
 80063b6:	6022      	str	r2, [r4, #0]
 80063b8:	701d      	strb	r5, [r3, #0]
 80063ba:	e7db      	b.n	8006374 <_puts_r+0x88>
 80063bc:	08007a8c 	.word	0x08007a8c
 80063c0:	08007aac 	.word	0x08007aac
 80063c4:	08007a6c 	.word	0x08007a6c

080063c8 <puts>:
 80063c8:	4b02      	ldr	r3, [pc, #8]	; (80063d4 <puts+0xc>)
 80063ca:	4601      	mov	r1, r0
 80063cc:	6818      	ldr	r0, [r3, #0]
 80063ce:	f7ff bf8d 	b.w	80062ec <_puts_r>
 80063d2:	bf00      	nop
 80063d4:	200000dc 	.word	0x200000dc

080063d8 <siprintf>:
 80063d8:	b40e      	push	{r1, r2, r3}
 80063da:	b500      	push	{lr}
 80063dc:	b09c      	sub	sp, #112	; 0x70
 80063de:	ab1d      	add	r3, sp, #116	; 0x74
 80063e0:	9002      	str	r0, [sp, #8]
 80063e2:	9006      	str	r0, [sp, #24]
 80063e4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063e8:	4809      	ldr	r0, [pc, #36]	; (8006410 <siprintf+0x38>)
 80063ea:	9107      	str	r1, [sp, #28]
 80063ec:	9104      	str	r1, [sp, #16]
 80063ee:	4909      	ldr	r1, [pc, #36]	; (8006414 <siprintf+0x3c>)
 80063f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063f4:	9105      	str	r1, [sp, #20]
 80063f6:	6800      	ldr	r0, [r0, #0]
 80063f8:	9301      	str	r3, [sp, #4]
 80063fa:	a902      	add	r1, sp, #8
 80063fc:	f000 fcbc 	bl	8006d78 <_svfiprintf_r>
 8006400:	9b02      	ldr	r3, [sp, #8]
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	b01c      	add	sp, #112	; 0x70
 8006408:	f85d eb04 	ldr.w	lr, [sp], #4
 800640c:	b003      	add	sp, #12
 800640e:	4770      	bx	lr
 8006410:	200000dc 	.word	0x200000dc
 8006414:	ffff0208 	.word	0xffff0208

08006418 <strtok>:
 8006418:	4b16      	ldr	r3, [pc, #88]	; (8006474 <strtok+0x5c>)
 800641a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800641c:	681e      	ldr	r6, [r3, #0]
 800641e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8006420:	4605      	mov	r5, r0
 8006422:	b9fc      	cbnz	r4, 8006464 <strtok+0x4c>
 8006424:	2050      	movs	r0, #80	; 0x50
 8006426:	9101      	str	r1, [sp, #4]
 8006428:	f000 fb62 	bl	8006af0 <malloc>
 800642c:	9901      	ldr	r1, [sp, #4]
 800642e:	65b0      	str	r0, [r6, #88]	; 0x58
 8006430:	4602      	mov	r2, r0
 8006432:	b920      	cbnz	r0, 800643e <strtok+0x26>
 8006434:	4b10      	ldr	r3, [pc, #64]	; (8006478 <strtok+0x60>)
 8006436:	4811      	ldr	r0, [pc, #68]	; (800647c <strtok+0x64>)
 8006438:	2157      	movs	r1, #87	; 0x57
 800643a:	f000 f909 	bl	8006650 <__assert_func>
 800643e:	e9c0 4400 	strd	r4, r4, [r0]
 8006442:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8006446:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800644a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800644e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8006452:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8006456:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800645a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800645e:	6184      	str	r4, [r0, #24]
 8006460:	7704      	strb	r4, [r0, #28]
 8006462:	6244      	str	r4, [r0, #36]	; 0x24
 8006464:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8006466:	2301      	movs	r3, #1
 8006468:	4628      	mov	r0, r5
 800646a:	b002      	add	sp, #8
 800646c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006470:	f000 b806 	b.w	8006480 <__strtok_r>
 8006474:	200000dc 	.word	0x200000dc
 8006478:	080079bc 	.word	0x080079bc
 800647c:	080079d3 	.word	0x080079d3

08006480 <__strtok_r>:
 8006480:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006482:	b908      	cbnz	r0, 8006488 <__strtok_r+0x8>
 8006484:	6810      	ldr	r0, [r2, #0]
 8006486:	b188      	cbz	r0, 80064ac <__strtok_r+0x2c>
 8006488:	4604      	mov	r4, r0
 800648a:	4620      	mov	r0, r4
 800648c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006490:	460f      	mov	r7, r1
 8006492:	f817 6b01 	ldrb.w	r6, [r7], #1
 8006496:	b91e      	cbnz	r6, 80064a0 <__strtok_r+0x20>
 8006498:	b965      	cbnz	r5, 80064b4 <__strtok_r+0x34>
 800649a:	6015      	str	r5, [r2, #0]
 800649c:	4628      	mov	r0, r5
 800649e:	e005      	b.n	80064ac <__strtok_r+0x2c>
 80064a0:	42b5      	cmp	r5, r6
 80064a2:	d1f6      	bne.n	8006492 <__strtok_r+0x12>
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d1f0      	bne.n	800648a <__strtok_r+0xa>
 80064a8:	6014      	str	r4, [r2, #0]
 80064aa:	7003      	strb	r3, [r0, #0]
 80064ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064ae:	461c      	mov	r4, r3
 80064b0:	e00c      	b.n	80064cc <__strtok_r+0x4c>
 80064b2:	b915      	cbnz	r5, 80064ba <__strtok_r+0x3a>
 80064b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064b8:	460e      	mov	r6, r1
 80064ba:	f816 5b01 	ldrb.w	r5, [r6], #1
 80064be:	42ab      	cmp	r3, r5
 80064c0:	d1f7      	bne.n	80064b2 <__strtok_r+0x32>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d0f3      	beq.n	80064ae <__strtok_r+0x2e>
 80064c6:	2300      	movs	r3, #0
 80064c8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80064cc:	6014      	str	r4, [r2, #0]
 80064ce:	e7ed      	b.n	80064ac <__strtok_r+0x2c>

080064d0 <__swbuf_r>:
 80064d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d2:	460e      	mov	r6, r1
 80064d4:	4614      	mov	r4, r2
 80064d6:	4605      	mov	r5, r0
 80064d8:	b118      	cbz	r0, 80064e2 <__swbuf_r+0x12>
 80064da:	6983      	ldr	r3, [r0, #24]
 80064dc:	b90b      	cbnz	r3, 80064e2 <__swbuf_r+0x12>
 80064de:	f000 f9ef 	bl	80068c0 <__sinit>
 80064e2:	4b21      	ldr	r3, [pc, #132]	; (8006568 <__swbuf_r+0x98>)
 80064e4:	429c      	cmp	r4, r3
 80064e6:	d12b      	bne.n	8006540 <__swbuf_r+0x70>
 80064e8:	686c      	ldr	r4, [r5, #4]
 80064ea:	69a3      	ldr	r3, [r4, #24]
 80064ec:	60a3      	str	r3, [r4, #8]
 80064ee:	89a3      	ldrh	r3, [r4, #12]
 80064f0:	071a      	lsls	r2, r3, #28
 80064f2:	d52f      	bpl.n	8006554 <__swbuf_r+0x84>
 80064f4:	6923      	ldr	r3, [r4, #16]
 80064f6:	b36b      	cbz	r3, 8006554 <__swbuf_r+0x84>
 80064f8:	6923      	ldr	r3, [r4, #16]
 80064fa:	6820      	ldr	r0, [r4, #0]
 80064fc:	1ac0      	subs	r0, r0, r3
 80064fe:	6963      	ldr	r3, [r4, #20]
 8006500:	b2f6      	uxtb	r6, r6
 8006502:	4283      	cmp	r3, r0
 8006504:	4637      	mov	r7, r6
 8006506:	dc04      	bgt.n	8006512 <__swbuf_r+0x42>
 8006508:	4621      	mov	r1, r4
 800650a:	4628      	mov	r0, r5
 800650c:	f000 f944 	bl	8006798 <_fflush_r>
 8006510:	bb30      	cbnz	r0, 8006560 <__swbuf_r+0x90>
 8006512:	68a3      	ldr	r3, [r4, #8]
 8006514:	3b01      	subs	r3, #1
 8006516:	60a3      	str	r3, [r4, #8]
 8006518:	6823      	ldr	r3, [r4, #0]
 800651a:	1c5a      	adds	r2, r3, #1
 800651c:	6022      	str	r2, [r4, #0]
 800651e:	701e      	strb	r6, [r3, #0]
 8006520:	6963      	ldr	r3, [r4, #20]
 8006522:	3001      	adds	r0, #1
 8006524:	4283      	cmp	r3, r0
 8006526:	d004      	beq.n	8006532 <__swbuf_r+0x62>
 8006528:	89a3      	ldrh	r3, [r4, #12]
 800652a:	07db      	lsls	r3, r3, #31
 800652c:	d506      	bpl.n	800653c <__swbuf_r+0x6c>
 800652e:	2e0a      	cmp	r6, #10
 8006530:	d104      	bne.n	800653c <__swbuf_r+0x6c>
 8006532:	4621      	mov	r1, r4
 8006534:	4628      	mov	r0, r5
 8006536:	f000 f92f 	bl	8006798 <_fflush_r>
 800653a:	b988      	cbnz	r0, 8006560 <__swbuf_r+0x90>
 800653c:	4638      	mov	r0, r7
 800653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006540:	4b0a      	ldr	r3, [pc, #40]	; (800656c <__swbuf_r+0x9c>)
 8006542:	429c      	cmp	r4, r3
 8006544:	d101      	bne.n	800654a <__swbuf_r+0x7a>
 8006546:	68ac      	ldr	r4, [r5, #8]
 8006548:	e7cf      	b.n	80064ea <__swbuf_r+0x1a>
 800654a:	4b09      	ldr	r3, [pc, #36]	; (8006570 <__swbuf_r+0xa0>)
 800654c:	429c      	cmp	r4, r3
 800654e:	bf08      	it	eq
 8006550:	68ec      	ldreq	r4, [r5, #12]
 8006552:	e7ca      	b.n	80064ea <__swbuf_r+0x1a>
 8006554:	4621      	mov	r1, r4
 8006556:	4628      	mov	r0, r5
 8006558:	f000 f80c 	bl	8006574 <__swsetup_r>
 800655c:	2800      	cmp	r0, #0
 800655e:	d0cb      	beq.n	80064f8 <__swbuf_r+0x28>
 8006560:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006564:	e7ea      	b.n	800653c <__swbuf_r+0x6c>
 8006566:	bf00      	nop
 8006568:	08007a8c 	.word	0x08007a8c
 800656c:	08007aac 	.word	0x08007aac
 8006570:	08007a6c 	.word	0x08007a6c

08006574 <__swsetup_r>:
 8006574:	4b32      	ldr	r3, [pc, #200]	; (8006640 <__swsetup_r+0xcc>)
 8006576:	b570      	push	{r4, r5, r6, lr}
 8006578:	681d      	ldr	r5, [r3, #0]
 800657a:	4606      	mov	r6, r0
 800657c:	460c      	mov	r4, r1
 800657e:	b125      	cbz	r5, 800658a <__swsetup_r+0x16>
 8006580:	69ab      	ldr	r3, [r5, #24]
 8006582:	b913      	cbnz	r3, 800658a <__swsetup_r+0x16>
 8006584:	4628      	mov	r0, r5
 8006586:	f000 f99b 	bl	80068c0 <__sinit>
 800658a:	4b2e      	ldr	r3, [pc, #184]	; (8006644 <__swsetup_r+0xd0>)
 800658c:	429c      	cmp	r4, r3
 800658e:	d10f      	bne.n	80065b0 <__swsetup_r+0x3c>
 8006590:	686c      	ldr	r4, [r5, #4]
 8006592:	89a3      	ldrh	r3, [r4, #12]
 8006594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006598:	0719      	lsls	r1, r3, #28
 800659a:	d42c      	bmi.n	80065f6 <__swsetup_r+0x82>
 800659c:	06dd      	lsls	r5, r3, #27
 800659e:	d411      	bmi.n	80065c4 <__swsetup_r+0x50>
 80065a0:	2309      	movs	r3, #9
 80065a2:	6033      	str	r3, [r6, #0]
 80065a4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065a8:	81a3      	strh	r3, [r4, #12]
 80065aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80065ae:	e03e      	b.n	800662e <__swsetup_r+0xba>
 80065b0:	4b25      	ldr	r3, [pc, #148]	; (8006648 <__swsetup_r+0xd4>)
 80065b2:	429c      	cmp	r4, r3
 80065b4:	d101      	bne.n	80065ba <__swsetup_r+0x46>
 80065b6:	68ac      	ldr	r4, [r5, #8]
 80065b8:	e7eb      	b.n	8006592 <__swsetup_r+0x1e>
 80065ba:	4b24      	ldr	r3, [pc, #144]	; (800664c <__swsetup_r+0xd8>)
 80065bc:	429c      	cmp	r4, r3
 80065be:	bf08      	it	eq
 80065c0:	68ec      	ldreq	r4, [r5, #12]
 80065c2:	e7e6      	b.n	8006592 <__swsetup_r+0x1e>
 80065c4:	0758      	lsls	r0, r3, #29
 80065c6:	d512      	bpl.n	80065ee <__swsetup_r+0x7a>
 80065c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80065ca:	b141      	cbz	r1, 80065de <__swsetup_r+0x6a>
 80065cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80065d0:	4299      	cmp	r1, r3
 80065d2:	d002      	beq.n	80065da <__swsetup_r+0x66>
 80065d4:	4630      	mov	r0, r6
 80065d6:	f000 fa93 	bl	8006b00 <_free_r>
 80065da:	2300      	movs	r3, #0
 80065dc:	6363      	str	r3, [r4, #52]	; 0x34
 80065de:	89a3      	ldrh	r3, [r4, #12]
 80065e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80065e4:	81a3      	strh	r3, [r4, #12]
 80065e6:	2300      	movs	r3, #0
 80065e8:	6063      	str	r3, [r4, #4]
 80065ea:	6923      	ldr	r3, [r4, #16]
 80065ec:	6023      	str	r3, [r4, #0]
 80065ee:	89a3      	ldrh	r3, [r4, #12]
 80065f0:	f043 0308 	orr.w	r3, r3, #8
 80065f4:	81a3      	strh	r3, [r4, #12]
 80065f6:	6923      	ldr	r3, [r4, #16]
 80065f8:	b94b      	cbnz	r3, 800660e <__swsetup_r+0x9a>
 80065fa:	89a3      	ldrh	r3, [r4, #12]
 80065fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006600:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006604:	d003      	beq.n	800660e <__swsetup_r+0x9a>
 8006606:	4621      	mov	r1, r4
 8006608:	4630      	mov	r0, r6
 800660a:	f000 fa31 	bl	8006a70 <__smakebuf_r>
 800660e:	89a0      	ldrh	r0, [r4, #12]
 8006610:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006614:	f010 0301 	ands.w	r3, r0, #1
 8006618:	d00a      	beq.n	8006630 <__swsetup_r+0xbc>
 800661a:	2300      	movs	r3, #0
 800661c:	60a3      	str	r3, [r4, #8]
 800661e:	6963      	ldr	r3, [r4, #20]
 8006620:	425b      	negs	r3, r3
 8006622:	61a3      	str	r3, [r4, #24]
 8006624:	6923      	ldr	r3, [r4, #16]
 8006626:	b943      	cbnz	r3, 800663a <__swsetup_r+0xc6>
 8006628:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800662c:	d1ba      	bne.n	80065a4 <__swsetup_r+0x30>
 800662e:	bd70      	pop	{r4, r5, r6, pc}
 8006630:	0781      	lsls	r1, r0, #30
 8006632:	bf58      	it	pl
 8006634:	6963      	ldrpl	r3, [r4, #20]
 8006636:	60a3      	str	r3, [r4, #8]
 8006638:	e7f4      	b.n	8006624 <__swsetup_r+0xb0>
 800663a:	2000      	movs	r0, #0
 800663c:	e7f7      	b.n	800662e <__swsetup_r+0xba>
 800663e:	bf00      	nop
 8006640:	200000dc 	.word	0x200000dc
 8006644:	08007a8c 	.word	0x08007a8c
 8006648:	08007aac 	.word	0x08007aac
 800664c:	08007a6c 	.word	0x08007a6c

08006650 <__assert_func>:
 8006650:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006652:	4614      	mov	r4, r2
 8006654:	461a      	mov	r2, r3
 8006656:	4b09      	ldr	r3, [pc, #36]	; (800667c <__assert_func+0x2c>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4605      	mov	r5, r0
 800665c:	68d8      	ldr	r0, [r3, #12]
 800665e:	b14c      	cbz	r4, 8006674 <__assert_func+0x24>
 8006660:	4b07      	ldr	r3, [pc, #28]	; (8006680 <__assert_func+0x30>)
 8006662:	9100      	str	r1, [sp, #0]
 8006664:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006668:	4906      	ldr	r1, [pc, #24]	; (8006684 <__assert_func+0x34>)
 800666a:	462b      	mov	r3, r5
 800666c:	f000 f9a6 	bl	80069bc <fiprintf>
 8006670:	f000 ffd6 	bl	8007620 <abort>
 8006674:	4b04      	ldr	r3, [pc, #16]	; (8006688 <__assert_func+0x38>)
 8006676:	461c      	mov	r4, r3
 8006678:	e7f3      	b.n	8006662 <__assert_func+0x12>
 800667a:	bf00      	nop
 800667c:	200000dc 	.word	0x200000dc
 8006680:	08007a30 	.word	0x08007a30
 8006684:	08007a3d 	.word	0x08007a3d
 8006688:	08007a6b 	.word	0x08007a6b

0800668c <__sflush_r>:
 800668c:	898a      	ldrh	r2, [r1, #12]
 800668e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	4605      	mov	r5, r0
 8006694:	0710      	lsls	r0, r2, #28
 8006696:	460c      	mov	r4, r1
 8006698:	d458      	bmi.n	800674c <__sflush_r+0xc0>
 800669a:	684b      	ldr	r3, [r1, #4]
 800669c:	2b00      	cmp	r3, #0
 800669e:	dc05      	bgt.n	80066ac <__sflush_r+0x20>
 80066a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	dc02      	bgt.n	80066ac <__sflush_r+0x20>
 80066a6:	2000      	movs	r0, #0
 80066a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066ae:	2e00      	cmp	r6, #0
 80066b0:	d0f9      	beq.n	80066a6 <__sflush_r+0x1a>
 80066b2:	2300      	movs	r3, #0
 80066b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80066b8:	682f      	ldr	r7, [r5, #0]
 80066ba:	602b      	str	r3, [r5, #0]
 80066bc:	d032      	beq.n	8006724 <__sflush_r+0x98>
 80066be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	075a      	lsls	r2, r3, #29
 80066c4:	d505      	bpl.n	80066d2 <__sflush_r+0x46>
 80066c6:	6863      	ldr	r3, [r4, #4]
 80066c8:	1ac0      	subs	r0, r0, r3
 80066ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80066cc:	b10b      	cbz	r3, 80066d2 <__sflush_r+0x46>
 80066ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80066d0:	1ac0      	subs	r0, r0, r3
 80066d2:	2300      	movs	r3, #0
 80066d4:	4602      	mov	r2, r0
 80066d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80066d8:	6a21      	ldr	r1, [r4, #32]
 80066da:	4628      	mov	r0, r5
 80066dc:	47b0      	blx	r6
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	89a3      	ldrh	r3, [r4, #12]
 80066e2:	d106      	bne.n	80066f2 <__sflush_r+0x66>
 80066e4:	6829      	ldr	r1, [r5, #0]
 80066e6:	291d      	cmp	r1, #29
 80066e8:	d82c      	bhi.n	8006744 <__sflush_r+0xb8>
 80066ea:	4a2a      	ldr	r2, [pc, #168]	; (8006794 <__sflush_r+0x108>)
 80066ec:	40ca      	lsrs	r2, r1
 80066ee:	07d6      	lsls	r6, r2, #31
 80066f0:	d528      	bpl.n	8006744 <__sflush_r+0xb8>
 80066f2:	2200      	movs	r2, #0
 80066f4:	6062      	str	r2, [r4, #4]
 80066f6:	04d9      	lsls	r1, r3, #19
 80066f8:	6922      	ldr	r2, [r4, #16]
 80066fa:	6022      	str	r2, [r4, #0]
 80066fc:	d504      	bpl.n	8006708 <__sflush_r+0x7c>
 80066fe:	1c42      	adds	r2, r0, #1
 8006700:	d101      	bne.n	8006706 <__sflush_r+0x7a>
 8006702:	682b      	ldr	r3, [r5, #0]
 8006704:	b903      	cbnz	r3, 8006708 <__sflush_r+0x7c>
 8006706:	6560      	str	r0, [r4, #84]	; 0x54
 8006708:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800670a:	602f      	str	r7, [r5, #0]
 800670c:	2900      	cmp	r1, #0
 800670e:	d0ca      	beq.n	80066a6 <__sflush_r+0x1a>
 8006710:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006714:	4299      	cmp	r1, r3
 8006716:	d002      	beq.n	800671e <__sflush_r+0x92>
 8006718:	4628      	mov	r0, r5
 800671a:	f000 f9f1 	bl	8006b00 <_free_r>
 800671e:	2000      	movs	r0, #0
 8006720:	6360      	str	r0, [r4, #52]	; 0x34
 8006722:	e7c1      	b.n	80066a8 <__sflush_r+0x1c>
 8006724:	6a21      	ldr	r1, [r4, #32]
 8006726:	2301      	movs	r3, #1
 8006728:	4628      	mov	r0, r5
 800672a:	47b0      	blx	r6
 800672c:	1c41      	adds	r1, r0, #1
 800672e:	d1c7      	bne.n	80066c0 <__sflush_r+0x34>
 8006730:	682b      	ldr	r3, [r5, #0]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d0c4      	beq.n	80066c0 <__sflush_r+0x34>
 8006736:	2b1d      	cmp	r3, #29
 8006738:	d001      	beq.n	800673e <__sflush_r+0xb2>
 800673a:	2b16      	cmp	r3, #22
 800673c:	d101      	bne.n	8006742 <__sflush_r+0xb6>
 800673e:	602f      	str	r7, [r5, #0]
 8006740:	e7b1      	b.n	80066a6 <__sflush_r+0x1a>
 8006742:	89a3      	ldrh	r3, [r4, #12]
 8006744:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	e7ad      	b.n	80066a8 <__sflush_r+0x1c>
 800674c:	690f      	ldr	r7, [r1, #16]
 800674e:	2f00      	cmp	r7, #0
 8006750:	d0a9      	beq.n	80066a6 <__sflush_r+0x1a>
 8006752:	0793      	lsls	r3, r2, #30
 8006754:	680e      	ldr	r6, [r1, #0]
 8006756:	bf08      	it	eq
 8006758:	694b      	ldreq	r3, [r1, #20]
 800675a:	600f      	str	r7, [r1, #0]
 800675c:	bf18      	it	ne
 800675e:	2300      	movne	r3, #0
 8006760:	eba6 0807 	sub.w	r8, r6, r7
 8006764:	608b      	str	r3, [r1, #8]
 8006766:	f1b8 0f00 	cmp.w	r8, #0
 800676a:	dd9c      	ble.n	80066a6 <__sflush_r+0x1a>
 800676c:	6a21      	ldr	r1, [r4, #32]
 800676e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006770:	4643      	mov	r3, r8
 8006772:	463a      	mov	r2, r7
 8006774:	4628      	mov	r0, r5
 8006776:	47b0      	blx	r6
 8006778:	2800      	cmp	r0, #0
 800677a:	dc06      	bgt.n	800678a <__sflush_r+0xfe>
 800677c:	89a3      	ldrh	r3, [r4, #12]
 800677e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006782:	81a3      	strh	r3, [r4, #12]
 8006784:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006788:	e78e      	b.n	80066a8 <__sflush_r+0x1c>
 800678a:	4407      	add	r7, r0
 800678c:	eba8 0800 	sub.w	r8, r8, r0
 8006790:	e7e9      	b.n	8006766 <__sflush_r+0xda>
 8006792:	bf00      	nop
 8006794:	20400001 	.word	0x20400001

08006798 <_fflush_r>:
 8006798:	b538      	push	{r3, r4, r5, lr}
 800679a:	690b      	ldr	r3, [r1, #16]
 800679c:	4605      	mov	r5, r0
 800679e:	460c      	mov	r4, r1
 80067a0:	b913      	cbnz	r3, 80067a8 <_fflush_r+0x10>
 80067a2:	2500      	movs	r5, #0
 80067a4:	4628      	mov	r0, r5
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	b118      	cbz	r0, 80067b2 <_fflush_r+0x1a>
 80067aa:	6983      	ldr	r3, [r0, #24]
 80067ac:	b90b      	cbnz	r3, 80067b2 <_fflush_r+0x1a>
 80067ae:	f000 f887 	bl	80068c0 <__sinit>
 80067b2:	4b14      	ldr	r3, [pc, #80]	; (8006804 <_fflush_r+0x6c>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d11b      	bne.n	80067f0 <_fflush_r+0x58>
 80067b8:	686c      	ldr	r4, [r5, #4]
 80067ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d0ef      	beq.n	80067a2 <_fflush_r+0xa>
 80067c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80067c4:	07d0      	lsls	r0, r2, #31
 80067c6:	d404      	bmi.n	80067d2 <_fflush_r+0x3a>
 80067c8:	0599      	lsls	r1, r3, #22
 80067ca:	d402      	bmi.n	80067d2 <_fflush_r+0x3a>
 80067cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ce:	f000 f927 	bl	8006a20 <__retarget_lock_acquire_recursive>
 80067d2:	4628      	mov	r0, r5
 80067d4:	4621      	mov	r1, r4
 80067d6:	f7ff ff59 	bl	800668c <__sflush_r>
 80067da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067dc:	07da      	lsls	r2, r3, #31
 80067de:	4605      	mov	r5, r0
 80067e0:	d4e0      	bmi.n	80067a4 <_fflush_r+0xc>
 80067e2:	89a3      	ldrh	r3, [r4, #12]
 80067e4:	059b      	lsls	r3, r3, #22
 80067e6:	d4dd      	bmi.n	80067a4 <_fflush_r+0xc>
 80067e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067ea:	f000 f91a 	bl	8006a22 <__retarget_lock_release_recursive>
 80067ee:	e7d9      	b.n	80067a4 <_fflush_r+0xc>
 80067f0:	4b05      	ldr	r3, [pc, #20]	; (8006808 <_fflush_r+0x70>)
 80067f2:	429c      	cmp	r4, r3
 80067f4:	d101      	bne.n	80067fa <_fflush_r+0x62>
 80067f6:	68ac      	ldr	r4, [r5, #8]
 80067f8:	e7df      	b.n	80067ba <_fflush_r+0x22>
 80067fa:	4b04      	ldr	r3, [pc, #16]	; (800680c <_fflush_r+0x74>)
 80067fc:	429c      	cmp	r4, r3
 80067fe:	bf08      	it	eq
 8006800:	68ec      	ldreq	r4, [r5, #12]
 8006802:	e7da      	b.n	80067ba <_fflush_r+0x22>
 8006804:	08007a8c 	.word	0x08007a8c
 8006808:	08007aac 	.word	0x08007aac
 800680c:	08007a6c 	.word	0x08007a6c

08006810 <std>:
 8006810:	2300      	movs	r3, #0
 8006812:	b510      	push	{r4, lr}
 8006814:	4604      	mov	r4, r0
 8006816:	e9c0 3300 	strd	r3, r3, [r0]
 800681a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800681e:	6083      	str	r3, [r0, #8]
 8006820:	8181      	strh	r1, [r0, #12]
 8006822:	6643      	str	r3, [r0, #100]	; 0x64
 8006824:	81c2      	strh	r2, [r0, #14]
 8006826:	6183      	str	r3, [r0, #24]
 8006828:	4619      	mov	r1, r3
 800682a:	2208      	movs	r2, #8
 800682c:	305c      	adds	r0, #92	; 0x5c
 800682e:	f7ff fd55 	bl	80062dc <memset>
 8006832:	4b05      	ldr	r3, [pc, #20]	; (8006848 <std+0x38>)
 8006834:	6263      	str	r3, [r4, #36]	; 0x24
 8006836:	4b05      	ldr	r3, [pc, #20]	; (800684c <std+0x3c>)
 8006838:	62a3      	str	r3, [r4, #40]	; 0x28
 800683a:	4b05      	ldr	r3, [pc, #20]	; (8006850 <std+0x40>)
 800683c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800683e:	4b05      	ldr	r3, [pc, #20]	; (8006854 <std+0x44>)
 8006840:	6224      	str	r4, [r4, #32]
 8006842:	6323      	str	r3, [r4, #48]	; 0x30
 8006844:	bd10      	pop	{r4, pc}
 8006846:	bf00      	nop
 8006848:	08007575 	.word	0x08007575
 800684c:	08007597 	.word	0x08007597
 8006850:	080075cf 	.word	0x080075cf
 8006854:	080075f3 	.word	0x080075f3

08006858 <_cleanup_r>:
 8006858:	4901      	ldr	r1, [pc, #4]	; (8006860 <_cleanup_r+0x8>)
 800685a:	f000 b8c1 	b.w	80069e0 <_fwalk_reent>
 800685e:	bf00      	nop
 8006860:	08006799 	.word	0x08006799

08006864 <__sfmoreglue>:
 8006864:	b570      	push	{r4, r5, r6, lr}
 8006866:	2268      	movs	r2, #104	; 0x68
 8006868:	1e4d      	subs	r5, r1, #1
 800686a:	4355      	muls	r5, r2
 800686c:	460e      	mov	r6, r1
 800686e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006872:	f000 f9b1 	bl	8006bd8 <_malloc_r>
 8006876:	4604      	mov	r4, r0
 8006878:	b140      	cbz	r0, 800688c <__sfmoreglue+0x28>
 800687a:	2100      	movs	r1, #0
 800687c:	e9c0 1600 	strd	r1, r6, [r0]
 8006880:	300c      	adds	r0, #12
 8006882:	60a0      	str	r0, [r4, #8]
 8006884:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006888:	f7ff fd28 	bl	80062dc <memset>
 800688c:	4620      	mov	r0, r4
 800688e:	bd70      	pop	{r4, r5, r6, pc}

08006890 <__sfp_lock_acquire>:
 8006890:	4801      	ldr	r0, [pc, #4]	; (8006898 <__sfp_lock_acquire+0x8>)
 8006892:	f000 b8c5 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 8006896:	bf00      	nop
 8006898:	20000301 	.word	0x20000301

0800689c <__sfp_lock_release>:
 800689c:	4801      	ldr	r0, [pc, #4]	; (80068a4 <__sfp_lock_release+0x8>)
 800689e:	f000 b8c0 	b.w	8006a22 <__retarget_lock_release_recursive>
 80068a2:	bf00      	nop
 80068a4:	20000301 	.word	0x20000301

080068a8 <__sinit_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sinit_lock_acquire+0x8>)
 80068aa:	f000 b8b9 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000302 	.word	0x20000302

080068b4 <__sinit_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sinit_lock_release+0x8>)
 80068b6:	f000 b8b4 	b.w	8006a22 <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000302 	.word	0x20000302

080068c0 <__sinit>:
 80068c0:	b510      	push	{r4, lr}
 80068c2:	4604      	mov	r4, r0
 80068c4:	f7ff fff0 	bl	80068a8 <__sinit_lock_acquire>
 80068c8:	69a3      	ldr	r3, [r4, #24]
 80068ca:	b11b      	cbz	r3, 80068d4 <__sinit+0x14>
 80068cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068d0:	f7ff bff0 	b.w	80068b4 <__sinit_lock_release>
 80068d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068d8:	6523      	str	r3, [r4, #80]	; 0x50
 80068da:	4b13      	ldr	r3, [pc, #76]	; (8006928 <__sinit+0x68>)
 80068dc:	4a13      	ldr	r2, [pc, #76]	; (800692c <__sinit+0x6c>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	62a2      	str	r2, [r4, #40]	; 0x28
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	bf04      	itt	eq
 80068e6:	2301      	moveq	r3, #1
 80068e8:	61a3      	streq	r3, [r4, #24]
 80068ea:	4620      	mov	r0, r4
 80068ec:	f000 f820 	bl	8006930 <__sfp>
 80068f0:	6060      	str	r0, [r4, #4]
 80068f2:	4620      	mov	r0, r4
 80068f4:	f000 f81c 	bl	8006930 <__sfp>
 80068f8:	60a0      	str	r0, [r4, #8]
 80068fa:	4620      	mov	r0, r4
 80068fc:	f000 f818 	bl	8006930 <__sfp>
 8006900:	2200      	movs	r2, #0
 8006902:	60e0      	str	r0, [r4, #12]
 8006904:	2104      	movs	r1, #4
 8006906:	6860      	ldr	r0, [r4, #4]
 8006908:	f7ff ff82 	bl	8006810 <std>
 800690c:	68a0      	ldr	r0, [r4, #8]
 800690e:	2201      	movs	r2, #1
 8006910:	2109      	movs	r1, #9
 8006912:	f7ff ff7d 	bl	8006810 <std>
 8006916:	68e0      	ldr	r0, [r4, #12]
 8006918:	2202      	movs	r2, #2
 800691a:	2112      	movs	r1, #18
 800691c:	f7ff ff78 	bl	8006810 <std>
 8006920:	2301      	movs	r3, #1
 8006922:	61a3      	str	r3, [r4, #24]
 8006924:	e7d2      	b.n	80068cc <__sinit+0xc>
 8006926:	bf00      	nop
 8006928:	080079b8 	.word	0x080079b8
 800692c:	08006859 	.word	0x08006859

08006930 <__sfp>:
 8006930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006932:	4607      	mov	r7, r0
 8006934:	f7ff ffac 	bl	8006890 <__sfp_lock_acquire>
 8006938:	4b1e      	ldr	r3, [pc, #120]	; (80069b4 <__sfp+0x84>)
 800693a:	681e      	ldr	r6, [r3, #0]
 800693c:	69b3      	ldr	r3, [r6, #24]
 800693e:	b913      	cbnz	r3, 8006946 <__sfp+0x16>
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff ffbd 	bl	80068c0 <__sinit>
 8006946:	3648      	adds	r6, #72	; 0x48
 8006948:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800694c:	3b01      	subs	r3, #1
 800694e:	d503      	bpl.n	8006958 <__sfp+0x28>
 8006950:	6833      	ldr	r3, [r6, #0]
 8006952:	b30b      	cbz	r3, 8006998 <__sfp+0x68>
 8006954:	6836      	ldr	r6, [r6, #0]
 8006956:	e7f7      	b.n	8006948 <__sfp+0x18>
 8006958:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800695c:	b9d5      	cbnz	r5, 8006994 <__sfp+0x64>
 800695e:	4b16      	ldr	r3, [pc, #88]	; (80069b8 <__sfp+0x88>)
 8006960:	60e3      	str	r3, [r4, #12]
 8006962:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006966:	6665      	str	r5, [r4, #100]	; 0x64
 8006968:	f000 f859 	bl	8006a1e <__retarget_lock_init_recursive>
 800696c:	f7ff ff96 	bl	800689c <__sfp_lock_release>
 8006970:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006974:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006978:	6025      	str	r5, [r4, #0]
 800697a:	61a5      	str	r5, [r4, #24]
 800697c:	2208      	movs	r2, #8
 800697e:	4629      	mov	r1, r5
 8006980:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006984:	f7ff fcaa 	bl	80062dc <memset>
 8006988:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800698c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006990:	4620      	mov	r0, r4
 8006992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006994:	3468      	adds	r4, #104	; 0x68
 8006996:	e7d9      	b.n	800694c <__sfp+0x1c>
 8006998:	2104      	movs	r1, #4
 800699a:	4638      	mov	r0, r7
 800699c:	f7ff ff62 	bl	8006864 <__sfmoreglue>
 80069a0:	4604      	mov	r4, r0
 80069a2:	6030      	str	r0, [r6, #0]
 80069a4:	2800      	cmp	r0, #0
 80069a6:	d1d5      	bne.n	8006954 <__sfp+0x24>
 80069a8:	f7ff ff78 	bl	800689c <__sfp_lock_release>
 80069ac:	230c      	movs	r3, #12
 80069ae:	603b      	str	r3, [r7, #0]
 80069b0:	e7ee      	b.n	8006990 <__sfp+0x60>
 80069b2:	bf00      	nop
 80069b4:	080079b8 	.word	0x080079b8
 80069b8:	ffff0001 	.word	0xffff0001

080069bc <fiprintf>:
 80069bc:	b40e      	push	{r1, r2, r3}
 80069be:	b503      	push	{r0, r1, lr}
 80069c0:	4601      	mov	r1, r0
 80069c2:	ab03      	add	r3, sp, #12
 80069c4:	4805      	ldr	r0, [pc, #20]	; (80069dc <fiprintf+0x20>)
 80069c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80069ca:	6800      	ldr	r0, [r0, #0]
 80069cc:	9301      	str	r3, [sp, #4]
 80069ce:	f000 fafd 	bl	8006fcc <_vfiprintf_r>
 80069d2:	b002      	add	sp, #8
 80069d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80069d8:	b003      	add	sp, #12
 80069da:	4770      	bx	lr
 80069dc:	200000dc 	.word	0x200000dc

080069e0 <_fwalk_reent>:
 80069e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069e4:	4606      	mov	r6, r0
 80069e6:	4688      	mov	r8, r1
 80069e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069ec:	2700      	movs	r7, #0
 80069ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069f2:	f1b9 0901 	subs.w	r9, r9, #1
 80069f6:	d505      	bpl.n	8006a04 <_fwalk_reent+0x24>
 80069f8:	6824      	ldr	r4, [r4, #0]
 80069fa:	2c00      	cmp	r4, #0
 80069fc:	d1f7      	bne.n	80069ee <_fwalk_reent+0xe>
 80069fe:	4638      	mov	r0, r7
 8006a00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a04:	89ab      	ldrh	r3, [r5, #12]
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d907      	bls.n	8006a1a <_fwalk_reent+0x3a>
 8006a0a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	d003      	beq.n	8006a1a <_fwalk_reent+0x3a>
 8006a12:	4629      	mov	r1, r5
 8006a14:	4630      	mov	r0, r6
 8006a16:	47c0      	blx	r8
 8006a18:	4307      	orrs	r7, r0
 8006a1a:	3568      	adds	r5, #104	; 0x68
 8006a1c:	e7e9      	b.n	80069f2 <_fwalk_reent+0x12>

08006a1e <__retarget_lock_init_recursive>:
 8006a1e:	4770      	bx	lr

08006a20 <__retarget_lock_acquire_recursive>:
 8006a20:	4770      	bx	lr

08006a22 <__retarget_lock_release_recursive>:
 8006a22:	4770      	bx	lr

08006a24 <__swhatbuf_r>:
 8006a24:	b570      	push	{r4, r5, r6, lr}
 8006a26:	460e      	mov	r6, r1
 8006a28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a2c:	2900      	cmp	r1, #0
 8006a2e:	b096      	sub	sp, #88	; 0x58
 8006a30:	4614      	mov	r4, r2
 8006a32:	461d      	mov	r5, r3
 8006a34:	da08      	bge.n	8006a48 <__swhatbuf_r+0x24>
 8006a36:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	061a      	lsls	r2, r3, #24
 8006a40:	d410      	bmi.n	8006a64 <__swhatbuf_r+0x40>
 8006a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a46:	e00e      	b.n	8006a66 <__swhatbuf_r+0x42>
 8006a48:	466a      	mov	r2, sp
 8006a4a:	f000 fe01 	bl	8007650 <_fstat_r>
 8006a4e:	2800      	cmp	r0, #0
 8006a50:	dbf1      	blt.n	8006a36 <__swhatbuf_r+0x12>
 8006a52:	9a01      	ldr	r2, [sp, #4]
 8006a54:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006a58:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006a5c:	425a      	negs	r2, r3
 8006a5e:	415a      	adcs	r2, r3
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	e7ee      	b.n	8006a42 <__swhatbuf_r+0x1e>
 8006a64:	2340      	movs	r3, #64	; 0x40
 8006a66:	2000      	movs	r0, #0
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	b016      	add	sp, #88	; 0x58
 8006a6c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006a70 <__smakebuf_r>:
 8006a70:	898b      	ldrh	r3, [r1, #12]
 8006a72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a74:	079d      	lsls	r5, r3, #30
 8006a76:	4606      	mov	r6, r0
 8006a78:	460c      	mov	r4, r1
 8006a7a:	d507      	bpl.n	8006a8c <__smakebuf_r+0x1c>
 8006a7c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	2301      	movs	r3, #1
 8006a86:	6163      	str	r3, [r4, #20]
 8006a88:	b002      	add	sp, #8
 8006a8a:	bd70      	pop	{r4, r5, r6, pc}
 8006a8c:	ab01      	add	r3, sp, #4
 8006a8e:	466a      	mov	r2, sp
 8006a90:	f7ff ffc8 	bl	8006a24 <__swhatbuf_r>
 8006a94:	9900      	ldr	r1, [sp, #0]
 8006a96:	4605      	mov	r5, r0
 8006a98:	4630      	mov	r0, r6
 8006a9a:	f000 f89d 	bl	8006bd8 <_malloc_r>
 8006a9e:	b948      	cbnz	r0, 8006ab4 <__smakebuf_r+0x44>
 8006aa0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006aa4:	059a      	lsls	r2, r3, #22
 8006aa6:	d4ef      	bmi.n	8006a88 <__smakebuf_r+0x18>
 8006aa8:	f023 0303 	bic.w	r3, r3, #3
 8006aac:	f043 0302 	orr.w	r3, r3, #2
 8006ab0:	81a3      	strh	r3, [r4, #12]
 8006ab2:	e7e3      	b.n	8006a7c <__smakebuf_r+0xc>
 8006ab4:	4b0d      	ldr	r3, [pc, #52]	; (8006aec <__smakebuf_r+0x7c>)
 8006ab6:	62b3      	str	r3, [r6, #40]	; 0x28
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	6020      	str	r0, [r4, #0]
 8006abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac0:	81a3      	strh	r3, [r4, #12]
 8006ac2:	9b00      	ldr	r3, [sp, #0]
 8006ac4:	6163      	str	r3, [r4, #20]
 8006ac6:	9b01      	ldr	r3, [sp, #4]
 8006ac8:	6120      	str	r0, [r4, #16]
 8006aca:	b15b      	cbz	r3, 8006ae4 <__smakebuf_r+0x74>
 8006acc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006ad0:	4630      	mov	r0, r6
 8006ad2:	f000 fdcf 	bl	8007674 <_isatty_r>
 8006ad6:	b128      	cbz	r0, 8006ae4 <__smakebuf_r+0x74>
 8006ad8:	89a3      	ldrh	r3, [r4, #12]
 8006ada:	f023 0303 	bic.w	r3, r3, #3
 8006ade:	f043 0301 	orr.w	r3, r3, #1
 8006ae2:	81a3      	strh	r3, [r4, #12]
 8006ae4:	89a0      	ldrh	r0, [r4, #12]
 8006ae6:	4305      	orrs	r5, r0
 8006ae8:	81a5      	strh	r5, [r4, #12]
 8006aea:	e7cd      	b.n	8006a88 <__smakebuf_r+0x18>
 8006aec:	08006859 	.word	0x08006859

08006af0 <malloc>:
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <malloc+0xc>)
 8006af2:	4601      	mov	r1, r0
 8006af4:	6818      	ldr	r0, [r3, #0]
 8006af6:	f000 b86f 	b.w	8006bd8 <_malloc_r>
 8006afa:	bf00      	nop
 8006afc:	200000dc 	.word	0x200000dc

08006b00 <_free_r>:
 8006b00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b02:	2900      	cmp	r1, #0
 8006b04:	d044      	beq.n	8006b90 <_free_r+0x90>
 8006b06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b0a:	9001      	str	r0, [sp, #4]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b12:	bfb8      	it	lt
 8006b14:	18e4      	addlt	r4, r4, r3
 8006b16:	f000 fdf7 	bl	8007708 <__malloc_lock>
 8006b1a:	4a1e      	ldr	r2, [pc, #120]	; (8006b94 <_free_r+0x94>)
 8006b1c:	9801      	ldr	r0, [sp, #4]
 8006b1e:	6813      	ldr	r3, [r2, #0]
 8006b20:	b933      	cbnz	r3, 8006b30 <_free_r+0x30>
 8006b22:	6063      	str	r3, [r4, #4]
 8006b24:	6014      	str	r4, [r2, #0]
 8006b26:	b003      	add	sp, #12
 8006b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b2c:	f000 bdf2 	b.w	8007714 <__malloc_unlock>
 8006b30:	42a3      	cmp	r3, r4
 8006b32:	d908      	bls.n	8006b46 <_free_r+0x46>
 8006b34:	6825      	ldr	r5, [r4, #0]
 8006b36:	1961      	adds	r1, r4, r5
 8006b38:	428b      	cmp	r3, r1
 8006b3a:	bf01      	itttt	eq
 8006b3c:	6819      	ldreq	r1, [r3, #0]
 8006b3e:	685b      	ldreq	r3, [r3, #4]
 8006b40:	1949      	addeq	r1, r1, r5
 8006b42:	6021      	streq	r1, [r4, #0]
 8006b44:	e7ed      	b.n	8006b22 <_free_r+0x22>
 8006b46:	461a      	mov	r2, r3
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	b10b      	cbz	r3, 8006b50 <_free_r+0x50>
 8006b4c:	42a3      	cmp	r3, r4
 8006b4e:	d9fa      	bls.n	8006b46 <_free_r+0x46>
 8006b50:	6811      	ldr	r1, [r2, #0]
 8006b52:	1855      	adds	r5, r2, r1
 8006b54:	42a5      	cmp	r5, r4
 8006b56:	d10b      	bne.n	8006b70 <_free_r+0x70>
 8006b58:	6824      	ldr	r4, [r4, #0]
 8006b5a:	4421      	add	r1, r4
 8006b5c:	1854      	adds	r4, r2, r1
 8006b5e:	42a3      	cmp	r3, r4
 8006b60:	6011      	str	r1, [r2, #0]
 8006b62:	d1e0      	bne.n	8006b26 <_free_r+0x26>
 8006b64:	681c      	ldr	r4, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	6053      	str	r3, [r2, #4]
 8006b6a:	4421      	add	r1, r4
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	e7da      	b.n	8006b26 <_free_r+0x26>
 8006b70:	d902      	bls.n	8006b78 <_free_r+0x78>
 8006b72:	230c      	movs	r3, #12
 8006b74:	6003      	str	r3, [r0, #0]
 8006b76:	e7d6      	b.n	8006b26 <_free_r+0x26>
 8006b78:	6825      	ldr	r5, [r4, #0]
 8006b7a:	1961      	adds	r1, r4, r5
 8006b7c:	428b      	cmp	r3, r1
 8006b7e:	bf04      	itt	eq
 8006b80:	6819      	ldreq	r1, [r3, #0]
 8006b82:	685b      	ldreq	r3, [r3, #4]
 8006b84:	6063      	str	r3, [r4, #4]
 8006b86:	bf04      	itt	eq
 8006b88:	1949      	addeq	r1, r1, r5
 8006b8a:	6021      	streq	r1, [r4, #0]
 8006b8c:	6054      	str	r4, [r2, #4]
 8006b8e:	e7ca      	b.n	8006b26 <_free_r+0x26>
 8006b90:	b003      	add	sp, #12
 8006b92:	bd30      	pop	{r4, r5, pc}
 8006b94:	20000304 	.word	0x20000304

08006b98 <sbrk_aligned>:
 8006b98:	b570      	push	{r4, r5, r6, lr}
 8006b9a:	4e0e      	ldr	r6, [pc, #56]	; (8006bd4 <sbrk_aligned+0x3c>)
 8006b9c:	460c      	mov	r4, r1
 8006b9e:	6831      	ldr	r1, [r6, #0]
 8006ba0:	4605      	mov	r5, r0
 8006ba2:	b911      	cbnz	r1, 8006baa <sbrk_aligned+0x12>
 8006ba4:	f000 fcd6 	bl	8007554 <_sbrk_r>
 8006ba8:	6030      	str	r0, [r6, #0]
 8006baa:	4621      	mov	r1, r4
 8006bac:	4628      	mov	r0, r5
 8006bae:	f000 fcd1 	bl	8007554 <_sbrk_r>
 8006bb2:	1c43      	adds	r3, r0, #1
 8006bb4:	d00a      	beq.n	8006bcc <sbrk_aligned+0x34>
 8006bb6:	1cc4      	adds	r4, r0, #3
 8006bb8:	f024 0403 	bic.w	r4, r4, #3
 8006bbc:	42a0      	cmp	r0, r4
 8006bbe:	d007      	beq.n	8006bd0 <sbrk_aligned+0x38>
 8006bc0:	1a21      	subs	r1, r4, r0
 8006bc2:	4628      	mov	r0, r5
 8006bc4:	f000 fcc6 	bl	8007554 <_sbrk_r>
 8006bc8:	3001      	adds	r0, #1
 8006bca:	d101      	bne.n	8006bd0 <sbrk_aligned+0x38>
 8006bcc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bd0:	4620      	mov	r0, r4
 8006bd2:	bd70      	pop	{r4, r5, r6, pc}
 8006bd4:	20000308 	.word	0x20000308

08006bd8 <_malloc_r>:
 8006bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bdc:	1ccd      	adds	r5, r1, #3
 8006bde:	f025 0503 	bic.w	r5, r5, #3
 8006be2:	3508      	adds	r5, #8
 8006be4:	2d0c      	cmp	r5, #12
 8006be6:	bf38      	it	cc
 8006be8:	250c      	movcc	r5, #12
 8006bea:	2d00      	cmp	r5, #0
 8006bec:	4607      	mov	r7, r0
 8006bee:	db01      	blt.n	8006bf4 <_malloc_r+0x1c>
 8006bf0:	42a9      	cmp	r1, r5
 8006bf2:	d905      	bls.n	8006c00 <_malloc_r+0x28>
 8006bf4:	230c      	movs	r3, #12
 8006bf6:	603b      	str	r3, [r7, #0]
 8006bf8:	2600      	movs	r6, #0
 8006bfa:	4630      	mov	r0, r6
 8006bfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c00:	4e2e      	ldr	r6, [pc, #184]	; (8006cbc <_malloc_r+0xe4>)
 8006c02:	f000 fd81 	bl	8007708 <__malloc_lock>
 8006c06:	6833      	ldr	r3, [r6, #0]
 8006c08:	461c      	mov	r4, r3
 8006c0a:	bb34      	cbnz	r4, 8006c5a <_malloc_r+0x82>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff ffc2 	bl	8006b98 <sbrk_aligned>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	4604      	mov	r4, r0
 8006c18:	d14d      	bne.n	8006cb6 <_malloc_r+0xde>
 8006c1a:	6834      	ldr	r4, [r6, #0]
 8006c1c:	4626      	mov	r6, r4
 8006c1e:	2e00      	cmp	r6, #0
 8006c20:	d140      	bne.n	8006ca4 <_malloc_r+0xcc>
 8006c22:	6823      	ldr	r3, [r4, #0]
 8006c24:	4631      	mov	r1, r6
 8006c26:	4638      	mov	r0, r7
 8006c28:	eb04 0803 	add.w	r8, r4, r3
 8006c2c:	f000 fc92 	bl	8007554 <_sbrk_r>
 8006c30:	4580      	cmp	r8, r0
 8006c32:	d13a      	bne.n	8006caa <_malloc_r+0xd2>
 8006c34:	6821      	ldr	r1, [r4, #0]
 8006c36:	3503      	adds	r5, #3
 8006c38:	1a6d      	subs	r5, r5, r1
 8006c3a:	f025 0503 	bic.w	r5, r5, #3
 8006c3e:	3508      	adds	r5, #8
 8006c40:	2d0c      	cmp	r5, #12
 8006c42:	bf38      	it	cc
 8006c44:	250c      	movcc	r5, #12
 8006c46:	4629      	mov	r1, r5
 8006c48:	4638      	mov	r0, r7
 8006c4a:	f7ff ffa5 	bl	8006b98 <sbrk_aligned>
 8006c4e:	3001      	adds	r0, #1
 8006c50:	d02b      	beq.n	8006caa <_malloc_r+0xd2>
 8006c52:	6823      	ldr	r3, [r4, #0]
 8006c54:	442b      	add	r3, r5
 8006c56:	6023      	str	r3, [r4, #0]
 8006c58:	e00e      	b.n	8006c78 <_malloc_r+0xa0>
 8006c5a:	6822      	ldr	r2, [r4, #0]
 8006c5c:	1b52      	subs	r2, r2, r5
 8006c5e:	d41e      	bmi.n	8006c9e <_malloc_r+0xc6>
 8006c60:	2a0b      	cmp	r2, #11
 8006c62:	d916      	bls.n	8006c92 <_malloc_r+0xba>
 8006c64:	1961      	adds	r1, r4, r5
 8006c66:	42a3      	cmp	r3, r4
 8006c68:	6025      	str	r5, [r4, #0]
 8006c6a:	bf18      	it	ne
 8006c6c:	6059      	strne	r1, [r3, #4]
 8006c6e:	6863      	ldr	r3, [r4, #4]
 8006c70:	bf08      	it	eq
 8006c72:	6031      	streq	r1, [r6, #0]
 8006c74:	5162      	str	r2, [r4, r5]
 8006c76:	604b      	str	r3, [r1, #4]
 8006c78:	4638      	mov	r0, r7
 8006c7a:	f104 060b 	add.w	r6, r4, #11
 8006c7e:	f000 fd49 	bl	8007714 <__malloc_unlock>
 8006c82:	f026 0607 	bic.w	r6, r6, #7
 8006c86:	1d23      	adds	r3, r4, #4
 8006c88:	1af2      	subs	r2, r6, r3
 8006c8a:	d0b6      	beq.n	8006bfa <_malloc_r+0x22>
 8006c8c:	1b9b      	subs	r3, r3, r6
 8006c8e:	50a3      	str	r3, [r4, r2]
 8006c90:	e7b3      	b.n	8006bfa <_malloc_r+0x22>
 8006c92:	6862      	ldr	r2, [r4, #4]
 8006c94:	42a3      	cmp	r3, r4
 8006c96:	bf0c      	ite	eq
 8006c98:	6032      	streq	r2, [r6, #0]
 8006c9a:	605a      	strne	r2, [r3, #4]
 8006c9c:	e7ec      	b.n	8006c78 <_malloc_r+0xa0>
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	6864      	ldr	r4, [r4, #4]
 8006ca2:	e7b2      	b.n	8006c0a <_malloc_r+0x32>
 8006ca4:	4634      	mov	r4, r6
 8006ca6:	6876      	ldr	r6, [r6, #4]
 8006ca8:	e7b9      	b.n	8006c1e <_malloc_r+0x46>
 8006caa:	230c      	movs	r3, #12
 8006cac:	603b      	str	r3, [r7, #0]
 8006cae:	4638      	mov	r0, r7
 8006cb0:	f000 fd30 	bl	8007714 <__malloc_unlock>
 8006cb4:	e7a1      	b.n	8006bfa <_malloc_r+0x22>
 8006cb6:	6025      	str	r5, [r4, #0]
 8006cb8:	e7de      	b.n	8006c78 <_malloc_r+0xa0>
 8006cba:	bf00      	nop
 8006cbc:	20000304 	.word	0x20000304

08006cc0 <__ssputs_r>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	688e      	ldr	r6, [r1, #8]
 8006cc6:	429e      	cmp	r6, r3
 8006cc8:	4682      	mov	sl, r0
 8006cca:	460c      	mov	r4, r1
 8006ccc:	4690      	mov	r8, r2
 8006cce:	461f      	mov	r7, r3
 8006cd0:	d838      	bhi.n	8006d44 <__ssputs_r+0x84>
 8006cd2:	898a      	ldrh	r2, [r1, #12]
 8006cd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cd8:	d032      	beq.n	8006d40 <__ssputs_r+0x80>
 8006cda:	6825      	ldr	r5, [r4, #0]
 8006cdc:	6909      	ldr	r1, [r1, #16]
 8006cde:	eba5 0901 	sub.w	r9, r5, r1
 8006ce2:	6965      	ldr	r5, [r4, #20]
 8006ce4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ce8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006cec:	3301      	adds	r3, #1
 8006cee:	444b      	add	r3, r9
 8006cf0:	106d      	asrs	r5, r5, #1
 8006cf2:	429d      	cmp	r5, r3
 8006cf4:	bf38      	it	cc
 8006cf6:	461d      	movcc	r5, r3
 8006cf8:	0553      	lsls	r3, r2, #21
 8006cfa:	d531      	bpl.n	8006d60 <__ssputs_r+0xa0>
 8006cfc:	4629      	mov	r1, r5
 8006cfe:	f7ff ff6b 	bl	8006bd8 <_malloc_r>
 8006d02:	4606      	mov	r6, r0
 8006d04:	b950      	cbnz	r0, 8006d1c <__ssputs_r+0x5c>
 8006d06:	230c      	movs	r3, #12
 8006d08:	f8ca 3000 	str.w	r3, [sl]
 8006d0c:	89a3      	ldrh	r3, [r4, #12]
 8006d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d12:	81a3      	strh	r3, [r4, #12]
 8006d14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d1c:	6921      	ldr	r1, [r4, #16]
 8006d1e:	464a      	mov	r2, r9
 8006d20:	f000 fcca 	bl	80076b8 <memcpy>
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d2e:	81a3      	strh	r3, [r4, #12]
 8006d30:	6126      	str	r6, [r4, #16]
 8006d32:	6165      	str	r5, [r4, #20]
 8006d34:	444e      	add	r6, r9
 8006d36:	eba5 0509 	sub.w	r5, r5, r9
 8006d3a:	6026      	str	r6, [r4, #0]
 8006d3c:	60a5      	str	r5, [r4, #8]
 8006d3e:	463e      	mov	r6, r7
 8006d40:	42be      	cmp	r6, r7
 8006d42:	d900      	bls.n	8006d46 <__ssputs_r+0x86>
 8006d44:	463e      	mov	r6, r7
 8006d46:	6820      	ldr	r0, [r4, #0]
 8006d48:	4632      	mov	r2, r6
 8006d4a:	4641      	mov	r1, r8
 8006d4c:	f000 fcc2 	bl	80076d4 <memmove>
 8006d50:	68a3      	ldr	r3, [r4, #8]
 8006d52:	1b9b      	subs	r3, r3, r6
 8006d54:	60a3      	str	r3, [r4, #8]
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	4433      	add	r3, r6
 8006d5a:	6023      	str	r3, [r4, #0]
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e7db      	b.n	8006d18 <__ssputs_r+0x58>
 8006d60:	462a      	mov	r2, r5
 8006d62:	f000 fcdd 	bl	8007720 <_realloc_r>
 8006d66:	4606      	mov	r6, r0
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d1e1      	bne.n	8006d30 <__ssputs_r+0x70>
 8006d6c:	6921      	ldr	r1, [r4, #16]
 8006d6e:	4650      	mov	r0, sl
 8006d70:	f7ff fec6 	bl	8006b00 <_free_r>
 8006d74:	e7c7      	b.n	8006d06 <__ssputs_r+0x46>
	...

08006d78 <_svfiprintf_r>:
 8006d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d7c:	4698      	mov	r8, r3
 8006d7e:	898b      	ldrh	r3, [r1, #12]
 8006d80:	061b      	lsls	r3, r3, #24
 8006d82:	b09d      	sub	sp, #116	; 0x74
 8006d84:	4607      	mov	r7, r0
 8006d86:	460d      	mov	r5, r1
 8006d88:	4614      	mov	r4, r2
 8006d8a:	d50e      	bpl.n	8006daa <_svfiprintf_r+0x32>
 8006d8c:	690b      	ldr	r3, [r1, #16]
 8006d8e:	b963      	cbnz	r3, 8006daa <_svfiprintf_r+0x32>
 8006d90:	2140      	movs	r1, #64	; 0x40
 8006d92:	f7ff ff21 	bl	8006bd8 <_malloc_r>
 8006d96:	6028      	str	r0, [r5, #0]
 8006d98:	6128      	str	r0, [r5, #16]
 8006d9a:	b920      	cbnz	r0, 8006da6 <_svfiprintf_r+0x2e>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	603b      	str	r3, [r7, #0]
 8006da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006da4:	e0d1      	b.n	8006f4a <_svfiprintf_r+0x1d2>
 8006da6:	2340      	movs	r3, #64	; 0x40
 8006da8:	616b      	str	r3, [r5, #20]
 8006daa:	2300      	movs	r3, #0
 8006dac:	9309      	str	r3, [sp, #36]	; 0x24
 8006dae:	2320      	movs	r3, #32
 8006db0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006db4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006db8:	2330      	movs	r3, #48	; 0x30
 8006dba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f64 <_svfiprintf_r+0x1ec>
 8006dbe:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dc2:	f04f 0901 	mov.w	r9, #1
 8006dc6:	4623      	mov	r3, r4
 8006dc8:	469a      	mov	sl, r3
 8006dca:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dce:	b10a      	cbz	r2, 8006dd4 <_svfiprintf_r+0x5c>
 8006dd0:	2a25      	cmp	r2, #37	; 0x25
 8006dd2:	d1f9      	bne.n	8006dc8 <_svfiprintf_r+0x50>
 8006dd4:	ebba 0b04 	subs.w	fp, sl, r4
 8006dd8:	d00b      	beq.n	8006df2 <_svfiprintf_r+0x7a>
 8006dda:	465b      	mov	r3, fp
 8006ddc:	4622      	mov	r2, r4
 8006dde:	4629      	mov	r1, r5
 8006de0:	4638      	mov	r0, r7
 8006de2:	f7ff ff6d 	bl	8006cc0 <__ssputs_r>
 8006de6:	3001      	adds	r0, #1
 8006de8:	f000 80aa 	beq.w	8006f40 <_svfiprintf_r+0x1c8>
 8006dec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006dee:	445a      	add	r2, fp
 8006df0:	9209      	str	r2, [sp, #36]	; 0x24
 8006df2:	f89a 3000 	ldrb.w	r3, [sl]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	f000 80a2 	beq.w	8006f40 <_svfiprintf_r+0x1c8>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e02:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e06:	f10a 0a01 	add.w	sl, sl, #1
 8006e0a:	9304      	str	r3, [sp, #16]
 8006e0c:	9307      	str	r3, [sp, #28]
 8006e0e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e12:	931a      	str	r3, [sp, #104]	; 0x68
 8006e14:	4654      	mov	r4, sl
 8006e16:	2205      	movs	r2, #5
 8006e18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e1c:	4851      	ldr	r0, [pc, #324]	; (8006f64 <_svfiprintf_r+0x1ec>)
 8006e1e:	f7f9 fa0f 	bl	8000240 <memchr>
 8006e22:	9a04      	ldr	r2, [sp, #16]
 8006e24:	b9d8      	cbnz	r0, 8006e5e <_svfiprintf_r+0xe6>
 8006e26:	06d0      	lsls	r0, r2, #27
 8006e28:	bf44      	itt	mi
 8006e2a:	2320      	movmi	r3, #32
 8006e2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e30:	0711      	lsls	r1, r2, #28
 8006e32:	bf44      	itt	mi
 8006e34:	232b      	movmi	r3, #43	; 0x2b
 8006e36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e3e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e40:	d015      	beq.n	8006e6e <_svfiprintf_r+0xf6>
 8006e42:	9a07      	ldr	r2, [sp, #28]
 8006e44:	4654      	mov	r4, sl
 8006e46:	2000      	movs	r0, #0
 8006e48:	f04f 0c0a 	mov.w	ip, #10
 8006e4c:	4621      	mov	r1, r4
 8006e4e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e52:	3b30      	subs	r3, #48	; 0x30
 8006e54:	2b09      	cmp	r3, #9
 8006e56:	d94e      	bls.n	8006ef6 <_svfiprintf_r+0x17e>
 8006e58:	b1b0      	cbz	r0, 8006e88 <_svfiprintf_r+0x110>
 8006e5a:	9207      	str	r2, [sp, #28]
 8006e5c:	e014      	b.n	8006e88 <_svfiprintf_r+0x110>
 8006e5e:	eba0 0308 	sub.w	r3, r0, r8
 8006e62:	fa09 f303 	lsl.w	r3, r9, r3
 8006e66:	4313      	orrs	r3, r2
 8006e68:	9304      	str	r3, [sp, #16]
 8006e6a:	46a2      	mov	sl, r4
 8006e6c:	e7d2      	b.n	8006e14 <_svfiprintf_r+0x9c>
 8006e6e:	9b03      	ldr	r3, [sp, #12]
 8006e70:	1d19      	adds	r1, r3, #4
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	9103      	str	r1, [sp, #12]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	bfbb      	ittet	lt
 8006e7a:	425b      	neglt	r3, r3
 8006e7c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e80:	9307      	strge	r3, [sp, #28]
 8006e82:	9307      	strlt	r3, [sp, #28]
 8006e84:	bfb8      	it	lt
 8006e86:	9204      	strlt	r2, [sp, #16]
 8006e88:	7823      	ldrb	r3, [r4, #0]
 8006e8a:	2b2e      	cmp	r3, #46	; 0x2e
 8006e8c:	d10c      	bne.n	8006ea8 <_svfiprintf_r+0x130>
 8006e8e:	7863      	ldrb	r3, [r4, #1]
 8006e90:	2b2a      	cmp	r3, #42	; 0x2a
 8006e92:	d135      	bne.n	8006f00 <_svfiprintf_r+0x188>
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	1d1a      	adds	r2, r3, #4
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	9203      	str	r2, [sp, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bfb8      	it	lt
 8006ea0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ea4:	3402      	adds	r4, #2
 8006ea6:	9305      	str	r3, [sp, #20]
 8006ea8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f74 <_svfiprintf_r+0x1fc>
 8006eac:	7821      	ldrb	r1, [r4, #0]
 8006eae:	2203      	movs	r2, #3
 8006eb0:	4650      	mov	r0, sl
 8006eb2:	f7f9 f9c5 	bl	8000240 <memchr>
 8006eb6:	b140      	cbz	r0, 8006eca <_svfiprintf_r+0x152>
 8006eb8:	2340      	movs	r3, #64	; 0x40
 8006eba:	eba0 000a 	sub.w	r0, r0, sl
 8006ebe:	fa03 f000 	lsl.w	r0, r3, r0
 8006ec2:	9b04      	ldr	r3, [sp, #16]
 8006ec4:	4303      	orrs	r3, r0
 8006ec6:	3401      	adds	r4, #1
 8006ec8:	9304      	str	r3, [sp, #16]
 8006eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ece:	4826      	ldr	r0, [pc, #152]	; (8006f68 <_svfiprintf_r+0x1f0>)
 8006ed0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ed4:	2206      	movs	r2, #6
 8006ed6:	f7f9 f9b3 	bl	8000240 <memchr>
 8006eda:	2800      	cmp	r0, #0
 8006edc:	d038      	beq.n	8006f50 <_svfiprintf_r+0x1d8>
 8006ede:	4b23      	ldr	r3, [pc, #140]	; (8006f6c <_svfiprintf_r+0x1f4>)
 8006ee0:	bb1b      	cbnz	r3, 8006f2a <_svfiprintf_r+0x1b2>
 8006ee2:	9b03      	ldr	r3, [sp, #12]
 8006ee4:	3307      	adds	r3, #7
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	3308      	adds	r3, #8
 8006eec:	9303      	str	r3, [sp, #12]
 8006eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ef0:	4433      	add	r3, r6
 8006ef2:	9309      	str	r3, [sp, #36]	; 0x24
 8006ef4:	e767      	b.n	8006dc6 <_svfiprintf_r+0x4e>
 8006ef6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006efa:	460c      	mov	r4, r1
 8006efc:	2001      	movs	r0, #1
 8006efe:	e7a5      	b.n	8006e4c <_svfiprintf_r+0xd4>
 8006f00:	2300      	movs	r3, #0
 8006f02:	3401      	adds	r4, #1
 8006f04:	9305      	str	r3, [sp, #20]
 8006f06:	4619      	mov	r1, r3
 8006f08:	f04f 0c0a 	mov.w	ip, #10
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f12:	3a30      	subs	r2, #48	; 0x30
 8006f14:	2a09      	cmp	r2, #9
 8006f16:	d903      	bls.n	8006f20 <_svfiprintf_r+0x1a8>
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d0c5      	beq.n	8006ea8 <_svfiprintf_r+0x130>
 8006f1c:	9105      	str	r1, [sp, #20]
 8006f1e:	e7c3      	b.n	8006ea8 <_svfiprintf_r+0x130>
 8006f20:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f24:	4604      	mov	r4, r0
 8006f26:	2301      	movs	r3, #1
 8006f28:	e7f0      	b.n	8006f0c <_svfiprintf_r+0x194>
 8006f2a:	ab03      	add	r3, sp, #12
 8006f2c:	9300      	str	r3, [sp, #0]
 8006f2e:	462a      	mov	r2, r5
 8006f30:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <_svfiprintf_r+0x1f8>)
 8006f32:	a904      	add	r1, sp, #16
 8006f34:	4638      	mov	r0, r7
 8006f36:	f3af 8000 	nop.w
 8006f3a:	1c42      	adds	r2, r0, #1
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	d1d6      	bne.n	8006eee <_svfiprintf_r+0x176>
 8006f40:	89ab      	ldrh	r3, [r5, #12]
 8006f42:	065b      	lsls	r3, r3, #25
 8006f44:	f53f af2c 	bmi.w	8006da0 <_svfiprintf_r+0x28>
 8006f48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f4a:	b01d      	add	sp, #116	; 0x74
 8006f4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f50:	ab03      	add	r3, sp, #12
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4b06      	ldr	r3, [pc, #24]	; (8006f70 <_svfiprintf_r+0x1f8>)
 8006f58:	a904      	add	r1, sp, #16
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f000 f9d4 	bl	8007308 <_printf_i>
 8006f60:	e7eb      	b.n	8006f3a <_svfiprintf_r+0x1c2>
 8006f62:	bf00      	nop
 8006f64:	08007acc 	.word	0x08007acc
 8006f68:	08007ad6 	.word	0x08007ad6
 8006f6c:	00000000 	.word	0x00000000
 8006f70:	08006cc1 	.word	0x08006cc1
 8006f74:	08007ad2 	.word	0x08007ad2

08006f78 <__sfputc_r>:
 8006f78:	6893      	ldr	r3, [r2, #8]
 8006f7a:	3b01      	subs	r3, #1
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	b410      	push	{r4}
 8006f80:	6093      	str	r3, [r2, #8]
 8006f82:	da08      	bge.n	8006f96 <__sfputc_r+0x1e>
 8006f84:	6994      	ldr	r4, [r2, #24]
 8006f86:	42a3      	cmp	r3, r4
 8006f88:	db01      	blt.n	8006f8e <__sfputc_r+0x16>
 8006f8a:	290a      	cmp	r1, #10
 8006f8c:	d103      	bne.n	8006f96 <__sfputc_r+0x1e>
 8006f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f92:	f7ff ba9d 	b.w	80064d0 <__swbuf_r>
 8006f96:	6813      	ldr	r3, [r2, #0]
 8006f98:	1c58      	adds	r0, r3, #1
 8006f9a:	6010      	str	r0, [r2, #0]
 8006f9c:	7019      	strb	r1, [r3, #0]
 8006f9e:	4608      	mov	r0, r1
 8006fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fa4:	4770      	bx	lr

08006fa6 <__sfputs_r>:
 8006fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa8:	4606      	mov	r6, r0
 8006faa:	460f      	mov	r7, r1
 8006fac:	4614      	mov	r4, r2
 8006fae:	18d5      	adds	r5, r2, r3
 8006fb0:	42ac      	cmp	r4, r5
 8006fb2:	d101      	bne.n	8006fb8 <__sfputs_r+0x12>
 8006fb4:	2000      	movs	r0, #0
 8006fb6:	e007      	b.n	8006fc8 <__sfputs_r+0x22>
 8006fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fbc:	463a      	mov	r2, r7
 8006fbe:	4630      	mov	r0, r6
 8006fc0:	f7ff ffda 	bl	8006f78 <__sfputc_r>
 8006fc4:	1c43      	adds	r3, r0, #1
 8006fc6:	d1f3      	bne.n	8006fb0 <__sfputs_r+0xa>
 8006fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fcc <_vfiprintf_r>:
 8006fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fd0:	460d      	mov	r5, r1
 8006fd2:	b09d      	sub	sp, #116	; 0x74
 8006fd4:	4614      	mov	r4, r2
 8006fd6:	4698      	mov	r8, r3
 8006fd8:	4606      	mov	r6, r0
 8006fda:	b118      	cbz	r0, 8006fe4 <_vfiprintf_r+0x18>
 8006fdc:	6983      	ldr	r3, [r0, #24]
 8006fde:	b90b      	cbnz	r3, 8006fe4 <_vfiprintf_r+0x18>
 8006fe0:	f7ff fc6e 	bl	80068c0 <__sinit>
 8006fe4:	4b89      	ldr	r3, [pc, #548]	; (800720c <_vfiprintf_r+0x240>)
 8006fe6:	429d      	cmp	r5, r3
 8006fe8:	d11b      	bne.n	8007022 <_vfiprintf_r+0x56>
 8006fea:	6875      	ldr	r5, [r6, #4]
 8006fec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fee:	07d9      	lsls	r1, r3, #31
 8006ff0:	d405      	bmi.n	8006ffe <_vfiprintf_r+0x32>
 8006ff2:	89ab      	ldrh	r3, [r5, #12]
 8006ff4:	059a      	lsls	r2, r3, #22
 8006ff6:	d402      	bmi.n	8006ffe <_vfiprintf_r+0x32>
 8006ff8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ffa:	f7ff fd11 	bl	8006a20 <__retarget_lock_acquire_recursive>
 8006ffe:	89ab      	ldrh	r3, [r5, #12]
 8007000:	071b      	lsls	r3, r3, #28
 8007002:	d501      	bpl.n	8007008 <_vfiprintf_r+0x3c>
 8007004:	692b      	ldr	r3, [r5, #16]
 8007006:	b9eb      	cbnz	r3, 8007044 <_vfiprintf_r+0x78>
 8007008:	4629      	mov	r1, r5
 800700a:	4630      	mov	r0, r6
 800700c:	f7ff fab2 	bl	8006574 <__swsetup_r>
 8007010:	b1c0      	cbz	r0, 8007044 <_vfiprintf_r+0x78>
 8007012:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007014:	07dc      	lsls	r4, r3, #31
 8007016:	d50e      	bpl.n	8007036 <_vfiprintf_r+0x6a>
 8007018:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800701c:	b01d      	add	sp, #116	; 0x74
 800701e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007022:	4b7b      	ldr	r3, [pc, #492]	; (8007210 <_vfiprintf_r+0x244>)
 8007024:	429d      	cmp	r5, r3
 8007026:	d101      	bne.n	800702c <_vfiprintf_r+0x60>
 8007028:	68b5      	ldr	r5, [r6, #8]
 800702a:	e7df      	b.n	8006fec <_vfiprintf_r+0x20>
 800702c:	4b79      	ldr	r3, [pc, #484]	; (8007214 <_vfiprintf_r+0x248>)
 800702e:	429d      	cmp	r5, r3
 8007030:	bf08      	it	eq
 8007032:	68f5      	ldreq	r5, [r6, #12]
 8007034:	e7da      	b.n	8006fec <_vfiprintf_r+0x20>
 8007036:	89ab      	ldrh	r3, [r5, #12]
 8007038:	0598      	lsls	r0, r3, #22
 800703a:	d4ed      	bmi.n	8007018 <_vfiprintf_r+0x4c>
 800703c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800703e:	f7ff fcf0 	bl	8006a22 <__retarget_lock_release_recursive>
 8007042:	e7e9      	b.n	8007018 <_vfiprintf_r+0x4c>
 8007044:	2300      	movs	r3, #0
 8007046:	9309      	str	r3, [sp, #36]	; 0x24
 8007048:	2320      	movs	r3, #32
 800704a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800704e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007052:	2330      	movs	r3, #48	; 0x30
 8007054:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007218 <_vfiprintf_r+0x24c>
 8007058:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800705c:	f04f 0901 	mov.w	r9, #1
 8007060:	4623      	mov	r3, r4
 8007062:	469a      	mov	sl, r3
 8007064:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007068:	b10a      	cbz	r2, 800706e <_vfiprintf_r+0xa2>
 800706a:	2a25      	cmp	r2, #37	; 0x25
 800706c:	d1f9      	bne.n	8007062 <_vfiprintf_r+0x96>
 800706e:	ebba 0b04 	subs.w	fp, sl, r4
 8007072:	d00b      	beq.n	800708c <_vfiprintf_r+0xc0>
 8007074:	465b      	mov	r3, fp
 8007076:	4622      	mov	r2, r4
 8007078:	4629      	mov	r1, r5
 800707a:	4630      	mov	r0, r6
 800707c:	f7ff ff93 	bl	8006fa6 <__sfputs_r>
 8007080:	3001      	adds	r0, #1
 8007082:	f000 80aa 	beq.w	80071da <_vfiprintf_r+0x20e>
 8007086:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007088:	445a      	add	r2, fp
 800708a:	9209      	str	r2, [sp, #36]	; 0x24
 800708c:	f89a 3000 	ldrb.w	r3, [sl]
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 80a2 	beq.w	80071da <_vfiprintf_r+0x20e>
 8007096:	2300      	movs	r3, #0
 8007098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800709c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070a0:	f10a 0a01 	add.w	sl, sl, #1
 80070a4:	9304      	str	r3, [sp, #16]
 80070a6:	9307      	str	r3, [sp, #28]
 80070a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070ac:	931a      	str	r3, [sp, #104]	; 0x68
 80070ae:	4654      	mov	r4, sl
 80070b0:	2205      	movs	r2, #5
 80070b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070b6:	4858      	ldr	r0, [pc, #352]	; (8007218 <_vfiprintf_r+0x24c>)
 80070b8:	f7f9 f8c2 	bl	8000240 <memchr>
 80070bc:	9a04      	ldr	r2, [sp, #16]
 80070be:	b9d8      	cbnz	r0, 80070f8 <_vfiprintf_r+0x12c>
 80070c0:	06d1      	lsls	r1, r2, #27
 80070c2:	bf44      	itt	mi
 80070c4:	2320      	movmi	r3, #32
 80070c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ca:	0713      	lsls	r3, r2, #28
 80070cc:	bf44      	itt	mi
 80070ce:	232b      	movmi	r3, #43	; 0x2b
 80070d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070d4:	f89a 3000 	ldrb.w	r3, [sl]
 80070d8:	2b2a      	cmp	r3, #42	; 0x2a
 80070da:	d015      	beq.n	8007108 <_vfiprintf_r+0x13c>
 80070dc:	9a07      	ldr	r2, [sp, #28]
 80070de:	4654      	mov	r4, sl
 80070e0:	2000      	movs	r0, #0
 80070e2:	f04f 0c0a 	mov.w	ip, #10
 80070e6:	4621      	mov	r1, r4
 80070e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ec:	3b30      	subs	r3, #48	; 0x30
 80070ee:	2b09      	cmp	r3, #9
 80070f0:	d94e      	bls.n	8007190 <_vfiprintf_r+0x1c4>
 80070f2:	b1b0      	cbz	r0, 8007122 <_vfiprintf_r+0x156>
 80070f4:	9207      	str	r2, [sp, #28]
 80070f6:	e014      	b.n	8007122 <_vfiprintf_r+0x156>
 80070f8:	eba0 0308 	sub.w	r3, r0, r8
 80070fc:	fa09 f303 	lsl.w	r3, r9, r3
 8007100:	4313      	orrs	r3, r2
 8007102:	9304      	str	r3, [sp, #16]
 8007104:	46a2      	mov	sl, r4
 8007106:	e7d2      	b.n	80070ae <_vfiprintf_r+0xe2>
 8007108:	9b03      	ldr	r3, [sp, #12]
 800710a:	1d19      	adds	r1, r3, #4
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	9103      	str	r1, [sp, #12]
 8007110:	2b00      	cmp	r3, #0
 8007112:	bfbb      	ittet	lt
 8007114:	425b      	neglt	r3, r3
 8007116:	f042 0202 	orrlt.w	r2, r2, #2
 800711a:	9307      	strge	r3, [sp, #28]
 800711c:	9307      	strlt	r3, [sp, #28]
 800711e:	bfb8      	it	lt
 8007120:	9204      	strlt	r2, [sp, #16]
 8007122:	7823      	ldrb	r3, [r4, #0]
 8007124:	2b2e      	cmp	r3, #46	; 0x2e
 8007126:	d10c      	bne.n	8007142 <_vfiprintf_r+0x176>
 8007128:	7863      	ldrb	r3, [r4, #1]
 800712a:	2b2a      	cmp	r3, #42	; 0x2a
 800712c:	d135      	bne.n	800719a <_vfiprintf_r+0x1ce>
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	1d1a      	adds	r2, r3, #4
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	9203      	str	r2, [sp, #12]
 8007136:	2b00      	cmp	r3, #0
 8007138:	bfb8      	it	lt
 800713a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800713e:	3402      	adds	r4, #2
 8007140:	9305      	str	r3, [sp, #20]
 8007142:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007228 <_vfiprintf_r+0x25c>
 8007146:	7821      	ldrb	r1, [r4, #0]
 8007148:	2203      	movs	r2, #3
 800714a:	4650      	mov	r0, sl
 800714c:	f7f9 f878 	bl	8000240 <memchr>
 8007150:	b140      	cbz	r0, 8007164 <_vfiprintf_r+0x198>
 8007152:	2340      	movs	r3, #64	; 0x40
 8007154:	eba0 000a 	sub.w	r0, r0, sl
 8007158:	fa03 f000 	lsl.w	r0, r3, r0
 800715c:	9b04      	ldr	r3, [sp, #16]
 800715e:	4303      	orrs	r3, r0
 8007160:	3401      	adds	r4, #1
 8007162:	9304      	str	r3, [sp, #16]
 8007164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007168:	482c      	ldr	r0, [pc, #176]	; (800721c <_vfiprintf_r+0x250>)
 800716a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800716e:	2206      	movs	r2, #6
 8007170:	f7f9 f866 	bl	8000240 <memchr>
 8007174:	2800      	cmp	r0, #0
 8007176:	d03f      	beq.n	80071f8 <_vfiprintf_r+0x22c>
 8007178:	4b29      	ldr	r3, [pc, #164]	; (8007220 <_vfiprintf_r+0x254>)
 800717a:	bb1b      	cbnz	r3, 80071c4 <_vfiprintf_r+0x1f8>
 800717c:	9b03      	ldr	r3, [sp, #12]
 800717e:	3307      	adds	r3, #7
 8007180:	f023 0307 	bic.w	r3, r3, #7
 8007184:	3308      	adds	r3, #8
 8007186:	9303      	str	r3, [sp, #12]
 8007188:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800718a:	443b      	add	r3, r7
 800718c:	9309      	str	r3, [sp, #36]	; 0x24
 800718e:	e767      	b.n	8007060 <_vfiprintf_r+0x94>
 8007190:	fb0c 3202 	mla	r2, ip, r2, r3
 8007194:	460c      	mov	r4, r1
 8007196:	2001      	movs	r0, #1
 8007198:	e7a5      	b.n	80070e6 <_vfiprintf_r+0x11a>
 800719a:	2300      	movs	r3, #0
 800719c:	3401      	adds	r4, #1
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	4619      	mov	r1, r3
 80071a2:	f04f 0c0a 	mov.w	ip, #10
 80071a6:	4620      	mov	r0, r4
 80071a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071ac:	3a30      	subs	r2, #48	; 0x30
 80071ae:	2a09      	cmp	r2, #9
 80071b0:	d903      	bls.n	80071ba <_vfiprintf_r+0x1ee>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d0c5      	beq.n	8007142 <_vfiprintf_r+0x176>
 80071b6:	9105      	str	r1, [sp, #20]
 80071b8:	e7c3      	b.n	8007142 <_vfiprintf_r+0x176>
 80071ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80071be:	4604      	mov	r4, r0
 80071c0:	2301      	movs	r3, #1
 80071c2:	e7f0      	b.n	80071a6 <_vfiprintf_r+0x1da>
 80071c4:	ab03      	add	r3, sp, #12
 80071c6:	9300      	str	r3, [sp, #0]
 80071c8:	462a      	mov	r2, r5
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <_vfiprintf_r+0x258>)
 80071cc:	a904      	add	r1, sp, #16
 80071ce:	4630      	mov	r0, r6
 80071d0:	f3af 8000 	nop.w
 80071d4:	4607      	mov	r7, r0
 80071d6:	1c78      	adds	r0, r7, #1
 80071d8:	d1d6      	bne.n	8007188 <_vfiprintf_r+0x1bc>
 80071da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071dc:	07d9      	lsls	r1, r3, #31
 80071de:	d405      	bmi.n	80071ec <_vfiprintf_r+0x220>
 80071e0:	89ab      	ldrh	r3, [r5, #12]
 80071e2:	059a      	lsls	r2, r3, #22
 80071e4:	d402      	bmi.n	80071ec <_vfiprintf_r+0x220>
 80071e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071e8:	f7ff fc1b 	bl	8006a22 <__retarget_lock_release_recursive>
 80071ec:	89ab      	ldrh	r3, [r5, #12]
 80071ee:	065b      	lsls	r3, r3, #25
 80071f0:	f53f af12 	bmi.w	8007018 <_vfiprintf_r+0x4c>
 80071f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f6:	e711      	b.n	800701c <_vfiprintf_r+0x50>
 80071f8:	ab03      	add	r3, sp, #12
 80071fa:	9300      	str	r3, [sp, #0]
 80071fc:	462a      	mov	r2, r5
 80071fe:	4b09      	ldr	r3, [pc, #36]	; (8007224 <_vfiprintf_r+0x258>)
 8007200:	a904      	add	r1, sp, #16
 8007202:	4630      	mov	r0, r6
 8007204:	f000 f880 	bl	8007308 <_printf_i>
 8007208:	e7e4      	b.n	80071d4 <_vfiprintf_r+0x208>
 800720a:	bf00      	nop
 800720c:	08007a8c 	.word	0x08007a8c
 8007210:	08007aac 	.word	0x08007aac
 8007214:	08007a6c 	.word	0x08007a6c
 8007218:	08007acc 	.word	0x08007acc
 800721c:	08007ad6 	.word	0x08007ad6
 8007220:	00000000 	.word	0x00000000
 8007224:	08006fa7 	.word	0x08006fa7
 8007228:	08007ad2 	.word	0x08007ad2

0800722c <_printf_common>:
 800722c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007230:	4616      	mov	r6, r2
 8007232:	4699      	mov	r9, r3
 8007234:	688a      	ldr	r2, [r1, #8]
 8007236:	690b      	ldr	r3, [r1, #16]
 8007238:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800723c:	4293      	cmp	r3, r2
 800723e:	bfb8      	it	lt
 8007240:	4613      	movlt	r3, r2
 8007242:	6033      	str	r3, [r6, #0]
 8007244:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007248:	4607      	mov	r7, r0
 800724a:	460c      	mov	r4, r1
 800724c:	b10a      	cbz	r2, 8007252 <_printf_common+0x26>
 800724e:	3301      	adds	r3, #1
 8007250:	6033      	str	r3, [r6, #0]
 8007252:	6823      	ldr	r3, [r4, #0]
 8007254:	0699      	lsls	r1, r3, #26
 8007256:	bf42      	ittt	mi
 8007258:	6833      	ldrmi	r3, [r6, #0]
 800725a:	3302      	addmi	r3, #2
 800725c:	6033      	strmi	r3, [r6, #0]
 800725e:	6825      	ldr	r5, [r4, #0]
 8007260:	f015 0506 	ands.w	r5, r5, #6
 8007264:	d106      	bne.n	8007274 <_printf_common+0x48>
 8007266:	f104 0a19 	add.w	sl, r4, #25
 800726a:	68e3      	ldr	r3, [r4, #12]
 800726c:	6832      	ldr	r2, [r6, #0]
 800726e:	1a9b      	subs	r3, r3, r2
 8007270:	42ab      	cmp	r3, r5
 8007272:	dc26      	bgt.n	80072c2 <_printf_common+0x96>
 8007274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007278:	1e13      	subs	r3, r2, #0
 800727a:	6822      	ldr	r2, [r4, #0]
 800727c:	bf18      	it	ne
 800727e:	2301      	movne	r3, #1
 8007280:	0692      	lsls	r2, r2, #26
 8007282:	d42b      	bmi.n	80072dc <_printf_common+0xb0>
 8007284:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007288:	4649      	mov	r1, r9
 800728a:	4638      	mov	r0, r7
 800728c:	47c0      	blx	r8
 800728e:	3001      	adds	r0, #1
 8007290:	d01e      	beq.n	80072d0 <_printf_common+0xa4>
 8007292:	6823      	ldr	r3, [r4, #0]
 8007294:	68e5      	ldr	r5, [r4, #12]
 8007296:	6832      	ldr	r2, [r6, #0]
 8007298:	f003 0306 	and.w	r3, r3, #6
 800729c:	2b04      	cmp	r3, #4
 800729e:	bf08      	it	eq
 80072a0:	1aad      	subeq	r5, r5, r2
 80072a2:	68a3      	ldr	r3, [r4, #8]
 80072a4:	6922      	ldr	r2, [r4, #16]
 80072a6:	bf0c      	ite	eq
 80072a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072ac:	2500      	movne	r5, #0
 80072ae:	4293      	cmp	r3, r2
 80072b0:	bfc4      	itt	gt
 80072b2:	1a9b      	subgt	r3, r3, r2
 80072b4:	18ed      	addgt	r5, r5, r3
 80072b6:	2600      	movs	r6, #0
 80072b8:	341a      	adds	r4, #26
 80072ba:	42b5      	cmp	r5, r6
 80072bc:	d11a      	bne.n	80072f4 <_printf_common+0xc8>
 80072be:	2000      	movs	r0, #0
 80072c0:	e008      	b.n	80072d4 <_printf_common+0xa8>
 80072c2:	2301      	movs	r3, #1
 80072c4:	4652      	mov	r2, sl
 80072c6:	4649      	mov	r1, r9
 80072c8:	4638      	mov	r0, r7
 80072ca:	47c0      	blx	r8
 80072cc:	3001      	adds	r0, #1
 80072ce:	d103      	bne.n	80072d8 <_printf_common+0xac>
 80072d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d8:	3501      	adds	r5, #1
 80072da:	e7c6      	b.n	800726a <_printf_common+0x3e>
 80072dc:	18e1      	adds	r1, r4, r3
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	2030      	movs	r0, #48	; 0x30
 80072e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072e6:	4422      	add	r2, r4
 80072e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072f0:	3302      	adds	r3, #2
 80072f2:	e7c7      	b.n	8007284 <_printf_common+0x58>
 80072f4:	2301      	movs	r3, #1
 80072f6:	4622      	mov	r2, r4
 80072f8:	4649      	mov	r1, r9
 80072fa:	4638      	mov	r0, r7
 80072fc:	47c0      	blx	r8
 80072fe:	3001      	adds	r0, #1
 8007300:	d0e6      	beq.n	80072d0 <_printf_common+0xa4>
 8007302:	3601      	adds	r6, #1
 8007304:	e7d9      	b.n	80072ba <_printf_common+0x8e>
	...

08007308 <_printf_i>:
 8007308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800730c:	7e0f      	ldrb	r7, [r1, #24]
 800730e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007310:	2f78      	cmp	r7, #120	; 0x78
 8007312:	4691      	mov	r9, r2
 8007314:	4680      	mov	r8, r0
 8007316:	460c      	mov	r4, r1
 8007318:	469a      	mov	sl, r3
 800731a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800731e:	d807      	bhi.n	8007330 <_printf_i+0x28>
 8007320:	2f62      	cmp	r7, #98	; 0x62
 8007322:	d80a      	bhi.n	800733a <_printf_i+0x32>
 8007324:	2f00      	cmp	r7, #0
 8007326:	f000 80d8 	beq.w	80074da <_printf_i+0x1d2>
 800732a:	2f58      	cmp	r7, #88	; 0x58
 800732c:	f000 80a3 	beq.w	8007476 <_printf_i+0x16e>
 8007330:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007334:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007338:	e03a      	b.n	80073b0 <_printf_i+0xa8>
 800733a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800733e:	2b15      	cmp	r3, #21
 8007340:	d8f6      	bhi.n	8007330 <_printf_i+0x28>
 8007342:	a101      	add	r1, pc, #4	; (adr r1, 8007348 <_printf_i+0x40>)
 8007344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007348:	080073a1 	.word	0x080073a1
 800734c:	080073b5 	.word	0x080073b5
 8007350:	08007331 	.word	0x08007331
 8007354:	08007331 	.word	0x08007331
 8007358:	08007331 	.word	0x08007331
 800735c:	08007331 	.word	0x08007331
 8007360:	080073b5 	.word	0x080073b5
 8007364:	08007331 	.word	0x08007331
 8007368:	08007331 	.word	0x08007331
 800736c:	08007331 	.word	0x08007331
 8007370:	08007331 	.word	0x08007331
 8007374:	080074c1 	.word	0x080074c1
 8007378:	080073e5 	.word	0x080073e5
 800737c:	080074a3 	.word	0x080074a3
 8007380:	08007331 	.word	0x08007331
 8007384:	08007331 	.word	0x08007331
 8007388:	080074e3 	.word	0x080074e3
 800738c:	08007331 	.word	0x08007331
 8007390:	080073e5 	.word	0x080073e5
 8007394:	08007331 	.word	0x08007331
 8007398:	08007331 	.word	0x08007331
 800739c:	080074ab 	.word	0x080074ab
 80073a0:	682b      	ldr	r3, [r5, #0]
 80073a2:	1d1a      	adds	r2, r3, #4
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	602a      	str	r2, [r5, #0]
 80073a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073b0:	2301      	movs	r3, #1
 80073b2:	e0a3      	b.n	80074fc <_printf_i+0x1f4>
 80073b4:	6820      	ldr	r0, [r4, #0]
 80073b6:	6829      	ldr	r1, [r5, #0]
 80073b8:	0606      	lsls	r6, r0, #24
 80073ba:	f101 0304 	add.w	r3, r1, #4
 80073be:	d50a      	bpl.n	80073d6 <_printf_i+0xce>
 80073c0:	680e      	ldr	r6, [r1, #0]
 80073c2:	602b      	str	r3, [r5, #0]
 80073c4:	2e00      	cmp	r6, #0
 80073c6:	da03      	bge.n	80073d0 <_printf_i+0xc8>
 80073c8:	232d      	movs	r3, #45	; 0x2d
 80073ca:	4276      	negs	r6, r6
 80073cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073d0:	485e      	ldr	r0, [pc, #376]	; (800754c <_printf_i+0x244>)
 80073d2:	230a      	movs	r3, #10
 80073d4:	e019      	b.n	800740a <_printf_i+0x102>
 80073d6:	680e      	ldr	r6, [r1, #0]
 80073d8:	602b      	str	r3, [r5, #0]
 80073da:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073de:	bf18      	it	ne
 80073e0:	b236      	sxthne	r6, r6
 80073e2:	e7ef      	b.n	80073c4 <_printf_i+0xbc>
 80073e4:	682b      	ldr	r3, [r5, #0]
 80073e6:	6820      	ldr	r0, [r4, #0]
 80073e8:	1d19      	adds	r1, r3, #4
 80073ea:	6029      	str	r1, [r5, #0]
 80073ec:	0601      	lsls	r1, r0, #24
 80073ee:	d501      	bpl.n	80073f4 <_printf_i+0xec>
 80073f0:	681e      	ldr	r6, [r3, #0]
 80073f2:	e002      	b.n	80073fa <_printf_i+0xf2>
 80073f4:	0646      	lsls	r6, r0, #25
 80073f6:	d5fb      	bpl.n	80073f0 <_printf_i+0xe8>
 80073f8:	881e      	ldrh	r6, [r3, #0]
 80073fa:	4854      	ldr	r0, [pc, #336]	; (800754c <_printf_i+0x244>)
 80073fc:	2f6f      	cmp	r7, #111	; 0x6f
 80073fe:	bf0c      	ite	eq
 8007400:	2308      	moveq	r3, #8
 8007402:	230a      	movne	r3, #10
 8007404:	2100      	movs	r1, #0
 8007406:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800740a:	6865      	ldr	r5, [r4, #4]
 800740c:	60a5      	str	r5, [r4, #8]
 800740e:	2d00      	cmp	r5, #0
 8007410:	bfa2      	ittt	ge
 8007412:	6821      	ldrge	r1, [r4, #0]
 8007414:	f021 0104 	bicge.w	r1, r1, #4
 8007418:	6021      	strge	r1, [r4, #0]
 800741a:	b90e      	cbnz	r6, 8007420 <_printf_i+0x118>
 800741c:	2d00      	cmp	r5, #0
 800741e:	d04d      	beq.n	80074bc <_printf_i+0x1b4>
 8007420:	4615      	mov	r5, r2
 8007422:	fbb6 f1f3 	udiv	r1, r6, r3
 8007426:	fb03 6711 	mls	r7, r3, r1, r6
 800742a:	5dc7      	ldrb	r7, [r0, r7]
 800742c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007430:	4637      	mov	r7, r6
 8007432:	42bb      	cmp	r3, r7
 8007434:	460e      	mov	r6, r1
 8007436:	d9f4      	bls.n	8007422 <_printf_i+0x11a>
 8007438:	2b08      	cmp	r3, #8
 800743a:	d10b      	bne.n	8007454 <_printf_i+0x14c>
 800743c:	6823      	ldr	r3, [r4, #0]
 800743e:	07de      	lsls	r6, r3, #31
 8007440:	d508      	bpl.n	8007454 <_printf_i+0x14c>
 8007442:	6923      	ldr	r3, [r4, #16]
 8007444:	6861      	ldr	r1, [r4, #4]
 8007446:	4299      	cmp	r1, r3
 8007448:	bfde      	ittt	le
 800744a:	2330      	movle	r3, #48	; 0x30
 800744c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007450:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007454:	1b52      	subs	r2, r2, r5
 8007456:	6122      	str	r2, [r4, #16]
 8007458:	f8cd a000 	str.w	sl, [sp]
 800745c:	464b      	mov	r3, r9
 800745e:	aa03      	add	r2, sp, #12
 8007460:	4621      	mov	r1, r4
 8007462:	4640      	mov	r0, r8
 8007464:	f7ff fee2 	bl	800722c <_printf_common>
 8007468:	3001      	adds	r0, #1
 800746a:	d14c      	bne.n	8007506 <_printf_i+0x1fe>
 800746c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007470:	b004      	add	sp, #16
 8007472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007476:	4835      	ldr	r0, [pc, #212]	; (800754c <_printf_i+0x244>)
 8007478:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800747c:	6829      	ldr	r1, [r5, #0]
 800747e:	6823      	ldr	r3, [r4, #0]
 8007480:	f851 6b04 	ldr.w	r6, [r1], #4
 8007484:	6029      	str	r1, [r5, #0]
 8007486:	061d      	lsls	r5, r3, #24
 8007488:	d514      	bpl.n	80074b4 <_printf_i+0x1ac>
 800748a:	07df      	lsls	r7, r3, #31
 800748c:	bf44      	itt	mi
 800748e:	f043 0320 	orrmi.w	r3, r3, #32
 8007492:	6023      	strmi	r3, [r4, #0]
 8007494:	b91e      	cbnz	r6, 800749e <_printf_i+0x196>
 8007496:	6823      	ldr	r3, [r4, #0]
 8007498:	f023 0320 	bic.w	r3, r3, #32
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	2310      	movs	r3, #16
 80074a0:	e7b0      	b.n	8007404 <_printf_i+0xfc>
 80074a2:	6823      	ldr	r3, [r4, #0]
 80074a4:	f043 0320 	orr.w	r3, r3, #32
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	2378      	movs	r3, #120	; 0x78
 80074ac:	4828      	ldr	r0, [pc, #160]	; (8007550 <_printf_i+0x248>)
 80074ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074b2:	e7e3      	b.n	800747c <_printf_i+0x174>
 80074b4:	0659      	lsls	r1, r3, #25
 80074b6:	bf48      	it	mi
 80074b8:	b2b6      	uxthmi	r6, r6
 80074ba:	e7e6      	b.n	800748a <_printf_i+0x182>
 80074bc:	4615      	mov	r5, r2
 80074be:	e7bb      	b.n	8007438 <_printf_i+0x130>
 80074c0:	682b      	ldr	r3, [r5, #0]
 80074c2:	6826      	ldr	r6, [r4, #0]
 80074c4:	6961      	ldr	r1, [r4, #20]
 80074c6:	1d18      	adds	r0, r3, #4
 80074c8:	6028      	str	r0, [r5, #0]
 80074ca:	0635      	lsls	r5, r6, #24
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	d501      	bpl.n	80074d4 <_printf_i+0x1cc>
 80074d0:	6019      	str	r1, [r3, #0]
 80074d2:	e002      	b.n	80074da <_printf_i+0x1d2>
 80074d4:	0670      	lsls	r0, r6, #25
 80074d6:	d5fb      	bpl.n	80074d0 <_printf_i+0x1c8>
 80074d8:	8019      	strh	r1, [r3, #0]
 80074da:	2300      	movs	r3, #0
 80074dc:	6123      	str	r3, [r4, #16]
 80074de:	4615      	mov	r5, r2
 80074e0:	e7ba      	b.n	8007458 <_printf_i+0x150>
 80074e2:	682b      	ldr	r3, [r5, #0]
 80074e4:	1d1a      	adds	r2, r3, #4
 80074e6:	602a      	str	r2, [r5, #0]
 80074e8:	681d      	ldr	r5, [r3, #0]
 80074ea:	6862      	ldr	r2, [r4, #4]
 80074ec:	2100      	movs	r1, #0
 80074ee:	4628      	mov	r0, r5
 80074f0:	f7f8 fea6 	bl	8000240 <memchr>
 80074f4:	b108      	cbz	r0, 80074fa <_printf_i+0x1f2>
 80074f6:	1b40      	subs	r0, r0, r5
 80074f8:	6060      	str	r0, [r4, #4]
 80074fa:	6863      	ldr	r3, [r4, #4]
 80074fc:	6123      	str	r3, [r4, #16]
 80074fe:	2300      	movs	r3, #0
 8007500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007504:	e7a8      	b.n	8007458 <_printf_i+0x150>
 8007506:	6923      	ldr	r3, [r4, #16]
 8007508:	462a      	mov	r2, r5
 800750a:	4649      	mov	r1, r9
 800750c:	4640      	mov	r0, r8
 800750e:	47d0      	blx	sl
 8007510:	3001      	adds	r0, #1
 8007512:	d0ab      	beq.n	800746c <_printf_i+0x164>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	079b      	lsls	r3, r3, #30
 8007518:	d413      	bmi.n	8007542 <_printf_i+0x23a>
 800751a:	68e0      	ldr	r0, [r4, #12]
 800751c:	9b03      	ldr	r3, [sp, #12]
 800751e:	4298      	cmp	r0, r3
 8007520:	bfb8      	it	lt
 8007522:	4618      	movlt	r0, r3
 8007524:	e7a4      	b.n	8007470 <_printf_i+0x168>
 8007526:	2301      	movs	r3, #1
 8007528:	4632      	mov	r2, r6
 800752a:	4649      	mov	r1, r9
 800752c:	4640      	mov	r0, r8
 800752e:	47d0      	blx	sl
 8007530:	3001      	adds	r0, #1
 8007532:	d09b      	beq.n	800746c <_printf_i+0x164>
 8007534:	3501      	adds	r5, #1
 8007536:	68e3      	ldr	r3, [r4, #12]
 8007538:	9903      	ldr	r1, [sp, #12]
 800753a:	1a5b      	subs	r3, r3, r1
 800753c:	42ab      	cmp	r3, r5
 800753e:	dcf2      	bgt.n	8007526 <_printf_i+0x21e>
 8007540:	e7eb      	b.n	800751a <_printf_i+0x212>
 8007542:	2500      	movs	r5, #0
 8007544:	f104 0619 	add.w	r6, r4, #25
 8007548:	e7f5      	b.n	8007536 <_printf_i+0x22e>
 800754a:	bf00      	nop
 800754c:	08007add 	.word	0x08007add
 8007550:	08007aee 	.word	0x08007aee

08007554 <_sbrk_r>:
 8007554:	b538      	push	{r3, r4, r5, lr}
 8007556:	4d06      	ldr	r5, [pc, #24]	; (8007570 <_sbrk_r+0x1c>)
 8007558:	2300      	movs	r3, #0
 800755a:	4604      	mov	r4, r0
 800755c:	4608      	mov	r0, r1
 800755e:	602b      	str	r3, [r5, #0]
 8007560:	f7f9 fdae 	bl	80010c0 <_sbrk>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d102      	bne.n	800756e <_sbrk_r+0x1a>
 8007568:	682b      	ldr	r3, [r5, #0]
 800756a:	b103      	cbz	r3, 800756e <_sbrk_r+0x1a>
 800756c:	6023      	str	r3, [r4, #0]
 800756e:	bd38      	pop	{r3, r4, r5, pc}
 8007570:	2000030c 	.word	0x2000030c

08007574 <__sread>:
 8007574:	b510      	push	{r4, lr}
 8007576:	460c      	mov	r4, r1
 8007578:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757c:	f000 f900 	bl	8007780 <_read_r>
 8007580:	2800      	cmp	r0, #0
 8007582:	bfab      	itete	ge
 8007584:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007586:	89a3      	ldrhlt	r3, [r4, #12]
 8007588:	181b      	addge	r3, r3, r0
 800758a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800758e:	bfac      	ite	ge
 8007590:	6563      	strge	r3, [r4, #84]	; 0x54
 8007592:	81a3      	strhlt	r3, [r4, #12]
 8007594:	bd10      	pop	{r4, pc}

08007596 <__swrite>:
 8007596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	461f      	mov	r7, r3
 800759c:	898b      	ldrh	r3, [r1, #12]
 800759e:	05db      	lsls	r3, r3, #23
 80075a0:	4605      	mov	r5, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	4616      	mov	r6, r2
 80075a6:	d505      	bpl.n	80075b4 <__swrite+0x1e>
 80075a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075ac:	2302      	movs	r3, #2
 80075ae:	2200      	movs	r2, #0
 80075b0:	f000 f870 	bl	8007694 <_lseek_r>
 80075b4:	89a3      	ldrh	r3, [r4, #12]
 80075b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80075ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80075be:	81a3      	strh	r3, [r4, #12]
 80075c0:	4632      	mov	r2, r6
 80075c2:	463b      	mov	r3, r7
 80075c4:	4628      	mov	r0, r5
 80075c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075ca:	f000 b817 	b.w	80075fc <_write_r>

080075ce <__sseek>:
 80075ce:	b510      	push	{r4, lr}
 80075d0:	460c      	mov	r4, r1
 80075d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d6:	f000 f85d 	bl	8007694 <_lseek_r>
 80075da:	1c43      	adds	r3, r0, #1
 80075dc:	89a3      	ldrh	r3, [r4, #12]
 80075de:	bf15      	itete	ne
 80075e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ea:	81a3      	strheq	r3, [r4, #12]
 80075ec:	bf18      	it	ne
 80075ee:	81a3      	strhne	r3, [r4, #12]
 80075f0:	bd10      	pop	{r4, pc}

080075f2 <__sclose>:
 80075f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075f6:	f000 b81b 	b.w	8007630 <_close_r>
	...

080075fc <_write_r>:
 80075fc:	b538      	push	{r3, r4, r5, lr}
 80075fe:	4d07      	ldr	r5, [pc, #28]	; (800761c <_write_r+0x20>)
 8007600:	4604      	mov	r4, r0
 8007602:	4608      	mov	r0, r1
 8007604:	4611      	mov	r1, r2
 8007606:	2200      	movs	r2, #0
 8007608:	602a      	str	r2, [r5, #0]
 800760a:	461a      	mov	r2, r3
 800760c:	f7f9 fd07 	bl	800101e <_write>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_write_r+0x1e>
 8007614:	682b      	ldr	r3, [r5, #0]
 8007616:	b103      	cbz	r3, 800761a <_write_r+0x1e>
 8007618:	6023      	str	r3, [r4, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	2000030c 	.word	0x2000030c

08007620 <abort>:
 8007620:	b508      	push	{r3, lr}
 8007622:	2006      	movs	r0, #6
 8007624:	f000 f8e6 	bl	80077f4 <raise>
 8007628:	2001      	movs	r0, #1
 800762a:	f7f9 fcd1 	bl	8000fd0 <_exit>
	...

08007630 <_close_r>:
 8007630:	b538      	push	{r3, r4, r5, lr}
 8007632:	4d06      	ldr	r5, [pc, #24]	; (800764c <_close_r+0x1c>)
 8007634:	2300      	movs	r3, #0
 8007636:	4604      	mov	r4, r0
 8007638:	4608      	mov	r0, r1
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	f7f9 fd0b 	bl	8001056 <_close>
 8007640:	1c43      	adds	r3, r0, #1
 8007642:	d102      	bne.n	800764a <_close_r+0x1a>
 8007644:	682b      	ldr	r3, [r5, #0]
 8007646:	b103      	cbz	r3, 800764a <_close_r+0x1a>
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	bd38      	pop	{r3, r4, r5, pc}
 800764c:	2000030c 	.word	0x2000030c

08007650 <_fstat_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d07      	ldr	r5, [pc, #28]	; (8007670 <_fstat_r+0x20>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	4611      	mov	r1, r2
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	f7f9 fd06 	bl	800106e <_fstat>
 8007662:	1c43      	adds	r3, r0, #1
 8007664:	d102      	bne.n	800766c <_fstat_r+0x1c>
 8007666:	682b      	ldr	r3, [r5, #0]
 8007668:	b103      	cbz	r3, 800766c <_fstat_r+0x1c>
 800766a:	6023      	str	r3, [r4, #0]
 800766c:	bd38      	pop	{r3, r4, r5, pc}
 800766e:	bf00      	nop
 8007670:	2000030c 	.word	0x2000030c

08007674 <_isatty_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	4d06      	ldr	r5, [pc, #24]	; (8007690 <_isatty_r+0x1c>)
 8007678:	2300      	movs	r3, #0
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	f7f9 fd05 	bl	800108e <_isatty>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_isatty_r+0x1a>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_isatty_r+0x1a>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	2000030c 	.word	0x2000030c

08007694 <_lseek_r>:
 8007694:	b538      	push	{r3, r4, r5, lr}
 8007696:	4d07      	ldr	r5, [pc, #28]	; (80076b4 <_lseek_r+0x20>)
 8007698:	4604      	mov	r4, r0
 800769a:	4608      	mov	r0, r1
 800769c:	4611      	mov	r1, r2
 800769e:	2200      	movs	r2, #0
 80076a0:	602a      	str	r2, [r5, #0]
 80076a2:	461a      	mov	r2, r3
 80076a4:	f7f9 fcfe 	bl	80010a4 <_lseek>
 80076a8:	1c43      	adds	r3, r0, #1
 80076aa:	d102      	bne.n	80076b2 <_lseek_r+0x1e>
 80076ac:	682b      	ldr	r3, [r5, #0]
 80076ae:	b103      	cbz	r3, 80076b2 <_lseek_r+0x1e>
 80076b0:	6023      	str	r3, [r4, #0]
 80076b2:	bd38      	pop	{r3, r4, r5, pc}
 80076b4:	2000030c 	.word	0x2000030c

080076b8 <memcpy>:
 80076b8:	440a      	add	r2, r1
 80076ba:	4291      	cmp	r1, r2
 80076bc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80076c0:	d100      	bne.n	80076c4 <memcpy+0xc>
 80076c2:	4770      	bx	lr
 80076c4:	b510      	push	{r4, lr}
 80076c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80076ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80076ce:	4291      	cmp	r1, r2
 80076d0:	d1f9      	bne.n	80076c6 <memcpy+0xe>
 80076d2:	bd10      	pop	{r4, pc}

080076d4 <memmove>:
 80076d4:	4288      	cmp	r0, r1
 80076d6:	b510      	push	{r4, lr}
 80076d8:	eb01 0402 	add.w	r4, r1, r2
 80076dc:	d902      	bls.n	80076e4 <memmove+0x10>
 80076de:	4284      	cmp	r4, r0
 80076e0:	4623      	mov	r3, r4
 80076e2:	d807      	bhi.n	80076f4 <memmove+0x20>
 80076e4:	1e43      	subs	r3, r0, #1
 80076e6:	42a1      	cmp	r1, r4
 80076e8:	d008      	beq.n	80076fc <memmove+0x28>
 80076ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076f2:	e7f8      	b.n	80076e6 <memmove+0x12>
 80076f4:	4402      	add	r2, r0
 80076f6:	4601      	mov	r1, r0
 80076f8:	428a      	cmp	r2, r1
 80076fa:	d100      	bne.n	80076fe <memmove+0x2a>
 80076fc:	bd10      	pop	{r4, pc}
 80076fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007702:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007706:	e7f7      	b.n	80076f8 <memmove+0x24>

08007708 <__malloc_lock>:
 8007708:	4801      	ldr	r0, [pc, #4]	; (8007710 <__malloc_lock+0x8>)
 800770a:	f7ff b989 	b.w	8006a20 <__retarget_lock_acquire_recursive>
 800770e:	bf00      	nop
 8007710:	20000300 	.word	0x20000300

08007714 <__malloc_unlock>:
 8007714:	4801      	ldr	r0, [pc, #4]	; (800771c <__malloc_unlock+0x8>)
 8007716:	f7ff b984 	b.w	8006a22 <__retarget_lock_release_recursive>
 800771a:	bf00      	nop
 800771c:	20000300 	.word	0x20000300

08007720 <_realloc_r>:
 8007720:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007724:	4680      	mov	r8, r0
 8007726:	4614      	mov	r4, r2
 8007728:	460e      	mov	r6, r1
 800772a:	b921      	cbnz	r1, 8007736 <_realloc_r+0x16>
 800772c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007730:	4611      	mov	r1, r2
 8007732:	f7ff ba51 	b.w	8006bd8 <_malloc_r>
 8007736:	b92a      	cbnz	r2, 8007744 <_realloc_r+0x24>
 8007738:	f7ff f9e2 	bl	8006b00 <_free_r>
 800773c:	4625      	mov	r5, r4
 800773e:	4628      	mov	r0, r5
 8007740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007744:	f000 f872 	bl	800782c <_malloc_usable_size_r>
 8007748:	4284      	cmp	r4, r0
 800774a:	4607      	mov	r7, r0
 800774c:	d802      	bhi.n	8007754 <_realloc_r+0x34>
 800774e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007752:	d812      	bhi.n	800777a <_realloc_r+0x5a>
 8007754:	4621      	mov	r1, r4
 8007756:	4640      	mov	r0, r8
 8007758:	f7ff fa3e 	bl	8006bd8 <_malloc_r>
 800775c:	4605      	mov	r5, r0
 800775e:	2800      	cmp	r0, #0
 8007760:	d0ed      	beq.n	800773e <_realloc_r+0x1e>
 8007762:	42bc      	cmp	r4, r7
 8007764:	4622      	mov	r2, r4
 8007766:	4631      	mov	r1, r6
 8007768:	bf28      	it	cs
 800776a:	463a      	movcs	r2, r7
 800776c:	f7ff ffa4 	bl	80076b8 <memcpy>
 8007770:	4631      	mov	r1, r6
 8007772:	4640      	mov	r0, r8
 8007774:	f7ff f9c4 	bl	8006b00 <_free_r>
 8007778:	e7e1      	b.n	800773e <_realloc_r+0x1e>
 800777a:	4635      	mov	r5, r6
 800777c:	e7df      	b.n	800773e <_realloc_r+0x1e>
	...

08007780 <_read_r>:
 8007780:	b538      	push	{r3, r4, r5, lr}
 8007782:	4d07      	ldr	r5, [pc, #28]	; (80077a0 <_read_r+0x20>)
 8007784:	4604      	mov	r4, r0
 8007786:	4608      	mov	r0, r1
 8007788:	4611      	mov	r1, r2
 800778a:	2200      	movs	r2, #0
 800778c:	602a      	str	r2, [r5, #0]
 800778e:	461a      	mov	r2, r3
 8007790:	f7f9 fc28 	bl	8000fe4 <_read>
 8007794:	1c43      	adds	r3, r0, #1
 8007796:	d102      	bne.n	800779e <_read_r+0x1e>
 8007798:	682b      	ldr	r3, [r5, #0]
 800779a:	b103      	cbz	r3, 800779e <_read_r+0x1e>
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	bd38      	pop	{r3, r4, r5, pc}
 80077a0:	2000030c 	.word	0x2000030c

080077a4 <_raise_r>:
 80077a4:	291f      	cmp	r1, #31
 80077a6:	b538      	push	{r3, r4, r5, lr}
 80077a8:	4604      	mov	r4, r0
 80077aa:	460d      	mov	r5, r1
 80077ac:	d904      	bls.n	80077b8 <_raise_r+0x14>
 80077ae:	2316      	movs	r3, #22
 80077b0:	6003      	str	r3, [r0, #0]
 80077b2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077b6:	bd38      	pop	{r3, r4, r5, pc}
 80077b8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80077ba:	b112      	cbz	r2, 80077c2 <_raise_r+0x1e>
 80077bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80077c0:	b94b      	cbnz	r3, 80077d6 <_raise_r+0x32>
 80077c2:	4620      	mov	r0, r4
 80077c4:	f000 f830 	bl	8007828 <_getpid_r>
 80077c8:	462a      	mov	r2, r5
 80077ca:	4601      	mov	r1, r0
 80077cc:	4620      	mov	r0, r4
 80077ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077d2:	f000 b817 	b.w	8007804 <_kill_r>
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d00a      	beq.n	80077f0 <_raise_r+0x4c>
 80077da:	1c59      	adds	r1, r3, #1
 80077dc:	d103      	bne.n	80077e6 <_raise_r+0x42>
 80077de:	2316      	movs	r3, #22
 80077e0:	6003      	str	r3, [r0, #0]
 80077e2:	2001      	movs	r0, #1
 80077e4:	e7e7      	b.n	80077b6 <_raise_r+0x12>
 80077e6:	2400      	movs	r4, #0
 80077e8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80077ec:	4628      	mov	r0, r5
 80077ee:	4798      	blx	r3
 80077f0:	2000      	movs	r0, #0
 80077f2:	e7e0      	b.n	80077b6 <_raise_r+0x12>

080077f4 <raise>:
 80077f4:	4b02      	ldr	r3, [pc, #8]	; (8007800 <raise+0xc>)
 80077f6:	4601      	mov	r1, r0
 80077f8:	6818      	ldr	r0, [r3, #0]
 80077fa:	f7ff bfd3 	b.w	80077a4 <_raise_r>
 80077fe:	bf00      	nop
 8007800:	200000dc 	.word	0x200000dc

08007804 <_kill_r>:
 8007804:	b538      	push	{r3, r4, r5, lr}
 8007806:	4d07      	ldr	r5, [pc, #28]	; (8007824 <_kill_r+0x20>)
 8007808:	2300      	movs	r3, #0
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	4611      	mov	r1, r2
 8007810:	602b      	str	r3, [r5, #0]
 8007812:	f7f9 fbcd 	bl	8000fb0 <_kill>
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	d102      	bne.n	8007820 <_kill_r+0x1c>
 800781a:	682b      	ldr	r3, [r5, #0]
 800781c:	b103      	cbz	r3, 8007820 <_kill_r+0x1c>
 800781e:	6023      	str	r3, [r4, #0]
 8007820:	bd38      	pop	{r3, r4, r5, pc}
 8007822:	bf00      	nop
 8007824:	2000030c 	.word	0x2000030c

08007828 <_getpid_r>:
 8007828:	f7f9 bbba 	b.w	8000fa0 <_getpid>

0800782c <_malloc_usable_size_r>:
 800782c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007830:	1f18      	subs	r0, r3, #4
 8007832:	2b00      	cmp	r3, #0
 8007834:	bfbc      	itt	lt
 8007836:	580b      	ldrlt	r3, [r1, r0]
 8007838:	18c0      	addlt	r0, r0, r3
 800783a:	4770      	bx	lr

0800783c <_init>:
 800783c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800783e:	bf00      	nop
 8007840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007842:	bc08      	pop	{r3}
 8007844:	469e      	mov	lr, r3
 8007846:	4770      	bx	lr

08007848 <_fini>:
 8007848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800784a:	bf00      	nop
 800784c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800784e:	bc08      	pop	{r3}
 8007850:	469e      	mov	lr, r3
 8007852:	4770      	bx	lr
