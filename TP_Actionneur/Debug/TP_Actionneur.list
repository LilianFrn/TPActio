
TP_Actionneur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b5f0  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005d8  0800b7d0  0800b7d0  0001b7d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bda8  0800bda8  000202c8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bda8  0800bda8  0001bda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bdb0  0800bdb0  000202c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bdb0  0800bdb0  0001bdb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bdb4  0800bdb4  0001bdb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002c8  20000000  0800bdb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200002c8  0800c080  000202c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800c080  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019a2b  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e13  00000000  00000000  00039d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001550  00000000  00000000  0003cb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001438  00000000  00000000  0003e088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002972b  00000000  00000000  0003f4c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017c7e  00000000  00000000  00068beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011458c  00000000  00000000  00080869  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00194df5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa4  00000000  00000000  00194e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002c8 	.word	0x200002c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800b7b8 	.word	0x0800b7b8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002cc 	.word	0x200002cc
 800021c:	0800b7b8 	.word	0x0800b7b8

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c2c:	f000 b974 	b.w	8000f18 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9d08      	ldr	r5, [sp, #32]
 8000c4e:	4604      	mov	r4, r0
 8000c50:	468e      	mov	lr, r1
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d14d      	bne.n	8000cf2 <__udivmoddi4+0xaa>
 8000c56:	428a      	cmp	r2, r1
 8000c58:	4694      	mov	ip, r2
 8000c5a:	d969      	bls.n	8000d30 <__udivmoddi4+0xe8>
 8000c5c:	fab2 f282 	clz	r2, r2
 8000c60:	b152      	cbz	r2, 8000c78 <__udivmoddi4+0x30>
 8000c62:	fa01 f302 	lsl.w	r3, r1, r2
 8000c66:	f1c2 0120 	rsb	r1, r2, #32
 8000c6a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c72:	ea41 0e03 	orr.w	lr, r1, r3
 8000c76:	4094      	lsls	r4, r2
 8000c78:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c7c:	0c21      	lsrs	r1, r4, #16
 8000c7e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c82:	fa1f f78c 	uxth.w	r7, ip
 8000c86:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c8e:	fb06 f107 	mul.w	r1, r6, r7
 8000c92:	4299      	cmp	r1, r3
 8000c94:	d90a      	bls.n	8000cac <__udivmoddi4+0x64>
 8000c96:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c9e:	f080 811f 	bcs.w	8000ee0 <__udivmoddi4+0x298>
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	f240 811c 	bls.w	8000ee0 <__udivmoddi4+0x298>
 8000ca8:	3e02      	subs	r6, #2
 8000caa:	4463      	add	r3, ip
 8000cac:	1a5b      	subs	r3, r3, r1
 8000cae:	b2a4      	uxth	r4, r4
 8000cb0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cbc:	fb00 f707 	mul.w	r7, r0, r7
 8000cc0:	42a7      	cmp	r7, r4
 8000cc2:	d90a      	bls.n	8000cda <__udivmoddi4+0x92>
 8000cc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ccc:	f080 810a 	bcs.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd0:	42a7      	cmp	r7, r4
 8000cd2:	f240 8107 	bls.w	8000ee4 <__udivmoddi4+0x29c>
 8000cd6:	4464      	add	r4, ip
 8000cd8:	3802      	subs	r0, #2
 8000cda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cde:	1be4      	subs	r4, r4, r7
 8000ce0:	2600      	movs	r6, #0
 8000ce2:	b11d      	cbz	r5, 8000cec <__udivmoddi4+0xa4>
 8000ce4:	40d4      	lsrs	r4, r2
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cec:	4631      	mov	r1, r6
 8000cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d909      	bls.n	8000d0a <__udivmoddi4+0xc2>
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	f000 80ef 	beq.w	8000eda <__udivmoddi4+0x292>
 8000cfc:	2600      	movs	r6, #0
 8000cfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000d02:	4630      	mov	r0, r6
 8000d04:	4631      	mov	r1, r6
 8000d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0a:	fab3 f683 	clz	r6, r3
 8000d0e:	2e00      	cmp	r6, #0
 8000d10:	d14a      	bne.n	8000da8 <__udivmoddi4+0x160>
 8000d12:	428b      	cmp	r3, r1
 8000d14:	d302      	bcc.n	8000d1c <__udivmoddi4+0xd4>
 8000d16:	4282      	cmp	r2, r0
 8000d18:	f200 80f9 	bhi.w	8000f0e <__udivmoddi4+0x2c6>
 8000d1c:	1a84      	subs	r4, r0, r2
 8000d1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d22:	2001      	movs	r0, #1
 8000d24:	469e      	mov	lr, r3
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	d0e0      	beq.n	8000cec <__udivmoddi4+0xa4>
 8000d2a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d2e:	e7dd      	b.n	8000cec <__udivmoddi4+0xa4>
 8000d30:	b902      	cbnz	r2, 8000d34 <__udivmoddi4+0xec>
 8000d32:	deff      	udf	#255	; 0xff
 8000d34:	fab2 f282 	clz	r2, r2
 8000d38:	2a00      	cmp	r2, #0
 8000d3a:	f040 8092 	bne.w	8000e62 <__udivmoddi4+0x21a>
 8000d3e:	eba1 010c 	sub.w	r1, r1, ip
 8000d42:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d46:	fa1f fe8c 	uxth.w	lr, ip
 8000d4a:	2601      	movs	r6, #1
 8000d4c:	0c20      	lsrs	r0, r4, #16
 8000d4e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d52:	fb07 1113 	mls	r1, r7, r3, r1
 8000d56:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5a:	fb0e f003 	mul.w	r0, lr, r3
 8000d5e:	4288      	cmp	r0, r1
 8000d60:	d908      	bls.n	8000d74 <__udivmoddi4+0x12c>
 8000d62:	eb1c 0101 	adds.w	r1, ip, r1
 8000d66:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d6a:	d202      	bcs.n	8000d72 <__udivmoddi4+0x12a>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f200 80cb 	bhi.w	8000f08 <__udivmoddi4+0x2c0>
 8000d72:	4643      	mov	r3, r8
 8000d74:	1a09      	subs	r1, r1, r0
 8000d76:	b2a4      	uxth	r4, r4
 8000d78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d7c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d80:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d84:	fb0e fe00 	mul.w	lr, lr, r0
 8000d88:	45a6      	cmp	lr, r4
 8000d8a:	d908      	bls.n	8000d9e <__udivmoddi4+0x156>
 8000d8c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d90:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d94:	d202      	bcs.n	8000d9c <__udivmoddi4+0x154>
 8000d96:	45a6      	cmp	lr, r4
 8000d98:	f200 80bb 	bhi.w	8000f12 <__udivmoddi4+0x2ca>
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	eba4 040e 	sub.w	r4, r4, lr
 8000da2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000da6:	e79c      	b.n	8000ce2 <__udivmoddi4+0x9a>
 8000da8:	f1c6 0720 	rsb	r7, r6, #32
 8000dac:	40b3      	lsls	r3, r6
 8000dae:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000db6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dba:	fa01 f306 	lsl.w	r3, r1, r6
 8000dbe:	431c      	orrs	r4, r3
 8000dc0:	40f9      	lsrs	r1, r7
 8000dc2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dc6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dca:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dce:	0c20      	lsrs	r0, r4, #16
 8000dd0:	fa1f fe8c 	uxth.w	lr, ip
 8000dd4:	fb09 1118 	mls	r1, r9, r8, r1
 8000dd8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ddc:	fb08 f00e 	mul.w	r0, r8, lr
 8000de0:	4288      	cmp	r0, r1
 8000de2:	fa02 f206 	lsl.w	r2, r2, r6
 8000de6:	d90b      	bls.n	8000e00 <__udivmoddi4+0x1b8>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000df0:	f080 8088 	bcs.w	8000f04 <__udivmoddi4+0x2bc>
 8000df4:	4288      	cmp	r0, r1
 8000df6:	f240 8085 	bls.w	8000f04 <__udivmoddi4+0x2bc>
 8000dfa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dfe:	4461      	add	r1, ip
 8000e00:	1a09      	subs	r1, r1, r0
 8000e02:	b2a4      	uxth	r4, r4
 8000e04:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e08:	fb09 1110 	mls	r1, r9, r0, r1
 8000e0c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e10:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e14:	458e      	cmp	lr, r1
 8000e16:	d908      	bls.n	8000e2a <__udivmoddi4+0x1e2>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e20:	d26c      	bcs.n	8000efc <__udivmoddi4+0x2b4>
 8000e22:	458e      	cmp	lr, r1
 8000e24:	d96a      	bls.n	8000efc <__udivmoddi4+0x2b4>
 8000e26:	3802      	subs	r0, #2
 8000e28:	4461      	add	r1, ip
 8000e2a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e2e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e32:	eba1 010e 	sub.w	r1, r1, lr
 8000e36:	42a1      	cmp	r1, r4
 8000e38:	46c8      	mov	r8, r9
 8000e3a:	46a6      	mov	lr, r4
 8000e3c:	d356      	bcc.n	8000eec <__udivmoddi4+0x2a4>
 8000e3e:	d053      	beq.n	8000ee8 <__udivmoddi4+0x2a0>
 8000e40:	b15d      	cbz	r5, 8000e5a <__udivmoddi4+0x212>
 8000e42:	ebb3 0208 	subs.w	r2, r3, r8
 8000e46:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e4e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e52:	40f1      	lsrs	r1, r6
 8000e54:	431f      	orrs	r7, r3
 8000e56:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5a:	2600      	movs	r6, #0
 8000e5c:	4631      	mov	r1, r6
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	f1c2 0320 	rsb	r3, r2, #32
 8000e66:	40d8      	lsrs	r0, r3
 8000e68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e6c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e70:	4091      	lsls	r1, r2
 8000e72:	4301      	orrs	r1, r0
 8000e74:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e78:	fa1f fe8c 	uxth.w	lr, ip
 8000e7c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e80:	fb07 3610 	mls	r6, r7, r0, r3
 8000e84:	0c0b      	lsrs	r3, r1, #16
 8000e86:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e8e:	429e      	cmp	r6, r3
 8000e90:	fa04 f402 	lsl.w	r4, r4, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x260>
 8000e96:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9e:	d22f      	bcs.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea0:	429e      	cmp	r6, r3
 8000ea2:	d92d      	bls.n	8000f00 <__udivmoddi4+0x2b8>
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	4463      	add	r3, ip
 8000ea8:	1b9b      	subs	r3, r3, r6
 8000eaa:	b289      	uxth	r1, r1
 8000eac:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb0:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb8:	fb06 f30e 	mul.w	r3, r6, lr
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x28a>
 8000ec0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000ec8:	d216      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d914      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000ece:	3e02      	subs	r6, #2
 8000ed0:	4461      	add	r1, ip
 8000ed2:	1ac9      	subs	r1, r1, r3
 8000ed4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ed8:	e738      	b.n	8000d4c <__udivmoddi4+0x104>
 8000eda:	462e      	mov	r6, r5
 8000edc:	4628      	mov	r0, r5
 8000ede:	e705      	b.n	8000cec <__udivmoddi4+0xa4>
 8000ee0:	4606      	mov	r6, r0
 8000ee2:	e6e3      	b.n	8000cac <__udivmoddi4+0x64>
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	e6f8      	b.n	8000cda <__udivmoddi4+0x92>
 8000ee8:	454b      	cmp	r3, r9
 8000eea:	d2a9      	bcs.n	8000e40 <__udivmoddi4+0x1f8>
 8000eec:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef4:	3801      	subs	r0, #1
 8000ef6:	e7a3      	b.n	8000e40 <__udivmoddi4+0x1f8>
 8000ef8:	4646      	mov	r6, r8
 8000efa:	e7ea      	b.n	8000ed2 <__udivmoddi4+0x28a>
 8000efc:	4620      	mov	r0, r4
 8000efe:	e794      	b.n	8000e2a <__udivmoddi4+0x1e2>
 8000f00:	4640      	mov	r0, r8
 8000f02:	e7d1      	b.n	8000ea8 <__udivmoddi4+0x260>
 8000f04:	46d0      	mov	r8, sl
 8000f06:	e77b      	b.n	8000e00 <__udivmoddi4+0x1b8>
 8000f08:	3b02      	subs	r3, #2
 8000f0a:	4461      	add	r1, ip
 8000f0c:	e732      	b.n	8000d74 <__udivmoddi4+0x12c>
 8000f0e:	4630      	mov	r0, r6
 8000f10:	e709      	b.n	8000d26 <__udivmoddi4+0xde>
 8000f12:	4464      	add	r4, ip
 8000f14:	3802      	subs	r0, #2
 8000f16:	e742      	b.n	8000d9e <__udivmoddi4+0x156>

08000f18 <__aeabi_idiv0>:
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int chr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000f24:	1d39      	adds	r1, r7, #4
 8000f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	4803      	ldr	r0, [pc, #12]	; (8000f3c <__io_putchar+0x20>)
 8000f2e:	f005 fb78 	bl	8006622 <HAL_UART_Transmit>
	return chr;
 8000f32:	687b      	ldr	r3, [r7, #4]
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	2000039c 	.word	0x2000039c

08000f40 <PWN_start>:

void PWN_start(void){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000f44:	2100      	movs	r1, #0
 8000f46:	4808      	ldr	r0, [pc, #32]	; (8000f68 <PWN_start+0x28>)
 8000f48:	f004 f822 	bl	8004f90 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <PWN_start+0x28>)
 8000f50:	f005 f88a 	bl	8006068 <HAL_TIMEx_PWMN_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000f54:	2104      	movs	r1, #4
 8000f56:	4804      	ldr	r0, [pc, #16]	; (8000f68 <PWN_start+0x28>)
 8000f58:	f004 f81a 	bl	8004f90 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000f5c:	2104      	movs	r1, #4
 8000f5e:	4802      	ldr	r0, [pc, #8]	; (8000f68 <PWN_start+0x28>)
 8000f60:	f005 f882 	bl	8006068 <HAL_TIMEx_PWMN_Start>
}
 8000f64:	bf00      	nop
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000350 	.word	0x20000350

08000f6c <PWN_stop>:

void PWN_stop(void){
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8000f70:	2100      	movs	r1, #0
 8000f72:	4808      	ldr	r0, [pc, #32]	; (8000f94 <PWN_stop+0x28>)
 8000f74:	f004 f91e 	bl	80051b4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4806      	ldr	r0, [pc, #24]	; (8000f94 <PWN_stop+0x28>)
 8000f7c:	f005 f936 	bl	80061ec <HAL_TIMEx_PWMN_Stop>
	HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_2);
 8000f80:	2104      	movs	r1, #4
 8000f82:	4804      	ldr	r0, [pc, #16]	; (8000f94 <PWN_stop+0x28>)
 8000f84:	f004 f916 	bl	80051b4 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000f88:	2104      	movs	r1, #4
 8000f8a:	4802      	ldr	r0, [pc, #8]	; (8000f94 <PWN_stop+0x28>)
 8000f8c:	f005 f92e 	bl	80061ec <HAL_TIMEx_PWMN_Stop>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	20000350 	.word	0x20000350

08000f98 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	80fb      	strh	r3, [r7, #6]
	  PWN_start();
 8000fa2:	f7ff ffcd 	bl	8000f40 <PWN_start>
	  printf("Bouton\r\n");
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000fa8:	f008 f888 	bl	80090bc <puts>
}
 8000fac:	bf00      	nop
 8000fae:	3708      	adds	r7, #8
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	0800b7d0 	.word	0x0800b7d0

08000fb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fbe:	f000 ff44 	bl	8001e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fc2:	f000 f85b 	bl	800107c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fc6:	f000 fa17 	bl	80013f8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000fca:	f000 f90b 	bl	80011e4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000fce:	f000 f9c7 	bl	8001360 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000fd2:	f000 f89f 	bl	8001114 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  if (HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED) != HAL_OK) {
 8000fd6:	217f      	movs	r1, #127	; 0x7f
 8000fd8:	4822      	ldr	r0, [pc, #136]	; (8001064 <main+0xac>)
 8000fda:	f002 fb07 	bl	80035ec <HAL_ADCEx_Calibration_Start>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <main+0x30>
	  Error_Handler();
 8000fe4:	f000 fa94 	bl	8001510 <Error_Handler>
  }
  HAL_Delay(100);
 8000fe8:	2064      	movs	r0, #100	; 0x64
 8000fea:	f000 ff9f 	bl	8001f2c <HAL_Delay>
  if (HAL_ADC_Start(&hadc2) != HAL_OK){
 8000fee:	481d      	ldr	r0, [pc, #116]	; (8001064 <main+0xac>)
 8000ff0:	f001 fbd6 	bl	80027a0 <HAL_ADC_Start>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <main+0x46>
	  Error_Handler();
 8000ffa:	f000 fa89 	bl	8001510 <Error_Handler>
  }

  if ( HAL_ADC_PollForConversion(&hadc2, 50)!= HAL_OK) {
 8000ffe:	2132      	movs	r1, #50	; 0x32
 8001000:	4818      	ldr	r0, [pc, #96]	; (8001064 <main+0xac>)
 8001002:	f001 fcb1 	bl	8002968 <HAL_ADC_PollForConversion>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <main+0x58>
  	  Error_Handler();
 800100c:	f000 fa80 	bl	8001510 <Error_Handler>
    }

  float val = HAL_ADC_GetValue(&hadc2);
 8001010:	4814      	ldr	r0, [pc, #80]	; (8001064 <main+0xac>)
 8001012:	f001 fdaf 	bl	8002b74 <HAL_ADC_GetValue>
 8001016:	ee07 0a90 	vmov	s15, r0
 800101a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800101e:	edc7 7a01 	vstr	s15, [r7, #4]
  int size = sprintf(uartTxBuffer, "value ADC= %f\r\n", val);
 8001022:	6878      	ldr	r0, [r7, #4]
 8001024:	f7ff fac8 	bl	80005b8 <__aeabi_f2d>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	490e      	ldr	r1, [pc, #56]	; (8001068 <main+0xb0>)
 800102e:	480f      	ldr	r0, [pc, #60]	; (800106c <main+0xb4>)
 8001030:	f008 f84c 	bl	80090cc <siprintf>
 8001034:	6038      	str	r0, [r7, #0]
  HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b29a      	uxth	r2, r3
 800103a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800103e:	490b      	ldr	r1, [pc, #44]	; (800106c <main+0xb4>)
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <main+0xb8>)
 8001042:	f005 faee 	bl	8006622 <HAL_UART_Transmit>
  shell_start();
 8001046:	f000 fa73 	bl	8001530 <shell_start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (uartRxReceived) {
 800104a:	4b0a      	ldr	r3, [pc, #40]	; (8001074 <main+0xbc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <main+0x9e>
		  shell_process();
 8001052:	f000 faa7 	bl	80015a4 <shell_process>
	  }
	  if (cmd_ready) {
 8001056:	4b08      	ldr	r3, [pc, #32]	; (8001078 <main+0xc0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d0f5      	beq.n	800104a <main+0x92>
		  shell_execute();
 800105e:	f000 fb19 	bl	8001694 <shell_execute>
	  if (uartRxReceived) {
 8001062:	e7f2      	b.n	800104a <main+0x92>
 8001064:	200002e4 	.word	0x200002e4
 8001068:	0800b7d8 	.word	0x0800b7d8
 800106c:	20000434 	.word	0x20000434
 8001070:	2000039c 	.word	0x2000039c
 8001074:	2000042c 	.word	0x2000042c
 8001078:	20000474 	.word	0x20000474

0800107c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b094      	sub	sp, #80	; 0x50
 8001080:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001082:	f107 0318 	add.w	r3, r7, #24
 8001086:	2238      	movs	r2, #56	; 0x38
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f007 fb1e 	bl	80086cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001090:	1d3b      	adds	r3, r7, #4
 8001092:	2200      	movs	r2, #0
 8001094:	601a      	str	r2, [r3, #0]
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	609a      	str	r2, [r3, #8]
 800109a:	60da      	str	r2, [r3, #12]
 800109c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800109e:	2000      	movs	r0, #0
 80010a0:	f002 fe88 	bl	8003db4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010ae:	2340      	movs	r3, #64	; 0x40
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b2:	2302      	movs	r3, #2
 80010b4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b6:	2302      	movs	r3, #2
 80010b8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80010ba:	2304      	movs	r3, #4
 80010bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80010be:	2355      	movs	r3, #85	; 0x55
 80010c0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c2:	2302      	movs	r3, #2
 80010c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80010c6:	2302      	movs	r3, #2
 80010c8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80010ca:	2302      	movs	r3, #2
 80010cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ce:	f107 0318 	add.w	r3, r7, #24
 80010d2:	4618      	mov	r0, r3
 80010d4:	f002 ff22 	bl	8003f1c <HAL_RCC_OscConfig>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80010de:	f000 fa17 	bl	8001510 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e2:	230f      	movs	r3, #15
 80010e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e6:	2303      	movs	r3, #3
 80010e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ea:	2300      	movs	r3, #0
 80010ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010f2:	2300      	movs	r3, #0
 80010f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010f6:	1d3b      	adds	r3, r7, #4
 80010f8:	2104      	movs	r1, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f003 fa26 	bl	800454c <HAL_RCC_ClockConfig>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001106:	f000 fa03 	bl	8001510 <Error_Handler>
  }
}
 800110a:	bf00      	nop
 800110c:	3750      	adds	r7, #80	; 0x50
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
	...

08001114 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800111a:	463b      	mov	r3, r7
 800111c:	2220      	movs	r2, #32
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f007 fad3 	bl	80086cc <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001126:	4b2c      	ldr	r3, [pc, #176]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001128:	4a2c      	ldr	r2, [pc, #176]	; (80011dc <MX_ADC2_Init+0xc8>)
 800112a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 800112c:	4b2a      	ldr	r3, [pc, #168]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800112e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001132:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001134:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800113a:	4b27      	ldr	r3, [pc, #156]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800113c:	2200      	movs	r2, #0
 800113e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001140:	4b25      	ldr	r3, [pc, #148]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001146:	4b24      	ldr	r3, [pc, #144]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001148:	2200      	movs	r2, #0
 800114a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800114c:	4b22      	ldr	r3, [pc, #136]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800114e:	2204      	movs	r2, #4
 8001150:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001152:	4b21      	ldr	r3, [pc, #132]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001154:	2200      	movs	r2, #0
 8001156:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001158:	4b1f      	ldr	r3, [pc, #124]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800115a:	2200      	movs	r2, #0
 800115c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800115e:	4b1e      	ldr	r3, [pc, #120]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001160:	2201      	movs	r2, #1
 8001162:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001164:	4b1c      	ldr	r3, [pc, #112]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001166:	2200      	movs	r2, #0
 8001168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_CC1;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800116e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001172:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001176:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800117a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800117c:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800117e:	2200      	movs	r2, #0
 8001180:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001186:	2200      	movs	r2, #0
 8001188:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_ADC2_Init+0xc4>)
 800118c:	2200      	movs	r2, #0
 800118e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001192:	4811      	ldr	r0, [pc, #68]	; (80011d8 <MX_ADC2_Init+0xc4>)
 8001194:	f001 f942 	bl	800241c <HAL_ADC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 800119e:	f000 f9b7 	bl	8001510 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <MX_ADC2_Init+0xcc>)
 80011a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011a6:	2306      	movs	r3, #6
 80011a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80011aa:	2304      	movs	r3, #4
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011ae:	237f      	movs	r3, #127	; 0x7f
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011b2:	2304      	movs	r3, #4
 80011b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011ba:	463b      	mov	r3, r7
 80011bc:	4619      	mov	r1, r3
 80011be:	4806      	ldr	r0, [pc, #24]	; (80011d8 <MX_ADC2_Init+0xc4>)
 80011c0:	f001 fce6 	bl	8002b90 <HAL_ADC_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80011ca:	f000 f9a1 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80011ce:	bf00      	nop
 80011d0:	3720      	adds	r7, #32
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002e4 	.word	0x200002e4
 80011dc:	50000100 	.word	0x50000100
 80011e0:	1d500080 	.word	0x1d500080

080011e4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b09c      	sub	sp, #112	; 0x70
 80011e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ea:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011ee:	2200      	movs	r2, #0
 80011f0:	601a      	str	r2, [r3, #0]
 80011f2:	605a      	str	r2, [r3, #4]
 80011f4:	609a      	str	r2, [r3, #8]
 80011f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011f8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001204:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001218:	1d3b      	adds	r3, r7, #4
 800121a:	2234      	movs	r2, #52	; 0x34
 800121c:	2100      	movs	r1, #0
 800121e:	4618      	mov	r0, r3
 8001220:	f007 fa54 	bl	80086cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001224:	4b4c      	ldr	r3, [pc, #304]	; (8001358 <MX_TIM1_Init+0x174>)
 8001226:	4a4d      	ldr	r2, [pc, #308]	; (800135c <MX_TIM1_Init+0x178>)
 8001228:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800122a:	4b4b      	ldr	r3, [pc, #300]	; (8001358 <MX_TIM1_Init+0x174>)
 800122c:	2209      	movs	r2, #9
 800122e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001230:	4b49      	ldr	r3, [pc, #292]	; (8001358 <MX_TIM1_Init+0x174>)
 8001232:	2200      	movs	r2, #0
 8001234:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001236:	4b48      	ldr	r3, [pc, #288]	; (8001358 <MX_TIM1_Init+0x174>)
 8001238:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800123c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800123e:	4b46      	ldr	r3, [pc, #280]	; (8001358 <MX_TIM1_Init+0x174>)
 8001240:	2200      	movs	r2, #0
 8001242:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001244:	4b44      	ldr	r3, [pc, #272]	; (8001358 <MX_TIM1_Init+0x174>)
 8001246:	2200      	movs	r2, #0
 8001248:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800124a:	4b43      	ldr	r3, [pc, #268]	; (8001358 <MX_TIM1_Init+0x174>)
 800124c:	2280      	movs	r2, #128	; 0x80
 800124e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001250:	4841      	ldr	r0, [pc, #260]	; (8001358 <MX_TIM1_Init+0x174>)
 8001252:	f003 fde5 	bl	8004e20 <HAL_TIM_Base_Init>
 8001256:	4603      	mov	r3, r0
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800125c:	f000 f958 	bl	8001510 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001264:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001266:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800126a:	4619      	mov	r1, r3
 800126c:	483a      	ldr	r0, [pc, #232]	; (8001358 <MX_TIM1_Init+0x174>)
 800126e:	f004 f951 	bl	8005514 <HAL_TIM_ConfigClockSource>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001278:	f000 f94a 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800127c:	4836      	ldr	r0, [pc, #216]	; (8001358 <MX_TIM1_Init+0x174>)
 800127e:	f003 fe26 	bl	8004ece <HAL_TIM_PWM_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001288:	f000 f942 	bl	8001510 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800128c:	2300      	movs	r3, #0
 800128e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001290:	2300      	movs	r3, #0
 8001292:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001294:	2300      	movs	r3, #0
 8001296:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001298:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800129c:	4619      	mov	r1, r3
 800129e:	482e      	ldr	r0, [pc, #184]	; (8001358 <MX_TIM1_Init+0x174>)
 80012a0:	f005 f802 	bl	80062a8 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012aa:	f000 f931 	bl	8001510 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012ae:	2360      	movs	r3, #96	; 0x60
 80012b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 80012b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012b8:	2300      	movs	r3, #0
 80012ba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012bc:	2300      	movs	r3, #0
 80012be:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012c0:	2300      	movs	r3, #0
 80012c2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012c4:	2300      	movs	r3, #0
 80012c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012c8:	2300      	movs	r3, #0
 80012ca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012cc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012d0:	2200      	movs	r2, #0
 80012d2:	4619      	mov	r1, r3
 80012d4:	4820      	ldr	r0, [pc, #128]	; (8001358 <MX_TIM1_Init+0x174>)
 80012d6:	f004 f809 	bl	80052ec <HAL_TIM_PWM_ConfigChannel>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80012e0:	f000 f916 	bl	8001510 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80012e4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80012e8:	2204      	movs	r2, #4
 80012ea:	4619      	mov	r1, r3
 80012ec:	481a      	ldr	r0, [pc, #104]	; (8001358 <MX_TIM1_Init+0x174>)
 80012ee:	f003 fffd 	bl	80052ec <HAL_TIM_PWM_ConfigChannel>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 80012f8:	f000 f90a 	bl	8001510 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001300:	2300      	movs	r3, #0
 8001302:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001304:	2300      	movs	r3, #0
 8001306:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8001308:	23d2      	movs	r3, #210	; 0xd2
 800130a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001314:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001316:	2300      	movs	r3, #0
 8001318:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800131a:	2300      	movs	r3, #0
 800131c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001322:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800132c:	2300      	movs	r3, #0
 800132e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001334:	1d3b      	adds	r3, r7, #4
 8001336:	4619      	mov	r1, r3
 8001338:	4807      	ldr	r0, [pc, #28]	; (8001358 <MX_TIM1_Init+0x174>)
 800133a:	f005 f84b 	bl	80063d4 <HAL_TIMEx_ConfigBreakDeadTime>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8001344:	f000 f8e4 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001348:	4803      	ldr	r0, [pc, #12]	; (8001358 <MX_TIM1_Init+0x174>)
 800134a:	f000 fba9 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 800134e:	bf00      	nop
 8001350:	3770      	adds	r7, #112	; 0x70
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	bf00      	nop
 8001358:	20000350 	.word	0x20000350
 800135c:	40012c00 	.word	0x40012c00

08001360 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001364:	4b22      	ldr	r3, [pc, #136]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 8001366:	4a23      	ldr	r2, [pc, #140]	; (80013f4 <MX_USART2_UART_Init+0x94>)
 8001368:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 800136c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001370:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 800137a:	2200      	movs	r2, #0
 800137c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 8001380:	2200      	movs	r2, #0
 8001382:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 8001386:	220c      	movs	r2, #12
 8001388:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138a:	4b19      	ldr	r3, [pc, #100]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 800138c:	2200      	movs	r2, #0
 800138e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 8001392:	2200      	movs	r2, #0
 8001394:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800139c:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013a2:	4b13      	ldr	r3, [pc, #76]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013a8:	4811      	ldr	r0, [pc, #68]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 80013aa:	f005 f8ea 	bl	8006582 <HAL_UART_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013b4:	f000 f8ac 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013b8:	2100      	movs	r1, #0
 80013ba:	480d      	ldr	r0, [pc, #52]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 80013bc:	f007 f88d 	bl	80084da <HAL_UARTEx_SetTxFifoThreshold>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013c6:	f000 f8a3 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ca:	2100      	movs	r1, #0
 80013cc:	4808      	ldr	r0, [pc, #32]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 80013ce:	f007 f8c2 	bl	8008556 <HAL_UARTEx_SetRxFifoThreshold>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013d8:	f000 f89a 	bl	8001510 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80013dc:	4804      	ldr	r0, [pc, #16]	; (80013f0 <MX_USART2_UART_Init+0x90>)
 80013de:	f007 f843 	bl	8008468 <HAL_UARTEx_DisableFifoMode>
 80013e2:	4603      	mov	r3, r0
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d001      	beq.n	80013ec <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80013e8:	f000 f892 	bl	8001510 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ec:	bf00      	nop
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	2000039c 	.word	0x2000039c
 80013f4:	40004400 	.word	0x40004400

080013f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b088      	sub	sp, #32
 80013fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]
 8001408:	609a      	str	r2, [r3, #8]
 800140a:	60da      	str	r2, [r3, #12]
 800140c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800140e:	4b33      	ldr	r3, [pc, #204]	; (80014dc <MX_GPIO_Init+0xe4>)
 8001410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001412:	4a32      	ldr	r2, [pc, #200]	; (80014dc <MX_GPIO_Init+0xe4>)
 8001414:	f043 0304 	orr.w	r3, r3, #4
 8001418:	64d3      	str	r3, [r2, #76]	; 0x4c
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <MX_GPIO_Init+0xe4>)
 800141c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800141e:	f003 0304 	and.w	r3, r3, #4
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <MX_GPIO_Init+0xe4>)
 8001428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800142a:	4a2c      	ldr	r2, [pc, #176]	; (80014dc <MX_GPIO_Init+0xe4>)
 800142c:	f043 0320 	orr.w	r3, r3, #32
 8001430:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_GPIO_Init+0xe4>)
 8001434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001436:	f003 0320 	and.w	r3, r3, #32
 800143a:	607b      	str	r3, [r7, #4]
 800143c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <MX_GPIO_Init+0xe4>)
 8001440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001442:	4a26      	ldr	r2, [pc, #152]	; (80014dc <MX_GPIO_Init+0xe4>)
 8001444:	f043 0301 	orr.w	r3, r3, #1
 8001448:	64d3      	str	r3, [r2, #76]	; 0x4c
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <MX_GPIO_Init+0xe4>)
 800144c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	603b      	str	r3, [r7, #0]
 8001454:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2108      	movs	r1, #8
 800145a:	4821      	ldr	r0, [pc, #132]	; (80014e0 <MX_GPIO_Init+0xe8>)
 800145c:	f002 fc7a 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001460:	2200      	movs	r2, #0
 8001462:	2120      	movs	r1, #32
 8001464:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001468:	f002 fc74 	bl	8003d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800146c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001472:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800147c:	f107 030c 	add.w	r3, r7, #12
 8001480:	4619      	mov	r1, r3
 8001482:	4817      	ldr	r0, [pc, #92]	; (80014e0 <MX_GPIO_Init+0xe8>)
 8001484:	f002 fae4 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8001488:	2308      	movs	r3, #8
 800148a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148c:	2301      	movs	r3, #1
 800148e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001490:	2300      	movs	r3, #0
 8001492:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001494:	2300      	movs	r3, #0
 8001496:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 8001498:	f107 030c 	add.w	r3, r7, #12
 800149c:	4619      	mov	r1, r3
 800149e:	4810      	ldr	r0, [pc, #64]	; (80014e0 <MX_GPIO_Init+0xe8>)
 80014a0:	f002 fad6 	bl	8003a50 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80014a4:	2320      	movs	r3, #32
 80014a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a8:	2301      	movs	r3, #1
 80014aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b0:	2300      	movs	r3, #0
 80014b2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014be:	f002 fac7 	bl	8003a50 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80014c2:	2200      	movs	r2, #0
 80014c4:	2100      	movs	r1, #0
 80014c6:	2028      	movs	r0, #40	; 0x28
 80014c8:	f002 f9cd 	bl	8003866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80014cc:	2028      	movs	r0, #40	; 0x28
 80014ce:	f002 f9e4 	bl	800389a <HAL_NVIC_EnableIRQ>

}
 80014d2:	bf00      	nop
 80014d4:	3720      	adds	r7, #32
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	40021000 	.word	0x40021000
 80014e0:	48000800 	.word	0x48000800

080014e4 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback (UART_HandleTypeDef * huart){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80014ec:	4b05      	ldr	r3, [pc, #20]	; (8001504 <HAL_UART_RxCpltCallback+0x20>)
 80014ee:	2201      	movs	r2, #1
 80014f0:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4904      	ldr	r1, [pc, #16]	; (8001508 <HAL_UART_RxCpltCallback+0x24>)
 80014f6:	4805      	ldr	r0, [pc, #20]	; (800150c <HAL_UART_RxCpltCallback+0x28>)
 80014f8:	f005 f92a 	bl	8006750 <HAL_UART_Receive_IT>
}
 80014fc:	bf00      	nop
 80014fe:	3708      	adds	r7, #8
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	2000042c 	.word	0x2000042c
 8001508:	20000430 	.word	0x20000430
 800150c:	2000039c 	.word	0x2000039c

08001510 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	HAL_UART_Transmit(&huart2, "error\r\n", 7, HAL_MAX_DELAY);
 8001514:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001518:	2207      	movs	r2, #7
 800151a:	4903      	ldr	r1, [pc, #12]	; (8001528 <Error_Handler+0x18>)
 800151c:	4803      	ldr	r0, [pc, #12]	; (800152c <Error_Handler+0x1c>)
 800151e:	f005 f880 	bl	8006622 <HAL_UART_Transmit>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001522:	b672      	cpsid	i
}
 8001524:	bf00      	nop
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001526:	e7fe      	b.n	8001526 <Error_Handler+0x16>
 8001528:	0800b7e8 	.word	0x0800b7e8
 800152c:	2000039c 	.word	0x2000039c

08001530 <shell_start>:
 *
 *
 * \param nothing
 * \return nothing
 */
void shell_start(void) {
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	memset(argv,NULL,MAX_ARGS*sizeof(char*));
 8001534:	2224      	movs	r2, #36	; 0x24
 8001536:	2100      	movs	r1, #0
 8001538:	4813      	ldr	r0, [pc, #76]	; (8001588 <shell_start+0x58>)
 800153a:	f007 f8c7 	bl	80086cc <memset>
	memset(cmdBuffer,NULL,CMD_BUFFER_SIZE*sizeof(char));
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	2100      	movs	r1, #0
 8001542:	4812      	ldr	r0, [pc, #72]	; (800158c <shell_start+0x5c>)
 8001544:	f007 f8c2 	bl	80086cc <memset>
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <shell_start+0x60>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer,NULL,UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer,NULL,UART_TX_BUFFER_SIZE*sizeof(char));
 800154e:	2240      	movs	r2, #64	; 0x40
 8001550:	2100      	movs	r1, #0
 8001552:	4810      	ldr	r0, [pc, #64]	; (8001594 <shell_start+0x64>)
 8001554:	f007 f8ba 	bl	80086cc <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8001558:	2201      	movs	r2, #1
 800155a:	490d      	ldr	r1, [pc, #52]	; (8001590 <shell_start+0x60>)
 800155c:	480e      	ldr	r0, [pc, #56]	; (8001598 <shell_start+0x68>)
 800155e:	f005 f8f7 	bl	8006750 <HAL_UART_Receive_IT>
	HAL_Delay(10);
 8001562:	200a      	movs	r0, #10
 8001564:	f000 fce2 	bl	8001f2c <HAL_Delay>
	HAL_UART_Transmit(&huart2, started, sizeof(started), HAL_MAX_DELAY);
 8001568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800156c:	2266      	movs	r2, #102	; 0x66
 800156e:	490b      	ldr	r1, [pc, #44]	; (800159c <shell_start+0x6c>)
 8001570:	4809      	ldr	r0, [pc, #36]	; (8001598 <shell_start+0x68>)
 8001572:	f005 f856 	bl	8006622 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8001576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800157a:	2218      	movs	r2, #24
 800157c:	4908      	ldr	r1, [pc, #32]	; (80015a0 <shell_start+0x70>)
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <shell_start+0x68>)
 8001580:	f005 f84f 	bl	8006622 <HAL_UART_Transmit>
}
 8001584:	bf00      	nop
 8001586:	bd80      	pop	{r7, pc}
 8001588:	200004c8 	.word	0x200004c8
 800158c:	20000480 	.word	0x20000480
 8001590:	20000430 	.word	0x20000430
 8001594:	20000434 	.word	0x20000434
 8001598:	2000039c 	.word	0x2000039c
 800159c:	20000018 	.word	0x20000018
 80015a0:	20000000 	.word	0x20000000

080015a4 <shell_process>:
 *
 *
 * \param nothing
 * \return nothing
 */
void shell_process(void) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
	switch(uartRxBuffer[0]){
 80015a8:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <shell_process+0xc4>)
 80015aa:	781b      	ldrb	r3, [r3, #0]
 80015ac:	2b0d      	cmp	r3, #13
 80015ae:	d002      	beq.n	80015b6 <shell_process+0x12>
 80015b0:	2b7f      	cmp	r3, #127	; 0x7f
 80015b2:	d033      	beq.n	800161c <shell_process+0x78>
 80015b4:	e042      	b.n	800163c <shell_process+0x98>
		// Nouvelle ligne, instruction à traiter
		case ASCII_CR:
		  HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80015b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015ba:	2203      	movs	r2, #3
 80015bc:	492b      	ldr	r1, [pc, #172]	; (800166c <shell_process+0xc8>)
 80015be:	482c      	ldr	r0, [pc, #176]	; (8001670 <shell_process+0xcc>)
 80015c0:	f005 f82f 	bl	8006622 <HAL_UART_Transmit>
		  cmdBuffer[idx_cmd] = '\0';
 80015c4:	4b2b      	ldr	r3, [pc, #172]	; (8001674 <shell_process+0xd0>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a2b      	ldr	r2, [pc, #172]	; (8001678 <shell_process+0xd4>)
 80015ca:	2100      	movs	r1, #0
 80015cc:	54d1      	strb	r1, [r2, r3]
		  argc = 0;
 80015ce:	4b2b      	ldr	r3, [pc, #172]	; (800167c <shell_process+0xd8>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	601a      	str	r2, [r3, #0]
		  token = strtok(cmdBuffer, " ");
 80015d4:	492a      	ldr	r1, [pc, #168]	; (8001680 <shell_process+0xdc>)
 80015d6:	4828      	ldr	r0, [pc, #160]	; (8001678 <shell_process+0xd4>)
 80015d8:	f007 fdac 	bl	8009134 <strtok>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a29      	ldr	r2, [pc, #164]	; (8001684 <shell_process+0xe0>)
 80015e0:	6013      	str	r3, [r2, #0]
		  while(token!=NULL){
 80015e2:	e010      	b.n	8001606 <shell_process+0x62>
			  argv[argc++] = token;
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <shell_process+0xd8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	1c5a      	adds	r2, r3, #1
 80015ea:	4924      	ldr	r1, [pc, #144]	; (800167c <shell_process+0xd8>)
 80015ec:	600a      	str	r2, [r1, #0]
 80015ee:	4a25      	ldr	r2, [pc, #148]	; (8001684 <shell_process+0xe0>)
 80015f0:	6812      	ldr	r2, [r2, #0]
 80015f2:	4925      	ldr	r1, [pc, #148]	; (8001688 <shell_process+0xe4>)
 80015f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			  token = strtok(NULL, " ");
 80015f8:	4921      	ldr	r1, [pc, #132]	; (8001680 <shell_process+0xdc>)
 80015fa:	2000      	movs	r0, #0
 80015fc:	f007 fd9a 	bl	8009134 <strtok>
 8001600:	4603      	mov	r3, r0
 8001602:	4a20      	ldr	r2, [pc, #128]	; (8001684 <shell_process+0xe0>)
 8001604:	6013      	str	r3, [r2, #0]
		  while(token!=NULL){
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <shell_process+0xe0>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d1ea      	bne.n	80015e4 <shell_process+0x40>
		  }

		  idx_cmd = 0;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <shell_process+0xd0>)
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
		  cmd_ready = 1;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <shell_process+0xe8>)
 8001616:	2201      	movs	r2, #1
 8001618:	601a      	str	r2, [r3, #0]
		  break;
 800161a:	e01f      	b.n	800165c <shell_process+0xb8>
		// Suppression du dernier caractère
		case ASCII_DEL:
		  cmdBuffer[idx_cmd--] = '\0';
 800161c:	4b15      	ldr	r3, [pc, #84]	; (8001674 <shell_process+0xd0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1e5a      	subs	r2, r3, #1
 8001622:	4914      	ldr	r1, [pc, #80]	; (8001674 <shell_process+0xd0>)
 8001624:	600a      	str	r2, [r1, #0]
 8001626:	4a14      	ldr	r2, [pc, #80]	; (8001678 <shell_process+0xd4>)
 8001628:	2100      	movs	r1, #0
 800162a:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800162c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001630:	2201      	movs	r2, #1
 8001632:	490d      	ldr	r1, [pc, #52]	; (8001668 <shell_process+0xc4>)
 8001634:	480e      	ldr	r0, [pc, #56]	; (8001670 <shell_process+0xcc>)
 8001636:	f004 fff4 	bl	8006622 <HAL_UART_Transmit>
		  break;
 800163a:	e00f      	b.n	800165c <shell_process+0xb8>
		// Nouveau caractère
		default:
		  cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <shell_process+0xd0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	1c5a      	adds	r2, r3, #1
 8001642:	490c      	ldr	r1, [pc, #48]	; (8001674 <shell_process+0xd0>)
 8001644:	600a      	str	r2, [r1, #0]
 8001646:	4a08      	ldr	r2, [pc, #32]	; (8001668 <shell_process+0xc4>)
 8001648:	7811      	ldrb	r1, [r2, #0]
 800164a:	4a0b      	ldr	r2, [pc, #44]	; (8001678 <shell_process+0xd4>)
 800164c:	54d1      	strb	r1, [r2, r3]
		  HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 800164e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001652:	2201      	movs	r2, #1
 8001654:	4904      	ldr	r1, [pc, #16]	; (8001668 <shell_process+0xc4>)
 8001656:	4806      	ldr	r0, [pc, #24]	; (8001670 <shell_process+0xcc>)
 8001658:	f004 ffe3 	bl	8006622 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <shell_process+0xec>)
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	20000430 	.word	0x20000430
 800166c:	20000080 	.word	0x20000080
 8001670:	2000039c 	.word	0x2000039c
 8001674:	200004c4 	.word	0x200004c4
 8001678:	20000480 	.word	0x20000480
 800167c:	200004ec 	.word	0x200004ec
 8001680:	0800b8d8 	.word	0x0800b8d8
 8001684:	200004f0 	.word	0x200004f0
 8001688:	200004c8 	.word	0x200004c8
 800168c:	20000474 	.word	0x20000474
 8001690:	2000042c 	.word	0x2000042c

08001694 <shell_execute>:

void shell_execute(void) {
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af02      	add	r7, sp, #8
	/* HELP command */
	if(strcmp(argv[0],com[0])==0)
 800169a:	4b92      	ldr	r3, [pc, #584]	; (80018e4 <shell_execute+0x250>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a92      	ldr	r2, [pc, #584]	; (80018e8 <shell_execute+0x254>)
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	4611      	mov	r1, r2
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7fe fdbb 	bl	8000220 <strcmp>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d117      	bne.n	80016e0 <shell_execute+0x4c>
	{
	  sprintf(uartTxBuffer,"Commands :\r\n%s\r\n%s\r\n%s\r\n%s\r\n", com[0], com[1], com[2], com[3]);
 80016b0:	4b8d      	ldr	r3, [pc, #564]	; (80018e8 <shell_execute+0x254>)
 80016b2:	6819      	ldr	r1, [r3, #0]
 80016b4:	4b8c      	ldr	r3, [pc, #560]	; (80018e8 <shell_execute+0x254>)
 80016b6:	6858      	ldr	r0, [r3, #4]
 80016b8:	4b8b      	ldr	r3, [pc, #556]	; (80018e8 <shell_execute+0x254>)
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4a8a      	ldr	r2, [pc, #552]	; (80018e8 <shell_execute+0x254>)
 80016be:	68d2      	ldr	r2, [r2, #12]
 80016c0:	9201      	str	r2, [sp, #4]
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	4603      	mov	r3, r0
 80016c6:	460a      	mov	r2, r1
 80016c8:	4988      	ldr	r1, [pc, #544]	; (80018ec <shell_execute+0x258>)
 80016ca:	4889      	ldr	r0, [pc, #548]	; (80018f0 <shell_execute+0x25c>)
 80016cc:	f007 fcfe 	bl	80090cc <siprintf>
	  HAL_UART_Transmit(&huart2, uartTxBuffer, UART_TX_BUFFER_SIZE, HAL_MAX_DELAY);
 80016d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016d4:	2240      	movs	r2, #64	; 0x40
 80016d6:	4986      	ldr	r1, [pc, #536]	; (80018f0 <shell_execute+0x25c>)
 80016d8:	4886      	ldr	r0, [pc, #536]	; (80018f4 <shell_execute+0x260>)
 80016da:	f004 ffa2 	bl	8006622 <HAL_UART_Transmit>
 80016de:	e0f3      	b.n	80018c8 <shell_execute+0x234>
	}
	/* PINOUT command */
	else if(strcmp(argv[0],com[1])==0)
 80016e0:	4b80      	ldr	r3, [pc, #512]	; (80018e4 <shell_execute+0x250>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a80      	ldr	r2, [pc, #512]	; (80018e8 <shell_execute+0x254>)
 80016e6:	6852      	ldr	r2, [r2, #4]
 80016e8:	4611      	mov	r1, r2
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7fe fd98 	bl	8000220 <strcmp>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d11e      	bne.n	8001734 <shell_execute+0xa0>
	{
	  for (int i = 0; i < 10; i++) {
 80016f6:	2300      	movs	r3, #0
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	e017      	b.n	800172c <shell_execute+0x98>
		  size = sprintf(uartTxBuffer,"%s\r\n", pins[i]);
 80016fc:	4a7e      	ldr	r2, [pc, #504]	; (80018f8 <shell_execute+0x264>)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001704:	461a      	mov	r2, r3
 8001706:	497d      	ldr	r1, [pc, #500]	; (80018fc <shell_execute+0x268>)
 8001708:	4879      	ldr	r0, [pc, #484]	; (80018f0 <shell_execute+0x25c>)
 800170a:	f007 fcdf 	bl	80090cc <siprintf>
 800170e:	4603      	mov	r3, r0
 8001710:	4a7b      	ldr	r2, [pc, #492]	; (8001900 <shell_execute+0x26c>)
 8001712:	6013      	str	r3, [r2, #0]
		  HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8001714:	4b7a      	ldr	r3, [pc, #488]	; (8001900 <shell_execute+0x26c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	b29a      	uxth	r2, r3
 800171a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171e:	4974      	ldr	r1, [pc, #464]	; (80018f0 <shell_execute+0x25c>)
 8001720:	4874      	ldr	r0, [pc, #464]	; (80018f4 <shell_execute+0x260>)
 8001722:	f004 ff7e 	bl	8006622 <HAL_UART_Transmit>
	  for (int i = 0; i < 10; i++) {
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	3301      	adds	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b09      	cmp	r3, #9
 8001730:	dde4      	ble.n	80016fc <shell_execute+0x68>
 8001732:	e0c9      	b.n	80018c8 <shell_execute+0x234>
	  }
	}
	/* START command */
	else if(strcmp(argv[0],com[2])==0)
 8001734:	4b6b      	ldr	r3, [pc, #428]	; (80018e4 <shell_execute+0x250>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a6b      	ldr	r2, [pc, #428]	; (80018e8 <shell_execute+0x254>)
 800173a:	6892      	ldr	r2, [r2, #8]
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f7fe fd6e 	bl	8000220 <strcmp>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d127      	bne.n	800179a <shell_execute+0x106>
	{
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	2108      	movs	r1, #8
 800174e:	486d      	ldr	r0, [pc, #436]	; (8001904 <shell_execute+0x270>)
 8001750:	f002 fb00 	bl	8003d54 <HAL_GPIO_WritePin>
		HAL_Delay(10);
 8001754:	200a      	movs	r0, #10
 8001756:	f000 fbe9 	bl	8001f2c <HAL_Delay>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800175a:	2200      	movs	r2, #0
 800175c:	2108      	movs	r1, #8
 800175e:	4869      	ldr	r0, [pc, #420]	; (8001904 <shell_execute+0x270>)
 8001760:	f002 faf8 	bl	8003d54 <HAL_GPIO_WritePin>
		TIM1->CCR1 = 512;
 8001764:	4b68      	ldr	r3, [pc, #416]	; (8001908 <shell_execute+0x274>)
 8001766:	f44f 7200 	mov.w	r2, #512	; 0x200
 800176a:	635a      	str	r2, [r3, #52]	; 0x34
		TIM1->CCR2 = 512;
 800176c:	4b66      	ldr	r3, [pc, #408]	; (8001908 <shell_execute+0x274>)
 800176e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001772:	639a      	str	r2, [r3, #56]	; 0x38
		PWN_start();
 8001774:	f7ff fbe4 	bl	8000f40 <PWN_start>
		size = sprintf(uartTxBuffer,"PWN ON\r\n");
 8001778:	4964      	ldr	r1, [pc, #400]	; (800190c <shell_execute+0x278>)
 800177a:	485d      	ldr	r0, [pc, #372]	; (80018f0 <shell_execute+0x25c>)
 800177c:	f007 fca6 	bl	80090cc <siprintf>
 8001780:	4603      	mov	r3, r0
 8001782:	4a5f      	ldr	r2, [pc, #380]	; (8001900 <shell_execute+0x26c>)
 8001784:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 8001786:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <shell_execute+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	b29a      	uxth	r2, r3
 800178c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001790:	4957      	ldr	r1, [pc, #348]	; (80018f0 <shell_execute+0x25c>)
 8001792:	4858      	ldr	r0, [pc, #352]	; (80018f4 <shell_execute+0x260>)
 8001794:	f004 ff45 	bl	8006622 <HAL_UART_Transmit>
 8001798:	e096      	b.n	80018c8 <shell_execute+0x234>
	}
	/* STOP command */
	else if(strcmp(argv[0],com[3])==0)
 800179a:	4b52      	ldr	r3, [pc, #328]	; (80018e4 <shell_execute+0x250>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a52      	ldr	r2, [pc, #328]	; (80018e8 <shell_execute+0x254>)
 80017a0:	68d2      	ldr	r2, [r2, #12]
 80017a2:	4611      	mov	r1, r2
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fd3b 	bl	8000220 <strcmp>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d112      	bne.n	80017d6 <shell_execute+0x142>
	{
		PWN_stop();
 80017b0:	f7ff fbdc 	bl	8000f6c <PWN_stop>
		size = sprintf(uartTxBuffer,"PWN OFF\r\n");
 80017b4:	4956      	ldr	r1, [pc, #344]	; (8001910 <shell_execute+0x27c>)
 80017b6:	484e      	ldr	r0, [pc, #312]	; (80018f0 <shell_execute+0x25c>)
 80017b8:	f007 fc88 	bl	80090cc <siprintf>
 80017bc:	4603      	mov	r3, r0
 80017be:	4a50      	ldr	r2, [pc, #320]	; (8001900 <shell_execute+0x26c>)
 80017c0:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 80017c2:	4b4f      	ldr	r3, [pc, #316]	; (8001900 <shell_execute+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017cc:	4948      	ldr	r1, [pc, #288]	; (80018f0 <shell_execute+0x25c>)
 80017ce:	4849      	ldr	r0, [pc, #292]	; (80018f4 <shell_execute+0x260>)
 80017d0:	f004 ff27 	bl	8006622 <HAL_UART_Transmit>
 80017d4:	e078      	b.n	80018c8 <shell_execute+0x234>
	}
	else if(strncmp(argv[0],"speed",strlen("speed")) == 0){
 80017d6:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <shell_execute+0x250>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	2205      	movs	r2, #5
 80017dc:	494d      	ldr	r1, [pc, #308]	; (8001914 <shell_execute+0x280>)
 80017de:	4618      	mov	r0, r3
 80017e0:	f007 fc94 	bl	800910c <strncmp>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d142      	bne.n	8001870 <shell_execute+0x1dc>
		vitesse = atoi(argv[1]);
 80017ea:	4b3e      	ldr	r3, [pc, #248]	; (80018e4 <shell_execute+0x250>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4618      	mov	r0, r3
 80017f0:	f006 ff3e 	bl	8008670 <atoi>
 80017f4:	4603      	mov	r3, r0
 80017f6:	4a48      	ldr	r2, [pc, #288]	; (8001918 <shell_execute+0x284>)
 80017f8:	6013      	str	r3, [r2, #0]
		printf("%d\r\n", vitesse);
 80017fa:	4b47      	ldr	r3, [pc, #284]	; (8001918 <shell_execute+0x284>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	4846      	ldr	r0, [pc, #280]	; (800191c <shell_execute+0x288>)
 8001802:	f007 fbd5 	bl	8008fb0 <iprintf>

		while (TIM1->CCR1 < vitesse){
 8001806:	e012      	b.n	800182e <shell_execute+0x19a>
			TIM1->CCR1++;
 8001808:	4b3f      	ldr	r3, [pc, #252]	; (8001908 <shell_execute+0x274>)
 800180a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800180c:	3201      	adds	r2, #1
 800180e:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2--;
 8001810:	4b3d      	ldr	r3, [pc, #244]	; (8001908 <shell_execute+0x274>)
 8001812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001814:	3a01      	subs	r2, #1
 8001816:	639a      	str	r2, [r3, #56]	; 0x38
			printf("%d %d\r\n", TIM1->CCR1, TIM1->CCR2);
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <shell_execute+0x274>)
 800181a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800181c:	4a3a      	ldr	r2, [pc, #232]	; (8001908 <shell_execute+0x274>)
 800181e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001820:	4619      	mov	r1, r3
 8001822:	483f      	ldr	r0, [pc, #252]	; (8001920 <shell_execute+0x28c>)
 8001824:	f007 fbc4 	bl	8008fb0 <iprintf>
			HAL_Delay(50);
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f000 fb7f 	bl	8001f2c <HAL_Delay>
		while (TIM1->CCR1 < vitesse){
 800182e:	4b36      	ldr	r3, [pc, #216]	; (8001908 <shell_execute+0x274>)
 8001830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001832:	4a39      	ldr	r2, [pc, #228]	; (8001918 <shell_execute+0x284>)
 8001834:	6812      	ldr	r2, [r2, #0]
 8001836:	4293      	cmp	r3, r2
 8001838:	d3e6      	bcc.n	8001808 <shell_execute+0x174>
		}
		while (TIM1->CCR1 > vitesse){
 800183a:	e012      	b.n	8001862 <shell_execute+0x1ce>
			TIM1->CCR1--;
 800183c:	4b32      	ldr	r3, [pc, #200]	; (8001908 <shell_execute+0x274>)
 800183e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001840:	3a01      	subs	r2, #1
 8001842:	635a      	str	r2, [r3, #52]	; 0x34
			TIM1->CCR2++;
 8001844:	4b30      	ldr	r3, [pc, #192]	; (8001908 <shell_execute+0x274>)
 8001846:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001848:	3201      	adds	r2, #1
 800184a:	639a      	str	r2, [r3, #56]	; 0x38
			printf("%d %d\r\n", TIM1->CCR1, TIM1->CCR2);
 800184c:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <shell_execute+0x274>)
 800184e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001850:	4a2d      	ldr	r2, [pc, #180]	; (8001908 <shell_execute+0x274>)
 8001852:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001854:	4619      	mov	r1, r3
 8001856:	4832      	ldr	r0, [pc, #200]	; (8001920 <shell_execute+0x28c>)
 8001858:	f007 fbaa 	bl	8008fb0 <iprintf>
			HAL_Delay(50);
 800185c:	2032      	movs	r0, #50	; 0x32
 800185e:	f000 fb65 	bl	8001f2c <HAL_Delay>
		while (TIM1->CCR1 > vitesse){
 8001862:	4b29      	ldr	r3, [pc, #164]	; (8001908 <shell_execute+0x274>)
 8001864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001866:	4a2c      	ldr	r2, [pc, #176]	; (8001918 <shell_execute+0x284>)
 8001868:	6812      	ldr	r2, [r2, #0]
 800186a:	4293      	cmp	r3, r2
 800186c:	d8e6      	bhi.n	800183c <shell_execute+0x1a8>
 800186e:	e02b      	b.n	80018c8 <shell_execute+0x234>
		}
	}
	else if(strcmp(argv[0],com[5])==0)
 8001870:	4b1c      	ldr	r3, [pc, #112]	; (80018e4 <shell_execute+0x250>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a1c      	ldr	r2, [pc, #112]	; (80018e8 <shell_execute+0x254>)
 8001876:	6952      	ldr	r2, [r2, #20]
 8001878:	4611      	mov	r1, r2
 800187a:	4618      	mov	r0, r3
 800187c:	f7fe fcd0 	bl	8000220 <strcmp>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d119      	bne.n	80018ba <shell_execute+0x226>
	{
		courant = HAL_ADC_GetValue(&hadc2);
 8001886:	4827      	ldr	r0, [pc, #156]	; (8001924 <shell_execute+0x290>)
 8001888:	f001 f974 	bl	8002b74 <HAL_ADC_GetValue>
 800188c:	4603      	mov	r3, r0
 800188e:	4a26      	ldr	r2, [pc, #152]	; (8001928 <shell_execute+0x294>)
 8001890:	6013      	str	r3, [r2, #0]
		size = sprintf(uartTxBuffer,"%d\r\n", courant);
 8001892:	4b25      	ldr	r3, [pc, #148]	; (8001928 <shell_execute+0x294>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	461a      	mov	r2, r3
 8001898:	4920      	ldr	r1, [pc, #128]	; (800191c <shell_execute+0x288>)
 800189a:	4815      	ldr	r0, [pc, #84]	; (80018f0 <shell_execute+0x25c>)
 800189c:	f007 fc16 	bl	80090cc <siprintf>
 80018a0:	4603      	mov	r3, r0
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <shell_execute+0x26c>)
 80018a4:	6013      	str	r3, [r2, #0]
		HAL_UART_Transmit(&huart2, uartTxBuffer, size, HAL_MAX_DELAY);
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <shell_execute+0x26c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	b29a      	uxth	r2, r3
 80018ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018b0:	490f      	ldr	r1, [pc, #60]	; (80018f0 <shell_execute+0x25c>)
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <shell_execute+0x260>)
 80018b4:	f004 feb5 	bl	8006622 <HAL_UART_Transmit>
 80018b8:	e006      	b.n	80018c8 <shell_execute+0x234>
	}
	else{
	  HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018be:	2214      	movs	r2, #20
 80018c0:	491a      	ldr	r1, [pc, #104]	; (800192c <shell_execute+0x298>)
 80018c2:	480c      	ldr	r0, [pc, #48]	; (80018f4 <shell_execute+0x260>)
 80018c4:	f004 fead 	bl	8006622 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018cc:	2218      	movs	r2, #24
 80018ce:	4918      	ldr	r1, [pc, #96]	; (8001930 <shell_execute+0x29c>)
 80018d0:	4808      	ldr	r0, [pc, #32]	; (80018f4 <shell_execute+0x260>)
 80018d2:	f004 fea6 	bl	8006622 <HAL_UART_Transmit>
	cmd_ready = 0;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <shell_execute+0x2a0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200004c8 	.word	0x200004c8
 80018e8:	20000098 	.word	0x20000098
 80018ec:	0800b8dc 	.word	0x0800b8dc
 80018f0:	20000434 	.word	0x20000434
 80018f4:	2000039c 	.word	0x2000039c
 80018f8:	200000b0 	.word	0x200000b0
 80018fc:	0800b8fc 	.word	0x0800b8fc
 8001900:	200004c0 	.word	0x200004c0
 8001904:	48000800 	.word	0x48000800
 8001908:	40012c00 	.word	0x40012c00
 800190c:	0800b904 	.word	0x0800b904
 8001910:	0800b910 	.word	0x0800b910
 8001914:	0800b810 	.word	0x0800b810
 8001918:	20000478 	.word	0x20000478
 800191c:	0800b91c 	.word	0x0800b91c
 8001920:	0800b924 	.word	0x0800b924
 8001924:	200002e4 	.word	0x200002e4
 8001928:	2000047c 	.word	0x2000047c
 800192c:	20000084 	.word	0x20000084
 8001930:	20000000 	.word	0x20000000
 8001934:	20000474 	.word	0x20000474

08001938 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800193e:	4b0f      	ldr	r3, [pc, #60]	; (800197c <HAL_MspInit+0x44>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_MspInit+0x44>)
 8001944:	f043 0301 	orr.w	r3, r3, #1
 8001948:	6613      	str	r3, [r2, #96]	; 0x60
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x44>)
 800194c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800194e:	f003 0301 	and.w	r3, r3, #1
 8001952:	607b      	str	r3, [r7, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001956:	4b09      	ldr	r3, [pc, #36]	; (800197c <HAL_MspInit+0x44>)
 8001958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195a:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x44>)
 800195c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001960:	6593      	str	r3, [r2, #88]	; 0x58
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x44>)
 8001964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	603b      	str	r3, [r7, #0]
 800196c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800196e:	f002 fac5 	bl	8003efc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b0a0      	sub	sp, #128	; 0x80
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001998:	f107 0318 	add.w	r3, r7, #24
 800199c:	2254      	movs	r2, #84	; 0x54
 800199e:	2100      	movs	r1, #0
 80019a0:	4618      	mov	r0, r3
 80019a2:	f006 fe93 	bl	80086cc <memset>
  if(hadc->Instance==ADC2)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <HAL_ADC_MspInit+0xd4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d14c      	bne.n	8001a4a <HAL_ADC_MspInit+0xca>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80019b0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80019b4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80019b6:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80019ba:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80019bc:	f107 0318 	add.w	r3, r7, #24
 80019c0:	4618      	mov	r0, r3
 80019c2:	f002 ffdf 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 80019c6:	4603      	mov	r3, r0
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d001      	beq.n	80019d0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80019cc:	f7ff fda0 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80019d0:	4b21      	ldr	r3, [pc, #132]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019d4:	4a20      	ldr	r2, [pc, #128]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 80019d6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80019da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 80019de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 80019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 80019ee:	f043 0304 	orr.w	r3, r3, #4
 80019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019f4:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 80019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a00:	4b15      	ldr	r3, [pc, #84]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 8001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a04:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a0c:	4b12      	ldr	r3, [pc, #72]	; (8001a58 <HAL_ADC_MspInit+0xd8>)
 8001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a10:	f003 0301 	and.w	r3, r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    /**ADC2 GPIO Configuration
    PC1     ------> ADC2_IN7
    PA0     ------> ADC2_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a20:	2300      	movs	r3, #0
 8001a22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a28:	4619      	mov	r1, r3
 8001a2a:	480c      	ldr	r0, [pc, #48]	; (8001a5c <HAL_ADC_MspInit+0xdc>)
 8001a2c:	f002 f810 	bl	8003a50 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a30:	2301      	movs	r3, #1
 8001a32:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001a34:	2303      	movs	r3, #3
 8001a36:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a3c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a40:	4619      	mov	r1, r3
 8001a42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a46:	f002 f803 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3780      	adds	r7, #128	; 0x80
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	50000100 	.word	0x50000100
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	48000800 	.word	0x48000800

08001a60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b085      	sub	sp, #20
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a0a      	ldr	r2, [pc, #40]	; (8001a98 <HAL_TIM_Base_MspInit+0x38>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10b      	bne.n	8001a8a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a76:	4a09      	ldr	r2, [pc, #36]	; (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a7c:	6613      	str	r3, [r2, #96]	; 0x60
 8001a7e:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <HAL_TIM_Base_MspInit+0x3c>)
 8001a80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001a8a:	bf00      	nop
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	40012c00 	.word	0x40012c00
 8001a9c:	40021000 	.word	0x40021000

08001aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a12      	ldr	r2, [pc, #72]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11d      	bne.n	8001afe <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ac2:	4b12      	ldr	r3, [pc, #72]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ac6:	4a11      	ldr	r2, [pc, #68]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ac8:	f043 0301 	orr.w	r3, r3, #1
 8001acc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ace:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad2:	f003 0301 	and.w	r3, r3, #1
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 8001ada:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001ade:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001aec:	2306      	movs	r3, #6
 8001aee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001af0:	f107 030c 	add.w	r3, r7, #12
 8001af4:	4619      	mov	r1, r3
 8001af6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001afa:	f001 ffa9 	bl	8003a50 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40012c00 	.word	0x40012c00
 8001b0c:	40021000 	.word	0x40021000

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b09e      	sub	sp, #120	; 0x78
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2254      	movs	r2, #84	; 0x54
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f006 fdcb 	bl	80086cc <memset>
  if(huart->Instance==USART2)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a23      	ldr	r2, [pc, #140]	; (8001bc8 <HAL_UART_MspInit+0xb8>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d13e      	bne.n	8001bbe <HAL_UART_MspInit+0xae>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001b40:	2302      	movs	r3, #2
 8001b42:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001b44:	2300      	movs	r3, #0
 8001b46:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 ff19 	bl	8004984 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b58:	f7ff fcda 	bl	8001510 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b5c:	4b1b      	ldr	r3, [pc, #108]	; (8001bcc <HAL_UART_MspInit+0xbc>)
 8001b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b60:	4a1a      	ldr	r2, [pc, #104]	; (8001bcc <HAL_UART_MspInit+0xbc>)
 8001b62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b66:	6593      	str	r3, [r2, #88]	; 0x58
 8001b68:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_UART_MspInit+0xbc>)
 8001b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b74:	4b15      	ldr	r3, [pc, #84]	; (8001bcc <HAL_UART_MspInit+0xbc>)
 8001b76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b78:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <HAL_UART_MspInit+0xbc>)
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <HAL_UART_MspInit+0xbc>)
 8001b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b84:	f003 0301 	and.w	r3, r3, #1
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001b8c:	230c      	movs	r3, #12
 8001b8e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b9c:	2307      	movs	r3, #7
 8001b9e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ba0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001baa:	f001 ff51 	bl	8003a50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bae:	2200      	movs	r2, #0
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	2026      	movs	r0, #38	; 0x26
 8001bb4:	f001 fe57 	bl	8003866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001bb8:	2026      	movs	r0, #38	; 0x26
 8001bba:	f001 fe6e 	bl	800389a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001bbe:	bf00      	nop
 8001bc0:	3778      	adds	r7, #120	; 0x78
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	40004400 	.word	0x40004400
 8001bcc:	40021000 	.word	0x40021000

08001bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bd4:	e7fe      	b.n	8001bd4 <NMI_Handler+0x4>

08001bd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bd6:	b480      	push	{r7}
 8001bd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bda:	e7fe      	b.n	8001bda <HardFault_Handler+0x4>

08001bdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be0:	e7fe      	b.n	8001be0 <MemManage_Handler+0x4>

08001be2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001be2:	b480      	push	{r7}
 8001be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001be6:	e7fe      	b.n	8001be6 <BusFault_Handler+0x4>

08001be8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bec:	e7fe      	b.n	8001bec <UsageFault_Handler+0x4>

08001bee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bee:	b480      	push	{r7}
 8001bf0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bf2:	bf00      	nop
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c0a:	b480      	push	{r7}
 8001c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c1c:	f000 f968 	bl	8001ef0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c20:	bf00      	nop
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c28:	4802      	ldr	r0, [pc, #8]	; (8001c34 <USART2_IRQHandler+0x10>)
 8001c2a:	f004 fde7 	bl	80067fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c2e:	bf00      	nop
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	2000039c 	.word	0x2000039c

08001c38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001c3c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c40:	f002 f8a0 	bl	8003d84 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
	return 1;
 8001c4c:	2301      	movs	r3, #1
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <_kill>:

int _kill(int pid, int sig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c62:	f006 fd09 	bl	8008678 <__errno>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2216      	movs	r2, #22
 8001c6a:	601a      	str	r2, [r3, #0]
	return -1;
 8001c6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c70:	4618      	mov	r0, r3
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}

08001c78 <_exit>:

void _exit (int status)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b082      	sub	sp, #8
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ffe7 	bl	8001c58 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c8a:	e7fe      	b.n	8001c8a <_exit+0x12>

08001c8c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b086      	sub	sp, #24
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	60f8      	str	r0, [r7, #12]
 8001c94:	60b9      	str	r1, [r7, #8]
 8001c96:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c98:	2300      	movs	r3, #0
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	e00a      	b.n	8001cb4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c9e:	f3af 8000 	nop.w
 8001ca2:	4601      	mov	r1, r0
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	1c5a      	adds	r2, r3, #1
 8001ca8:	60ba      	str	r2, [r7, #8]
 8001caa:	b2ca      	uxtb	r2, r1
 8001cac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	617b      	str	r3, [r7, #20]
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	dbf0      	blt.n	8001c9e <_read+0x12>
	}

return len;
 8001cbc:	687b      	ldr	r3, [r7, #4]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3718      	adds	r7, #24
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b086      	sub	sp, #24
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	60f8      	str	r0, [r7, #12]
 8001cce:	60b9      	str	r1, [r7, #8]
 8001cd0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	617b      	str	r3, [r7, #20]
 8001cd6:	e009      	b.n	8001cec <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	1c5a      	adds	r2, r3, #1
 8001cdc:	60ba      	str	r2, [r7, #8]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff f91b 	bl	8000f1c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	3301      	adds	r3, #1
 8001cea:	617b      	str	r3, [r7, #20]
 8001cec:	697a      	ldr	r2, [r7, #20]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	429a      	cmp	r2, r3
 8001cf2:	dbf1      	blt.n	8001cd8 <_write+0x12>
	}
	return len;
 8001cf4:	687b      	ldr	r3, [r7, #4]
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3718      	adds	r7, #24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <_close>:

int _close(int file)
{
 8001cfe:	b480      	push	{r7}
 8001d00:	b083      	sub	sp, #12
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
	return -1;
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d26:	605a      	str	r2, [r3, #4]
	return 0;
 8001d28:	2300      	movs	r3, #0
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	370c      	adds	r7, #12
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <_isatty>:

int _isatty(int file)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
	return 1;
 8001d3e:	2301      	movs	r3, #1
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	60b9      	str	r1, [r7, #8]
 8001d56:	607a      	str	r2, [r7, #4]
	return 0;
 8001d58:	2300      	movs	r3, #0
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr
	...

08001d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <_sbrk+0x5c>)
 8001d72:	4b15      	ldr	r3, [pc, #84]	; (8001dc8 <_sbrk+0x60>)
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d102      	bne.n	8001d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <_sbrk+0x64>)
 8001d86:	4a12      	ldr	r2, [pc, #72]	; (8001dd0 <_sbrk+0x68>)
 8001d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <_sbrk+0x64>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4413      	add	r3, r2
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d207      	bcs.n	8001da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d98:	f006 fc6e 	bl	8008678 <__errno>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	220c      	movs	r2, #12
 8001da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001da6:	e009      	b.n	8001dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001da8:	4b08      	ldr	r3, [pc, #32]	; (8001dcc <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	4a05      	ldr	r2, [pc, #20]	; (8001dcc <_sbrk+0x64>)
 8001db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dba:	68fb      	ldr	r3, [r7, #12]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}
 8001dc4:	20020000 	.word	0x20020000
 8001dc8:	00000400 	.word	0x00000400
 8001dcc:	200004f4 	.word	0x200004f4
 8001dd0:	20000510 	.word	0x20000510

08001dd4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001dd8:	4b06      	ldr	r3, [pc, #24]	; (8001df4 <SystemInit+0x20>)
 8001dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <SystemInit+0x20>)
 8001de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001de4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001de8:	bf00      	nop
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	e000ed00 	.word	0xe000ed00

08001df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001df8:	480d      	ldr	r0, [pc, #52]	; (8001e30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001dfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001dfc:	480d      	ldr	r0, [pc, #52]	; (8001e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001e00:	4a0e      	ldr	r2, [pc, #56]	; (8001e3c <LoopForever+0xe>)
  movs r3, #0
 8001e02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001e04:	e002      	b.n	8001e0c <LoopCopyDataInit>

08001e06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e0a:	3304      	adds	r3, #4

08001e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e10:	d3f9      	bcc.n	8001e06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e12:	4a0b      	ldr	r2, [pc, #44]	; (8001e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001e14:	4c0b      	ldr	r4, [pc, #44]	; (8001e44 <LoopForever+0x16>)
  movs r3, #0
 8001e16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e18:	e001      	b.n	8001e1e <LoopFillZerobss>

08001e1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e1c:	3204      	adds	r2, #4

08001e1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e20:	d3fb      	bcc.n	8001e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e22:	f7ff ffd7 	bl	8001dd4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e26:	f006 fc2d 	bl	8008684 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001e2a:	f7ff f8c5 	bl	8000fb8 <main>

08001e2e <LoopForever>:

LoopForever:
    b LoopForever
 8001e2e:	e7fe      	b.n	8001e2e <LoopForever>
  ldr   r0, =_estack
 8001e30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e38:	200002c8 	.word	0x200002c8
  ldr r2, =_sidata
 8001e3c:	0800bdb8 	.word	0x0800bdb8
  ldr r2, =_sbss
 8001e40:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8001e44:	2000050c 	.word	0x2000050c

08001e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001e48:	e7fe      	b.n	8001e48 <ADC1_2_IRQHandler>

08001e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e4a:	b580      	push	{r7, lr}
 8001e4c:	b082      	sub	sp, #8
 8001e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001e50:	2300      	movs	r3, #0
 8001e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e54:	2003      	movs	r0, #3
 8001e56:	f001 fcfb 	bl	8003850 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e5a:	2000      	movs	r0, #0
 8001e5c:	f000 f80e 	bl	8001e7c <HAL_InitTick>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d002      	beq.n	8001e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	71fb      	strb	r3, [r7, #7]
 8001e6a:	e001      	b.n	8001e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e6c:	f7ff fd64 	bl	8001938 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e70:	79fb      	ldrb	r3, [r7, #7]

}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3708      	adds	r7, #8
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
	...

08001e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b084      	sub	sp, #16
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001e84:	2300      	movs	r3, #0
 8001e86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <HAL_InitTick+0x68>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d022      	beq.n	8001ed6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001e90:	4b15      	ldr	r3, [pc, #84]	; (8001ee8 <HAL_InitTick+0x6c>)
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <HAL_InitTick+0x68>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001e9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f001 fd06 	bl	80038b6 <HAL_SYSTICK_Config>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10f      	bne.n	8001ed0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b0f      	cmp	r3, #15
 8001eb4:	d809      	bhi.n	8001eca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	6879      	ldr	r1, [r7, #4]
 8001eba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ebe:	f001 fcd2 	bl	8003866 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ec2:	4a0a      	ldr	r2, [pc, #40]	; (8001eec <HAL_InitTick+0x70>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	e007      	b.n	8001eda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	73fb      	strb	r3, [r7, #15]
 8001ece:	e004      	b.n	8001eda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	73fb      	strb	r3, [r7, #15]
 8001ed4:	e001      	b.n	8001eda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200000f4 	.word	0x200000f4
 8001ee8:	200000ec 	.word	0x200000ec
 8001eec:	200000f0 	.word	0x200000f0

08001ef0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ef4:	4b05      	ldr	r3, [pc, #20]	; (8001f0c <HAL_IncTick+0x1c>)
 8001ef6:	681a      	ldr	r2, [r3, #0]
 8001ef8:	4b05      	ldr	r3, [pc, #20]	; (8001f10 <HAL_IncTick+0x20>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4413      	add	r3, r2
 8001efe:	4a03      	ldr	r2, [pc, #12]	; (8001f0c <HAL_IncTick+0x1c>)
 8001f00:	6013      	str	r3, [r2, #0]
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	200004f8 	.word	0x200004f8
 8001f10:	200000f4 	.word	0x200000f4

08001f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	af00      	add	r7, sp, #0
  return uwTick;
 8001f18:	4b03      	ldr	r3, [pc, #12]	; (8001f28 <HAL_GetTick+0x14>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	200004f8 	.word	0x200004f8

08001f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f34:	f7ff ffee 	bl	8001f14 <HAL_GetTick>
 8001f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f44:	d004      	beq.n	8001f50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f46:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_Delay+0x40>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68fa      	ldr	r2, [r7, #12]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001f50:	bf00      	nop
 8001f52:	f7ff ffdf 	bl	8001f14 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d8f7      	bhi.n	8001f52 <HAL_Delay+0x26>
  {
  }
}
 8001f62:	bf00      	nop
 8001f64:	bf00      	nop
 8001f66:	3710      	adds	r7, #16
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}
 8001f6c:	200000f4 	.word	0x200000f4

08001f70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
 8001f78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	431a      	orrs	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	609a      	str	r2, [r3, #8]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b083      	sub	sp, #12
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	609a      	str	r2, [r3, #8]
}
 8001fb0:	bf00      	nop
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b083      	sub	sp, #12
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	370c      	adds	r7, #12
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr

08001fd8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	3360      	adds	r3, #96	; 0x60
 8001fea:	461a      	mov	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	009b      	lsls	r3, r3, #2
 8001ff0:	4413      	add	r3, r2
 8001ff2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ff4:	697b      	ldr	r3, [r7, #20]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	4b08      	ldr	r3, [pc, #32]	; (800201c <LL_ADC_SetOffset+0x44>)
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	430a      	orrs	r2, r1
 8002006:	4313      	orrs	r3, r2
 8002008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002010:	bf00      	nop
 8002012:	371c      	adds	r7, #28
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr
 800201c:	03fff000 	.word	0x03fff000

08002020 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3360      	adds	r3, #96	; 0x60
 800202e:	461a      	mov	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	4413      	add	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002040:	4618      	mov	r0, r3
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800204c:	b480      	push	{r7}
 800204e:	b087      	sub	sp, #28
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	3360      	adds	r3, #96	; 0x60
 800205c:	461a      	mov	r2, r3
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	431a      	orrs	r2, r3
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002076:	bf00      	nop
 8002078:	371c      	adds	r7, #28
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002082:	b480      	push	{r7}
 8002084:	b087      	sub	sp, #28
 8002086:	af00      	add	r7, sp, #0
 8002088:	60f8      	str	r0, [r7, #12]
 800208a:	60b9      	str	r1, [r7, #8]
 800208c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	3360      	adds	r3, #96	; 0x60
 8002092:	461a      	mov	r2, r3
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	4413      	add	r3, r2
 800209a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	431a      	orrs	r2, r3
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80020ac:	bf00      	nop
 80020ae:	371c      	adds	r7, #28
 80020b0:	46bd      	mov	sp, r7
 80020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b6:	4770      	bx	lr

080020b8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b087      	sub	sp, #28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3360      	adds	r3, #96	; 0x60
 80020c8:	461a      	mov	r2, r3
 80020ca:	68bb      	ldr	r3, [r7, #8]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	4413      	add	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	431a      	orrs	r2, r3
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80020e2:	bf00      	nop
 80020e4:	371c      	adds	r7, #28
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b083      	sub	sp, #12
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	695b      	ldr	r3, [r3, #20]
 80020fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	431a      	orrs	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	615a      	str	r2, [r3, #20]
}
 8002108:	bf00      	nop
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800213a:	b480      	push	{r7}
 800213c:	b087      	sub	sp, #28
 800213e:	af00      	add	r7, sp, #0
 8002140:	60f8      	str	r0, [r7, #12]
 8002142:	60b9      	str	r1, [r7, #8]
 8002144:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	3330      	adds	r3, #48	; 0x30
 800214a:	461a      	mov	r2, r3
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	0a1b      	lsrs	r3, r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	f003 030c 	and.w	r3, r3, #12
 8002156:	4413      	add	r3, r2
 8002158:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	f003 031f 	and.w	r3, r3, #31
 8002164:	211f      	movs	r1, #31
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	43db      	mvns	r3, r3
 800216c:	401a      	ands	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	f003 011f 	and.w	r1, r3, #31
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	431a      	orrs	r2, r3
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002186:	bf00      	nop
 8002188:	371c      	adds	r7, #28
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002192:	b480      	push	{r7}
 8002194:	b087      	sub	sp, #28
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	3314      	adds	r3, #20
 80021a2:	461a      	mov	r2, r3
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	0e5b      	lsrs	r3, r3, #25
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	4413      	add	r3, r2
 80021b0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	0d1b      	lsrs	r3, r3, #20
 80021ba:	f003 031f 	and.w	r3, r3, #31
 80021be:	2107      	movs	r1, #7
 80021c0:	fa01 f303 	lsl.w	r3, r1, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	401a      	ands	r2, r3
 80021c8:	68bb      	ldr	r3, [r7, #8]
 80021ca:	0d1b      	lsrs	r3, r3, #20
 80021cc:	f003 031f 	and.w	r3, r3, #31
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	fa01 f303 	lsl.w	r3, r1, r3
 80021d6:	431a      	orrs	r2, r3
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80021dc:	bf00      	nop
 80021de:	371c      	adds	r7, #28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b085      	sub	sp, #20
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d10a      	bne.n	8002212 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002208:	431a      	orrs	r2, r3
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002210:	e00a      	b.n	8002228 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800221e:	43db      	mvns	r3, r3
 8002220:	401a      	ands	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	407f0000 	.word	0x407f0000

08002238 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f003 031f 	and.w	r3, r3, #31
}
 8002248:	4618      	mov	r0, r3
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002264:	4618      	mov	r0, r3
 8002266:	370c      	adds	r7, #12
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002280:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	6093      	str	r3, [r2, #8]
}
 8002288:	bf00      	nop
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr

08002294 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022a8:	d101      	bne.n	80022ae <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	689b      	ldr	r3, [r3, #8]
 80022c8:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80022cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80022d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80022d8:	bf00      	nop
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022f4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022f8:	d101      	bne.n	80022fe <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80022fa:	2301      	movs	r3, #1
 80022fc:	e000      	b.n	8002300 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 800230c:	b480      	push	{r7}
 800230e:	b083      	sub	sp, #12
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800231c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002320:	f043 0201 	orr.w	r2, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002328:	bf00      	nop
 800232a:	370c      	adds	r7, #12
 800232c:	46bd      	mov	sp, r7
 800232e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002332:	4770      	bx	lr

08002334 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002344:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002348:	f043 0202 	orr.w	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	f003 0301 	and.w	r3, r3, #1
 800236c:	2b01      	cmp	r3, #1
 800236e:	d101      	bne.n	8002374 <LL_ADC_IsEnabled+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_ADC_IsEnabled+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b02      	cmp	r3, #2
 8002394:	d101      	bne.n	800239a <LL_ADC_IsDisableOngoing+0x18>
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <LL_ADC_IsDisableOngoing+0x1a>
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	370c      	adds	r7, #12
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80023b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80023bc:	f043 0204 	orr.w	r2, r3, #4
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f003 0304 	and.w	r3, r3, #4
 80023e0:	2b04      	cmp	r3, #4
 80023e2:	d101      	bne.n	80023e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80023e4:	2301      	movs	r3, #1
 80023e6:	e000      	b.n	80023ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f4:	4770      	bx	lr

080023f6 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d101      	bne.n	800240e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800240a:	2301      	movs	r3, #1
 800240c:	e000      	b.n	8002410 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr

0800241c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b089      	sub	sp, #36	; 0x24
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002428:	2300      	movs	r3, #0
 800242a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d101      	bne.n	8002436 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e1af      	b.n	8002796 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f7ff fa9b 	bl	8001980 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2200      	movs	r2, #0
 800244e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7ff ff19 	bl	8002294 <LL_ADC_IsDeepPowerDownEnabled>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d004      	beq.n	8002472 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7ff feff 	bl	8002270 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7ff ff34 	bl	80022e4 <LL_ADC_IsInternalRegulatorEnabled>
 800247c:	4603      	mov	r3, r0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d115      	bne.n	80024ae <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff ff18 	bl	80022bc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800248c:	4b9f      	ldr	r3, [pc, #636]	; (800270c <HAL_ADC_Init+0x2f0>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	099b      	lsrs	r3, r3, #6
 8002492:	4a9f      	ldr	r2, [pc, #636]	; (8002710 <HAL_ADC_Init+0x2f4>)
 8002494:	fba2 2303 	umull	r2, r3, r2, r3
 8002498:	099b      	lsrs	r3, r3, #6
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024a0:	e002      	b.n	80024a8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	3b01      	subs	r3, #1
 80024a6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f9      	bne.n	80024a2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff ff16 	bl	80022e4 <LL_ADC_IsInternalRegulatorEnabled>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10d      	bne.n	80024da <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	f043 0210 	orr.w	r2, r3, #16
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	f043 0201 	orr.w	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff ff76 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 80024e4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ea:	f003 0310 	and.w	r3, r3, #16
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	f040 8148 	bne.w	8002784 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f040 8144 	bne.w	8002784 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002504:	f043 0202 	orr.w	r2, r3, #2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ff23 	bl	800235c <LL_ADC_IsEnabled>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d141      	bne.n	80025a0 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002524:	d004      	beq.n	8002530 <HAL_ADC_Init+0x114>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a7a      	ldr	r2, [pc, #488]	; (8002714 <HAL_ADC_Init+0x2f8>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d10f      	bne.n	8002550 <HAL_ADC_Init+0x134>
 8002530:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002534:	f7ff ff12 	bl	800235c <LL_ADC_IsEnabled>
 8002538:	4604      	mov	r4, r0
 800253a:	4876      	ldr	r0, [pc, #472]	; (8002714 <HAL_ADC_Init+0x2f8>)
 800253c:	f7ff ff0e 	bl	800235c <LL_ADC_IsEnabled>
 8002540:	4603      	mov	r3, r0
 8002542:	4323      	orrs	r3, r4
 8002544:	2b00      	cmp	r3, #0
 8002546:	bf0c      	ite	eq
 8002548:	2301      	moveq	r3, #1
 800254a:	2300      	movne	r3, #0
 800254c:	b2db      	uxtb	r3, r3
 800254e:	e012      	b.n	8002576 <HAL_ADC_Init+0x15a>
 8002550:	4871      	ldr	r0, [pc, #452]	; (8002718 <HAL_ADC_Init+0x2fc>)
 8002552:	f7ff ff03 	bl	800235c <LL_ADC_IsEnabled>
 8002556:	4604      	mov	r4, r0
 8002558:	4870      	ldr	r0, [pc, #448]	; (800271c <HAL_ADC_Init+0x300>)
 800255a:	f7ff feff 	bl	800235c <LL_ADC_IsEnabled>
 800255e:	4603      	mov	r3, r0
 8002560:	431c      	orrs	r4, r3
 8002562:	486f      	ldr	r0, [pc, #444]	; (8002720 <HAL_ADC_Init+0x304>)
 8002564:	f7ff fefa 	bl	800235c <LL_ADC_IsEnabled>
 8002568:	4603      	mov	r3, r0
 800256a:	4323      	orrs	r3, r4
 800256c:	2b00      	cmp	r3, #0
 800256e:	bf0c      	ite	eq
 8002570:	2301      	moveq	r3, #1
 8002572:	2300      	movne	r3, #0
 8002574:	b2db      	uxtb	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d012      	beq.n	80025a0 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002582:	d004      	beq.n	800258e <HAL_ADC_Init+0x172>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a62      	ldr	r2, [pc, #392]	; (8002714 <HAL_ADC_Init+0x2f8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d101      	bne.n	8002592 <HAL_ADC_Init+0x176>
 800258e:	4a65      	ldr	r2, [pc, #404]	; (8002724 <HAL_ADC_Init+0x308>)
 8002590:	e000      	b.n	8002594 <HAL_ADC_Init+0x178>
 8002592:	4a65      	ldr	r2, [pc, #404]	; (8002728 <HAL_ADC_Init+0x30c>)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4619      	mov	r1, r3
 800259a:	4610      	mov	r0, r2
 800259c:	f7ff fce8 	bl	8001f70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	7f5b      	ldrb	r3, [r3, #29]
 80025a4:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025aa:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80025b0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80025b6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025be:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d106      	bne.n	80025dc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d2:	3b01      	subs	r3, #1
 80025d4:	045b      	lsls	r3, r3, #17
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	4313      	orrs	r3, r2
 80025da:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d009      	beq.n	80025f8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	4b4b      	ldr	r3, [pc, #300]	; (800272c <HAL_ADC_Init+0x310>)
 8002600:	4013      	ands	r3, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6812      	ldr	r2, [r2, #0]
 8002606:	69b9      	ldr	r1, [r7, #24]
 8002608:	430b      	orrs	r3, r1
 800260a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	430a      	orrs	r2, r1
 8002620:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f7ff fed2 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 800262c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4618      	mov	r0, r3
 8002634:	f7ff fedf 	bl	80023f6 <LL_ADC_INJ_IsConversionOngoing>
 8002638:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d17f      	bne.n	8002740 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d17c      	bne.n	8002740 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800264a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002652:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002654:	4313      	orrs	r3, r2
 8002656:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002662:	f023 0302 	bic.w	r3, r3, #2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	69b9      	ldr	r1, [r7, #24]
 800266c:	430b      	orrs	r3, r1
 800266e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	691b      	ldr	r3, [r3, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	d017      	beq.n	80026a8 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	691a      	ldr	r2, [r3, #16]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002686:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002690:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002694:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	6911      	ldr	r1, [r2, #16]
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	6812      	ldr	r2, [r2, #0]
 80026a0:	430b      	orrs	r3, r1
 80026a2:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80026a6:	e013      	b.n	80026d0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	691a      	ldr	r2, [r3, #16]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80026b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80026c0:	687a      	ldr	r2, [r7, #4]
 80026c2:	6812      	ldr	r2, [r2, #0]
 80026c4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80026c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80026cc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d12a      	bne.n	8002730 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	691b      	ldr	r3, [r3, #16]
 80026e0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	687a      	ldr	r2, [r7, #4]
 80026ea:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80026f0:	4311      	orrs	r1, r2
 80026f2:	687a      	ldr	r2, [r7, #4]
 80026f4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80026f6:	4311      	orrs	r1, r2
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80026fc:	430a      	orrs	r2, r1
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	611a      	str	r2, [r3, #16]
 800270a:	e019      	b.n	8002740 <HAL_ADC_Init+0x324>
 800270c:	200000ec 	.word	0x200000ec
 8002710:	053e2d63 	.word	0x053e2d63
 8002714:	50000100 	.word	0x50000100
 8002718:	50000400 	.word	0x50000400
 800271c:	50000500 	.word	0x50000500
 8002720:	50000600 	.word	0x50000600
 8002724:	50000300 	.word	0x50000300
 8002728:	50000700 	.word	0x50000700
 800272c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691a      	ldr	r2, [r3, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f022 0201 	bic.w	r2, r2, #1
 800273e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	2b01      	cmp	r3, #1
 8002746:	d10c      	bne.n	8002762 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800274e:	f023 010f 	bic.w	r1, r3, #15
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	1e5a      	subs	r2, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	430a      	orrs	r2, r1
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
 8002760:	e007      	b.n	8002772 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 020f 	bic.w	r2, r2, #15
 8002770:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002776:	f023 0303 	bic.w	r3, r3, #3
 800277a:	f043 0201 	orr.w	r2, r3, #1
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	65da      	str	r2, [r3, #92]	; 0x5c
 8002782:	e007      	b.n	8002794 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002788:	f043 0210 	orr.w	r2, r3, #16
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002794:	7ffb      	ldrb	r3, [r7, #31]
}
 8002796:	4618      	mov	r0, r3
 8002798:	3724      	adds	r7, #36	; 0x24
 800279a:	46bd      	mov	sp, r7
 800279c:	bd90      	pop	{r4, r7, pc}
 800279e:	bf00      	nop

080027a0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b0:	d004      	beq.n	80027bc <HAL_ADC_Start+0x1c>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a67      	ldr	r2, [pc, #412]	; (8002954 <HAL_ADC_Start+0x1b4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_ADC_Start+0x20>
 80027bc:	4b66      	ldr	r3, [pc, #408]	; (8002958 <HAL_ADC_Start+0x1b8>)
 80027be:	e000      	b.n	80027c2 <HAL_ADC_Start+0x22>
 80027c0:	4b66      	ldr	r3, [pc, #408]	; (800295c <HAL_ADC_Start+0x1bc>)
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7ff fd38 	bl	8002238 <LL_ADC_GetMultimode>
 80027c8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff fdfe 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 80b4 	bne.w	8002944 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d101      	bne.n	80027ea <HAL_ADC_Start+0x4a>
 80027e6:	2302      	movs	r3, #2
 80027e8:	e0af      	b.n	800294a <HAL_ADC_Start+0x1aa>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fe0c 	bl	8003410 <ADC_Enable>
 80027f8:	4603      	mov	r3, r0
 80027fa:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80027fc:	7dfb      	ldrb	r3, [r7, #23]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	f040 809b 	bne.w	800293a <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002808:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a4d      	ldr	r2, [pc, #308]	; (8002954 <HAL_ADC_Start+0x1b4>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d009      	beq.n	8002836 <HAL_ADC_Start+0x96>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a4e      	ldr	r2, [pc, #312]	; (8002960 <HAL_ADC_Start+0x1c0>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d002      	beq.n	8002832 <HAL_ADC_Start+0x92>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	e003      	b.n	800283a <HAL_ADC_Start+0x9a>
 8002832:	4b4c      	ldr	r3, [pc, #304]	; (8002964 <HAL_ADC_Start+0x1c4>)
 8002834:	e001      	b.n	800283a <HAL_ADC_Start+0x9a>
 8002836:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	4293      	cmp	r3, r2
 8002840:	d002      	beq.n	8002848 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d105      	bne.n	8002854 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002858:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800285c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002860:	d106      	bne.n	8002870 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002866:	f023 0206 	bic.w	r2, r3, #6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	661a      	str	r2, [r3, #96]	; 0x60
 800286e:	e002      	b.n	8002876 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	221c      	movs	r2, #28
 800287c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a32      	ldr	r2, [pc, #200]	; (8002954 <HAL_ADC_Start+0x1b4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d009      	beq.n	80028a4 <HAL_ADC_Start+0x104>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a32      	ldr	r2, [pc, #200]	; (8002960 <HAL_ADC_Start+0x1c0>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d002      	beq.n	80028a0 <HAL_ADC_Start+0x100>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	e003      	b.n	80028a8 <HAL_ADC_Start+0x108>
 80028a0:	4b30      	ldr	r3, [pc, #192]	; (8002964 <HAL_ADC_Start+0x1c4>)
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_Start+0x108>
 80028a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80028a8:	687a      	ldr	r2, [r7, #4]
 80028aa:	6812      	ldr	r2, [r2, #0]
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d008      	beq.n	80028c2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d002      	beq.n	80028c2 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	2b09      	cmp	r3, #9
 80028c0:	d114      	bne.n	80028ec <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	68db      	ldr	r3, [r3, #12]
 80028c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d007      	beq.n	80028e0 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80028d8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff fd5f 	bl	80023a8 <LL_ADC_REG_StartConversion>
 80028ea:	e02d      	b.n	8002948 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a15      	ldr	r2, [pc, #84]	; (8002954 <HAL_ADC_Start+0x1b4>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d009      	beq.n	8002916 <HAL_ADC_Start+0x176>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a16      	ldr	r2, [pc, #88]	; (8002960 <HAL_ADC_Start+0x1c0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d002      	beq.n	8002912 <HAL_ADC_Start+0x172>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	e003      	b.n	800291a <HAL_ADC_Start+0x17a>
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <HAL_ADC_Start+0x1c4>)
 8002914:	e001      	b.n	800291a <HAL_ADC_Start+0x17a>
 8002916:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800291a:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d00f      	beq.n	8002948 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002930:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	; 0x5c
 8002938:	e006      	b.n	8002948 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002942:	e001      	b.n	8002948 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002944:	2302      	movs	r3, #2
 8002946:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002948:	7dfb      	ldrb	r3, [r7, #23]
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	50000100 	.word	0x50000100
 8002958:	50000300 	.word	0x50000300
 800295c:	50000700 	.word	0x50000700
 8002960:	50000500 	.word	0x50000500
 8002964:	50000400 	.word	0x50000400

08002968 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b088      	sub	sp, #32
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800297a:	d004      	beq.n	8002986 <HAL_ADC_PollForConversion+0x1e>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a77      	ldr	r2, [pc, #476]	; (8002b60 <HAL_ADC_PollForConversion+0x1f8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d101      	bne.n	800298a <HAL_ADC_PollForConversion+0x22>
 8002986:	4b77      	ldr	r3, [pc, #476]	; (8002b64 <HAL_ADC_PollForConversion+0x1fc>)
 8002988:	e000      	b.n	800298c <HAL_ADC_PollForConversion+0x24>
 800298a:	4b77      	ldr	r3, [pc, #476]	; (8002b68 <HAL_ADC_PollForConversion+0x200>)
 800298c:	4618      	mov	r0, r3
 800298e:	f7ff fc53 	bl	8002238 <LL_ADC_GetMultimode>
 8002992:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	2b08      	cmp	r3, #8
 800299a:	d102      	bne.n	80029a2 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800299c:	2308      	movs	r3, #8
 800299e:	61fb      	str	r3, [r7, #28]
 80029a0:	e037      	b.n	8002a12 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	2b05      	cmp	r3, #5
 80029ac:	d002      	beq.n	80029b4 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	2b09      	cmp	r3, #9
 80029b2:	d111      	bne.n	80029d8 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d007      	beq.n	80029d2 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029c6:	f043 0220 	orr.w	r2, r3, #32
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0c1      	b.n	8002b56 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80029d2:	2304      	movs	r3, #4
 80029d4:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80029d6:	e01c      	b.n	8002a12 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e0:	d004      	beq.n	80029ec <HAL_ADC_PollForConversion+0x84>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a5e      	ldr	r2, [pc, #376]	; (8002b60 <HAL_ADC_PollForConversion+0x1f8>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_PollForConversion+0x88>
 80029ec:	4b5d      	ldr	r3, [pc, #372]	; (8002b64 <HAL_ADC_PollForConversion+0x1fc>)
 80029ee:	e000      	b.n	80029f2 <HAL_ADC_PollForConversion+0x8a>
 80029f0:	4b5d      	ldr	r3, [pc, #372]	; (8002b68 <HAL_ADC_PollForConversion+0x200>)
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7ff fc2e 	bl	8002254 <LL_ADC_GetMultiDMATransfer>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d007      	beq.n	8002a0e <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	f043 0220 	orr.w	r2, r3, #32
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e0a3      	b.n	8002b56 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002a0e:	2304      	movs	r3, #4
 8002a10:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002a12:	f7ff fa7f 	bl	8001f14 <HAL_GetTick>
 8002a16:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a18:	e021      	b.n	8002a5e <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a20:	d01d      	beq.n	8002a5e <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002a22:	f7ff fa77 	bl	8001f14 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	683a      	ldr	r2, [r7, #0]
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d302      	bcc.n	8002a38 <HAL_ADC_PollForConversion+0xd0>
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d112      	bne.n	8002a5e <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4013      	ands	r3, r2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10b      	bne.n	8002a5e <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a4a:	f043 0204 	orr.w	r2, r3, #4
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e07b      	b.n	8002b56 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	4013      	ands	r3, r2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d0d6      	beq.n	8002a1a <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f7ff fb49 	bl	8002114 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d01c      	beq.n	8002ac2 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	7f5b      	ldrb	r3, [r3, #29]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d118      	bne.n	8002ac2 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b08      	cmp	r3, #8
 8002a9c:	d111      	bne.n	8002ac2 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d105      	bne.n	8002ac2 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a26      	ldr	r2, [pc, #152]	; (8002b60 <HAL_ADC_PollForConversion+0x1f8>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_ADC_PollForConversion+0x178>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a26      	ldr	r2, [pc, #152]	; (8002b6c <HAL_ADC_PollForConversion+0x204>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d002      	beq.n	8002adc <HAL_ADC_PollForConversion+0x174>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	e003      	b.n	8002ae4 <HAL_ADC_PollForConversion+0x17c>
 8002adc:	4b24      	ldr	r3, [pc, #144]	; (8002b70 <HAL_ADC_PollForConversion+0x208>)
 8002ade:	e001      	b.n	8002ae4 <HAL_ADC_PollForConversion+0x17c>
 8002ae0:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	6812      	ldr	r2, [r2, #0]
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d008      	beq.n	8002afe <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d002      	beq.n	8002afe <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d104      	bne.n	8002b08 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e014      	b.n	8002b32 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a14      	ldr	r2, [pc, #80]	; (8002b60 <HAL_ADC_PollForConversion+0x1f8>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d009      	beq.n	8002b26 <HAL_ADC_PollForConversion+0x1be>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a15      	ldr	r2, [pc, #84]	; (8002b6c <HAL_ADC_PollForConversion+0x204>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d002      	beq.n	8002b22 <HAL_ADC_PollForConversion+0x1ba>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	e003      	b.n	8002b2a <HAL_ADC_PollForConversion+0x1c2>
 8002b22:	4b13      	ldr	r3, [pc, #76]	; (8002b70 <HAL_ADC_PollForConversion+0x208>)
 8002b24:	e001      	b.n	8002b2a <HAL_ADC_PollForConversion+0x1c2>
 8002b26:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002b2a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	2b08      	cmp	r3, #8
 8002b36:	d104      	bne.n	8002b42 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	e008      	b.n	8002b54 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002b42:	69bb      	ldr	r3, [r7, #24]
 8002b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d103      	bne.n	8002b54 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	220c      	movs	r2, #12
 8002b52:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002b54:	2300      	movs	r3, #0
}
 8002b56:	4618      	mov	r0, r3
 8002b58:	3720      	adds	r7, #32
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	50000100 	.word	0x50000100
 8002b64:	50000300 	.word	0x50000300
 8002b68:	50000700 	.word	0x50000700
 8002b6c:	50000500 	.word	0x50000500
 8002b70:	50000400 	.word	0x50000400

08002b74 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	370c      	adds	r7, #12
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
	...

08002b90 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b0b6      	sub	sp, #216	; 0xd8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x24>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	f000 bc13 	b.w	80033da <HAL_ADC_ConfigChannel+0x84a>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f7ff fc05 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f040 83f3 	bne.w	80033b4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	461a      	mov	r2, r3
 8002bdc:	f7ff faad 	bl	800213a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fbf3 	bl	80023d0 <LL_ADC_REG_IsConversionOngoing>
 8002bea:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f7ff fbff 	bl	80023f6 <LL_ADC_INJ_IsConversionOngoing>
 8002bf8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002bfc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 81d9 	bne.w	8002fb8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002c06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	f040 81d4 	bne.w	8002fb8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c18:	d10f      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6818      	ldr	r0, [r3, #0]
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	4619      	mov	r1, r3
 8002c26:	f7ff fab4 	bl	8002192 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff fa5b 	bl	80020ee <LL_ADC_SetSamplingTimeCommonConfig>
 8002c38:	e00e      	b.n	8002c58 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6818      	ldr	r0, [r3, #0]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	6819      	ldr	r1, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	461a      	mov	r2, r3
 8002c48:	f7ff faa3 	bl	8002192 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2100      	movs	r1, #0
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fa4b 	bl	80020ee <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	695a      	ldr	r2, [r3, #20]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	08db      	lsrs	r3, r3, #3
 8002c64:	f003 0303 	and.w	r3, r3, #3
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d022      	beq.n	8002cc0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6818      	ldr	r0, [r3, #0]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	6919      	ldr	r1, [r3, #16]
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002c8a:	f7ff f9a5 	bl	8001fd8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6818      	ldr	r0, [r3, #0]
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	6919      	ldr	r1, [r3, #16]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	f7ff f9f1 	bl	8002082 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6818      	ldr	r0, [r3, #0]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	6919      	ldr	r1, [r3, #16]
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	7f1b      	ldrb	r3, [r3, #28]
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_ADC_ConfigChannel+0x126>
 8002cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb4:	e000      	b.n	8002cb8 <HAL_ADC_ConfigChannel+0x128>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f7ff f9fd 	bl	80020b8 <LL_ADC_SetOffsetSaturation>
 8002cbe:	e17b      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff f9aa 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d10a      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x15c>
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	2100      	movs	r1, #0
 8002cdc:	4618      	mov	r0, r3
 8002cde:	f7ff f99f 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	0e9b      	lsrs	r3, r3, #26
 8002ce6:	f003 021f 	and.w	r2, r3, #31
 8002cea:	e01e      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x19a>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff f994 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cfe:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002d02:	fa93 f3a3 	rbit	r3, r3
 8002d06:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002d0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002d0e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002d12:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d101      	bne.n	8002d1e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002d1a:	2320      	movs	r3, #32
 8002d1c:	e004      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002d1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002d22:	fab3 f383 	clz	r3, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d105      	bne.n	8002d42 <HAL_ADC_ConfigChannel+0x1b2>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	0e9b      	lsrs	r3, r3, #26
 8002d3c:	f003 031f 	and.w	r3, r3, #31
 8002d40:	e018      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x1e4>
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d4a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002d4e:	fa93 f3a3 	rbit	r3, r3
 8002d52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002d56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002d5a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002d5e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002d66:	2320      	movs	r3, #32
 8002d68:	e004      	b.n	8002d74 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8002d6a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002d6e:	fab3 f383 	clz	r3, r3
 8002d72:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d106      	bne.n	8002d86 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff f963 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2101      	movs	r1, #1
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7ff f947 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002d92:	4603      	mov	r3, r0
 8002d94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d10a      	bne.n	8002db2 <HAL_ADC_ConfigChannel+0x222>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	2101      	movs	r1, #1
 8002da2:	4618      	mov	r0, r3
 8002da4:	f7ff f93c 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002da8:	4603      	mov	r3, r0
 8002daa:	0e9b      	lsrs	r3, r3, #26
 8002dac:	f003 021f 	and.w	r2, r3, #31
 8002db0:	e01e      	b.n	8002df0 <HAL_ADC_ConfigChannel+0x260>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2101      	movs	r1, #1
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff f931 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002dc8:	fa93 f3a3 	rbit	r3, r3
 8002dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002dd0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002dd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002dd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002de0:	2320      	movs	r3, #32
 8002de2:	e004      	b.n	8002dee <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8002de4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002de8:	fab3 f383 	clz	r3, r3
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d105      	bne.n	8002e08 <HAL_ADC_ConfigChannel+0x278>
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	0e9b      	lsrs	r3, r3, #26
 8002e02:	f003 031f 	and.w	r3, r3, #31
 8002e06:	e018      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x2aa>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e10:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002e14:	fa93 f3a3 	rbit	r3, r3
 8002e18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002e1c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002e20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002e24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002e2c:	2320      	movs	r3, #32
 8002e2e:	e004      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002e30:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002e34:	fab3 f383 	clz	r3, r3
 8002e38:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	d106      	bne.n	8002e4c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	2200      	movs	r2, #0
 8002e44:	2101      	movs	r1, #1
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7ff f900 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2102      	movs	r1, #2
 8002e52:	4618      	mov	r0, r3
 8002e54:	f7ff f8e4 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d10a      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x2e8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2102      	movs	r1, #2
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff f8d9 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	0e9b      	lsrs	r3, r3, #26
 8002e72:	f003 021f 	and.w	r2, r3, #31
 8002e76:	e01e      	b.n	8002eb6 <HAL_ADC_ConfigChannel+0x326>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2102      	movs	r1, #2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff f8ce 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002e8e:	fa93 f3a3 	rbit	r3, r3
 8002e92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002e96:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002e9e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002ea6:	2320      	movs	r3, #32
 8002ea8:	e004      	b.n	8002eb4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002eaa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002eae:	fab3 f383 	clz	r3, r3
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d105      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x33e>
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	0e9b      	lsrs	r3, r3, #26
 8002ec8:	f003 031f 	and.w	r3, r3, #31
 8002ecc:	e016      	b.n	8002efc <HAL_ADC_ConfigChannel+0x36c>
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eda:	fa93 f3a3 	rbit	r3, r3
 8002ede:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002ee0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ee2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002ee6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002eee:	2320      	movs	r3, #32
 8002ef0:	e004      	b.n	8002efc <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8002ef2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d106      	bne.n	8002f0e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2200      	movs	r2, #0
 8002f06:	2102      	movs	r1, #2
 8002f08:	4618      	mov	r0, r3
 8002f0a:	f7ff f89f 	bl	800204c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	2103      	movs	r1, #3
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff f883 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10a      	bne.n	8002f3a <HAL_ADC_ConfigChannel+0x3aa>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	2103      	movs	r1, #3
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff f878 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002f30:	4603      	mov	r3, r0
 8002f32:	0e9b      	lsrs	r3, r3, #26
 8002f34:	f003 021f 	and.w	r2, r3, #31
 8002f38:	e017      	b.n	8002f6a <HAL_ADC_ConfigChannel+0x3da>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2103      	movs	r1, #3
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff f86d 	bl	8002020 <LL_ADC_GetOffsetChannel>
 8002f46:	4603      	mov	r3, r0
 8002f48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f4c:	fa93 f3a3 	rbit	r3, r3
 8002f50:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002f52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f54:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002f5c:	2320      	movs	r3, #32
 8002f5e:	e003      	b.n	8002f68 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002f60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f62:	fab3 f383 	clz	r3, r3
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d105      	bne.n	8002f82 <HAL_ADC_ConfigChannel+0x3f2>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	0e9b      	lsrs	r3, r3, #26
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	e011      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x416>
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002f90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f92:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002f94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e003      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002f9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d106      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	2103      	movs	r1, #3
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7ff f84a 	bl	800204c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff f9cd 	bl	800235c <LL_ADC_IsEnabled>
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f040 813d 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6818      	ldr	r0, [r3, #0]
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	6819      	ldr	r1, [r3, #0]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	f7ff f906 	bl	80021e8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	4aa2      	ldr	r2, [pc, #648]	; (800326c <HAL_ADC_ConfigChannel+0x6dc>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	f040 812e 	bne.w	8003244 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d10b      	bne.n	8003010 <HAL_ADC_ConfigChannel+0x480>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	3301      	adds	r3, #1
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2b09      	cmp	r3, #9
 8003006:	bf94      	ite	ls
 8003008:	2301      	movls	r3, #1
 800300a:	2300      	movhi	r3, #0
 800300c:	b2db      	uxtb	r3, r3
 800300e:	e019      	b.n	8003044 <HAL_ADC_ConfigChannel+0x4b4>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003016:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003018:	fa93 f3a3 	rbit	r3, r3
 800301c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800301e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003020:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003022:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003024:	2b00      	cmp	r3, #0
 8003026:	d101      	bne.n	800302c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003028:	2320      	movs	r3, #32
 800302a:	e003      	b.n	8003034 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800302c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800302e:	fab3 f383 	clz	r3, r3
 8003032:	b2db      	uxtb	r3, r3
 8003034:	3301      	adds	r3, #1
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	2b09      	cmp	r3, #9
 800303c:	bf94      	ite	ls
 800303e:	2301      	movls	r3, #1
 8003040:	2300      	movhi	r3, #0
 8003042:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003044:	2b00      	cmp	r3, #0
 8003046:	d079      	beq.n	800313c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003050:	2b00      	cmp	r3, #0
 8003052:	d107      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x4d4>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	0e9b      	lsrs	r3, r3, #26
 800305a:	3301      	adds	r3, #1
 800305c:	069b      	lsls	r3, r3, #26
 800305e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003062:	e015      	b.n	8003090 <HAL_ADC_ConfigChannel+0x500>
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800306a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800306c:	fa93 f3a3 	rbit	r3, r3
 8003070:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003072:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003074:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800307c:	2320      	movs	r3, #32
 800307e:	e003      	b.n	8003088 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003080:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003082:	fab3 f383 	clz	r3, r3
 8003086:	b2db      	uxtb	r3, r3
 8003088:	3301      	adds	r3, #1
 800308a:	069b      	lsls	r3, r3, #26
 800308c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003098:	2b00      	cmp	r3, #0
 800309a:	d109      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x520>
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	0e9b      	lsrs	r3, r3, #26
 80030a2:	3301      	adds	r3, #1
 80030a4:	f003 031f 	and.w	r3, r3, #31
 80030a8:	2101      	movs	r1, #1
 80030aa:	fa01 f303 	lsl.w	r3, r1, r3
 80030ae:	e017      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x550>
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80030be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80030c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80030c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80030c8:	2320      	movs	r3, #32
 80030ca:	e003      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80030cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80030ce:	fab3 f383 	clz	r3, r3
 80030d2:	b2db      	uxtb	r3, r3
 80030d4:	3301      	adds	r3, #1
 80030d6:	f003 031f 	and.w	r3, r3, #31
 80030da:	2101      	movs	r1, #1
 80030dc:	fa01 f303 	lsl.w	r3, r1, r3
 80030e0:	ea42 0103 	orr.w	r1, r2, r3
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10a      	bne.n	8003106 <HAL_ADC_ConfigChannel+0x576>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	3301      	adds	r3, #1
 80030f8:	f003 021f 	and.w	r2, r3, #31
 80030fc:	4613      	mov	r3, r2
 80030fe:	005b      	lsls	r3, r3, #1
 8003100:	4413      	add	r3, r2
 8003102:	051b      	lsls	r3, r3, #20
 8003104:	e018      	b.n	8003138 <HAL_ADC_ConfigChannel+0x5a8>
 8003106:	683b      	ldr	r3, [r7, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003114:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003116:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d101      	bne.n	8003122 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800311e:	2320      	movs	r3, #32
 8003120:	e003      	b.n	800312a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003122:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003124:	fab3 f383 	clz	r3, r3
 8003128:	b2db      	uxtb	r3, r3
 800312a:	3301      	adds	r3, #1
 800312c:	f003 021f 	and.w	r2, r3, #31
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003138:	430b      	orrs	r3, r1
 800313a:	e07e      	b.n	800323a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003144:	2b00      	cmp	r3, #0
 8003146:	d107      	bne.n	8003158 <HAL_ADC_ConfigChannel+0x5c8>
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	0e9b      	lsrs	r3, r3, #26
 800314e:	3301      	adds	r3, #1
 8003150:	069b      	lsls	r3, r3, #26
 8003152:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003156:	e015      	b.n	8003184 <HAL_ADC_ConfigChannel+0x5f4>
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003168:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800316a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e003      	b.n	800317c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003176:	fab3 f383 	clz	r3, r3
 800317a:	b2db      	uxtb	r3, r3
 800317c:	3301      	adds	r3, #1
 800317e:	069b      	lsls	r3, r3, #26
 8003180:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318c:	2b00      	cmp	r3, #0
 800318e:	d109      	bne.n	80031a4 <HAL_ADC_ConfigChannel+0x614>
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	0e9b      	lsrs	r3, r3, #26
 8003196:	3301      	adds	r3, #1
 8003198:	f003 031f 	and.w	r3, r3, #31
 800319c:	2101      	movs	r1, #1
 800319e:	fa01 f303 	lsl.w	r3, r1, r3
 80031a2:	e017      	b.n	80031d4 <HAL_ADC_ConfigChannel+0x644>
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6a3b      	ldr	r3, [r7, #32]
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	61fb      	str	r3, [r7, #28]
  return result;
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80031b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d101      	bne.n	80031c0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80031bc:	2320      	movs	r3, #32
 80031be:	e003      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	fab3 f383 	clz	r3, r3
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	3301      	adds	r3, #1
 80031ca:	f003 031f 	and.w	r3, r3, #31
 80031ce:	2101      	movs	r1, #1
 80031d0:	fa01 f303 	lsl.w	r3, r1, r3
 80031d4:	ea42 0103 	orr.w	r1, r2, r3
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d10d      	bne.n	8003200 <HAL_ADC_ConfigChannel+0x670>
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	0e9b      	lsrs	r3, r3, #26
 80031ea:	3301      	adds	r3, #1
 80031ec:	f003 021f 	and.w	r2, r3, #31
 80031f0:	4613      	mov	r3, r2
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	4413      	add	r3, r2
 80031f6:	3b1e      	subs	r3, #30
 80031f8:	051b      	lsls	r3, r3, #20
 80031fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80031fe:	e01b      	b.n	8003238 <HAL_ADC_ConfigChannel+0x6a8>
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	fa93 f3a3 	rbit	r3, r3
 800320c:	613b      	str	r3, [r7, #16]
  return result;
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d101      	bne.n	800321c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003218:	2320      	movs	r3, #32
 800321a:	e003      	b.n	8003224 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	fab3 f383 	clz	r3, r3
 8003222:	b2db      	uxtb	r3, r3
 8003224:	3301      	adds	r3, #1
 8003226:	f003 021f 	and.w	r2, r3, #31
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	3b1e      	subs	r3, #30
 8003232:	051b      	lsls	r3, r3, #20
 8003234:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003238:	430b      	orrs	r3, r1
 800323a:	683a      	ldr	r2, [r7, #0]
 800323c:	6892      	ldr	r2, [r2, #8]
 800323e:	4619      	mov	r1, r3
 8003240:	f7fe ffa7 	bl	8002192 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	4b09      	ldr	r3, [pc, #36]	; (8003270 <HAL_ADC_ConfigChannel+0x6e0>)
 800324a:	4013      	ands	r3, r2
 800324c:	2b00      	cmp	r3, #0
 800324e:	f000 80be 	beq.w	80033ce <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800325a:	d004      	beq.n	8003266 <HAL_ADC_ConfigChannel+0x6d6>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a04      	ldr	r2, [pc, #16]	; (8003274 <HAL_ADC_ConfigChannel+0x6e4>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10a      	bne.n	800327c <HAL_ADC_ConfigChannel+0x6ec>
 8003266:	4b04      	ldr	r3, [pc, #16]	; (8003278 <HAL_ADC_ConfigChannel+0x6e8>)
 8003268:	e009      	b.n	800327e <HAL_ADC_ConfigChannel+0x6ee>
 800326a:	bf00      	nop
 800326c:	407f0000 	.word	0x407f0000
 8003270:	80080000 	.word	0x80080000
 8003274:	50000100 	.word	0x50000100
 8003278:	50000300 	.word	0x50000300
 800327c:	4b59      	ldr	r3, [pc, #356]	; (80033e4 <HAL_ADC_ConfigChannel+0x854>)
 800327e:	4618      	mov	r0, r3
 8003280:	f7fe fe9c 	bl	8001fbc <LL_ADC_GetCommonPathInternalCh>
 8003284:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a56      	ldr	r2, [pc, #344]	; (80033e8 <HAL_ADC_ConfigChannel+0x858>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d004      	beq.n	800329c <HAL_ADC_ConfigChannel+0x70c>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a55      	ldr	r2, [pc, #340]	; (80033ec <HAL_ADC_ConfigChannel+0x85c>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d13a      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800329c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d134      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032b0:	d005      	beq.n	80032be <HAL_ADC_ConfigChannel+0x72e>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a4e      	ldr	r2, [pc, #312]	; (80033f0 <HAL_ADC_ConfigChannel+0x860>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	f040 8085 	bne.w	80033c8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032c6:	d004      	beq.n	80032d2 <HAL_ADC_ConfigChannel+0x742>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a49      	ldr	r2, [pc, #292]	; (80033f4 <HAL_ADC_ConfigChannel+0x864>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_ConfigChannel+0x746>
 80032d2:	4a49      	ldr	r2, [pc, #292]	; (80033f8 <HAL_ADC_ConfigChannel+0x868>)
 80032d4:	e000      	b.n	80032d8 <HAL_ADC_ConfigChannel+0x748>
 80032d6:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <HAL_ADC_ConfigChannel+0x854>)
 80032d8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80032dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032e0:	4619      	mov	r1, r3
 80032e2:	4610      	mov	r0, r2
 80032e4:	f7fe fe57 	bl	8001f96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80032e8:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_ADC_ConfigChannel+0x86c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	099b      	lsrs	r3, r3, #6
 80032ee:	4a44      	ldr	r2, [pc, #272]	; (8003400 <HAL_ADC_ConfigChannel+0x870>)
 80032f0:	fba2 2303 	umull	r2, r3, r2, r3
 80032f4:	099b      	lsrs	r3, r3, #6
 80032f6:	1c5a      	adds	r2, r3, #1
 80032f8:	4613      	mov	r3, r2
 80032fa:	005b      	lsls	r3, r3, #1
 80032fc:	4413      	add	r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003302:	e002      	b.n	800330a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	3b01      	subs	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1f9      	bne.n	8003304 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003310:	e05a      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a3b      	ldr	r2, [pc, #236]	; (8003404 <HAL_ADC_ConfigChannel+0x874>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d125      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x7d8>
 800331c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003320:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003324:	2b00      	cmp	r3, #0
 8003326:	d11f      	bne.n	8003368 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a31      	ldr	r2, [pc, #196]	; (80033f4 <HAL_ADC_ConfigChannel+0x864>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d104      	bne.n	800333c <HAL_ADC_ConfigChannel+0x7ac>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a34      	ldr	r2, [pc, #208]	; (8003408 <HAL_ADC_ConfigChannel+0x878>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d047      	beq.n	80033cc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003344:	d004      	beq.n	8003350 <HAL_ADC_ConfigChannel+0x7c0>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a2a      	ldr	r2, [pc, #168]	; (80033f4 <HAL_ADC_ConfigChannel+0x864>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d101      	bne.n	8003354 <HAL_ADC_ConfigChannel+0x7c4>
 8003350:	4a29      	ldr	r2, [pc, #164]	; (80033f8 <HAL_ADC_ConfigChannel+0x868>)
 8003352:	e000      	b.n	8003356 <HAL_ADC_ConfigChannel+0x7c6>
 8003354:	4a23      	ldr	r2, [pc, #140]	; (80033e4 <HAL_ADC_ConfigChannel+0x854>)
 8003356:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800335a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800335e:	4619      	mov	r1, r3
 8003360:	4610      	mov	r0, r2
 8003362:	f7fe fe18 	bl	8001f96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003366:	e031      	b.n	80033cc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a27      	ldr	r2, [pc, #156]	; (800340c <HAL_ADC_ConfigChannel+0x87c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d12d      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003372:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800337a:	2b00      	cmp	r3, #0
 800337c:	d127      	bne.n	80033ce <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <HAL_ADC_ConfigChannel+0x864>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d022      	beq.n	80033ce <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003390:	d004      	beq.n	800339c <HAL_ADC_ConfigChannel+0x80c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a17      	ldr	r2, [pc, #92]	; (80033f4 <HAL_ADC_ConfigChannel+0x864>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_ADC_ConfigChannel+0x810>
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_ADC_ConfigChannel+0x868>)
 800339e:	e000      	b.n	80033a2 <HAL_ADC_ConfigChannel+0x812>
 80033a0:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <HAL_ADC_ConfigChannel+0x854>)
 80033a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80033aa:	4619      	mov	r1, r3
 80033ac:	4610      	mov	r0, r2
 80033ae:	f7fe fdf2 	bl	8001f96 <LL_ADC_SetCommonPathInternalCh>
 80033b2:	e00c      	b.n	80033ce <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b8:	f043 0220 	orr.w	r2, r3, #32
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80033c0:	2301      	movs	r3, #1
 80033c2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80033c6:	e002      	b.n	80033ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033c8:	bf00      	nop
 80033ca:	e000      	b.n	80033ce <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033cc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80033d6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80033da:	4618      	mov	r0, r3
 80033dc:	37d8      	adds	r7, #216	; 0xd8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	50000700 	.word	0x50000700
 80033e8:	c3210000 	.word	0xc3210000
 80033ec:	90c00010 	.word	0x90c00010
 80033f0:	50000600 	.word	0x50000600
 80033f4:	50000100 	.word	0x50000100
 80033f8:	50000300 	.word	0x50000300
 80033fc:	200000ec 	.word	0x200000ec
 8003400:	053e2d63 	.word	0x053e2d63
 8003404:	c7520000 	.word	0xc7520000
 8003408:	50000500 	.word	0x50000500
 800340c:	cb840000 	.word	0xcb840000

08003410 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4618      	mov	r0, r3
 800341e:	f7fe ff9d 	bl	800235c <LL_ADC_IsEnabled>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d14d      	bne.n	80034c4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	689a      	ldr	r2, [r3, #8]
 800342e:	4b28      	ldr	r3, [pc, #160]	; (80034d0 <ADC_Enable+0xc0>)
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00d      	beq.n	8003452 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800343a:	f043 0210 	orr.w	r2, r3, #16
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003446:	f043 0201 	orr.w	r2, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e039      	b.n	80034c6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4618      	mov	r0, r3
 8003458:	f7fe ff58 	bl	800230c <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800345c:	f7fe fd5a 	bl	8001f14 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003462:	e028      	b.n	80034b6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe ff77 	bl	800235c <LL_ADC_IsEnabled>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d104      	bne.n	800347e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f7fe ff47 	bl	800230c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800347e:	f7fe fd49 	bl	8001f14 <HAL_GetTick>
 8003482:	4602      	mov	r2, r0
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	2b02      	cmp	r3, #2
 800348a:	d914      	bls.n	80034b6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0301 	and.w	r3, r3, #1
 8003496:	2b01      	cmp	r3, #1
 8003498:	d00d      	beq.n	80034b6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800349e:	f043 0210 	orr.w	r2, r3, #16
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034aa:	f043 0201 	orr.w	r2, r3, #1
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e007      	b.n	80034c6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d1cf      	bne.n	8003464 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	8000003f 	.word	0x8000003f

080034d4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fe ff4e 	bl	8002382 <LL_ADC_IsDisableOngoing>
 80034e6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fe ff35 	bl	800235c <LL_ADC_IsEnabled>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d047      	beq.n	8003588 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d144      	bne.n	8003588 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	f003 030d 	and.w	r3, r3, #13
 8003508:	2b01      	cmp	r3, #1
 800350a:	d10c      	bne.n	8003526 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4618      	mov	r0, r3
 8003512:	f7fe ff0f 	bl	8002334 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	2203      	movs	r2, #3
 800351c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800351e:	f7fe fcf9 	bl	8001f14 <HAL_GetTick>
 8003522:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003524:	e029      	b.n	800357a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800352a:	f043 0210 	orr.w	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003536:	f043 0201 	orr.w	r2, r3, #1
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e023      	b.n	800358a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003542:	f7fe fce7 	bl	8001f14 <HAL_GetTick>
 8003546:	4602      	mov	r2, r0
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	2b02      	cmp	r3, #2
 800354e:	d914      	bls.n	800357a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 0301 	and.w	r3, r3, #1
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00d      	beq.n	800357a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003562:	f043 0210 	orr.w	r2, r3, #16
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356e:	f043 0201 	orr.w	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e007      	b.n	800358a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d1dc      	bne.n	8003542 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <LL_ADC_StartCalibration>:
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
 800359a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80035a4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	609a      	str	r2, [r3, #8]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr

080035c4 <LL_ADC_IsCalibrationOnGoing>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b083      	sub	sp, #12
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80035d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035d8:	d101      	bne.n	80035de <LL_ADC_IsCalibrationOnGoing+0x1a>
 80035da:	2301      	movs	r3, #1
 80035dc:	e000      	b.n	80035e0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80035de:	2300      	movs	r3, #0
}
 80035e0:	4618      	mov	r0, r3
 80035e2:	370c      	adds	r7, #12
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr

080035ec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_ADCEx_Calibration_Start+0x1c>
 8003604:	2302      	movs	r3, #2
 8003606:	e04d      	b.n	80036a4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7ff ff5f 	bl	80034d4 <ADC_Disable>
 8003616:	4603      	mov	r3, r0
 8003618:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800361a:	7bfb      	ldrb	r3, [r7, #15]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d136      	bne.n	800368e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003624:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003628:	f023 0302 	bic.w	r3, r3, #2
 800362c:	f043 0202 	orr.w	r2, r3, #2
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6839      	ldr	r1, [r7, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff ffa9 	bl	8003592 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003640:	e014      	b.n	800366c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	3301      	adds	r3, #1
 8003646:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	4a18      	ldr	r2, [pc, #96]	; (80036ac <HAL_ADCEx_Calibration_Start+0xc0>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d90d      	bls.n	800366c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003654:	f023 0312 	bic.w	r3, r3, #18
 8003658:	f043 0210 	orr.w	r2, r3, #16
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e01b      	b.n	80036a4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff ffa7 	bl	80035c4 <LL_ADC_IsCalibrationOnGoing>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e2      	bne.n	8003642 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003680:	f023 0303 	bic.w	r3, r3, #3
 8003684:	f043 0201 	orr.w	r2, r3, #1
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	65da      	str	r2, [r3, #92]	; 0x5c
 800368c:	e005      	b.n	800369a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003692:	f043 0210 	orr.w	r2, r3, #16
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80036a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3710      	adds	r7, #16
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	0004de01 	.word	0x0004de01

080036b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036b0:	b480      	push	{r7}
 80036b2:	b085      	sub	sp, #20
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f003 0307 	and.w	r3, r3, #7
 80036be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036c0:	4b0c      	ldr	r3, [pc, #48]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036cc:	4013      	ands	r3, r2
 80036ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036e2:	4a04      	ldr	r2, [pc, #16]	; (80036f4 <__NVIC_SetPriorityGrouping+0x44>)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	60d3      	str	r3, [r2, #12]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036f8:	b480      	push	{r7}
 80036fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036fc:	4b04      	ldr	r3, [pc, #16]	; (8003710 <__NVIC_GetPriorityGrouping+0x18>)
 80036fe:	68db      	ldr	r3, [r3, #12]
 8003700:	0a1b      	lsrs	r3, r3, #8
 8003702:	f003 0307 	and.w	r3, r3, #7
}
 8003706:	4618      	mov	r0, r3
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr
 8003710:	e000ed00 	.word	0xe000ed00

08003714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	4603      	mov	r3, r0
 800371c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800371e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	db0b      	blt.n	800373e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4907      	ldr	r1, [pc, #28]	; (800374c <__NVIC_EnableIRQ+0x38>)
 800372e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003732:	095b      	lsrs	r3, r3, #5
 8003734:	2001      	movs	r0, #1
 8003736:	fa00 f202 	lsl.w	r2, r0, r2
 800373a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr
 800374a:	bf00      	nop
 800374c:	e000e100 	.word	0xe000e100

08003750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	4603      	mov	r3, r0
 8003758:	6039      	str	r1, [r7, #0]
 800375a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800375c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003760:	2b00      	cmp	r3, #0
 8003762:	db0a      	blt.n	800377a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	b2da      	uxtb	r2, r3
 8003768:	490c      	ldr	r1, [pc, #48]	; (800379c <__NVIC_SetPriority+0x4c>)
 800376a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800376e:	0112      	lsls	r2, r2, #4
 8003770:	b2d2      	uxtb	r2, r2
 8003772:	440b      	add	r3, r1
 8003774:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003778:	e00a      	b.n	8003790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4908      	ldr	r1, [pc, #32]	; (80037a0 <__NVIC_SetPriority+0x50>)
 8003780:	79fb      	ldrb	r3, [r7, #7]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	3b04      	subs	r3, #4
 8003788:	0112      	lsls	r2, r2, #4
 800378a:	b2d2      	uxtb	r2, r2
 800378c:	440b      	add	r3, r1
 800378e:	761a      	strb	r2, [r3, #24]
}
 8003790:	bf00      	nop
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr
 800379c:	e000e100 	.word	0xe000e100
 80037a0:	e000ed00 	.word	0xe000ed00

080037a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b089      	sub	sp, #36	; 0x24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	60f8      	str	r0, [r7, #12]
 80037ac:	60b9      	str	r1, [r7, #8]
 80037ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f003 0307 	and.w	r3, r3, #7
 80037b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	f1c3 0307 	rsb	r3, r3, #7
 80037be:	2b04      	cmp	r3, #4
 80037c0:	bf28      	it	cs
 80037c2:	2304      	movcs	r3, #4
 80037c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	3304      	adds	r3, #4
 80037ca:	2b06      	cmp	r3, #6
 80037cc:	d902      	bls.n	80037d4 <NVIC_EncodePriority+0x30>
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	3b03      	subs	r3, #3
 80037d2:	e000      	b.n	80037d6 <NVIC_EncodePriority+0x32>
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43da      	mvns	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	401a      	ands	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037ec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	fa01 f303 	lsl.w	r3, r1, r3
 80037f6:	43d9      	mvns	r1, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037fc:	4313      	orrs	r3, r2
         );
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3724      	adds	r7, #36	; 0x24
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3b01      	subs	r3, #1
 8003818:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800381c:	d301      	bcc.n	8003822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800381e:	2301      	movs	r3, #1
 8003820:	e00f      	b.n	8003842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003822:	4a0a      	ldr	r2, [pc, #40]	; (800384c <SysTick_Config+0x40>)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3b01      	subs	r3, #1
 8003828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800382a:	210f      	movs	r1, #15
 800382c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003830:	f7ff ff8e 	bl	8003750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <SysTick_Config+0x40>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800383a:	4b04      	ldr	r3, [pc, #16]	; (800384c <SysTick_Config+0x40>)
 800383c:	2207      	movs	r2, #7
 800383e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	e000e010 	.word	0xe000e010

08003850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7ff ff29 	bl	80036b0 <__NVIC_SetPriorityGrouping>
}
 800385e:	bf00      	nop
 8003860:	3708      	adds	r7, #8
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b086      	sub	sp, #24
 800386a:	af00      	add	r7, sp, #0
 800386c:	4603      	mov	r3, r0
 800386e:	60b9      	str	r1, [r7, #8]
 8003870:	607a      	str	r2, [r7, #4]
 8003872:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003874:	f7ff ff40 	bl	80036f8 <__NVIC_GetPriorityGrouping>
 8003878:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	68b9      	ldr	r1, [r7, #8]
 800387e:	6978      	ldr	r0, [r7, #20]
 8003880:	f7ff ff90 	bl	80037a4 <NVIC_EncodePriority>
 8003884:	4602      	mov	r2, r0
 8003886:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff5f 	bl	8003750 <__NVIC_SetPriority>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	4603      	mov	r3, r0
 80038a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff ff33 	bl	8003714 <__NVIC_EnableIRQ>
}
 80038ae:	bf00      	nop
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}

080038b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038b6:	b580      	push	{r7, lr}
 80038b8:	b082      	sub	sp, #8
 80038ba:	af00      	add	r7, sp, #0
 80038bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f7ff ffa4 	bl	800380c <SysTick_Config>
 80038c4:	4603      	mov	r3, r0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3708      	adds	r7, #8
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}

080038ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ce:	b480      	push	{r7}
 80038d0:	b085      	sub	sp, #20
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038d6:	2300      	movs	r3, #0
 80038d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d005      	beq.n	80038f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2204      	movs	r2, #4
 80038ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	73fb      	strb	r3, [r7, #15]
 80038f0:	e037      	b.n	8003962 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	681a      	ldr	r2, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f022 020e 	bic.w	r2, r2, #14
 8003900:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800390c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003910:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0201 	bic.w	r2, r2, #1
 8003920:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003926:	f003 021f 	and.w	r2, r3, #31
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2101      	movs	r1, #1
 8003930:	fa01 f202 	lsl.w	r2, r1, r2
 8003934:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800393e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003944:	2b00      	cmp	r3, #0
 8003946:	d00c      	beq.n	8003962 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003952:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003956:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395c:	687a      	ldr	r2, [r7, #4]
 800395e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003960:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2201      	movs	r2, #1
 8003966:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8003972:	7bfb      	ldrb	r3, [r7, #15]
}
 8003974:	4618      	mov	r0, r3
 8003976:	3714      	adds	r7, #20
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b02      	cmp	r3, #2
 8003996:	d00d      	beq.n	80039b4 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2204      	movs	r2, #4
 800399c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
 80039b2:	e047      	b.n	8003a44 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f022 020e 	bic.w	r2, r2, #14
 80039c2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0201 	bic.w	r2, r2, #1
 80039d2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039de:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80039e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e8:	f003 021f 	and.w	r2, r3, #31
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2101      	movs	r1, #1
 80039f2:	fa01 f202 	lsl.w	r2, r1, r2
 80039f6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003a00:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00c      	beq.n	8003a24 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a18:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003a22:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d003      	beq.n	8003a44 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	4798      	blx	r3
    }
  }
  return status;
 8003a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3710      	adds	r7, #16
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}
	...

08003a50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
 8003a58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a5e:	e15a      	b.n	8003d16 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	2101      	movs	r1, #1
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	f000 814c 	beq.w	8003d10 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f003 0303 	and.w	r3, r3, #3
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d005      	beq.n	8003a90 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003a8c:	2b02      	cmp	r3, #2
 8003a8e:	d130      	bne.n	8003af2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	005b      	lsls	r3, r3, #1
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	68da      	ldr	r2, [r3, #12]
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	005b      	lsls	r3, r3, #1
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	693a      	ldr	r2, [r7, #16]
 8003abe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	fa02 f303 	lsl.w	r3, r2, r3
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	091b      	lsrs	r3, r3, #4
 8003adc:	f003 0201 	and.w	r2, r3, #1
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae6:	693a      	ldr	r2, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	f003 0303 	and.w	r3, r3, #3
 8003afa:	2b03      	cmp	r3, #3
 8003afc:	d017      	beq.n	8003b2e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68db      	ldr	r3, [r3, #12]
 8003b02:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	005b      	lsls	r3, r3, #1
 8003b08:	2203      	movs	r2, #3
 8003b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0e:	43db      	mvns	r3, r3
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	4013      	ands	r3, r2
 8003b14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	005b      	lsls	r3, r3, #1
 8003b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b22:	693a      	ldr	r2, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d123      	bne.n	8003b82 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	08da      	lsrs	r2, r3, #3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	3208      	adds	r2, #8
 8003b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003b46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f003 0307 	and.w	r3, r3, #7
 8003b4e:	009b      	lsls	r3, r3, #2
 8003b50:	220f      	movs	r2, #15
 8003b52:	fa02 f303 	lsl.w	r3, r2, r3
 8003b56:	43db      	mvns	r3, r3
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4013      	ands	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	691a      	ldr	r2, [r3, #16]
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	f003 0307 	and.w	r3, r3, #7
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	693a      	ldr	r2, [r7, #16]
 8003b70:	4313      	orrs	r3, r2
 8003b72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	08da      	lsrs	r2, r3, #3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3208      	adds	r2, #8
 8003b7c:	6939      	ldr	r1, [r7, #16]
 8003b7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	005b      	lsls	r3, r3, #1
 8003b8c:	2203      	movs	r2, #3
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	43db      	mvns	r3, r3
 8003b94:	693a      	ldr	r2, [r7, #16]
 8003b96:	4013      	ands	r3, r2
 8003b98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	f003 0203 	and.w	r2, r3, #3
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8003baa:	693a      	ldr	r2, [r7, #16]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	693a      	ldr	r2, [r7, #16]
 8003bb4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	f000 80a6 	beq.w	8003d10 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bc4:	4b5b      	ldr	r3, [pc, #364]	; (8003d34 <HAL_GPIO_Init+0x2e4>)
 8003bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bc8:	4a5a      	ldr	r2, [pc, #360]	; (8003d34 <HAL_GPIO_Init+0x2e4>)
 8003bca:	f043 0301 	orr.w	r3, r3, #1
 8003bce:	6613      	str	r3, [r2, #96]	; 0x60
 8003bd0:	4b58      	ldr	r3, [pc, #352]	; (8003d34 <HAL_GPIO_Init+0x2e4>)
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd4:	f003 0301 	and.w	r3, r3, #1
 8003bd8:	60bb      	str	r3, [r7, #8]
 8003bda:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003bdc:	4a56      	ldr	r2, [pc, #344]	; (8003d38 <HAL_GPIO_Init+0x2e8>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	089b      	lsrs	r3, r3, #2
 8003be2:	3302      	adds	r3, #2
 8003be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003be8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	f003 0303 	and.w	r3, r3, #3
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	220f      	movs	r2, #15
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	43db      	mvns	r3, r3
 8003bfa:	693a      	ldr	r2, [r7, #16]
 8003bfc:	4013      	ands	r3, r2
 8003bfe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003c06:	d01f      	beq.n	8003c48 <HAL_GPIO_Init+0x1f8>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a4c      	ldr	r2, [pc, #304]	; (8003d3c <HAL_GPIO_Init+0x2ec>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d019      	beq.n	8003c44 <HAL_GPIO_Init+0x1f4>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a4b      	ldr	r2, [pc, #300]	; (8003d40 <HAL_GPIO_Init+0x2f0>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d013      	beq.n	8003c40 <HAL_GPIO_Init+0x1f0>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a4a      	ldr	r2, [pc, #296]	; (8003d44 <HAL_GPIO_Init+0x2f4>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d00d      	beq.n	8003c3c <HAL_GPIO_Init+0x1ec>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	4a49      	ldr	r2, [pc, #292]	; (8003d48 <HAL_GPIO_Init+0x2f8>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d007      	beq.n	8003c38 <HAL_GPIO_Init+0x1e8>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4a48      	ldr	r2, [pc, #288]	; (8003d4c <HAL_GPIO_Init+0x2fc>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d101      	bne.n	8003c34 <HAL_GPIO_Init+0x1e4>
 8003c30:	2305      	movs	r3, #5
 8003c32:	e00a      	b.n	8003c4a <HAL_GPIO_Init+0x1fa>
 8003c34:	2306      	movs	r3, #6
 8003c36:	e008      	b.n	8003c4a <HAL_GPIO_Init+0x1fa>
 8003c38:	2304      	movs	r3, #4
 8003c3a:	e006      	b.n	8003c4a <HAL_GPIO_Init+0x1fa>
 8003c3c:	2303      	movs	r3, #3
 8003c3e:	e004      	b.n	8003c4a <HAL_GPIO_Init+0x1fa>
 8003c40:	2302      	movs	r3, #2
 8003c42:	e002      	b.n	8003c4a <HAL_GPIO_Init+0x1fa>
 8003c44:	2301      	movs	r3, #1
 8003c46:	e000      	b.n	8003c4a <HAL_GPIO_Init+0x1fa>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	f002 0203 	and.w	r2, r2, #3
 8003c50:	0092      	lsls	r2, r2, #2
 8003c52:	4093      	lsls	r3, r2
 8003c54:	693a      	ldr	r2, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c5a:	4937      	ldr	r1, [pc, #220]	; (8003d38 <HAL_GPIO_Init+0x2e8>)
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	089b      	lsrs	r3, r3, #2
 8003c60:	3302      	adds	r3, #2
 8003c62:	693a      	ldr	r2, [r7, #16]
 8003c64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	43db      	mvns	r3, r3
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	4013      	ands	r3, r2
 8003c76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d003      	beq.n	8003c8c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003c8c:	4a30      	ldr	r2, [pc, #192]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003c92:	4b2f      	ldr	r3, [pc, #188]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	43db      	mvns	r3, r3
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d003      	beq.n	8003cb6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003cb6:	4a26      	ldr	r2, [pc, #152]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003cbc:	4b24      	ldr	r3, [pc, #144]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	43db      	mvns	r3, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4013      	ands	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003cd8:	693a      	ldr	r2, [r7, #16]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003ce0:	4a1b      	ldr	r2, [pc, #108]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003ce6:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d003      	beq.n	8003d0a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003d02:	693a      	ldr	r2, [r7, #16]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003d0a:	4a11      	ldr	r2, [pc, #68]	; (8003d50 <HAL_GPIO_Init+0x300>)
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	3301      	adds	r3, #1
 8003d14:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	f47f ae9d 	bne.w	8003a60 <HAL_GPIO_Init+0x10>
  }
}
 8003d26:	bf00      	nop
 8003d28:	bf00      	nop
 8003d2a:	371c      	adds	r7, #28
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	40021000 	.word	0x40021000
 8003d38:	40010000 	.word	0x40010000
 8003d3c:	48000400 	.word	0x48000400
 8003d40:	48000800 	.word	0x48000800
 8003d44:	48000c00 	.word	0x48000c00
 8003d48:	48001000 	.word	0x48001000
 8003d4c:	48001400 	.word	0x48001400
 8003d50:	40010400 	.word	0x40010400

08003d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	807b      	strh	r3, [r7, #2]
 8003d60:	4613      	mov	r3, r2
 8003d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003d64:	787b      	ldrb	r3, [r7, #1]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d003      	beq.n	8003d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003d70:	e002      	b.n	8003d78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003d72:	887a      	ldrh	r2, [r7, #2]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b082      	sub	sp, #8
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003d8e:	4b08      	ldr	r3, [pc, #32]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d90:	695a      	ldr	r2, [r3, #20]
 8003d92:	88fb      	ldrh	r3, [r7, #6]
 8003d94:	4013      	ands	r3, r2
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d9a:	4a05      	ldr	r2, [pc, #20]	; (8003db0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d9c:	88fb      	ldrh	r3, [r7, #6]
 8003d9e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003da0:	88fb      	ldrh	r3, [r7, #6]
 8003da2:	4618      	mov	r0, r3
 8003da4:	f7fd f8f8 	bl	8000f98 <HAL_GPIO_EXTI_Callback>
  }
}
 8003da8:	bf00      	nop
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40010400 	.word	0x40010400

08003db4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d141      	bne.n	8003e46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003dc2:	4b4b      	ldr	r3, [pc, #300]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dce:	d131      	bne.n	8003e34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003dd0:	4b47      	ldr	r3, [pc, #284]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dd6:	4a46      	ldr	r2, [pc, #280]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003de0:	4b43      	ldr	r3, [pc, #268]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003de8:	4a41      	ldr	r2, [pc, #260]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003dea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003df0:	4b40      	ldr	r3, [pc, #256]	; (8003ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2232      	movs	r2, #50	; 0x32
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	4a3f      	ldr	r2, [pc, #252]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003dfc:	fba2 2303 	umull	r2, r3, r2, r3
 8003e00:	0c9b      	lsrs	r3, r3, #18
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e06:	e002      	b.n	8003e0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e0e:	4b38      	ldr	r3, [pc, #224]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e10:	695b      	ldr	r3, [r3, #20]
 8003e12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e1a:	d102      	bne.n	8003e22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f2      	bne.n	8003e08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003e22:	4b33      	ldr	r3, [pc, #204]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e24:	695b      	ldr	r3, [r3, #20]
 8003e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2e:	d158      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e057      	b.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e3a:	4a2d      	ldr	r2, [pc, #180]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003e44:	e04d      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e4c:	d141      	bne.n	8003ed2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003e4e:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e5a:	d131      	bne.n	8003ec0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003e5c:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e62:	4a23      	ldr	r2, [pc, #140]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003e6c:	4b20      	ldr	r3, [pc, #128]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003e74:	4a1e      	ldr	r2, [pc, #120]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003e7c:	4b1d      	ldr	r3, [pc, #116]	; (8003ef4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2232      	movs	r2, #50	; 0x32
 8003e82:	fb02 f303 	mul.w	r3, r2, r3
 8003e86:	4a1c      	ldr	r2, [pc, #112]	; (8003ef8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003e88:	fba2 2303 	umull	r2, r3, r2, r3
 8003e8c:	0c9b      	lsrs	r3, r3, #18
 8003e8e:	3301      	adds	r3, #1
 8003e90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e92:	e002      	b.n	8003e9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3b01      	subs	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ea6:	d102      	bne.n	8003eae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f2      	bne.n	8003e94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d112      	bne.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e011      	b.n	8003ee4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ec0:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ecc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ed0:	e007      	b.n	8003ee2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003ed2:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003edc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ee0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ee2:	2300      	movs	r3, #0
}
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	3714      	adds	r7, #20
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	200000ec 	.word	0x200000ec
 8003ef8:	431bde83 	.word	0x431bde83

08003efc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003efc:	b480      	push	{r7}
 8003efe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003f00:	4b05      	ldr	r3, [pc, #20]	; (8003f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	4a04      	ldr	r2, [pc, #16]	; (8003f18 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003f06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f0a:	6093      	str	r3, [r2, #8]
}
 8003f0c:	bf00      	nop
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40007000 	.word	0x40007000

08003f1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b088      	sub	sp, #32
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e306      	b.n	800453c <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0301 	and.w	r3, r3, #1
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d075      	beq.n	8004026 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003f3a:	4b97      	ldr	r3, [pc, #604]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003f44:	4b94      	ldr	r3, [pc, #592]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0303 	and.w	r3, r3, #3
 8003f4c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003f4e:	69bb      	ldr	r3, [r7, #24]
 8003f50:	2b0c      	cmp	r3, #12
 8003f52:	d102      	bne.n	8003f5a <HAL_RCC_OscConfig+0x3e>
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	2b03      	cmp	r3, #3
 8003f58:	d002      	beq.n	8003f60 <HAL_RCC_OscConfig+0x44>
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	2b08      	cmp	r3, #8
 8003f5e:	d10b      	bne.n	8003f78 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f60:	4b8d      	ldr	r3, [pc, #564]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d05b      	beq.n	8004024 <HAL_RCC_OscConfig+0x108>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d157      	bne.n	8004024 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e2e1      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x74>
 8003f82:	4b85      	ldr	r3, [pc, #532]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a84      	ldr	r2, [pc, #528]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f8c:	6013      	str	r3, [r2, #0]
 8003f8e:	e01d      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f98:	d10c      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x98>
 8003f9a:	4b7f      	ldr	r3, [pc, #508]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a7e      	ldr	r2, [pc, #504]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	4b7c      	ldr	r3, [pc, #496]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a7b      	ldr	r2, [pc, #492]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb0:	6013      	str	r3, [r2, #0]
 8003fb2:	e00b      	b.n	8003fcc <HAL_RCC_OscConfig+0xb0>
 8003fb4:	4b78      	ldr	r3, [pc, #480]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a77      	ldr	r2, [pc, #476]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fbe:	6013      	str	r3, [r2, #0]
 8003fc0:	4b75      	ldr	r3, [pc, #468]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a74      	ldr	r2, [pc, #464]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003fc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d013      	beq.n	8003ffc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd4:	f7fd ff9e 	bl	8001f14 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fda:	e008      	b.n	8003fee <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003fdc:	f7fd ff9a 	bl	8001f14 <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	2b64      	cmp	r3, #100	; 0x64
 8003fe8:	d901      	bls.n	8003fee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e2a6      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fee:	4b6a      	ldr	r3, [pc, #424]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d0f0      	beq.n	8003fdc <HAL_RCC_OscConfig+0xc0>
 8003ffa:	e014      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffc:	f7fd ff8a 	bl	8001f14 <HAL_GetTick>
 8004000:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004002:	e008      	b.n	8004016 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004004:	f7fd ff86 	bl	8001f14 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e292      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004016:	4b60      	ldr	r3, [pc, #384]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1f0      	bne.n	8004004 <HAL_RCC_OscConfig+0xe8>
 8004022:	e000      	b.n	8004026 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004024:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0302 	and.w	r3, r3, #2
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004032:	4b59      	ldr	r3, [pc, #356]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800403c:	4b56      	ldr	r3, [pc, #344]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0303 	and.w	r3, r3, #3
 8004044:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004046:	69bb      	ldr	r3, [r7, #24]
 8004048:	2b0c      	cmp	r3, #12
 800404a:	d102      	bne.n	8004052 <HAL_RCC_OscConfig+0x136>
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d002      	beq.n	8004058 <HAL_RCC_OscConfig+0x13c>
 8004052:	69bb      	ldr	r3, [r7, #24]
 8004054:	2b04      	cmp	r3, #4
 8004056:	d11f      	bne.n	8004098 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004058:	4b4f      	ldr	r3, [pc, #316]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_OscConfig+0x154>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e265      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004070:	4b49      	ldr	r3, [pc, #292]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	061b      	lsls	r3, r3, #24
 800407e:	4946      	ldr	r1, [pc, #280]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004080:	4313      	orrs	r3, r2
 8004082:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004084:	4b45      	ldr	r3, [pc, #276]	; (800419c <HAL_RCC_OscConfig+0x280>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fef7 	bl	8001e7c <HAL_InitTick>
 800408e:	4603      	mov	r3, r0
 8004090:	2b00      	cmp	r3, #0
 8004092:	d043      	beq.n	800411c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e251      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d023      	beq.n	80040e8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b3d      	ldr	r3, [pc, #244]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a3c      	ldr	r2, [pc, #240]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ac:	f7fd ff32 	bl	8001f14 <HAL_GetTick>
 80040b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040b2:	e008      	b.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b4:	f7fd ff2e 	bl	8001f14 <HAL_GetTick>
 80040b8:	4602      	mov	r2, r0
 80040ba:	693b      	ldr	r3, [r7, #16]
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b02      	cmp	r3, #2
 80040c0:	d901      	bls.n	80040c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80040c2:	2303      	movs	r3, #3
 80040c4:	e23a      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80040c6:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d0f0      	beq.n	80040b4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b31      	ldr	r3, [pc, #196]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	061b      	lsls	r3, r3, #24
 80040e0:	492d      	ldr	r1, [pc, #180]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	604b      	str	r3, [r1, #4]
 80040e6:	e01a      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e8:	4b2b      	ldr	r3, [pc, #172]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	4a2a      	ldr	r2, [pc, #168]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 80040ee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f4:	f7fd ff0e 	bl	8001f14 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040fc:	f7fd ff0a 	bl	8001f14 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b02      	cmp	r3, #2
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e216      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800410e:	4b22      	ldr	r3, [pc, #136]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0x1e0>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b00      	cmp	r3, #0
 8004128:	d041      	beq.n	80041ae <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d01c      	beq.n	800416c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004132:	4b19      	ldr	r3, [pc, #100]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004138:	4a17      	ldr	r2, [pc, #92]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fd fee7 	bl	8001f14 <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004148:	e008      	b.n	800415c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800414a:	f7fd fee3 	bl	8001f14 <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	2b02      	cmp	r3, #2
 8004156:	d901      	bls.n	800415c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004158:	2303      	movs	r3, #3
 800415a:	e1ef      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800415c:	4b0e      	ldr	r3, [pc, #56]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800415e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004162:	f003 0302 	and.w	r3, r3, #2
 8004166:	2b00      	cmp	r3, #0
 8004168:	d0ef      	beq.n	800414a <HAL_RCC_OscConfig+0x22e>
 800416a:	e020      	b.n	80041ae <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800416c:	4b0a      	ldr	r3, [pc, #40]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 800416e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004172:	4a09      	ldr	r2, [pc, #36]	; (8004198 <HAL_RCC_OscConfig+0x27c>)
 8004174:	f023 0301 	bic.w	r3, r3, #1
 8004178:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800417c:	f7fd feca 	bl	8001f14 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004182:	e00d      	b.n	80041a0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004184:	f7fd fec6 	bl	8001f14 <HAL_GetTick>
 8004188:	4602      	mov	r2, r0
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	1ad3      	subs	r3, r2, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d906      	bls.n	80041a0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004192:	2303      	movs	r3, #3
 8004194:	e1d2      	b.n	800453c <HAL_RCC_OscConfig+0x620>
 8004196:	bf00      	nop
 8004198:	40021000 	.word	0x40021000
 800419c:	200000f0 	.word	0x200000f0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80041a0:	4b8c      	ldr	r3, [pc, #560]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1ea      	bne.n	8004184 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	f000 80a6 	beq.w	8004308 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80041c0:	4b84      	ldr	r3, [pc, #528]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d101      	bne.n	80041d0 <HAL_RCC_OscConfig+0x2b4>
 80041cc:	2301      	movs	r3, #1
 80041ce:	e000      	b.n	80041d2 <HAL_RCC_OscConfig+0x2b6>
 80041d0:	2300      	movs	r3, #0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d00d      	beq.n	80041f2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041d6:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041da:	4a7e      	ldr	r2, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041e0:	6593      	str	r3, [r2, #88]	; 0x58
 80041e2:	4b7c      	ldr	r3, [pc, #496]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80041e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80041ee:	2301      	movs	r3, #1
 80041f0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80041f2:	4b79      	ldr	r3, [pc, #484]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d118      	bne.n	8004230 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80041fe:	4b76      	ldr	r3, [pc, #472]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a75      	ldr	r2, [pc, #468]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004204:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004208:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800420a:	f7fd fe83 	bl	8001f14 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004212:	f7fd fe7f 	bl	8001f14 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e18b      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004224:	4b6c      	ldr	r3, [pc, #432]	; (80043d8 <HAL_RCC_OscConfig+0x4bc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422c:	2b00      	cmp	r3, #0
 800422e:	d0f0      	beq.n	8004212 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d108      	bne.n	800424a <HAL_RCC_OscConfig+0x32e>
 8004238:	4b66      	ldr	r3, [pc, #408]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800423a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800423e:	4a65      	ldr	r2, [pc, #404]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004240:	f043 0301 	orr.w	r3, r3, #1
 8004244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004248:	e024      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	2b05      	cmp	r3, #5
 8004250:	d110      	bne.n	8004274 <HAL_RCC_OscConfig+0x358>
 8004252:	4b60      	ldr	r3, [pc, #384]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004258:	4a5e      	ldr	r2, [pc, #376]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800425a:	f043 0304 	orr.w	r3, r3, #4
 800425e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004262:	4b5c      	ldr	r3, [pc, #368]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004268:	4a5a      	ldr	r2, [pc, #360]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800426a:	f043 0301 	orr.w	r3, r3, #1
 800426e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004272:	e00f      	b.n	8004294 <HAL_RCC_OscConfig+0x378>
 8004274:	4b57      	ldr	r3, [pc, #348]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800427a:	4a56      	ldr	r2, [pc, #344]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800427c:	f023 0301 	bic.w	r3, r3, #1
 8004280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004284:	4b53      	ldr	r3, [pc, #332]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d016      	beq.n	80042ca <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800429c:	f7fd fe3a 	bl	8001f14 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042a2:	e00a      	b.n	80042ba <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042a4:	f7fd fe36 	bl	8001f14 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d901      	bls.n	80042ba <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80042b6:	2303      	movs	r3, #3
 80042b8:	e140      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80042ba:	4b46      	ldr	r3, [pc, #280]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d0ed      	beq.n	80042a4 <HAL_RCC_OscConfig+0x388>
 80042c8:	e015      	b.n	80042f6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ca:	f7fd fe23 	bl	8001f14 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042d0:	e00a      	b.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042d2:	f7fd fe1f 	bl	8001f14 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d901      	bls.n	80042e8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80042e4:	2303      	movs	r3, #3
 80042e6:	e129      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80042e8:	4b3a      	ldr	r3, [pc, #232]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ed      	bne.n	80042d2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042f6:	7ffb      	ldrb	r3, [r7, #31]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b35      	ldr	r3, [pc, #212]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a34      	ldr	r2, [pc, #208]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0320 	and.w	r3, r3, #32
 8004310:	2b00      	cmp	r3, #0
 8004312:	d03c      	beq.n	800438e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800431c:	4b2d      	ldr	r3, [pc, #180]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800431e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004322:	4a2c      	ldr	r2, [pc, #176]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800432c:	f7fd fdf2 	bl	8001f14 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004334:	f7fd fdee 	bl	8001f14 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0fa      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004346:	4b23      	ldr	r3, [pc, #140]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004348:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800434c:	f003 0302 	and.w	r3, r3, #2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0ef      	beq.n	8004334 <HAL_RCC_OscConfig+0x418>
 8004354:	e01b      	b.n	800438e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004356:	4b1f      	ldr	r3, [pc, #124]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004358:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800435c:	4a1d      	ldr	r2, [pc, #116]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800435e:	f023 0301 	bic.w	r3, r3, #1
 8004362:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004366:	f7fd fdd5 	bl	8001f14 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800436e:	f7fd fdd1 	bl	8001f14 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e0dd      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004380:	4b14      	ldr	r3, [pc, #80]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 8004382:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004386:	f003 0302 	and.w	r3, r3, #2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1ef      	bne.n	800436e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	f000 80d1 	beq.w	800453a <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004398:	4b0e      	ldr	r3, [pc, #56]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b0c      	cmp	r3, #12
 80043a2:	f000 808b 	beq.w	80044bc <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	69db      	ldr	r3, [r3, #28]
 80043aa:	2b02      	cmp	r3, #2
 80043ac:	d15e      	bne.n	800446c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a08      	ldr	r2, [pc, #32]	; (80043d4 <HAL_RCC_OscConfig+0x4b8>)
 80043b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80043b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043ba:	f7fd fdab 	bl	8001f14 <HAL_GetTick>
 80043be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043c0:	e00c      	b.n	80043dc <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043c2:	f7fd fda7 	bl	8001f14 <HAL_GetTick>
 80043c6:	4602      	mov	r2, r0
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	1ad3      	subs	r3, r2, r3
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	d905      	bls.n	80043dc <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80043d0:	2303      	movs	r3, #3
 80043d2:	e0b3      	b.n	800453c <HAL_RCC_OscConfig+0x620>
 80043d4:	40021000 	.word	0x40021000
 80043d8:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043dc:	4b59      	ldr	r3, [pc, #356]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d1ec      	bne.n	80043c2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80043e8:	4b56      	ldr	r3, [pc, #344]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80043ea:	68da      	ldr	r2, [r3, #12]
 80043ec:	4b56      	ldr	r3, [pc, #344]	; (8004548 <HAL_RCC_OscConfig+0x62c>)
 80043ee:	4013      	ands	r3, r2
 80043f0:	687a      	ldr	r2, [r7, #4]
 80043f2:	6a11      	ldr	r1, [r2, #32]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043f8:	3a01      	subs	r2, #1
 80043fa:	0112      	lsls	r2, r2, #4
 80043fc:	4311      	orrs	r1, r2
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004402:	0212      	lsls	r2, r2, #8
 8004404:	4311      	orrs	r1, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800440a:	0852      	lsrs	r2, r2, #1
 800440c:	3a01      	subs	r2, #1
 800440e:	0552      	lsls	r2, r2, #21
 8004410:	4311      	orrs	r1, r2
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004416:	0852      	lsrs	r2, r2, #1
 8004418:	3a01      	subs	r2, #1
 800441a:	0652      	lsls	r2, r2, #25
 800441c:	4311      	orrs	r1, r2
 800441e:	687a      	ldr	r2, [r7, #4]
 8004420:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004422:	06d2      	lsls	r2, r2, #27
 8004424:	430a      	orrs	r2, r1
 8004426:	4947      	ldr	r1, [pc, #284]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004428:	4313      	orrs	r3, r2
 800442a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442c:	4b45      	ldr	r3, [pc, #276]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a44      	ldr	r2, [pc, #272]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004436:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004438:	4b42      	ldr	r3, [pc, #264]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	4a41      	ldr	r2, [pc, #260]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800443e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004442:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fd fd66 	bl	8001f14 <HAL_GetTick>
 8004448:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	e008      	b.n	800445e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800444c:	f7fd fd62 	bl	8001f14 <HAL_GetTick>
 8004450:	4602      	mov	r2, r0
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	1ad3      	subs	r3, r2, r3
 8004456:	2b02      	cmp	r3, #2
 8004458:	d901      	bls.n	800445e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800445a:	2303      	movs	r3, #3
 800445c:	e06e      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800445e:	4b39      	ldr	r3, [pc, #228]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d0f0      	beq.n	800444c <HAL_RCC_OscConfig+0x530>
 800446a:	e066      	b.n	800453a <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800446c:	4b35      	ldr	r3, [pc, #212]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a34      	ldr	r2, [pc, #208]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004472:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004476:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004478:	4b32      	ldr	r3, [pc, #200]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a31      	ldr	r2, [pc, #196]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800447e:	f023 0303 	bic.w	r3, r3, #3
 8004482:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	4a2e      	ldr	r2, [pc, #184]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 800448a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004494:	f7fd fd3e 	bl	8001f14 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800449c:	f7fd fd3a 	bl	8001f14 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e046      	b.n	800453c <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80044ae:	4b25      	ldr	r3, [pc, #148]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f0      	bne.n	800449c <HAL_RCC_OscConfig+0x580>
 80044ba:	e03e      	b.n	800453a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e039      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80044c8:	4b1e      	ldr	r3, [pc, #120]	; (8004544 <HAL_RCC_OscConfig+0x628>)
 80044ca:	68db      	ldr	r3, [r3, #12]
 80044cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	f003 0203 	and.w	r2, r3, #3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d12c      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e6:	3b01      	subs	r3, #1
 80044e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d123      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d11b      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800450a:	429a      	cmp	r2, r3
 800450c:	d113      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004518:	085b      	lsrs	r3, r3, #1
 800451a:	3b01      	subs	r3, #1
 800451c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800451e:	429a      	cmp	r2, r3
 8004520:	d109      	bne.n	8004536 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004522:	697b      	ldr	r3, [r7, #20]
 8004524:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452c:	085b      	lsrs	r3, r3, #1
 800452e:	3b01      	subs	r3, #1
 8004530:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004532:	429a      	cmp	r2, r3
 8004534:	d001      	beq.n	800453a <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800453a:	2300      	movs	r3, #0
}
 800453c:	4618      	mov	r0, r3
 800453e:	3720      	adds	r7, #32
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}
 8004544:	40021000 	.word	0x40021000
 8004548:	019f800c 	.word	0x019f800c

0800454c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004556:	2300      	movs	r3, #0
 8004558:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d101      	bne.n	8004564 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004560:	2301      	movs	r3, #1
 8004562:	e11e      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004564:	4b91      	ldr	r3, [pc, #580]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 030f 	and.w	r3, r3, #15
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d910      	bls.n	8004594 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b8e      	ldr	r3, [pc, #568]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f023 020f 	bic.w	r2, r3, #15
 800457a:	498c      	ldr	r1, [pc, #560]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	4313      	orrs	r3, r2
 8004580:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b8a      	ldr	r3, [pc, #552]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d001      	beq.n	8004594 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e106      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0301 	and.w	r3, r3, #1
 800459c:	2b00      	cmp	r3, #0
 800459e:	d073      	beq.n	8004688 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b03      	cmp	r3, #3
 80045a6:	d129      	bne.n	80045fc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045a8:	4b81      	ldr	r3, [pc, #516]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d101      	bne.n	80045b8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e0f4      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045b8:	f000 f99e 	bl	80048f8 <RCC_GetSysClockFreqFromPLLSource>
 80045bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4a7c      	ldr	r2, [pc, #496]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d93f      	bls.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045c6:	4b7a      	ldr	r3, [pc, #488]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d009      	beq.n	80045e6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d033      	beq.n	8004646 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d12f      	bne.n	8004646 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045e6:	4b72      	ldr	r3, [pc, #456]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045ee:	4a70      	ldr	r2, [pc, #448]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80045f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045f4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80045f6:	2380      	movs	r3, #128	; 0x80
 80045f8:	617b      	str	r3, [r7, #20]
 80045fa:	e024      	b.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b02      	cmp	r3, #2
 8004602:	d107      	bne.n	8004614 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004604:	4b6a      	ldr	r3, [pc, #424]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d109      	bne.n	8004624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e0c6      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004614:	4b66      	ldr	r3, [pc, #408]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800461c:	2b00      	cmp	r3, #0
 800461e:	d101      	bne.n	8004624 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e0be      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004624:	f000 f8ce 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 8004628:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	4a61      	ldr	r2, [pc, #388]	; (80047b4 <HAL_RCC_ClockConfig+0x268>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d909      	bls.n	8004646 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004632:	4b5f      	ldr	r3, [pc, #380]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800463a:	4a5d      	ldr	r2, [pc, #372]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800463c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004640:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004646:	4b5a      	ldr	r3, [pc, #360]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f023 0203 	bic.w	r2, r3, #3
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	4957      	ldr	r1, [pc, #348]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004654:	4313      	orrs	r3, r2
 8004656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004658:	f7fd fc5c 	bl	8001f14 <HAL_GetTick>
 800465c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800465e:	e00a      	b.n	8004676 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004660:	f7fd fc58 	bl	8001f14 <HAL_GetTick>
 8004664:	4602      	mov	r2, r0
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	1ad3      	subs	r3, r2, r3
 800466a:	f241 3288 	movw	r2, #5000	; 0x1388
 800466e:	4293      	cmp	r3, r2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e095      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f003 020c 	and.w	r2, r3, #12
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	429a      	cmp	r2, r3
 8004686:	d1eb      	bne.n	8004660 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d023      	beq.n	80046dc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b43      	ldr	r3, [pc, #268]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	4a42      	ldr	r2, [pc, #264]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046aa:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046b8:	4b3d      	ldr	r3, [pc, #244]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046ba:	689b      	ldr	r3, [r3, #8]
 80046bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046c0:	4a3b      	ldr	r2, [pc, #236]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046c2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c8:	4b39      	ldr	r3, [pc, #228]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	4936      	ldr	r1, [pc, #216]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	608b      	str	r3, [r1, #8]
 80046da:	e008      	b.n	80046ee <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	2b80      	cmp	r3, #128	; 0x80
 80046e0:	d105      	bne.n	80046ee <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80046e2:	4b33      	ldr	r3, [pc, #204]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	4a32      	ldr	r2, [pc, #200]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 80046e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80046ec:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f003 030f 	and.w	r3, r3, #15
 80046f6:	683a      	ldr	r2, [r7, #0]
 80046f8:	429a      	cmp	r2, r3
 80046fa:	d21d      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f023 020f 	bic.w	r2, r3, #15
 8004704:	4929      	ldr	r1, [pc, #164]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	4313      	orrs	r3, r2
 800470a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800470c:	f7fd fc02 	bl	8001f14 <HAL_GetTick>
 8004710:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004712:	e00a      	b.n	800472a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004714:	f7fd fbfe 	bl	8001f14 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004722:	4293      	cmp	r3, r2
 8004724:	d901      	bls.n	800472a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004726:	2303      	movs	r3, #3
 8004728:	e03b      	b.n	80047a2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800472a:	4b20      	ldr	r3, [pc, #128]	; (80047ac <HAL_RCC_ClockConfig+0x260>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 030f 	and.w	r3, r3, #15
 8004732:	683a      	ldr	r2, [r7, #0]
 8004734:	429a      	cmp	r2, r3
 8004736:	d1ed      	bne.n	8004714 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b1a      	ldr	r3, [pc, #104]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4917      	ldr	r1, [pc, #92]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b13      	ldr	r3, [pc, #76]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490f      	ldr	r1, [pc, #60]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004776:	f000 f825 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0c      	ldr	r3, [pc, #48]	; (80047b0 <HAL_RCC_ClockConfig+0x264>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490c      	ldr	r1, [pc, #48]	; (80047b8 <HAL_RCC_ClockConfig+0x26c>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	f003 031f 	and.w	r3, r3, #31
 800478e:	fa22 f303 	lsr.w	r3, r2, r3
 8004792:	4a0a      	ldr	r2, [pc, #40]	; (80047bc <HAL_RCC_ClockConfig+0x270>)
 8004794:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004796:	4b0a      	ldr	r3, [pc, #40]	; (80047c0 <HAL_RCC_ClockConfig+0x274>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4618      	mov	r0, r3
 800479c:	f7fd fb6e 	bl	8001e7c <HAL_InitTick>
 80047a0:	4603      	mov	r3, r0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3718      	adds	r7, #24
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
 80047aa:	bf00      	nop
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40021000 	.word	0x40021000
 80047b4:	04c4b400 	.word	0x04c4b400
 80047b8:	0800b92c 	.word	0x0800b92c
 80047bc:	200000ec 	.word	0x200000ec
 80047c0:	200000f0 	.word	0x200000f0

080047c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	b087      	sub	sp, #28
 80047c8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80047ca:	4b2c      	ldr	r3, [pc, #176]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047cc:	689b      	ldr	r3, [r3, #8]
 80047ce:	f003 030c 	and.w	r3, r3, #12
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d102      	bne.n	80047dc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCC_GetSysClockFreq+0xbc>)
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	e047      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80047dc:	4b27      	ldr	r3, [pc, #156]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f003 030c 	and.w	r3, r3, #12
 80047e4:	2b08      	cmp	r3, #8
 80047e6:	d102      	bne.n	80047ee <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80047e8:	4b26      	ldr	r3, [pc, #152]	; (8004884 <HAL_RCC_GetSysClockFreq+0xc0>)
 80047ea:	613b      	str	r3, [r7, #16]
 80047ec:	e03e      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80047ee:	4b23      	ldr	r3, [pc, #140]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f003 030c 	and.w	r3, r3, #12
 80047f6:	2b0c      	cmp	r3, #12
 80047f8:	d136      	bne.n	8004868 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047fa:	4b20      	ldr	r3, [pc, #128]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 80047fc:	68db      	ldr	r3, [r3, #12]
 80047fe:	f003 0303 	and.w	r3, r3, #3
 8004802:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004804:	4b1d      	ldr	r3, [pc, #116]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004806:	68db      	ldr	r3, [r3, #12]
 8004808:	091b      	lsrs	r3, r3, #4
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	3301      	adds	r3, #1
 8004810:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2b03      	cmp	r3, #3
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004818:	4a1a      	ldr	r2, [pc, #104]	; (8004884 <HAL_RCC_GetSysClockFreq+0xc0>)
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004820:	4a16      	ldr	r2, [pc, #88]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004822:	68d2      	ldr	r2, [r2, #12]
 8004824:	0a12      	lsrs	r2, r2, #8
 8004826:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800482a:	fb02 f303 	mul.w	r3, r2, r3
 800482e:	617b      	str	r3, [r7, #20]
      break;
 8004830:	e00c      	b.n	800484c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004832:	4a13      	ldr	r2, [pc, #76]	; (8004880 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	fbb2 f3f3 	udiv	r3, r2, r3
 800483a:	4a10      	ldr	r2, [pc, #64]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 800483c:	68d2      	ldr	r2, [r2, #12]
 800483e:	0a12      	lsrs	r2, r2, #8
 8004840:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004844:	fb02 f303 	mul.w	r3, r2, r3
 8004848:	617b      	str	r3, [r7, #20]
      break;
 800484a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800484c:	4b0b      	ldr	r3, [pc, #44]	; (800487c <HAL_RCC_GetSysClockFreq+0xb8>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	0e5b      	lsrs	r3, r3, #25
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	3301      	adds	r3, #1
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e001      	b.n	800486c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004868:	2300      	movs	r3, #0
 800486a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800486c:	693b      	ldr	r3, [r7, #16]
}
 800486e:	4618      	mov	r0, r3
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	00f42400 	.word	0x00f42400
 8004884:	016e3600 	.word	0x016e3600

08004888 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004888:	b480      	push	{r7}
 800488a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800488c:	4b03      	ldr	r3, [pc, #12]	; (800489c <HAL_RCC_GetHCLKFreq+0x14>)
 800488e:	681b      	ldr	r3, [r3, #0]
}
 8004890:	4618      	mov	r0, r3
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	200000ec 	.word	0x200000ec

080048a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80048a4:	f7ff fff0 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048a8:	4602      	mov	r2, r0
 80048aa:	4b06      	ldr	r3, [pc, #24]	; (80048c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	0a1b      	lsrs	r3, r3, #8
 80048b0:	f003 0307 	and.w	r3, r3, #7
 80048b4:	4904      	ldr	r1, [pc, #16]	; (80048c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80048b6:	5ccb      	ldrb	r3, [r1, r3]
 80048b8:	f003 031f 	and.w	r3, r3, #31
 80048bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	bd80      	pop	{r7, pc}
 80048c4:	40021000 	.word	0x40021000
 80048c8:	0800b93c 	.word	0x0800b93c

080048cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80048d0:	f7ff ffda 	bl	8004888 <HAL_RCC_GetHCLKFreq>
 80048d4:	4602      	mov	r2, r0
 80048d6:	4b06      	ldr	r3, [pc, #24]	; (80048f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	0adb      	lsrs	r3, r3, #11
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	4904      	ldr	r1, [pc, #16]	; (80048f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80048e2:	5ccb      	ldrb	r3, [r1, r3]
 80048e4:	f003 031f 	and.w	r3, r3, #31
 80048e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048ec:	4618      	mov	r0, r3
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	40021000 	.word	0x40021000
 80048f4:	0800b93c 	.word	0x0800b93c

080048f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80048f8:	b480      	push	{r7}
 80048fa:	b087      	sub	sp, #28
 80048fc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048fe:	4b1e      	ldr	r3, [pc, #120]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0303 	and.w	r3, r3, #3
 8004906:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004908:	4b1b      	ldr	r3, [pc, #108]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	091b      	lsrs	r3, r3, #4
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3301      	adds	r3, #1
 8004914:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	2b03      	cmp	r3, #3
 800491a:	d10c      	bne.n	8004936 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800491c:	4a17      	ldr	r2, [pc, #92]	; (800497c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	4a14      	ldr	r2, [pc, #80]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004926:	68d2      	ldr	r2, [r2, #12]
 8004928:	0a12      	lsrs	r2, r2, #8
 800492a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800492e:	fb02 f303 	mul.w	r3, r2, r3
 8004932:	617b      	str	r3, [r7, #20]
    break;
 8004934:	e00c      	b.n	8004950 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004936:	4a12      	ldr	r2, [pc, #72]	; (8004980 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	fbb2 f3f3 	udiv	r3, r2, r3
 800493e:	4a0e      	ldr	r2, [pc, #56]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	0a12      	lsrs	r2, r2, #8
 8004944:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004948:	fb02 f303 	mul.w	r3, r2, r3
 800494c:	617b      	str	r3, [r7, #20]
    break;
 800494e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004950:	4b09      	ldr	r3, [pc, #36]	; (8004978 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	0e5b      	lsrs	r3, r3, #25
 8004956:	f003 0303 	and.w	r3, r3, #3
 800495a:	3301      	adds	r3, #1
 800495c:	005b      	lsls	r3, r3, #1
 800495e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	fbb2 f3f3 	udiv	r3, r2, r3
 8004968:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800496a:	687b      	ldr	r3, [r7, #4]
}
 800496c:	4618      	mov	r0, r3
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr
 8004978:	40021000 	.word	0x40021000
 800497c:	016e3600 	.word	0x016e3600
 8004980:	00f42400 	.word	0x00f42400

08004984 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b086      	sub	sp, #24
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800498c:	2300      	movs	r3, #0
 800498e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004990:	2300      	movs	r3, #0
 8004992:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 8098 	beq.w	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049a2:	2300      	movs	r3, #0
 80049a4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049a6:	4b43      	ldr	r3, [pc, #268]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d10d      	bne.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049b2:	4b40      	ldr	r3, [pc, #256]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049b6:	4a3f      	ldr	r2, [pc, #252]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049bc:	6593      	str	r3, [r2, #88]	; 0x58
 80049be:	4b3d      	ldr	r3, [pc, #244]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80049c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049ca:	2301      	movs	r3, #1
 80049cc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049ce:	4b3a      	ldr	r3, [pc, #232]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a39      	ldr	r2, [pc, #228]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049da:	f7fd fa9b 	bl	8001f14 <HAL_GetTick>
 80049de:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049e0:	e009      	b.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049e2:	f7fd fa97 	bl	8001f14 <HAL_GetTick>
 80049e6:	4602      	mov	r2, r0
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d902      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80049f0:	2303      	movs	r3, #3
 80049f2:	74fb      	strb	r3, [r7, #19]
        break;
 80049f4:	e005      	b.n	8004a02 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049f6:	4b30      	ldr	r3, [pc, #192]	; (8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d0ef      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004a02:	7cfb      	ldrb	r3, [r7, #19]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d159      	bne.n	8004abc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d01e      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1e:	697a      	ldr	r2, [r7, #20]
 8004a20:	429a      	cmp	r2, r3
 8004a22:	d019      	beq.n	8004a58 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004a24:	4b23      	ldr	r3, [pc, #140]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a30:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a36:	4a1f      	ldr	r2, [pc, #124]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a40:	4b1c      	ldr	r3, [pc, #112]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a46:	4a1b      	ldr	r2, [pc, #108]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a50:	4a18      	ldr	r2, [pc, #96]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f003 0301 	and.w	r3, r3, #1
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d016      	beq.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a62:	f7fd fa57 	bl	8001f14 <HAL_GetTick>
 8004a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a68:	e00b      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a6a:	f7fd fa53 	bl	8001f14 <HAL_GetTick>
 8004a6e:	4602      	mov	r2, r0
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	1ad3      	subs	r3, r2, r3
 8004a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d902      	bls.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8004a80:	e006      	b.n	8004a90 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a82:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ec      	beq.n	8004a6a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004a90:	7cfb      	ldrb	r3, [r7, #19]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10b      	bne.n	8004aae <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a96:	4b07      	ldr	r3, [pc, #28]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aa4:	4903      	ldr	r1, [pc, #12]	; (8004ab4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004aac:	e008      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aae:	7cfb      	ldrb	r3, [r7, #19]
 8004ab0:	74bb      	strb	r3, [r7, #18]
 8004ab2:	e005      	b.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004ab4:	40021000 	.word	0x40021000
 8004ab8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004abc:	7cfb      	ldrb	r3, [r7, #19]
 8004abe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ac0:	7c7b      	ldrb	r3, [r7, #17]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d105      	bne.n	8004ad2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ac6:	4ba7      	ldr	r3, [pc, #668]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aca:	4aa6      	ldr	r2, [pc, #664]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004acc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ad0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d00a      	beq.n	8004af4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004ade:	4ba1      	ldr	r3, [pc, #644]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ae4:	f023 0203 	bic.w	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	499d      	ldr	r1, [pc, #628]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aee:	4313      	orrs	r3, r2
 8004af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0302 	and.w	r3, r3, #2
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00a      	beq.n	8004b16 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004b00:	4b98      	ldr	r3, [pc, #608]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	f023 020c 	bic.w	r2, r3, #12
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	4995      	ldr	r1, [pc, #596]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b10:	4313      	orrs	r3, r2
 8004b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00a      	beq.n	8004b38 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004b22:	4b90      	ldr	r3, [pc, #576]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b28:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	498c      	ldr	r1, [pc, #560]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b32:	4313      	orrs	r3, r2
 8004b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0308 	and.w	r3, r3, #8
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d00a      	beq.n	8004b5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004b44:	4b87      	ldr	r3, [pc, #540]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	691b      	ldr	r3, [r3, #16]
 8004b52:	4984      	ldr	r1, [pc, #528]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f003 0310 	and.w	r3, r3, #16
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d00a      	beq.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b66:	4b7f      	ldr	r3, [pc, #508]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	497b      	ldr	r1, [pc, #492]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0320 	and.w	r3, r3, #32
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00a      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b88:	4b76      	ldr	r3, [pc, #472]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	699b      	ldr	r3, [r3, #24]
 8004b96:	4973      	ldr	r1, [pc, #460]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00a      	beq.n	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004baa:	4b6e      	ldr	r3, [pc, #440]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bb0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	69db      	ldr	r3, [r3, #28]
 8004bb8:	496a      	ldr	r1, [pc, #424]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d00a      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bcc:	4b65      	ldr	r3, [pc, #404]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bd2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a1b      	ldr	r3, [r3, #32]
 8004bda:	4962      	ldr	r1, [pc, #392]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d00a      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bee:	4b5d      	ldr	r3, [pc, #372]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfc:	4959      	ldr	r1, [pc, #356]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00a      	beq.n	8004c26 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c10:	4b54      	ldr	r3, [pc, #336]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004c16:	f023 0203 	bic.w	r2, r3, #3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1e:	4951      	ldr	r1, [pc, #324]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d00a      	beq.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004c32:	4b4c      	ldr	r3, [pc, #304]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c38:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	4948      	ldr	r1, [pc, #288]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c42:	4313      	orrs	r3, r2
 8004c44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d015      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c54:	4b43      	ldr	r3, [pc, #268]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4940      	ldr	r1, [pc, #256]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c72:	d105      	bne.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c74:	4b3b      	ldr	r3, [pc, #236]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	4a3a      	ldr	r2, [pc, #232]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c7e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d015      	beq.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c92:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c9a:	4932      	ldr	r1, [pc, #200]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004c9c:	4313      	orrs	r3, r2
 8004c9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004caa:	d105      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004cac:	4b2d      	ldr	r3, [pc, #180]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a2c      	ldr	r2, [pc, #176]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cb6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d015      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004cc4:	4b27      	ldr	r3, [pc, #156]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cca:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cd2:	4924      	ldr	r1, [pc, #144]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cd4:	4313      	orrs	r3, r2
 8004cd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cde:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ce2:	d105      	bne.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce4:	4b1f      	ldr	r3, [pc, #124]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	4a1e      	ldr	r2, [pc, #120]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004cee:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d015      	beq.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d02:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0a:	4916      	ldr	r1, [pc, #88]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d16:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d1a:	d105      	bne.n	8004d28 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d1c:	4b11      	ldr	r3, [pc, #68]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	4a10      	ldr	r2, [pc, #64]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d26:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d019      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d3a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	4908      	ldr	r1, [pc, #32]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d44:	4313      	orrs	r3, r2
 8004d46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d52:	d109      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004d54:	4b03      	ldr	r3, [pc, #12]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4a02      	ldr	r2, [pc, #8]	; (8004d64 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004d5e:	60d3      	str	r3, [r2, #12]
 8004d60:	e002      	b.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004d62:	bf00      	nop
 8004d64:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d015      	beq.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004d74:	4b29      	ldr	r3, [pc, #164]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d82:	4926      	ldr	r1, [pc, #152]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d92:	d105      	bne.n	8004da0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004d94:	4b21      	ldr	r3, [pc, #132]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4a20      	ldr	r2, [pc, #128]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d9e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d015      	beq.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004dac:	4b1b      	ldr	r3, [pc, #108]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dba:	4918      	ldr	r1, [pc, #96]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dca:	d105      	bne.n	8004dd8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004dcc:	4b13      	ldr	r3, [pc, #76]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	4a12      	ldr	r2, [pc, #72]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d015      	beq.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004de4:	4b0d      	ldr	r3, [pc, #52]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004de6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004df2:	490a      	ldr	r1, [pc, #40]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004df4:	4313      	orrs	r3, r2
 8004df6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dfe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004e02:	d105      	bne.n	8004e10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	4a04      	ldr	r2, [pc, #16]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004e0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004e10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004e12:	4618      	mov	r0, r3
 8004e14:	3718      	adds	r7, #24
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
 8004e1a:	bf00      	nop
 8004e1c:	40021000 	.word	0x40021000

08004e20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b082      	sub	sp, #8
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e049      	b.n	8004ec6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d106      	bne.n	8004e4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	f7fc fe0a 	bl	8001a60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2202      	movs	r2, #2
 8004e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f000 fc6e 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2201      	movs	r2, #1
 8004e70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2201      	movs	r2, #1
 8004e80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3708      	adds	r7, #8
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}

08004ece <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ece:	b580      	push	{r7, lr}
 8004ed0:	b082      	sub	sp, #8
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e049      	b.n	8004f74 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d106      	bne.n	8004efa <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2200      	movs	r2, #0
 8004ef0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ef4:	6878      	ldr	r0, [r7, #4]
 8004ef6:	f000 f841 	bl	8004f7c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2202      	movs	r2, #2
 8004efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	3304      	adds	r3, #4
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4610      	mov	r0, r2
 8004f0e:	f000 fc17 	bl	8005740 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2201      	movs	r2, #1
 8004f56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2201      	movs	r2, #1
 8004f66:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2201      	movs	r2, #1
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f72:	2300      	movs	r3, #0
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	3708      	adds	r7, #8
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}

08004f7c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004f7c:	b480      	push	{r7}
 8004f7e:	b083      	sub	sp, #12
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004f84:	bf00      	nop
 8004f86:	370c      	adds	r7, #12
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8e:	4770      	bx	lr

08004f90 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d109      	bne.n	8004fb4 <HAL_TIM_PWM_Start+0x24>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	e03c      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d109      	bne.n	8004fce <HAL_TIM_PWM_Start+0x3e>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	bf14      	ite	ne
 8004fc6:	2301      	movne	r3, #1
 8004fc8:	2300      	moveq	r3, #0
 8004fca:	b2db      	uxtb	r3, r3
 8004fcc:	e02f      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d109      	bne.n	8004fe8 <HAL_TIM_PWM_Start+0x58>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004fda:	b2db      	uxtb	r3, r3
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	bf14      	ite	ne
 8004fe0:	2301      	movne	r3, #1
 8004fe2:	2300      	moveq	r3, #0
 8004fe4:	b2db      	uxtb	r3, r3
 8004fe6:	e022      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	2b0c      	cmp	r3, #12
 8004fec:	d109      	bne.n	8005002 <HAL_TIM_PWM_Start+0x72>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	bf14      	ite	ne
 8004ffa:	2301      	movne	r3, #1
 8004ffc:	2300      	moveq	r3, #0
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	e015      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	2b10      	cmp	r3, #16
 8005006:	d109      	bne.n	800501c <HAL_TIM_PWM_Start+0x8c>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e008      	b.n	800502e <HAL_TIM_PWM_Start+0x9e>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b01      	cmp	r3, #1
 8005026:	bf14      	ite	ne
 8005028:	2301      	movne	r3, #1
 800502a:	2300      	moveq	r3, #0
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d001      	beq.n	8005036 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e0a6      	b.n	8005184 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d104      	bne.n	8005046 <HAL_TIM_PWM_Start+0xb6>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2202      	movs	r2, #2
 8005040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005044:	e023      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b04      	cmp	r3, #4
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0xc6>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005054:	e01b      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b08      	cmp	r3, #8
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start+0xd6>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005064:	e013      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b0c      	cmp	r3, #12
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xe6>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005074:	e00b      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b10      	cmp	r3, #16
 800507a:	d104      	bne.n	8005086 <HAL_TIM_PWM_Start+0xf6>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2202      	movs	r2, #2
 8005080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005084:	e003      	b.n	800508e <HAL_TIM_PWM_Start+0xfe>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2202      	movs	r2, #2
 800508a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2201      	movs	r2, #1
 8005094:	6839      	ldr	r1, [r7, #0]
 8005096:	4618      	mov	r0, r3
 8005098:	f000 ffc0 	bl	800601c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a3a      	ldr	r2, [pc, #232]	; (800518c <HAL_TIM_PWM_Start+0x1fc>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d018      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x148>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a39      	ldr	r2, [pc, #228]	; (8005190 <HAL_TIM_PWM_Start+0x200>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d013      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x148>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a37      	ldr	r2, [pc, #220]	; (8005194 <HAL_TIM_PWM_Start+0x204>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d00e      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x148>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a36      	ldr	r2, [pc, #216]	; (8005198 <HAL_TIM_PWM_Start+0x208>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d009      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x148>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a34      	ldr	r2, [pc, #208]	; (800519c <HAL_TIM_PWM_Start+0x20c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d004      	beq.n	80050d8 <HAL_TIM_PWM_Start+0x148>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a33      	ldr	r2, [pc, #204]	; (80051a0 <HAL_TIM_PWM_Start+0x210>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d101      	bne.n	80050dc <HAL_TIM_PWM_Start+0x14c>
 80050d8:	2301      	movs	r3, #1
 80050da:	e000      	b.n	80050de <HAL_TIM_PWM_Start+0x14e>
 80050dc:	2300      	movs	r3, #0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a25      	ldr	r2, [pc, #148]	; (800518c <HAL_TIM_PWM_Start+0x1fc>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d022      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005104:	d01d      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <HAL_TIM_PWM_Start+0x214>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d018      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a24      	ldr	r2, [pc, #144]	; (80051a8 <HAL_TIM_PWM_Start+0x218>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d013      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a23      	ldr	r2, [pc, #140]	; (80051ac <HAL_TIM_PWM_Start+0x21c>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d00e      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_TIM_PWM_Start+0x200>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d009      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <HAL_TIM_PWM_Start+0x204>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d004      	beq.n	8005142 <HAL_TIM_PWM_Start+0x1b2>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a18      	ldr	r2, [pc, #96]	; (80051a0 <HAL_TIM_PWM_Start+0x210>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d115      	bne.n	800516e <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	689a      	ldr	r2, [r3, #8]
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_TIM_PWM_Start+0x220>)
 800514a:	4013      	ands	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2b06      	cmp	r3, #6
 8005152:	d015      	beq.n	8005180 <HAL_TIM_PWM_Start+0x1f0>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800515a:	d011      	beq.n	8005180 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800516c:	e008      	b.n	8005180 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
 800517e:	e000      	b.n	8005182 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005180:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	40012c00 	.word	0x40012c00
 8005190:	40013400 	.word	0x40013400
 8005194:	40014000 	.word	0x40014000
 8005198:	40014400 	.word	0x40014400
 800519c:	40014800 	.word	0x40014800
 80051a0:	40015000 	.word	0x40015000
 80051a4:	40000400 	.word	0x40000400
 80051a8:	40000800 	.word	0x40000800
 80051ac:	40000c00 	.word	0x40000c00
 80051b0:	00010007 	.word	0x00010007

080051b4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2200      	movs	r2, #0
 80051c4:	6839      	ldr	r1, [r7, #0]
 80051c6:	4618      	mov	r0, r3
 80051c8:	f000 ff28 	bl	800601c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a40      	ldr	r2, [pc, #256]	; (80052d4 <HAL_TIM_PWM_Stop+0x120>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d018      	beq.n	8005208 <HAL_TIM_PWM_Stop+0x54>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a3f      	ldr	r2, [pc, #252]	; (80052d8 <HAL_TIM_PWM_Stop+0x124>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d013      	beq.n	8005208 <HAL_TIM_PWM_Stop+0x54>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a3d      	ldr	r2, [pc, #244]	; (80052dc <HAL_TIM_PWM_Stop+0x128>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d00e      	beq.n	8005208 <HAL_TIM_PWM_Stop+0x54>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a3c      	ldr	r2, [pc, #240]	; (80052e0 <HAL_TIM_PWM_Stop+0x12c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d009      	beq.n	8005208 <HAL_TIM_PWM_Stop+0x54>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a3a      	ldr	r2, [pc, #232]	; (80052e4 <HAL_TIM_PWM_Stop+0x130>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d004      	beq.n	8005208 <HAL_TIM_PWM_Stop+0x54>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a39      	ldr	r2, [pc, #228]	; (80052e8 <HAL_TIM_PWM_Stop+0x134>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d101      	bne.n	800520c <HAL_TIM_PWM_Stop+0x58>
 8005208:	2301      	movs	r3, #1
 800520a:	e000      	b.n	800520e <HAL_TIM_PWM_Stop+0x5a>
 800520c:	2300      	movs	r3, #0
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	6a1a      	ldr	r2, [r3, #32]
 8005218:	f241 1311 	movw	r3, #4369	; 0x1111
 800521c:	4013      	ands	r3, r2
 800521e:	2b00      	cmp	r3, #0
 8005220:	d10f      	bne.n	8005242 <HAL_TIM_PWM_Stop+0x8e>
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6a1a      	ldr	r2, [r3, #32]
 8005228:	f244 4344 	movw	r3, #17476	; 0x4444
 800522c:	4013      	ands	r3, r2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d107      	bne.n	8005242 <HAL_TIM_PWM_Stop+0x8e>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6a1a      	ldr	r2, [r3, #32]
 8005248:	f241 1311 	movw	r3, #4369	; 0x1111
 800524c:	4013      	ands	r3, r2
 800524e:	2b00      	cmp	r3, #0
 8005250:	d10f      	bne.n	8005272 <HAL_TIM_PWM_Stop+0xbe>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6a1a      	ldr	r2, [r3, #32]
 8005258:	f244 4344 	movw	r3, #17476	; 0x4444
 800525c:	4013      	ands	r3, r2
 800525e:	2b00      	cmp	r3, #0
 8005260:	d107      	bne.n	8005272 <HAL_TIM_PWM_Stop+0xbe>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0201 	bic.w	r2, r2, #1
 8005270:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Stop+0xce>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005280:	e023      	b.n	80052ca <HAL_TIM_PWM_Stop+0x116>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b04      	cmp	r3, #4
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Stop+0xde>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005290:	e01b      	b.n	80052ca <HAL_TIM_PWM_Stop+0x116>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b08      	cmp	r3, #8
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Stop+0xee>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a0:	e013      	b.n	80052ca <HAL_TIM_PWM_Stop+0x116>
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	2b0c      	cmp	r3, #12
 80052a6:	d104      	bne.n	80052b2 <HAL_TIM_PWM_Stop+0xfe>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80052b0:	e00b      	b.n	80052ca <HAL_TIM_PWM_Stop+0x116>
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	2b10      	cmp	r3, #16
 80052b6:	d104      	bne.n	80052c2 <HAL_TIM_PWM_Stop+0x10e>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052c0:	e003      	b.n	80052ca <HAL_TIM_PWM_Stop+0x116>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40012c00 	.word	0x40012c00
 80052d8:	40013400 	.word	0x40013400
 80052dc:	40014000 	.word	0x40014000
 80052e0:	40014400 	.word	0x40014400
 80052e4:	40014800 	.word	0x40014800
 80052e8:	40015000 	.word	0x40015000

080052ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b086      	sub	sp, #24
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	60f8      	str	r0, [r7, #12]
 80052f4:	60b9      	str	r1, [r7, #8]
 80052f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052f8:	2300      	movs	r3, #0
 80052fa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005302:	2b01      	cmp	r3, #1
 8005304:	d101      	bne.n	800530a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005306:	2302      	movs	r3, #2
 8005308:	e0ff      	b.n	800550a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2201      	movs	r2, #1
 800530e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b14      	cmp	r3, #20
 8005316:	f200 80f0 	bhi.w	80054fa <HAL_TIM_PWM_ConfigChannel+0x20e>
 800531a:	a201      	add	r2, pc, #4	; (adr r2, 8005320 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800531c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005320:	08005375 	.word	0x08005375
 8005324:	080054fb 	.word	0x080054fb
 8005328:	080054fb 	.word	0x080054fb
 800532c:	080054fb 	.word	0x080054fb
 8005330:	080053b5 	.word	0x080053b5
 8005334:	080054fb 	.word	0x080054fb
 8005338:	080054fb 	.word	0x080054fb
 800533c:	080054fb 	.word	0x080054fb
 8005340:	080053f7 	.word	0x080053f7
 8005344:	080054fb 	.word	0x080054fb
 8005348:	080054fb 	.word	0x080054fb
 800534c:	080054fb 	.word	0x080054fb
 8005350:	08005437 	.word	0x08005437
 8005354:	080054fb 	.word	0x080054fb
 8005358:	080054fb 	.word	0x080054fb
 800535c:	080054fb 	.word	0x080054fb
 8005360:	08005479 	.word	0x08005479
 8005364:	080054fb 	.word	0x080054fb
 8005368:	080054fb 	.word	0x080054fb
 800536c:	080054fb 	.word	0x080054fb
 8005370:	080054b9 	.word	0x080054b9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68b9      	ldr	r1, [r7, #8]
 800537a:	4618      	mov	r0, r3
 800537c:	f000 fa88 	bl	8005890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0208 	orr.w	r2, r2, #8
 800538e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f022 0204 	bic.w	r2, r2, #4
 800539e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6999      	ldr	r1, [r3, #24]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	430a      	orrs	r2, r1
 80053b0:	619a      	str	r2, [r3, #24]
      break;
 80053b2:	e0a5      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	68b9      	ldr	r1, [r7, #8]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fb02 	bl	80059c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	699a      	ldr	r2, [r3, #24]
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	6999      	ldr	r1, [r3, #24]
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	021a      	lsls	r2, r3, #8
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	430a      	orrs	r2, r1
 80053f2:	619a      	str	r2, [r3, #24]
      break;
 80053f4:	e084      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	68b9      	ldr	r1, [r7, #8]
 80053fc:	4618      	mov	r0, r3
 80053fe:	f000 fb75 	bl	8005aec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	69da      	ldr	r2, [r3, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f042 0208 	orr.w	r2, r2, #8
 8005410:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0204 	bic.w	r2, r2, #4
 8005420:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69d9      	ldr	r1, [r3, #28]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	691a      	ldr	r2, [r3, #16]
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	61da      	str	r2, [r3, #28]
      break;
 8005434:	e064      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68b9      	ldr	r1, [r7, #8]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 fbe7 	bl	8005c10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005450:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69da      	ldr	r2, [r3, #28]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005460:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	69d9      	ldr	r1, [r3, #28]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	021a      	lsls	r2, r3, #8
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	430a      	orrs	r2, r1
 8005474:	61da      	str	r2, [r3, #28]
      break;
 8005476:	e043      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	68b9      	ldr	r1, [r7, #8]
 800547e:	4618      	mov	r0, r3
 8005480:	f000 fc5a 	bl	8005d38 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f042 0208 	orr.w	r2, r2, #8
 8005492:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 0204 	bic.w	r2, r2, #4
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	691a      	ldr	r2, [r3, #16]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	430a      	orrs	r2, r1
 80054b4:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054b6:	e023      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	68b9      	ldr	r1, [r7, #8]
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 fca4 	bl	8005e0c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054d2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	021a      	lsls	r2, r3, #8
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	430a      	orrs	r2, r1
 80054f6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054f8:	e002      	b.n	8005500 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	75fb      	strb	r3, [r7, #23]
      break;
 80054fe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005508:	7dfb      	ldrb	r3, [r7, #23]
}
 800550a:	4618      	mov	r0, r3
 800550c:	3718      	adds	r7, #24
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop

08005514 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800551e:	2300      	movs	r3, #0
 8005520:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIM_ConfigClockSource+0x1c>
 800552c:	2302      	movs	r3, #2
 800552e:	e0f6      	b.n	800571e <HAL_TIM_ConfigClockSource+0x20a>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800554e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005552:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800555a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	68ba      	ldr	r2, [r7, #8]
 8005562:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a6f      	ldr	r2, [pc, #444]	; (8005728 <HAL_TIM_ConfigClockSource+0x214>)
 800556a:	4293      	cmp	r3, r2
 800556c:	f000 80c1 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005570:	4a6d      	ldr	r2, [pc, #436]	; (8005728 <HAL_TIM_ConfigClockSource+0x214>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f200 80c6 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005578:	4a6c      	ldr	r2, [pc, #432]	; (800572c <HAL_TIM_ConfigClockSource+0x218>)
 800557a:	4293      	cmp	r3, r2
 800557c:	f000 80b9 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005580:	4a6a      	ldr	r2, [pc, #424]	; (800572c <HAL_TIM_ConfigClockSource+0x218>)
 8005582:	4293      	cmp	r3, r2
 8005584:	f200 80be 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005588:	4a69      	ldr	r2, [pc, #420]	; (8005730 <HAL_TIM_ConfigClockSource+0x21c>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f000 80b1 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005590:	4a67      	ldr	r2, [pc, #412]	; (8005730 <HAL_TIM_ConfigClockSource+0x21c>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f200 80b6 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005598:	4a66      	ldr	r2, [pc, #408]	; (8005734 <HAL_TIM_ConfigClockSource+0x220>)
 800559a:	4293      	cmp	r3, r2
 800559c:	f000 80a9 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 80055a0:	4a64      	ldr	r2, [pc, #400]	; (8005734 <HAL_TIM_ConfigClockSource+0x220>)
 80055a2:	4293      	cmp	r3, r2
 80055a4:	f200 80ae 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a8:	4a63      	ldr	r2, [pc, #396]	; (8005738 <HAL_TIM_ConfigClockSource+0x224>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	f000 80a1 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 80055b0:	4a61      	ldr	r2, [pc, #388]	; (8005738 <HAL_TIM_ConfigClockSource+0x224>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	f200 80a6 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b8:	4a60      	ldr	r2, [pc, #384]	; (800573c <HAL_TIM_ConfigClockSource+0x228>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	f000 8099 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 80055c0:	4a5e      	ldr	r2, [pc, #376]	; (800573c <HAL_TIM_ConfigClockSource+0x228>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	f200 809e 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055cc:	f000 8091 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 80055d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055d4:	f200 8096 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055dc:	f000 8089 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 80055e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055e4:	f200 808e 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055ec:	d03e      	beq.n	800566c <HAL_TIM_ConfigClockSource+0x158>
 80055ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055f2:	f200 8087 	bhi.w	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055fa:	f000 8086 	beq.w	800570a <HAL_TIM_ConfigClockSource+0x1f6>
 80055fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005602:	d87f      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005604:	2b70      	cmp	r3, #112	; 0x70
 8005606:	d01a      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x12a>
 8005608:	2b70      	cmp	r3, #112	; 0x70
 800560a:	d87b      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 800560c:	2b60      	cmp	r3, #96	; 0x60
 800560e:	d050      	beq.n	80056b2 <HAL_TIM_ConfigClockSource+0x19e>
 8005610:	2b60      	cmp	r3, #96	; 0x60
 8005612:	d877      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005614:	2b50      	cmp	r3, #80	; 0x50
 8005616:	d03c      	beq.n	8005692 <HAL_TIM_ConfigClockSource+0x17e>
 8005618:	2b50      	cmp	r3, #80	; 0x50
 800561a:	d873      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 800561c:	2b40      	cmp	r3, #64	; 0x40
 800561e:	d058      	beq.n	80056d2 <HAL_TIM_ConfigClockSource+0x1be>
 8005620:	2b40      	cmp	r3, #64	; 0x40
 8005622:	d86f      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005624:	2b30      	cmp	r3, #48	; 0x30
 8005626:	d064      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005628:	2b30      	cmp	r3, #48	; 0x30
 800562a:	d86b      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 800562c:	2b20      	cmp	r3, #32
 800562e:	d060      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005630:	2b20      	cmp	r3, #32
 8005632:	d867      	bhi.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
 8005634:	2b00      	cmp	r3, #0
 8005636:	d05c      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 8005638:	2b10      	cmp	r3, #16
 800563a:	d05a      	beq.n	80056f2 <HAL_TIM_ConfigClockSource+0x1de>
 800563c:	e062      	b.n	8005704 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6899      	ldr	r1, [r3, #8]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	685a      	ldr	r2, [r3, #4]
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	f000 fcc5 	bl	8005fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005660:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68ba      	ldr	r2, [r7, #8]
 8005668:	609a      	str	r2, [r3, #8]
      break;
 800566a:	e04f      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6818      	ldr	r0, [r3, #0]
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	6899      	ldr	r1, [r3, #8]
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	68db      	ldr	r3, [r3, #12]
 800567c:	f000 fcae 	bl	8005fdc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800568e:	609a      	str	r2, [r3, #8]
      break;
 8005690:	e03c      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6818      	ldr	r0, [r3, #0]
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	6859      	ldr	r1, [r3, #4]
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	68db      	ldr	r3, [r3, #12]
 800569e:	461a      	mov	r2, r3
 80056a0:	f000 fc20 	bl	8005ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	2150      	movs	r1, #80	; 0x50
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fc79 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 80056b0:	e02c      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6818      	ldr	r0, [r3, #0]
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	6859      	ldr	r1, [r3, #4]
 80056ba:	683b      	ldr	r3, [r7, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	461a      	mov	r2, r3
 80056c0:	f000 fc3f 	bl	8005f42 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2160      	movs	r1, #96	; 0x60
 80056ca:	4618      	mov	r0, r3
 80056cc:	f000 fc69 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 80056d0:	e01c      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6818      	ldr	r0, [r3, #0]
 80056d6:	683b      	ldr	r3, [r7, #0]
 80056d8:	6859      	ldr	r1, [r3, #4]
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	461a      	mov	r2, r3
 80056e0:	f000 fc00 	bl	8005ee4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	4618      	mov	r0, r3
 80056ec:	f000 fc59 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 80056f0:	e00c      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f000 fc50 	bl	8005fa2 <TIM_ITRx_SetConfig>
      break;
 8005702:	e003      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	73fb      	strb	r3, [r7, #15]
      break;
 8005708:	e000      	b.n	800570c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800570a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800571c:	7bfb      	ldrb	r3, [r7, #15]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3710      	adds	r7, #16
 8005722:	46bd      	mov	sp, r7
 8005724:	bd80      	pop	{r7, pc}
 8005726:	bf00      	nop
 8005728:	00100070 	.word	0x00100070
 800572c:	00100060 	.word	0x00100060
 8005730:	00100050 	.word	0x00100050
 8005734:	00100040 	.word	0x00100040
 8005738:	00100030 	.word	0x00100030
 800573c:	00100020 	.word	0x00100020

08005740 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4a46      	ldr	r2, [pc, #280]	; (800586c <TIM_Base_SetConfig+0x12c>)
 8005754:	4293      	cmp	r3, r2
 8005756:	d017      	beq.n	8005788 <TIM_Base_SetConfig+0x48>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575e:	d013      	beq.n	8005788 <TIM_Base_SetConfig+0x48>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	4a43      	ldr	r2, [pc, #268]	; (8005870 <TIM_Base_SetConfig+0x130>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d00f      	beq.n	8005788 <TIM_Base_SetConfig+0x48>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	4a42      	ldr	r2, [pc, #264]	; (8005874 <TIM_Base_SetConfig+0x134>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d00b      	beq.n	8005788 <TIM_Base_SetConfig+0x48>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a41      	ldr	r2, [pc, #260]	; (8005878 <TIM_Base_SetConfig+0x138>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d007      	beq.n	8005788 <TIM_Base_SetConfig+0x48>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	4a40      	ldr	r2, [pc, #256]	; (800587c <TIM_Base_SetConfig+0x13c>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d003      	beq.n	8005788 <TIM_Base_SetConfig+0x48>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <TIM_Base_SetConfig+0x140>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d108      	bne.n	800579a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800578e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	68fa      	ldr	r2, [r7, #12]
 8005796:	4313      	orrs	r3, r2
 8005798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4a33      	ldr	r2, [pc, #204]	; (800586c <TIM_Base_SetConfig+0x12c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d023      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a8:	d01f      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	4a30      	ldr	r2, [pc, #192]	; (8005870 <TIM_Base_SetConfig+0x130>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d01b      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <TIM_Base_SetConfig+0x134>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d017      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	4a2e      	ldr	r2, [pc, #184]	; (8005878 <TIM_Base_SetConfig+0x138>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d013      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a2d      	ldr	r2, [pc, #180]	; (800587c <TIM_Base_SetConfig+0x13c>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00f      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a2d      	ldr	r2, [pc, #180]	; (8005884 <TIM_Base_SetConfig+0x144>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d00b      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a2c      	ldr	r2, [pc, #176]	; (8005888 <TIM_Base_SetConfig+0x148>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d007      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2b      	ldr	r2, [pc, #172]	; (800588c <TIM_Base_SetConfig+0x14c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d003      	beq.n	80057ea <TIM_Base_SetConfig+0xaa>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a26      	ldr	r2, [pc, #152]	; (8005880 <TIM_Base_SetConfig+0x140>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d108      	bne.n	80057fc <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	695b      	ldr	r3, [r3, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	4a12      	ldr	r2, [pc, #72]	; (800586c <TIM_Base_SetConfig+0x12c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <TIM_Base_SetConfig+0x110>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a14      	ldr	r2, [pc, #80]	; (800587c <TIM_Base_SetConfig+0x13c>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00f      	beq.n	8005850 <TIM_Base_SetConfig+0x110>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a14      	ldr	r2, [pc, #80]	; (8005884 <TIM_Base_SetConfig+0x144>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d00b      	beq.n	8005850 <TIM_Base_SetConfig+0x110>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a13      	ldr	r2, [pc, #76]	; (8005888 <TIM_Base_SetConfig+0x148>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d007      	beq.n	8005850 <TIM_Base_SetConfig+0x110>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a12      	ldr	r2, [pc, #72]	; (800588c <TIM_Base_SetConfig+0x14c>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_Base_SetConfig+0x110>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <TIM_Base_SetConfig+0x140>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d103      	bne.n	8005858 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	691a      	ldr	r2, [r3, #16]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	615a      	str	r2, [r3, #20]
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	40012c00 	.word	0x40012c00
 8005870:	40000400 	.word	0x40000400
 8005874:	40000800 	.word	0x40000800
 8005878:	40000c00 	.word	0x40000c00
 800587c:	40013400 	.word	0x40013400
 8005880:	40015000 	.word	0x40015000
 8005884:	40014000 	.word	0x40014000
 8005888:	40014400 	.word	0x40014400
 800588c:	40014800 	.word	0x40014800

08005890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	f023 0201 	bic.w	r2, r3, #1
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6a1b      	ldr	r3, [r3, #32]
 80058aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0303 	bic.w	r3, r3, #3
 80058ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	f023 0302 	bic.w	r3, r3, #2
 80058dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a30      	ldr	r2, [pc, #192]	; (80059ac <TIM_OC1_SetConfig+0x11c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <TIM_OC1_SetConfig+0x88>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a2f      	ldr	r2, [pc, #188]	; (80059b0 <TIM_OC1_SetConfig+0x120>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d00f      	beq.n	8005918 <TIM_OC1_SetConfig+0x88>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a2e      	ldr	r2, [pc, #184]	; (80059b4 <TIM_OC1_SetConfig+0x124>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d00b      	beq.n	8005918 <TIM_OC1_SetConfig+0x88>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4a2d      	ldr	r2, [pc, #180]	; (80059b8 <TIM_OC1_SetConfig+0x128>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d007      	beq.n	8005918 <TIM_OC1_SetConfig+0x88>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a2c      	ldr	r2, [pc, #176]	; (80059bc <TIM_OC1_SetConfig+0x12c>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d003      	beq.n	8005918 <TIM_OC1_SetConfig+0x88>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <TIM_OC1_SetConfig+0x130>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10c      	bne.n	8005932 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	f023 0308 	bic.w	r3, r3, #8
 800591e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	697a      	ldr	r2, [r7, #20]
 8005926:	4313      	orrs	r3, r2
 8005928:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	f023 0304 	bic.w	r3, r3, #4
 8005930:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <TIM_OC1_SetConfig+0x11c>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d013      	beq.n	8005962 <TIM_OC1_SetConfig+0xd2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a1c      	ldr	r2, [pc, #112]	; (80059b0 <TIM_OC1_SetConfig+0x120>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d00f      	beq.n	8005962 <TIM_OC1_SetConfig+0xd2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a1b      	ldr	r2, [pc, #108]	; (80059b4 <TIM_OC1_SetConfig+0x124>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d00b      	beq.n	8005962 <TIM_OC1_SetConfig+0xd2>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a1a      	ldr	r2, [pc, #104]	; (80059b8 <TIM_OC1_SetConfig+0x128>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d007      	beq.n	8005962 <TIM_OC1_SetConfig+0xd2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	4a19      	ldr	r2, [pc, #100]	; (80059bc <TIM_OC1_SetConfig+0x12c>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d003      	beq.n	8005962 <TIM_OC1_SetConfig+0xd2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a18      	ldr	r2, [pc, #96]	; (80059c0 <TIM_OC1_SetConfig+0x130>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d111      	bne.n	8005986 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005968:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800596a:	693b      	ldr	r3, [r7, #16]
 800596c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005970:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	695b      	ldr	r3, [r3, #20]
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4313      	orrs	r3, r2
 8005984:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	693a      	ldr	r2, [r7, #16]
 800598a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68fa      	ldr	r2, [r7, #12]
 8005990:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685a      	ldr	r2, [r3, #4]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	697a      	ldr	r2, [r7, #20]
 800599e:	621a      	str	r2, [r3, #32]
}
 80059a0:	bf00      	nop
 80059a2:	371c      	adds	r7, #28
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr
 80059ac:	40012c00 	.word	0x40012c00
 80059b0:	40013400 	.word	0x40013400
 80059b4:	40014000 	.word	0x40014000
 80059b8:	40014400 	.word	0x40014400
 80059bc:	40014800 	.word	0x40014800
 80059c0:	40015000 	.word	0x40015000

080059c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b087      	sub	sp, #28
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a1b      	ldr	r3, [r3, #32]
 80059d2:	f023 0210 	bic.w	r2, r3, #16
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80059f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80059f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	021b      	lsls	r3, r3, #8
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	f023 0320 	bic.w	r3, r3, #32
 8005a12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	011b      	lsls	r3, r3, #4
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	4313      	orrs	r3, r2
 8005a1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a2c      	ldr	r2, [pc, #176]	; (8005ad4 <TIM_OC2_SetConfig+0x110>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d007      	beq.n	8005a38 <TIM_OC2_SetConfig+0x74>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a2b      	ldr	r2, [pc, #172]	; (8005ad8 <TIM_OC2_SetConfig+0x114>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC2_SetConfig+0x74>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a2a      	ldr	r2, [pc, #168]	; (8005adc <TIM_OC2_SetConfig+0x118>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d10d      	bne.n	8005a54 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1f      	ldr	r2, [pc, #124]	; (8005ad4 <TIM_OC2_SetConfig+0x110>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d013      	beq.n	8005a84 <TIM_OC2_SetConfig+0xc0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1e      	ldr	r2, [pc, #120]	; (8005ad8 <TIM_OC2_SetConfig+0x114>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00f      	beq.n	8005a84 <TIM_OC2_SetConfig+0xc0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1e      	ldr	r2, [pc, #120]	; (8005ae0 <TIM_OC2_SetConfig+0x11c>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d00b      	beq.n	8005a84 <TIM_OC2_SetConfig+0xc0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1d      	ldr	r2, [pc, #116]	; (8005ae4 <TIM_OC2_SetConfig+0x120>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_OC2_SetConfig+0xc0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a1c      	ldr	r2, [pc, #112]	; (8005ae8 <TIM_OC2_SetConfig+0x124>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC2_SetConfig+0xc0>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a17      	ldr	r2, [pc, #92]	; (8005adc <TIM_OC2_SetConfig+0x118>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d113      	bne.n	8005aac <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	695b      	ldr	r3, [r3, #20]
 8005a98:	009b      	lsls	r3, r3, #2
 8005a9a:	693a      	ldr	r2, [r7, #16]
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	4313      	orrs	r3, r2
 8005aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	693a      	ldr	r2, [r7, #16]
 8005ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	685a      	ldr	r2, [r3, #4]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	621a      	str	r2, [r3, #32]
}
 8005ac6:	bf00      	nop
 8005ac8:	371c      	adds	r7, #28
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr
 8005ad2:	bf00      	nop
 8005ad4:	40012c00 	.word	0x40012c00
 8005ad8:	40013400 	.word	0x40013400
 8005adc:	40015000 	.word	0x40015000
 8005ae0:	40014000 	.word	0x40014000
 8005ae4:	40014400 	.word	0x40014400
 8005ae8:	40014800 	.word	0x40014800

08005aec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
 8005af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a1b      	ldr	r3, [r3, #32]
 8005afa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	69db      	ldr	r3, [r3, #28]
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f023 0303 	bic.w	r3, r3, #3
 8005b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b3a:	683b      	ldr	r3, [r7, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	021b      	lsls	r3, r3, #8
 8005b40:	697a      	ldr	r2, [r7, #20]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	4a2b      	ldr	r2, [pc, #172]	; (8005bf8 <TIM_OC3_SetConfig+0x10c>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d007      	beq.n	8005b5e <TIM_OC3_SetConfig+0x72>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	4a2a      	ldr	r2, [pc, #168]	; (8005bfc <TIM_OC3_SetConfig+0x110>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d003      	beq.n	8005b5e <TIM_OC3_SetConfig+0x72>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4a29      	ldr	r2, [pc, #164]	; (8005c00 <TIM_OC3_SetConfig+0x114>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d10d      	bne.n	8005b7a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b64:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	021b      	lsls	r3, r3, #8
 8005b6c:	697a      	ldr	r2, [r7, #20]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b78:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a1e      	ldr	r2, [pc, #120]	; (8005bf8 <TIM_OC3_SetConfig+0x10c>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d013      	beq.n	8005baa <TIM_OC3_SetConfig+0xbe>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4a1d      	ldr	r2, [pc, #116]	; (8005bfc <TIM_OC3_SetConfig+0x110>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d00f      	beq.n	8005baa <TIM_OC3_SetConfig+0xbe>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4a1d      	ldr	r2, [pc, #116]	; (8005c04 <TIM_OC3_SetConfig+0x118>)
 8005b8e:	4293      	cmp	r3, r2
 8005b90:	d00b      	beq.n	8005baa <TIM_OC3_SetConfig+0xbe>
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a1c      	ldr	r2, [pc, #112]	; (8005c08 <TIM_OC3_SetConfig+0x11c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_OC3_SetConfig+0xbe>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a1b      	ldr	r2, [pc, #108]	; (8005c0c <TIM_OC3_SetConfig+0x120>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_OC3_SetConfig+0xbe>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <TIM_OC3_SetConfig+0x114>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d113      	bne.n	8005bd2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	695b      	ldr	r3, [r3, #20]
 8005bbe:	011b      	lsls	r3, r3, #4
 8005bc0:	693a      	ldr	r2, [r7, #16]
 8005bc2:	4313      	orrs	r3, r2
 8005bc4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	011b      	lsls	r3, r3, #4
 8005bcc:	693a      	ldr	r2, [r7, #16]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	685a      	ldr	r2, [r3, #4]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	621a      	str	r2, [r3, #32]
}
 8005bec:	bf00      	nop
 8005bee:	371c      	adds	r7, #28
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	40012c00 	.word	0x40012c00
 8005bfc:	40013400 	.word	0x40013400
 8005c00:	40015000 	.word	0x40015000
 8005c04:	40014000 	.word	0x40014000
 8005c08:	40014400 	.word	0x40014400
 8005c0c:	40014800 	.word	0x40014800

08005c10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69db      	ldr	r3, [r3, #28]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	021b      	lsls	r3, r3, #8
 8005c52:	68fa      	ldr	r2, [r7, #12]
 8005c54:	4313      	orrs	r3, r2
 8005c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	031b      	lsls	r3, r3, #12
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	4313      	orrs	r3, r2
 8005c6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	4a2c      	ldr	r2, [pc, #176]	; (8005d20 <TIM_OC4_SetConfig+0x110>)
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d007      	beq.n	8005c84 <TIM_OC4_SetConfig+0x74>
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	4a2b      	ldr	r2, [pc, #172]	; (8005d24 <TIM_OC4_SetConfig+0x114>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d003      	beq.n	8005c84 <TIM_OC4_SetConfig+0x74>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	4a2a      	ldr	r2, [pc, #168]	; (8005d28 <TIM_OC4_SetConfig+0x118>)
 8005c80:	4293      	cmp	r3, r2
 8005c82:	d10d      	bne.n	8005ca0 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c84:	697b      	ldr	r3, [r7, #20]
 8005c86:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	031b      	lsls	r3, r3, #12
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	4a1f      	ldr	r2, [pc, #124]	; (8005d20 <TIM_OC4_SetConfig+0x110>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d013      	beq.n	8005cd0 <TIM_OC4_SetConfig+0xc0>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a1e      	ldr	r2, [pc, #120]	; (8005d24 <TIM_OC4_SetConfig+0x114>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00f      	beq.n	8005cd0 <TIM_OC4_SetConfig+0xc0>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1e      	ldr	r2, [pc, #120]	; (8005d2c <TIM_OC4_SetConfig+0x11c>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d00b      	beq.n	8005cd0 <TIM_OC4_SetConfig+0xc0>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a1d      	ldr	r2, [pc, #116]	; (8005d30 <TIM_OC4_SetConfig+0x120>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_OC4_SetConfig+0xc0>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a1c      	ldr	r2, [pc, #112]	; (8005d34 <TIM_OC4_SetConfig+0x124>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC4_SetConfig+0xc0>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a17      	ldr	r2, [pc, #92]	; (8005d28 <TIM_OC4_SetConfig+0x118>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d113      	bne.n	8005cf8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cde:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	695b      	ldr	r3, [r3, #20]
 8005ce4:	019b      	lsls	r3, r3, #6
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	4313      	orrs	r3, r2
 8005cea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	019b      	lsls	r3, r3, #6
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	693a      	ldr	r2, [r7, #16]
 8005cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	68fa      	ldr	r2, [r7, #12]
 8005d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	685a      	ldr	r2, [r3, #4]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	697a      	ldr	r2, [r7, #20]
 8005d10:	621a      	str	r2, [r3, #32]
}
 8005d12:	bf00      	nop
 8005d14:	371c      	adds	r7, #28
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	40012c00 	.word	0x40012c00
 8005d24:	40013400 	.word	0x40013400
 8005d28:	40015000 	.word	0x40015000
 8005d2c:	40014000 	.word	0x40014000
 8005d30:	40014400 	.word	0x40014400
 8005d34:	40014800 	.word	0x40014800

08005d38 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	6a1b      	ldr	r3, [r3, #32]
 8005d52:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005d7c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	689b      	ldr	r3, [r3, #8]
 8005d82:	041b      	lsls	r3, r3, #16
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a19      	ldr	r2, [pc, #100]	; (8005df4 <TIM_OC5_SetConfig+0xbc>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d013      	beq.n	8005dba <TIM_OC5_SetConfig+0x82>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	4a18      	ldr	r2, [pc, #96]	; (8005df8 <TIM_OC5_SetConfig+0xc0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d00f      	beq.n	8005dba <TIM_OC5_SetConfig+0x82>
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	4a17      	ldr	r2, [pc, #92]	; (8005dfc <TIM_OC5_SetConfig+0xc4>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d00b      	beq.n	8005dba <TIM_OC5_SetConfig+0x82>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4a16      	ldr	r2, [pc, #88]	; (8005e00 <TIM_OC5_SetConfig+0xc8>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d007      	beq.n	8005dba <TIM_OC5_SetConfig+0x82>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4a15      	ldr	r2, [pc, #84]	; (8005e04 <TIM_OC5_SetConfig+0xcc>)
 8005dae:	4293      	cmp	r3, r2
 8005db0:	d003      	beq.n	8005dba <TIM_OC5_SetConfig+0x82>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	4a14      	ldr	r2, [pc, #80]	; (8005e08 <TIM_OC5_SetConfig+0xd0>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d109      	bne.n	8005dce <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	685a      	ldr	r2, [r3, #4]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	693a      	ldr	r2, [r7, #16]
 8005de6:	621a      	str	r2, [r3, #32]
}
 8005de8:	bf00      	nop
 8005dea:	371c      	adds	r7, #28
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr
 8005df4:	40012c00 	.word	0x40012c00
 8005df8:	40013400 	.word	0x40013400
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40014400 	.word	0x40014400
 8005e04:	40014800 	.word	0x40014800
 8005e08:	40015000 	.word	0x40015000

08005e0c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	b087      	sub	sp, #28
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
 8005e14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6a1b      	ldr	r3, [r3, #32]
 8005e1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6a1b      	ldr	r3, [r3, #32]
 8005e26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	021b      	lsls	r3, r3, #8
 8005e46:	68fa      	ldr	r2, [r7, #12]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e54:	683b      	ldr	r3, [r7, #0]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	051b      	lsls	r3, r3, #20
 8005e5a:	693a      	ldr	r2, [r7, #16]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <TIM_OC6_SetConfig+0xc0>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <TIM_OC6_SetConfig+0x84>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	4a19      	ldr	r2, [pc, #100]	; (8005ed0 <TIM_OC6_SetConfig+0xc4>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d00f      	beq.n	8005e90 <TIM_OC6_SetConfig+0x84>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a18      	ldr	r2, [pc, #96]	; (8005ed4 <TIM_OC6_SetConfig+0xc8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_OC6_SetConfig+0x84>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <TIM_OC6_SetConfig+0xcc>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_OC6_SetConfig+0x84>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a16      	ldr	r2, [pc, #88]	; (8005edc <TIM_OC6_SetConfig+0xd0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_OC6_SetConfig+0x84>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a15      	ldr	r2, [pc, #84]	; (8005ee0 <TIM_OC6_SetConfig+0xd4>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d109      	bne.n	8005ea4 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005e96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	029b      	lsls	r3, r3, #10
 8005e9e:	697a      	ldr	r2, [r7, #20]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	697a      	ldr	r2, [r7, #20]
 8005ea8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	68fa      	ldr	r2, [r7, #12]
 8005eae:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	685a      	ldr	r2, [r3, #4]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	693a      	ldr	r2, [r7, #16]
 8005ebc:	621a      	str	r2, [r3, #32]
}
 8005ebe:	bf00      	nop
 8005ec0:	371c      	adds	r7, #28
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr
 8005eca:	bf00      	nop
 8005ecc:	40012c00 	.word	0x40012c00
 8005ed0:	40013400 	.word	0x40013400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40014400 	.word	0x40014400
 8005edc:	40014800 	.word	0x40014800
 8005ee0:	40015000 	.word	0x40015000

08005ee4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b087      	sub	sp, #28
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6a1b      	ldr	r3, [r3, #32]
 8005ef4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6a1b      	ldr	r3, [r3, #32]
 8005efa:	f023 0201 	bic.w	r2, r3, #1
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	699b      	ldr	r3, [r3, #24]
 8005f06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	011b      	lsls	r3, r3, #4
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	4313      	orrs	r3, r2
 8005f18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f023 030a 	bic.w	r3, r3, #10
 8005f20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f22:	697a      	ldr	r2, [r7, #20]
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	697a      	ldr	r2, [r7, #20]
 8005f34:	621a      	str	r2, [r3, #32]
}
 8005f36:	bf00      	nop
 8005f38:	371c      	adds	r7, #28
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b087      	sub	sp, #28
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6a1b      	ldr	r3, [r3, #32]
 8005f52:	f023 0210 	bic.w	r2, r3, #16
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	699b      	ldr	r3, [r3, #24]
 8005f5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6a1b      	ldr	r3, [r3, #32]
 8005f64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	031b      	lsls	r3, r3, #12
 8005f72:	697a      	ldr	r2, [r7, #20]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	011b      	lsls	r3, r3, #4
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	4313      	orrs	r3, r2
 8005f88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	697a      	ldr	r2, [r7, #20]
 8005f8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	693a      	ldr	r2, [r7, #16]
 8005f94:	621a      	str	r2, [r3, #32]
}
 8005f96:	bf00      	nop
 8005f98:	371c      	adds	r7, #28
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr

08005fa2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fa2:	b480      	push	{r7}
 8005fa4:	b085      	sub	sp, #20
 8005fa6:	af00      	add	r7, sp, #0
 8005fa8:	6078      	str	r0, [r7, #4]
 8005faa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005fb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	f043 0307 	orr.w	r3, r3, #7
 8005fc8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	609a      	str	r2, [r3, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	3714      	adds	r7, #20
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fda:	4770      	bx	lr

08005fdc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fdc:	b480      	push	{r7}
 8005fde:	b087      	sub	sp, #28
 8005fe0:	af00      	add	r7, sp, #0
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ff0:	697b      	ldr	r3, [r7, #20]
 8005ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ff6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	021a      	lsls	r2, r3, #8
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	431a      	orrs	r2, r3
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	4313      	orrs	r3, r2
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	4313      	orrs	r3, r2
 8006008:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	697a      	ldr	r2, [r7, #20]
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	371c      	adds	r7, #28
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	f003 031f 	and.w	r3, r3, #31
 800602e:	2201      	movs	r2, #1
 8006030:	fa02 f303 	lsl.w	r3, r2, r3
 8006034:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6a1a      	ldr	r2, [r3, #32]
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	43db      	mvns	r3, r3
 800603e:	401a      	ands	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	6a1a      	ldr	r2, [r3, #32]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	431a      	orrs	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	621a      	str	r2, [r3, #32]
}
 800605a:	bf00      	nop
 800605c:	371c      	adds	r7, #28
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
	...

08006068 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b084      	sub	sp, #16
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d109      	bne.n	800608c <HAL_TIMEx_PWMN_Start+0x24>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800607e:	b2db      	uxtb	r3, r3
 8006080:	2b01      	cmp	r3, #1
 8006082:	bf14      	ite	ne
 8006084:	2301      	movne	r3, #1
 8006086:	2300      	moveq	r3, #0
 8006088:	b2db      	uxtb	r3, r3
 800608a:	e022      	b.n	80060d2 <HAL_TIMEx_PWMN_Start+0x6a>
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	2b04      	cmp	r3, #4
 8006090:	d109      	bne.n	80060a6 <HAL_TIMEx_PWMN_Start+0x3e>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b01      	cmp	r3, #1
 800609c:	bf14      	ite	ne
 800609e:	2301      	movne	r3, #1
 80060a0:	2300      	moveq	r3, #0
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	e015      	b.n	80060d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d109      	bne.n	80060c0 <HAL_TIMEx_PWMN_Start+0x58>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80060b2:	b2db      	uxtb	r3, r3
 80060b4:	2b01      	cmp	r3, #1
 80060b6:	bf14      	ite	ne
 80060b8:	2301      	movne	r3, #1
 80060ba:	2300      	moveq	r3, #0
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	e008      	b.n	80060d2 <HAL_TIMEx_PWMN_Start+0x6a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80060d6:	2301      	movs	r3, #1
 80060d8:	e073      	b.n	80061c2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d104      	bne.n	80060ea <HAL_TIMEx_PWMN_Start+0x82>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	2202      	movs	r2, #2
 80060e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060e8:	e013      	b.n	8006112 <HAL_TIMEx_PWMN_Start+0xaa>
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	2b04      	cmp	r3, #4
 80060ee:	d104      	bne.n	80060fa <HAL_TIMEx_PWMN_Start+0x92>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2202      	movs	r2, #2
 80060f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80060f8:	e00b      	b.n	8006112 <HAL_TIMEx_PWMN_Start+0xaa>
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	2b08      	cmp	r3, #8
 80060fe:	d104      	bne.n	800610a <HAL_TIMEx_PWMN_Start+0xa2>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2202      	movs	r2, #2
 8006104:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006108:	e003      	b.n	8006112 <HAL_TIMEx_PWMN_Start+0xaa>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2204      	movs	r2, #4
 8006118:	6839      	ldr	r1, [r7, #0]
 800611a:	4618      	mov	r0, r3
 800611c:	f000 fa0c 	bl	8006538 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800612e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a25      	ldr	r2, [pc, #148]	; (80061cc <HAL_TIMEx_PWMN_Start+0x164>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d022      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d01d      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a21      	ldr	r2, [pc, #132]	; (80061d0 <HAL_TIMEx_PWMN_Start+0x168>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d018      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a20      	ldr	r2, [pc, #128]	; (80061d4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d013      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1e      	ldr	r2, [pc, #120]	; (80061d8 <HAL_TIMEx_PWMN_Start+0x170>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00e      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1d      	ldr	r2, [pc, #116]	; (80061dc <HAL_TIMEx_PWMN_Start+0x174>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d009      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a1b      	ldr	r2, [pc, #108]	; (80061e0 <HAL_TIMEx_PWMN_Start+0x178>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d004      	beq.n	8006180 <HAL_TIMEx_PWMN_Start+0x118>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <HAL_TIMEx_PWMN_Start+0x17c>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d115      	bne.n	80061ac <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	689a      	ldr	r2, [r3, #8]
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <HAL_TIMEx_PWMN_Start+0x180>)
 8006188:	4013      	ands	r3, r2
 800618a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2b06      	cmp	r3, #6
 8006190:	d015      	beq.n	80061be <HAL_TIMEx_PWMN_Start+0x156>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006198:	d011      	beq.n	80061be <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f042 0201 	orr.w	r2, r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061aa:	e008      	b.n	80061be <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f042 0201 	orr.w	r2, r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
 80061bc:	e000      	b.n	80061c0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3710      	adds	r7, #16
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	40012c00 	.word	0x40012c00
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40013400 	.word	0x40013400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40015000 	.word	0x40015000
 80061e8:	00010007 	.word	0x00010007

080061ec <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	2200      	movs	r2, #0
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 f99a 	bl	8006538 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	f241 1311 	movw	r3, #4369	; 0x1111
 800620e:	4013      	ands	r3, r2
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10f      	bne.n	8006234 <HAL_TIMEx_PWMN_Stop+0x48>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6a1a      	ldr	r2, [r3, #32]
 800621a:	f244 4344 	movw	r3, #17476	; 0x4444
 800621e:	4013      	ands	r3, r2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d107      	bne.n	8006234 <HAL_TIMEx_PWMN_Stop+0x48>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006232:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	6a1a      	ldr	r2, [r3, #32]
 800623a:	f241 1311 	movw	r3, #4369	; 0x1111
 800623e:	4013      	ands	r3, r2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10f      	bne.n	8006264 <HAL_TIMEx_PWMN_Stop+0x78>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	6a1a      	ldr	r2, [r3, #32]
 800624a:	f244 4344 	movw	r3, #17476	; 0x4444
 800624e:	4013      	ands	r3, r2
 8006250:	2b00      	cmp	r3, #0
 8006252:	d107      	bne.n	8006264 <HAL_TIMEx_PWMN_Stop+0x78>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f022 0201 	bic.w	r2, r2, #1
 8006262:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d104      	bne.n	8006274 <HAL_TIMEx_PWMN_Stop+0x88>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006272:	e013      	b.n	800629c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b04      	cmp	r3, #4
 8006278:	d104      	bne.n	8006284 <HAL_TIMEx_PWMN_Stop+0x98>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006282:	e00b      	b.n	800629c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	2b08      	cmp	r3, #8
 8006288:	d104      	bne.n	8006294 <HAL_TIMEx_PWMN_Stop+0xa8>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2201      	movs	r2, #1
 800628e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006292:	e003      	b.n	800629c <HAL_TIMEx_PWMN_Stop+0xb0>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	2201      	movs	r2, #1
 8006298:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3708      	adds	r7, #8
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}
	...

080062a8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d101      	bne.n	80062c0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80062bc:	2302      	movs	r3, #2
 80062be:	e074      	b.n	80063aa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2202      	movs	r2, #2
 80062cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	4a34      	ldr	r2, [pc, #208]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d009      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a33      	ldr	r2, [pc, #204]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d004      	beq.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	4a31      	ldr	r2, [pc, #196]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d108      	bne.n	8006310 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006304:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	68fa      	ldr	r2, [r7, #12]
 800630c:	4313      	orrs	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800631c:	683b      	ldr	r3, [r7, #0]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	68fa      	ldr	r2, [r7, #12]
 8006322:	4313      	orrs	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	4a21      	ldr	r2, [pc, #132]	; (80063b8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d022      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006340:	d01d      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a1f      	ldr	r2, [pc, #124]	; (80063c4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d018      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a1d      	ldr	r2, [pc, #116]	; (80063c8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d013      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a1c      	ldr	r2, [pc, #112]	; (80063cc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d00e      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a15      	ldr	r2, [pc, #84]	; (80063bc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d009      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d004      	beq.n	800637e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a11      	ldr	r2, [pc, #68]	; (80063c0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d10c      	bne.n	8006398 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006384:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	689b      	ldr	r3, [r3, #8]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4313      	orrs	r3, r2
 800638e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	68ba      	ldr	r2, [r7, #8]
 8006396:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3714      	adds	r7, #20
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr
 80063b6:	bf00      	nop
 80063b8:	40012c00 	.word	0x40012c00
 80063bc:	40013400 	.word	0x40013400
 80063c0:	40015000 	.word	0x40015000
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40014000 	.word	0x40014000

080063d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80063de:	2300      	movs	r3, #0
 80063e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e096      	b.n	800651e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	4313      	orrs	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	689b      	ldr	r3, [r3, #8]
 8006410:	4313      	orrs	r3, r2
 8006412:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4313      	orrs	r3, r2
 800642e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	691b      	ldr	r3, [r3, #16]
 800643a:	4313      	orrs	r3, r2
 800643c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	695b      	ldr	r3, [r3, #20]
 8006448:	4313      	orrs	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006456:	4313      	orrs	r3, r2
 8006458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	699b      	ldr	r3, [r3, #24]
 8006464:	041b      	lsls	r3, r3, #16
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	4a2f      	ldr	r2, [pc, #188]	; (800652c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006470:	4293      	cmp	r3, r2
 8006472:	d009      	beq.n	8006488 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	4a2d      	ldr	r2, [pc, #180]	; (8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d004      	beq.n	8006488 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	4a2c      	ldr	r2, [pc, #176]	; (8006534 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d106      	bne.n	8006496 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	69db      	ldr	r3, [r3, #28]
 8006492:	4313      	orrs	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a24      	ldr	r2, [pc, #144]	; (800652c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a22      	ldr	r2, [pc, #136]	; (8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a21      	ldr	r2, [pc, #132]	; (8006534 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d12b      	bne.n	800650c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064be:	051b      	lsls	r3, r3, #20
 80064c0:	4313      	orrs	r3, r2
 80064c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064dc:	4313      	orrs	r3, r2
 80064de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4a11      	ldr	r2, [pc, #68]	; (800652c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d009      	beq.n	80064fe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	4a10      	ldr	r2, [pc, #64]	; (8006530 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d004      	beq.n	80064fe <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4a0e      	ldr	r2, [pc, #56]	; (8006534 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80064fa:	4293      	cmp	r3, r2
 80064fc:	d106      	bne.n	800650c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	68fa      	ldr	r2, [r7, #12]
 8006512:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2200      	movs	r2, #0
 8006518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	3714      	adds	r7, #20
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr
 800652a:	bf00      	nop
 800652c:	40012c00 	.word	0x40012c00
 8006530:	40013400 	.word	0x40013400
 8006534:	40015000 	.word	0x40015000

08006538 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8006538:	b480      	push	{r7}
 800653a:	b087      	sub	sp, #28
 800653c:	af00      	add	r7, sp, #0
 800653e:	60f8      	str	r0, [r7, #12]
 8006540:	60b9      	str	r1, [r7, #8]
 8006542:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	f003 031f 	and.w	r3, r3, #31
 800654a:	2204      	movs	r2, #4
 800654c:	fa02 f303 	lsl.w	r3, r2, r3
 8006550:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	6a1a      	ldr	r2, [r3, #32]
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	43db      	mvns	r3, r3
 800655a:	401a      	ands	r2, r3
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	6a1a      	ldr	r2, [r3, #32]
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	f003 031f 	and.w	r3, r3, #31
 800656a:	6879      	ldr	r1, [r7, #4]
 800656c:	fa01 f303 	lsl.w	r3, r1, r3
 8006570:	431a      	orrs	r2, r3
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	621a      	str	r2, [r3, #32]
}
 8006576:	bf00      	nop
 8006578:	371c      	adds	r7, #28
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d101      	bne.n	8006594 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	e042      	b.n	800661a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f7fb fab2 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2224      	movs	r2, #36	; 0x24
 80065b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f022 0201 	bic.w	r2, r2, #1
 80065c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fc51 	bl	8006e6c <UART_SetConfig>
 80065ca:	4603      	mov	r3, r0
 80065cc:	2b01      	cmp	r3, #1
 80065ce:	d101      	bne.n	80065d4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	e022      	b.n	800661a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d002      	beq.n	80065e2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 ff41 	bl	8007464 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	685a      	ldr	r2, [r3, #4]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80065f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	689a      	ldr	r2, [r3, #8]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006600:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f042 0201 	orr.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f000 ffc8 	bl	80075a8 <UART_CheckIdleState>
 8006618:	4603      	mov	r3, r0
}
 800661a:	4618      	mov	r0, r3
 800661c:	3708      	adds	r7, #8
 800661e:	46bd      	mov	sp, r7
 8006620:	bd80      	pop	{r7, pc}

08006622 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006622:	b580      	push	{r7, lr}
 8006624:	b08a      	sub	sp, #40	; 0x28
 8006626:	af02      	add	r7, sp, #8
 8006628:	60f8      	str	r0, [r7, #12]
 800662a:	60b9      	str	r1, [r7, #8]
 800662c:	603b      	str	r3, [r7, #0]
 800662e:	4613      	mov	r3, r2
 8006630:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006638:	2b20      	cmp	r3, #32
 800663a:	f040 8083 	bne.w	8006744 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_UART_Transmit+0x28>
 8006644:	88fb      	ldrh	r3, [r7, #6]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e07b      	b.n	8006746 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006654:	2b01      	cmp	r3, #1
 8006656:	d101      	bne.n	800665c <HAL_UART_Transmit+0x3a>
 8006658:	2302      	movs	r3, #2
 800665a:	e074      	b.n	8006746 <HAL_UART_Transmit+0x124>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2221      	movs	r2, #33	; 0x21
 8006670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006674:	f7fb fc4e 	bl	8001f14 <HAL_GetTick>
 8006678:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	88fa      	ldrh	r2, [r7, #6]
 800667e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	88fa      	ldrh	r2, [r7, #6]
 8006686:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006692:	d108      	bne.n	80066a6 <HAL_UART_Transmit+0x84>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d104      	bne.n	80066a6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	61bb      	str	r3, [r7, #24]
 80066a4:	e003      	b.n	80066ae <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066aa:	2300      	movs	r3, #0
 80066ac:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	2200      	movs	r2, #0
 80066b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80066b6:	e02c      	b.n	8006712 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	9300      	str	r3, [sp, #0]
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	2200      	movs	r2, #0
 80066c0:	2180      	movs	r1, #128	; 0x80
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f000 ffbb 	bl	800763e <UART_WaitOnFlagUntilTimeout>
 80066c8:	4603      	mov	r3, r0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d001      	beq.n	80066d2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80066ce:	2303      	movs	r3, #3
 80066d0:	e039      	b.n	8006746 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d10b      	bne.n	80066f0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	461a      	mov	r2, r3
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066e6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	3302      	adds	r3, #2
 80066ec:	61bb      	str	r3, [r7, #24]
 80066ee:	e007      	b.n	8006700 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	781a      	ldrb	r2, [r3, #0]
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80066fa:	69fb      	ldr	r3, [r7, #28]
 80066fc:	3301      	adds	r3, #1
 80066fe:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b01      	subs	r3, #1
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006718:	b29b      	uxth	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d1cc      	bne.n	80066b8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	2200      	movs	r2, #0
 8006726:	2140      	movs	r1, #64	; 0x40
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 ff88 	bl	800763e <UART_WaitOnFlagUntilTimeout>
 800672e:	4603      	mov	r3, r0
 8006730:	2b00      	cmp	r3, #0
 8006732:	d001      	beq.n	8006738 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006734:	2303      	movs	r3, #3
 8006736:	e006      	b.n	8006746 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	2220      	movs	r2, #32
 800673c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3720      	adds	r7, #32
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
	...

08006750 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b08a      	sub	sp, #40	; 0x28
 8006754:	af00      	add	r7, sp, #0
 8006756:	60f8      	str	r0, [r7, #12]
 8006758:	60b9      	str	r1, [r7, #8]
 800675a:	4613      	mov	r3, r2
 800675c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006764:	2b20      	cmp	r3, #32
 8006766:	d142      	bne.n	80067ee <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d002      	beq.n	8006774 <HAL_UART_Receive_IT+0x24>
 800676e:	88fb      	ldrh	r3, [r7, #6]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d101      	bne.n	8006778 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	e03b      	b.n	80067f0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800677e:	2b01      	cmp	r3, #1
 8006780:	d101      	bne.n	8006786 <HAL_UART_Receive_IT+0x36>
 8006782:	2302      	movs	r3, #2
 8006784:	e034      	b.n	80067f0 <HAL_UART_Receive_IT+0xa0>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a17      	ldr	r2, [pc, #92]	; (80067f8 <HAL_UART_Receive_IT+0xa8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d01f      	beq.n	80067de <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d018      	beq.n	80067de <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	e853 3f00 	ldrex	r3, [r3]
 80067b8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80067c0:	627b      	str	r3, [r7, #36]	; 0x24
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	461a      	mov	r2, r3
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	623b      	str	r3, [r7, #32]
 80067cc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ce:	69f9      	ldr	r1, [r7, #28]
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	e841 2300 	strex	r3, r2, [r1]
 80067d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80067d8:	69bb      	ldr	r3, [r7, #24]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1e6      	bne.n	80067ac <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067de:	88fb      	ldrh	r3, [r7, #6]
 80067e0:	461a      	mov	r2, r3
 80067e2:	68b9      	ldr	r1, [r7, #8]
 80067e4:	68f8      	ldr	r0, [r7, #12]
 80067e6:	f000 fff3 	bl	80077d0 <UART_Start_Receive_IT>
 80067ea:	4603      	mov	r3, r0
 80067ec:	e000      	b.n	80067f0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
  }
}
 80067f0:	4618      	mov	r0, r3
 80067f2:	3728      	adds	r7, #40	; 0x28
 80067f4:	46bd      	mov	sp, r7
 80067f6:	bd80      	pop	{r7, pc}
 80067f8:	40008000 	.word	0x40008000

080067fc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b0ba      	sub	sp, #232	; 0xe8
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	689b      	ldr	r3, [r3, #8]
 800681e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006822:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006826:	f640 030f 	movw	r3, #2063	; 0x80f
 800682a:	4013      	ands	r3, r2
 800682c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006830:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006834:	2b00      	cmp	r3, #0
 8006836:	d11b      	bne.n	8006870 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800683c:	f003 0320 	and.w	r3, r3, #32
 8006840:	2b00      	cmp	r3, #0
 8006842:	d015      	beq.n	8006870 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006848:	f003 0320 	and.w	r3, r3, #32
 800684c:	2b00      	cmp	r3, #0
 800684e:	d105      	bne.n	800685c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006850:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006858:	2b00      	cmp	r3, #0
 800685a:	d009      	beq.n	8006870 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 82d6 	beq.w	8006e12 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	4798      	blx	r3
      }
      return;
 800686e:	e2d0      	b.n	8006e12 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006870:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006874:	2b00      	cmp	r3, #0
 8006876:	f000 811f 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800687a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800687e:	4b8b      	ldr	r3, [pc, #556]	; (8006aac <HAL_UART_IRQHandler+0x2b0>)
 8006880:	4013      	ands	r3, r2
 8006882:	2b00      	cmp	r3, #0
 8006884:	d106      	bne.n	8006894 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006886:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800688a:	4b89      	ldr	r3, [pc, #548]	; (8006ab0 <HAL_UART_IRQHandler+0x2b4>)
 800688c:	4013      	ands	r3, r2
 800688e:	2b00      	cmp	r3, #0
 8006890:	f000 8112 	beq.w	8006ab8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006894:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006898:	f003 0301 	and.w	r3, r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	d011      	beq.n	80068c4 <HAL_UART_IRQHandler+0xc8>
 80068a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d00b      	beq.n	80068c4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2201      	movs	r2, #1
 80068b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ba:	f043 0201 	orr.w	r2, r3, #1
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068c8:	f003 0302 	and.w	r3, r3, #2
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d011      	beq.n	80068f4 <HAL_UART_IRQHandler+0xf8>
 80068d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068d4:	f003 0301 	and.w	r3, r3, #1
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d00b      	beq.n	80068f4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2202      	movs	r2, #2
 80068e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ea:	f043 0204 	orr.w	r2, r3, #4
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80068f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f8:	f003 0304 	and.w	r3, r3, #4
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d011      	beq.n	8006924 <HAL_UART_IRQHandler+0x128>
 8006900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	2b00      	cmp	r3, #0
 800690a:	d00b      	beq.n	8006924 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	2204      	movs	r2, #4
 8006912:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800691a:	f043 0202 	orr.w	r2, r3, #2
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006928:	f003 0308 	and.w	r3, r3, #8
 800692c:	2b00      	cmp	r3, #0
 800692e:	d017      	beq.n	8006960 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006934:	f003 0320 	and.w	r3, r3, #32
 8006938:	2b00      	cmp	r3, #0
 800693a:	d105      	bne.n	8006948 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800693c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006940:	4b5a      	ldr	r3, [pc, #360]	; (8006aac <HAL_UART_IRQHandler+0x2b0>)
 8006942:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	2208      	movs	r2, #8
 800694e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006956:	f043 0208 	orr.w	r2, r3, #8
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006960:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006964:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006968:	2b00      	cmp	r3, #0
 800696a:	d012      	beq.n	8006992 <HAL_UART_IRQHandler+0x196>
 800696c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006970:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006974:	2b00      	cmp	r3, #0
 8006976:	d00c      	beq.n	8006992 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006980:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006988:	f043 0220 	orr.w	r2, r3, #32
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 823c 	beq.w	8006e16 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800699e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80069a2:	f003 0320 	and.w	r3, r3, #32
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d013      	beq.n	80069d2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80069aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80069ae:	f003 0320 	and.w	r3, r3, #32
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d105      	bne.n	80069c2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80069b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80069ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d007      	beq.n	80069d2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d003      	beq.n	80069d2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	6878      	ldr	r0, [r7, #4]
 80069d0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069d8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e6:	2b40      	cmp	r3, #64	; 0x40
 80069e8:	d005      	beq.n	80069f6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80069ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80069ee:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d04f      	beq.n	8006a96 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f001 f814 	bl	8007a24 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a06:	2b40      	cmp	r3, #64	; 0x40
 8006a08:	d141      	bne.n	8006a8e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	3308      	adds	r3, #8
 8006a10:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006a20:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006a24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a28:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	3308      	adds	r3, #8
 8006a32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006a36:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006a3a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006a42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006a4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1d9      	bne.n	8006a0a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d013      	beq.n	8006a86 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a62:	4a14      	ldr	r2, [pc, #80]	; (8006ab4 <HAL_UART_IRQHandler+0x2b8>)
 8006a64:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a6a:	4618      	mov	r0, r3
 8006a6c:	f7fc ff88 	bl	8003980 <HAL_DMA_Abort_IT>
 8006a70:	4603      	mov	r3, r0
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d017      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a7c:	687a      	ldr	r2, [r7, #4]
 8006a7e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006a80:	4610      	mov	r0, r2
 8006a82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a84:	e00f      	b.n	8006aa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f9da 	bl	8006e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a8c:	e00b      	b.n	8006aa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f9d6 	bl	8006e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a94:	e007      	b.n	8006aa6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006a96:	6878      	ldr	r0, [r7, #4]
 8006a98:	f000 f9d2 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006aa4:	e1b7      	b.n	8006e16 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006aa6:	bf00      	nop
    return;
 8006aa8:	e1b5      	b.n	8006e16 <HAL_UART_IRQHandler+0x61a>
 8006aaa:	bf00      	nop
 8006aac:	10000001 	.word	0x10000001
 8006ab0:	04000120 	.word	0x04000120
 8006ab4:	08007af1 	.word	0x08007af1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006abc:	2b01      	cmp	r3, #1
 8006abe:	f040 814a 	bne.w	8006d56 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac6:	f003 0310 	and.w	r3, r3, #16
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	f000 8143 	beq.w	8006d56 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad4:	f003 0310 	and.w	r3, r3, #16
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	f000 813c 	beq.w	8006d56 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	2210      	movs	r2, #16
 8006ae4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006af0:	2b40      	cmp	r3, #64	; 0x40
 8006af2:	f040 80b5 	bne.w	8006c60 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006b02:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	f000 8187 	beq.w	8006e1a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006b12:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b16:	429a      	cmp	r2, r3
 8006b18:	f080 817f 	bcs.w	8006e1a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006b22:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0320 	and.w	r3, r3, #32
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 8086 	bne.w	8006c44 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b40:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006b44:	e853 3f00 	ldrex	r3, [r3]
 8006b48:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006b4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006b50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b54:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	461a      	mov	r2, r3
 8006b5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006b62:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006b66:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006b6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006b72:	e841 2300 	strex	r3, r2, [r1]
 8006b76:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d1da      	bne.n	8006b38 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	3308      	adds	r3, #8
 8006b88:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b8c:	e853 3f00 	ldrex	r3, [r3]
 8006b90:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b94:	f023 0301 	bic.w	r3, r3, #1
 8006b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	3308      	adds	r3, #8
 8006ba2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006ba6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006baa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006bae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006bb2:	e841 2300 	strex	r3, r2, [r1]
 8006bb6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d1e1      	bne.n	8006b82 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	3308      	adds	r3, #8
 8006bc4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006bc8:	e853 3f00 	ldrex	r3, [r3]
 8006bcc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006bce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006bd0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	3308      	adds	r3, #8
 8006bde:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006be2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006be4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006be6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006be8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006bea:	e841 2300 	strex	r3, r2, [r1]
 8006bee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d1e3      	bne.n	8006bbe <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	f023 0310 	bic.w	r3, r3, #16
 8006c18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	461a      	mov	r2, r3
 8006c22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006c26:	65bb      	str	r3, [r7, #88]	; 0x58
 8006c28:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006c2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c2e:	e841 2300 	strex	r3, r2, [r1]
 8006c32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006c34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1e4      	bne.n	8006c04 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fc fe45 	bl	80038ce <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	1ad3      	subs	r3, r2, r3
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	4619      	mov	r1, r3
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f000 f8fb 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c5e:	e0dc      	b.n	8006e1a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	1ad3      	subs	r3, r2, r3
 8006c70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 80ce 	beq.w	8006e1e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006c82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	f000 80c9 	beq.w	8006e1e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c94:	e853 3f00 	ldrex	r3, [r3]
 8006c98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006cae:	647b      	str	r3, [r7, #68]	; 0x44
 8006cb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006cb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006cb6:	e841 2300 	strex	r3, r2, [r1]
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d1e4      	bne.n	8006c8c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	3308      	adds	r3, #8
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	623b      	str	r3, [r7, #32]
   return(result);
 8006cd2:	6a3b      	ldr	r3, [r7, #32]
 8006cd4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cd8:	f023 0301 	bic.w	r3, r3, #1
 8006cdc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	3308      	adds	r3, #8
 8006ce6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006cea:	633a      	str	r2, [r7, #48]	; 0x30
 8006cec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006cf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e1      	bne.n	8006cc2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2220      	movs	r2, #32
 8006d02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	e853 3f00 	ldrex	r3, [r3]
 8006d1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f023 0310 	bic.w	r3, r3, #16
 8006d26:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006d34:	61fb      	str	r3, [r7, #28]
 8006d36:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d38:	69b9      	ldr	r1, [r7, #24]
 8006d3a:	69fa      	ldr	r2, [r7, #28]
 8006d3c:	e841 2300 	strex	r3, r2, [r1]
 8006d40:	617b      	str	r3, [r7, #20]
   return(result);
 8006d42:	697b      	ldr	r3, [r7, #20]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d1e4      	bne.n	8006d12 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006d48:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f880 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006d54:	e063      	b.n	8006e1e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006d56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00e      	beq.n	8006d80 <HAL_UART_IRQHandler+0x584>
 8006d62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d008      	beq.n	8006d80 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006d76:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f001 fb57 	bl	800842c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006d7e:	e051      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d014      	beq.n	8006db6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d105      	bne.n	8006da4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006d98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d9c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d03a      	beq.n	8006e22 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	4798      	blx	r3
    }
    return;
 8006db4:	e035      	b.n	8006e22 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x5da>
 8006dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d003      	beq.n	8006dd6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 fea4 	bl	8007b1c <UART_EndTransmit_IT>
    return;
 8006dd4:	e026      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d009      	beq.n	8006df6 <HAL_UART_IRQHandler+0x5fa>
 8006de2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006de6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f001 fb30 	bl	8008454 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006df4:	e016      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dfa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d010      	beq.n	8006e24 <HAL_UART_IRQHandler+0x628>
 8006e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	da0c      	bge.n	8006e24 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006e0a:	6878      	ldr	r0, [r7, #4]
 8006e0c:	f001 fb18 	bl	8008440 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006e10:	e008      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
      return;
 8006e12:	bf00      	nop
 8006e14:	e006      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
    return;
 8006e16:	bf00      	nop
 8006e18:	e004      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
      return;
 8006e1a:	bf00      	nop
 8006e1c:	e002      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
      return;
 8006e1e:	bf00      	nop
 8006e20:	e000      	b.n	8006e24 <HAL_UART_IRQHandler+0x628>
    return;
 8006e22:	bf00      	nop
  }
}
 8006e24:	37e8      	adds	r7, #232	; 0xe8
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop

08006e2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006e60:	bf00      	nop
 8006e62:	370c      	adds	r7, #12
 8006e64:	46bd      	mov	sp, r7
 8006e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6a:	4770      	bx	lr

08006e6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006e6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e70:	b08c      	sub	sp, #48	; 0x30
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	689a      	ldr	r2, [r3, #8]
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	691b      	ldr	r3, [r3, #16]
 8006e84:	431a      	orrs	r2, r3
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	431a      	orrs	r2, r3
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	69db      	ldr	r3, [r3, #28]
 8006e90:	4313      	orrs	r3, r2
 8006e92:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	4baa      	ldr	r3, [pc, #680]	; (8007144 <UART_SetConfig+0x2d8>)
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ea4:	430b      	orrs	r3, r1
 8006ea6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	68da      	ldr	r2, [r3, #12]
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	430a      	orrs	r2, r1
 8006ebc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	699b      	ldr	r3, [r3, #24]
 8006ec2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a9f      	ldr	r2, [pc, #636]	; (8007148 <UART_SetConfig+0x2dc>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d004      	beq.n	8006ed8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006ee2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006eec:	430b      	orrs	r3, r1
 8006eee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef6:	f023 010f 	bic.w	r1, r3, #15
 8006efa:	697b      	ldr	r3, [r7, #20]
 8006efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	430a      	orrs	r2, r1
 8006f04:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f06:	697b      	ldr	r3, [r7, #20]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a90      	ldr	r2, [pc, #576]	; (800714c <UART_SetConfig+0x2e0>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d125      	bne.n	8006f5c <UART_SetConfig+0xf0>
 8006f10:	4b8f      	ldr	r3, [pc, #572]	; (8007150 <UART_SetConfig+0x2e4>)
 8006f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d81a      	bhi.n	8006f54 <UART_SetConfig+0xe8>
 8006f1e:	a201      	add	r2, pc, #4	; (adr r2, 8006f24 <UART_SetConfig+0xb8>)
 8006f20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f24:	08006f35 	.word	0x08006f35
 8006f28:	08006f45 	.word	0x08006f45
 8006f2c:	08006f3d 	.word	0x08006f3d
 8006f30:	08006f4d 	.word	0x08006f4d
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f3a:	e116      	b.n	800716a <UART_SetConfig+0x2fe>
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f42:	e112      	b.n	800716a <UART_SetConfig+0x2fe>
 8006f44:	2304      	movs	r3, #4
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f4a:	e10e      	b.n	800716a <UART_SetConfig+0x2fe>
 8006f4c:	2308      	movs	r3, #8
 8006f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f52:	e10a      	b.n	800716a <UART_SetConfig+0x2fe>
 8006f54:	2310      	movs	r3, #16
 8006f56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f5a:	e106      	b.n	800716a <UART_SetConfig+0x2fe>
 8006f5c:	697b      	ldr	r3, [r7, #20]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a7c      	ldr	r2, [pc, #496]	; (8007154 <UART_SetConfig+0x2e8>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d138      	bne.n	8006fd8 <UART_SetConfig+0x16c>
 8006f66:	4b7a      	ldr	r3, [pc, #488]	; (8007150 <UART_SetConfig+0x2e4>)
 8006f68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f6c:	f003 030c 	and.w	r3, r3, #12
 8006f70:	2b0c      	cmp	r3, #12
 8006f72:	d82d      	bhi.n	8006fd0 <UART_SetConfig+0x164>
 8006f74:	a201      	add	r2, pc, #4	; (adr r2, 8006f7c <UART_SetConfig+0x110>)
 8006f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f7a:	bf00      	nop
 8006f7c:	08006fb1 	.word	0x08006fb1
 8006f80:	08006fd1 	.word	0x08006fd1
 8006f84:	08006fd1 	.word	0x08006fd1
 8006f88:	08006fd1 	.word	0x08006fd1
 8006f8c:	08006fc1 	.word	0x08006fc1
 8006f90:	08006fd1 	.word	0x08006fd1
 8006f94:	08006fd1 	.word	0x08006fd1
 8006f98:	08006fd1 	.word	0x08006fd1
 8006f9c:	08006fb9 	.word	0x08006fb9
 8006fa0:	08006fd1 	.word	0x08006fd1
 8006fa4:	08006fd1 	.word	0x08006fd1
 8006fa8:	08006fd1 	.word	0x08006fd1
 8006fac:	08006fc9 	.word	0x08006fc9
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fb6:	e0d8      	b.n	800716a <UART_SetConfig+0x2fe>
 8006fb8:	2302      	movs	r3, #2
 8006fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fbe:	e0d4      	b.n	800716a <UART_SetConfig+0x2fe>
 8006fc0:	2304      	movs	r3, #4
 8006fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fc6:	e0d0      	b.n	800716a <UART_SetConfig+0x2fe>
 8006fc8:	2308      	movs	r3, #8
 8006fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fce:	e0cc      	b.n	800716a <UART_SetConfig+0x2fe>
 8006fd0:	2310      	movs	r3, #16
 8006fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006fd6:	e0c8      	b.n	800716a <UART_SetConfig+0x2fe>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a5e      	ldr	r2, [pc, #376]	; (8007158 <UART_SetConfig+0x2ec>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d125      	bne.n	800702e <UART_SetConfig+0x1c2>
 8006fe2:	4b5b      	ldr	r3, [pc, #364]	; (8007150 <UART_SetConfig+0x2e4>)
 8006fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fe8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006fec:	2b30      	cmp	r3, #48	; 0x30
 8006fee:	d016      	beq.n	800701e <UART_SetConfig+0x1b2>
 8006ff0:	2b30      	cmp	r3, #48	; 0x30
 8006ff2:	d818      	bhi.n	8007026 <UART_SetConfig+0x1ba>
 8006ff4:	2b20      	cmp	r3, #32
 8006ff6:	d00a      	beq.n	800700e <UART_SetConfig+0x1a2>
 8006ff8:	2b20      	cmp	r3, #32
 8006ffa:	d814      	bhi.n	8007026 <UART_SetConfig+0x1ba>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d002      	beq.n	8007006 <UART_SetConfig+0x19a>
 8007000:	2b10      	cmp	r3, #16
 8007002:	d008      	beq.n	8007016 <UART_SetConfig+0x1aa>
 8007004:	e00f      	b.n	8007026 <UART_SetConfig+0x1ba>
 8007006:	2300      	movs	r3, #0
 8007008:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800700c:	e0ad      	b.n	800716a <UART_SetConfig+0x2fe>
 800700e:	2302      	movs	r3, #2
 8007010:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007014:	e0a9      	b.n	800716a <UART_SetConfig+0x2fe>
 8007016:	2304      	movs	r3, #4
 8007018:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800701c:	e0a5      	b.n	800716a <UART_SetConfig+0x2fe>
 800701e:	2308      	movs	r3, #8
 8007020:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007024:	e0a1      	b.n	800716a <UART_SetConfig+0x2fe>
 8007026:	2310      	movs	r3, #16
 8007028:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800702c:	e09d      	b.n	800716a <UART_SetConfig+0x2fe>
 800702e:	697b      	ldr	r3, [r7, #20]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a4a      	ldr	r2, [pc, #296]	; (800715c <UART_SetConfig+0x2f0>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d125      	bne.n	8007084 <UART_SetConfig+0x218>
 8007038:	4b45      	ldr	r3, [pc, #276]	; (8007150 <UART_SetConfig+0x2e4>)
 800703a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800703e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007042:	2bc0      	cmp	r3, #192	; 0xc0
 8007044:	d016      	beq.n	8007074 <UART_SetConfig+0x208>
 8007046:	2bc0      	cmp	r3, #192	; 0xc0
 8007048:	d818      	bhi.n	800707c <UART_SetConfig+0x210>
 800704a:	2b80      	cmp	r3, #128	; 0x80
 800704c:	d00a      	beq.n	8007064 <UART_SetConfig+0x1f8>
 800704e:	2b80      	cmp	r3, #128	; 0x80
 8007050:	d814      	bhi.n	800707c <UART_SetConfig+0x210>
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <UART_SetConfig+0x1f0>
 8007056:	2b40      	cmp	r3, #64	; 0x40
 8007058:	d008      	beq.n	800706c <UART_SetConfig+0x200>
 800705a:	e00f      	b.n	800707c <UART_SetConfig+0x210>
 800705c:	2300      	movs	r3, #0
 800705e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007062:	e082      	b.n	800716a <UART_SetConfig+0x2fe>
 8007064:	2302      	movs	r3, #2
 8007066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800706a:	e07e      	b.n	800716a <UART_SetConfig+0x2fe>
 800706c:	2304      	movs	r3, #4
 800706e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007072:	e07a      	b.n	800716a <UART_SetConfig+0x2fe>
 8007074:	2308      	movs	r3, #8
 8007076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800707a:	e076      	b.n	800716a <UART_SetConfig+0x2fe>
 800707c:	2310      	movs	r3, #16
 800707e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007082:	e072      	b.n	800716a <UART_SetConfig+0x2fe>
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a35      	ldr	r2, [pc, #212]	; (8007160 <UART_SetConfig+0x2f4>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d12a      	bne.n	80070e4 <UART_SetConfig+0x278>
 800708e:	4b30      	ldr	r3, [pc, #192]	; (8007150 <UART_SetConfig+0x2e4>)
 8007090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007094:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800709c:	d01a      	beq.n	80070d4 <UART_SetConfig+0x268>
 800709e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80070a2:	d81b      	bhi.n	80070dc <UART_SetConfig+0x270>
 80070a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070a8:	d00c      	beq.n	80070c4 <UART_SetConfig+0x258>
 80070aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80070ae:	d815      	bhi.n	80070dc <UART_SetConfig+0x270>
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d003      	beq.n	80070bc <UART_SetConfig+0x250>
 80070b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070b8:	d008      	beq.n	80070cc <UART_SetConfig+0x260>
 80070ba:	e00f      	b.n	80070dc <UART_SetConfig+0x270>
 80070bc:	2300      	movs	r3, #0
 80070be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070c2:	e052      	b.n	800716a <UART_SetConfig+0x2fe>
 80070c4:	2302      	movs	r3, #2
 80070c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070ca:	e04e      	b.n	800716a <UART_SetConfig+0x2fe>
 80070cc:	2304      	movs	r3, #4
 80070ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070d2:	e04a      	b.n	800716a <UART_SetConfig+0x2fe>
 80070d4:	2308      	movs	r3, #8
 80070d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070da:	e046      	b.n	800716a <UART_SetConfig+0x2fe>
 80070dc:	2310      	movs	r3, #16
 80070de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80070e2:	e042      	b.n	800716a <UART_SetConfig+0x2fe>
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	4a17      	ldr	r2, [pc, #92]	; (8007148 <UART_SetConfig+0x2dc>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d13a      	bne.n	8007164 <UART_SetConfig+0x2f8>
 80070ee:	4b18      	ldr	r3, [pc, #96]	; (8007150 <UART_SetConfig+0x2e4>)
 80070f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80070f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80070f8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070fc:	d01a      	beq.n	8007134 <UART_SetConfig+0x2c8>
 80070fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007102:	d81b      	bhi.n	800713c <UART_SetConfig+0x2d0>
 8007104:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007108:	d00c      	beq.n	8007124 <UART_SetConfig+0x2b8>
 800710a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800710e:	d815      	bhi.n	800713c <UART_SetConfig+0x2d0>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <UART_SetConfig+0x2b0>
 8007114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007118:	d008      	beq.n	800712c <UART_SetConfig+0x2c0>
 800711a:	e00f      	b.n	800713c <UART_SetConfig+0x2d0>
 800711c:	2300      	movs	r3, #0
 800711e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007122:	e022      	b.n	800716a <UART_SetConfig+0x2fe>
 8007124:	2302      	movs	r3, #2
 8007126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800712a:	e01e      	b.n	800716a <UART_SetConfig+0x2fe>
 800712c:	2304      	movs	r3, #4
 800712e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007132:	e01a      	b.n	800716a <UART_SetConfig+0x2fe>
 8007134:	2308      	movs	r3, #8
 8007136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800713a:	e016      	b.n	800716a <UART_SetConfig+0x2fe>
 800713c:	2310      	movs	r3, #16
 800713e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007142:	e012      	b.n	800716a <UART_SetConfig+0x2fe>
 8007144:	cfff69f3 	.word	0xcfff69f3
 8007148:	40008000 	.word	0x40008000
 800714c:	40013800 	.word	0x40013800
 8007150:	40021000 	.word	0x40021000
 8007154:	40004400 	.word	0x40004400
 8007158:	40004800 	.word	0x40004800
 800715c:	40004c00 	.word	0x40004c00
 8007160:	40005000 	.word	0x40005000
 8007164:	2310      	movs	r3, #16
 8007166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4aae      	ldr	r2, [pc, #696]	; (8007428 <UART_SetConfig+0x5bc>)
 8007170:	4293      	cmp	r3, r2
 8007172:	f040 8097 	bne.w	80072a4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007176:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800717a:	2b08      	cmp	r3, #8
 800717c:	d823      	bhi.n	80071c6 <UART_SetConfig+0x35a>
 800717e:	a201      	add	r2, pc, #4	; (adr r2, 8007184 <UART_SetConfig+0x318>)
 8007180:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007184:	080071a9 	.word	0x080071a9
 8007188:	080071c7 	.word	0x080071c7
 800718c:	080071b1 	.word	0x080071b1
 8007190:	080071c7 	.word	0x080071c7
 8007194:	080071b7 	.word	0x080071b7
 8007198:	080071c7 	.word	0x080071c7
 800719c:	080071c7 	.word	0x080071c7
 80071a0:	080071c7 	.word	0x080071c7
 80071a4:	080071bf 	.word	0x080071bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071a8:	f7fd fb7a 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80071ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071ae:	e010      	b.n	80071d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071b0:	4b9e      	ldr	r3, [pc, #632]	; (800742c <UART_SetConfig+0x5c0>)
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071b4:	e00d      	b.n	80071d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071b6:	f7fd fb05 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 80071ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071bc:	e009      	b.n	80071d2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071c4:	e005      	b.n	80071d2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80071c6:	2300      	movs	r3, #0
 80071c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	f000 8130 	beq.w	800743a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071de:	4a94      	ldr	r2, [pc, #592]	; (8007430 <UART_SetConfig+0x5c4>)
 80071e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071e4:	461a      	mov	r2, r3
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071ec:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	685a      	ldr	r2, [r3, #4]
 80071f2:	4613      	mov	r3, r2
 80071f4:	005b      	lsls	r3, r3, #1
 80071f6:	4413      	add	r3, r2
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	429a      	cmp	r2, r3
 80071fc:	d305      	bcc.n	800720a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	685b      	ldr	r3, [r3, #4]
 8007202:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	429a      	cmp	r2, r3
 8007208:	d903      	bls.n	8007212 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007210:	e113      	b.n	800743a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	2200      	movs	r2, #0
 8007216:	60bb      	str	r3, [r7, #8]
 8007218:	60fa      	str	r2, [r7, #12]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721e:	4a84      	ldr	r2, [pc, #528]	; (8007430 <UART_SetConfig+0x5c4>)
 8007220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007224:	b29b      	uxth	r3, r3
 8007226:	2200      	movs	r2, #0
 8007228:	603b      	str	r3, [r7, #0]
 800722a:	607a      	str	r2, [r7, #4]
 800722c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007230:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007234:	f7f9 fcf0 	bl	8000c18 <__aeabi_uldivmod>
 8007238:	4602      	mov	r2, r0
 800723a:	460b      	mov	r3, r1
 800723c:	4610      	mov	r0, r2
 800723e:	4619      	mov	r1, r3
 8007240:	f04f 0200 	mov.w	r2, #0
 8007244:	f04f 0300 	mov.w	r3, #0
 8007248:	020b      	lsls	r3, r1, #8
 800724a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800724e:	0202      	lsls	r2, r0, #8
 8007250:	6979      	ldr	r1, [r7, #20]
 8007252:	6849      	ldr	r1, [r1, #4]
 8007254:	0849      	lsrs	r1, r1, #1
 8007256:	2000      	movs	r0, #0
 8007258:	460c      	mov	r4, r1
 800725a:	4605      	mov	r5, r0
 800725c:	eb12 0804 	adds.w	r8, r2, r4
 8007260:	eb43 0905 	adc.w	r9, r3, r5
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	685b      	ldr	r3, [r3, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	469a      	mov	sl, r3
 800726c:	4693      	mov	fp, r2
 800726e:	4652      	mov	r2, sl
 8007270:	465b      	mov	r3, fp
 8007272:	4640      	mov	r0, r8
 8007274:	4649      	mov	r1, r9
 8007276:	f7f9 fccf 	bl	8000c18 <__aeabi_uldivmod>
 800727a:	4602      	mov	r2, r0
 800727c:	460b      	mov	r3, r1
 800727e:	4613      	mov	r3, r2
 8007280:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007288:	d308      	bcc.n	800729c <UART_SetConfig+0x430>
 800728a:	6a3b      	ldr	r3, [r7, #32]
 800728c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007290:	d204      	bcs.n	800729c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6a3a      	ldr	r2, [r7, #32]
 8007298:	60da      	str	r2, [r3, #12]
 800729a:	e0ce      	b.n	800743a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80072a2:	e0ca      	b.n	800743a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072a4:	697b      	ldr	r3, [r7, #20]
 80072a6:	69db      	ldr	r3, [r3, #28]
 80072a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ac:	d166      	bne.n	800737c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80072ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80072b2:	2b08      	cmp	r3, #8
 80072b4:	d827      	bhi.n	8007306 <UART_SetConfig+0x49a>
 80072b6:	a201      	add	r2, pc, #4	; (adr r2, 80072bc <UART_SetConfig+0x450>)
 80072b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072bc:	080072e1 	.word	0x080072e1
 80072c0:	080072e9 	.word	0x080072e9
 80072c4:	080072f1 	.word	0x080072f1
 80072c8:	08007307 	.word	0x08007307
 80072cc:	080072f7 	.word	0x080072f7
 80072d0:	08007307 	.word	0x08007307
 80072d4:	08007307 	.word	0x08007307
 80072d8:	08007307 	.word	0x08007307
 80072dc:	080072ff 	.word	0x080072ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072e0:	f7fd fade 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80072e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072e6:	e014      	b.n	8007312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072e8:	f7fd faf0 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 80072ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072ee:	e010      	b.n	8007312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072f0:	4b4e      	ldr	r3, [pc, #312]	; (800742c <UART_SetConfig+0x5c0>)
 80072f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80072f4:	e00d      	b.n	8007312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072f6:	f7fd fa65 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 80072fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80072fc:	e009      	b.n	8007312 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007304:	e005      	b.n	8007312 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8007306:	2300      	movs	r3, #0
 8007308:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800730a:	2301      	movs	r3, #1
 800730c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007310:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 8090 	beq.w	800743a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800731e:	4a44      	ldr	r2, [pc, #272]	; (8007430 <UART_SetConfig+0x5c4>)
 8007320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007324:	461a      	mov	r2, r3
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	fbb3 f3f2 	udiv	r3, r3, r2
 800732c:	005a      	lsls	r2, r3, #1
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	085b      	lsrs	r3, r3, #1
 8007334:	441a      	add	r2, r3
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	fbb2 f3f3 	udiv	r3, r2, r3
 800733e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007340:	6a3b      	ldr	r3, [r7, #32]
 8007342:	2b0f      	cmp	r3, #15
 8007344:	d916      	bls.n	8007374 <UART_SetConfig+0x508>
 8007346:	6a3b      	ldr	r3, [r7, #32]
 8007348:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800734c:	d212      	bcs.n	8007374 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800734e:	6a3b      	ldr	r3, [r7, #32]
 8007350:	b29b      	uxth	r3, r3
 8007352:	f023 030f 	bic.w	r3, r3, #15
 8007356:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007358:	6a3b      	ldr	r3, [r7, #32]
 800735a:	085b      	lsrs	r3, r3, #1
 800735c:	b29b      	uxth	r3, r3
 800735e:	f003 0307 	and.w	r3, r3, #7
 8007362:	b29a      	uxth	r2, r3
 8007364:	8bfb      	ldrh	r3, [r7, #30]
 8007366:	4313      	orrs	r3, r2
 8007368:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	8bfa      	ldrh	r2, [r7, #30]
 8007370:	60da      	str	r2, [r3, #12]
 8007372:	e062      	b.n	800743a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007374:	2301      	movs	r3, #1
 8007376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800737a:	e05e      	b.n	800743a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800737c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007380:	2b08      	cmp	r3, #8
 8007382:	d828      	bhi.n	80073d6 <UART_SetConfig+0x56a>
 8007384:	a201      	add	r2, pc, #4	; (adr r2, 800738c <UART_SetConfig+0x520>)
 8007386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800738a:	bf00      	nop
 800738c:	080073b1 	.word	0x080073b1
 8007390:	080073b9 	.word	0x080073b9
 8007394:	080073c1 	.word	0x080073c1
 8007398:	080073d7 	.word	0x080073d7
 800739c:	080073c7 	.word	0x080073c7
 80073a0:	080073d7 	.word	0x080073d7
 80073a4:	080073d7 	.word	0x080073d7
 80073a8:	080073d7 	.word	0x080073d7
 80073ac:	080073cf 	.word	0x080073cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80073b0:	f7fd fa76 	bl	80048a0 <HAL_RCC_GetPCLK1Freq>
 80073b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073b6:	e014      	b.n	80073e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80073b8:	f7fd fa88 	bl	80048cc <HAL_RCC_GetPCLK2Freq>
 80073bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073be:	e010      	b.n	80073e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80073c0:	4b1a      	ldr	r3, [pc, #104]	; (800742c <UART_SetConfig+0x5c0>)
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073c4:	e00d      	b.n	80073e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80073c6:	f7fd f9fd 	bl	80047c4 <HAL_RCC_GetSysClockFreq>
 80073ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80073cc:	e009      	b.n	80073e2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80073d4:	e005      	b.n	80073e2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80073d6:	2300      	movs	r3, #0
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80073e0:	bf00      	nop
    }

    if (pclk != 0U)
 80073e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d028      	beq.n	800743a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ec:	4a10      	ldr	r2, [pc, #64]	; (8007430 <UART_SetConfig+0x5c4>)
 80073ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073f2:	461a      	mov	r2, r3
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	085b      	lsrs	r3, r3, #1
 8007400:	441a      	add	r2, r3
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	685b      	ldr	r3, [r3, #4]
 8007406:	fbb2 f3f3 	udiv	r3, r2, r3
 800740a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800740c:	6a3b      	ldr	r3, [r7, #32]
 800740e:	2b0f      	cmp	r3, #15
 8007410:	d910      	bls.n	8007434 <UART_SetConfig+0x5c8>
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007418:	d20c      	bcs.n	8007434 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	b29a      	uxth	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	60da      	str	r2, [r3, #12]
 8007424:	e009      	b.n	800743a <UART_SetConfig+0x5ce>
 8007426:	bf00      	nop
 8007428:	40008000 	.word	0x40008000
 800742c:	00f42400 	.word	0x00f42400
 8007430:	0800b944 	.word	0x0800b944
      }
      else
      {
        ret = HAL_ERROR;
 8007434:	2301      	movs	r3, #1
 8007436:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2201      	movs	r2, #1
 800743e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	2201      	movs	r2, #1
 8007446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	2200      	movs	r2, #0
 800744e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007450:	697b      	ldr	r3, [r7, #20]
 8007452:	2200      	movs	r2, #0
 8007454:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007456:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800745a:	4618      	mov	r0, r3
 800745c:	3730      	adds	r7, #48	; 0x30
 800745e:	46bd      	mov	sp, r7
 8007460:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007464 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007470:	f003 0301 	and.w	r3, r3, #1
 8007474:	2b00      	cmp	r3, #0
 8007476:	d00a      	beq.n	800748e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	685b      	ldr	r3, [r3, #4]
 800747e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	430a      	orrs	r2, r1
 800748c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007492:	f003 0302 	and.w	r3, r3, #2
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00a      	beq.n	80074b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685b      	ldr	r3, [r3, #4]
 80074a0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	430a      	orrs	r2, r1
 80074ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074b4:	f003 0304 	and.w	r3, r3, #4
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d00a      	beq.n	80074d2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	430a      	orrs	r2, r1
 80074d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d6:	f003 0308 	and.w	r3, r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00a      	beq.n	80074f4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	430a      	orrs	r2, r1
 80074f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00a      	beq.n	8007516 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	430a      	orrs	r2, r1
 8007514:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751a:	f003 0320 	and.w	r3, r3, #32
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	430a      	orrs	r2, r1
 8007536:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800753c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007540:	2b00      	cmp	r3, #0
 8007542:	d01a      	beq.n	800757a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	430a      	orrs	r2, r1
 8007558:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800755e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007562:	d10a      	bne.n	800757a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685b      	ldr	r3, [r3, #4]
 800756a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	430a      	orrs	r2, r1
 8007578:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b00      	cmp	r3, #0
 8007584:	d00a      	beq.n	800759c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685b      	ldr	r3, [r3, #4]
 800758c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	430a      	orrs	r2, r1
 800759a:	605a      	str	r2, [r3, #4]
  }
}
 800759c:	bf00      	nop
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b086      	sub	sp, #24
 80075ac:	af02      	add	r7, sp, #8
 80075ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80075b8:	f7fa fcac 	bl	8001f14 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f003 0308 	and.w	r3, r3, #8
 80075c8:	2b08      	cmp	r3, #8
 80075ca:	d10e      	bne.n	80075ea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075d0:	9300      	str	r3, [sp, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 f82f 	bl	800763e <UART_WaitOnFlagUntilTimeout>
 80075e0:	4603      	mov	r3, r0
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d001      	beq.n	80075ea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	e025      	b.n	8007636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0304 	and.w	r3, r3, #4
 80075f4:	2b04      	cmp	r3, #4
 80075f6:	d10e      	bne.n	8007616 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80075f8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80075fc:	9300      	str	r3, [sp, #0]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007606:	6878      	ldr	r0, [r7, #4]
 8007608:	f000 f819 	bl	800763e <UART_WaitOnFlagUntilTimeout>
 800760c:	4603      	mov	r3, r0
 800760e:	2b00      	cmp	r3, #0
 8007610:	d001      	beq.n	8007616 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e00f      	b.n	8007636 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2220      	movs	r2, #32
 800761a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2220      	movs	r2, #32
 8007622:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2200      	movs	r2, #0
 800762a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b09c      	sub	sp, #112	; 0x70
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	603b      	str	r3, [r7, #0]
 800764a:	4613      	mov	r3, r2
 800764c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764e:	e0a9      	b.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007656:	f000 80a5 	beq.w	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800765a:	f7fa fc5b 	bl	8001f14 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007666:	429a      	cmp	r2, r3
 8007668:	d302      	bcc.n	8007670 <UART_WaitOnFlagUntilTimeout+0x32>
 800766a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800766c:	2b00      	cmp	r3, #0
 800766e:	d140      	bne.n	80076f2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007676:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007678:	e853 3f00 	ldrex	r3, [r3]
 800767c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800767e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007680:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007684:	667b      	str	r3, [r7, #100]	; 0x64
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	461a      	mov	r2, r3
 800768c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800768e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007690:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007692:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007694:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007696:	e841 2300 	strex	r3, r2, [r1]
 800769a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800769c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d1e6      	bne.n	8007670 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	3308      	adds	r3, #8
 80076a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076ac:	e853 3f00 	ldrex	r3, [r3]
 80076b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b4:	f023 0301 	bic.w	r3, r3, #1
 80076b8:	663b      	str	r3, [r7, #96]	; 0x60
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	3308      	adds	r3, #8
 80076c0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80076c2:	64ba      	str	r2, [r7, #72]	; 0x48
 80076c4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076c6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076ca:	e841 2300 	strex	r3, r2, [r1]
 80076ce:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1e5      	bne.n	80076a2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	2220      	movs	r2, #32
 80076da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2220      	movs	r2, #32
 80076e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80076ee:	2303      	movs	r3, #3
 80076f0:	e069      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d051      	beq.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	69db      	ldr	r3, [r3, #28]
 8007706:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800770a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800770e:	d149      	bne.n	80077a4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007718:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800772e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007738:	637b      	str	r3, [r7, #52]	; 0x34
 800773a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800773e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e6      	bne.n	800771a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3308      	adds	r3, #8
 8007752:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007754:	697b      	ldr	r3, [r7, #20]
 8007756:	e853 3f00 	ldrex	r3, [r3]
 800775a:	613b      	str	r3, [r7, #16]
   return(result);
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	f023 0301 	bic.w	r3, r3, #1
 8007762:	66bb      	str	r3, [r7, #104]	; 0x68
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	3308      	adds	r3, #8
 800776a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800776c:	623a      	str	r2, [r7, #32]
 800776e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007770:	69f9      	ldr	r1, [r7, #28]
 8007772:	6a3a      	ldr	r2, [r7, #32]
 8007774:	e841 2300 	strex	r3, r2, [r1]
 8007778:	61bb      	str	r3, [r7, #24]
   return(result);
 800777a:	69bb      	ldr	r3, [r7, #24]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d1e5      	bne.n	800774c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2220      	movs	r2, #32
 8007784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2220      	movs	r2, #32
 800778c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	2220      	movs	r2, #32
 8007794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2200      	movs	r2, #0
 800779c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80077a0:	2303      	movs	r3, #3
 80077a2:	e010      	b.n	80077c6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	69da      	ldr	r2, [r3, #28]
 80077aa:	68bb      	ldr	r3, [r7, #8]
 80077ac:	4013      	ands	r3, r2
 80077ae:	68ba      	ldr	r2, [r7, #8]
 80077b0:	429a      	cmp	r2, r3
 80077b2:	bf0c      	ite	eq
 80077b4:	2301      	moveq	r3, #1
 80077b6:	2300      	movne	r3, #0
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	461a      	mov	r2, r3
 80077bc:	79fb      	ldrb	r3, [r7, #7]
 80077be:	429a      	cmp	r2, r3
 80077c0:	f43f af46 	beq.w	8007650 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077c4:	2300      	movs	r3, #0
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3770      	adds	r7, #112	; 0x70
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}
	...

080077d0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b0a3      	sub	sp, #140	; 0x8c
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	4613      	mov	r3, r2
 80077dc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	88fa      	ldrh	r2, [r7, #6]
 80077e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	88fa      	ldrh	r2, [r7, #6]
 80077f0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007802:	d10e      	bne.n	8007822 <UART_Start_Receive_IT+0x52>
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d105      	bne.n	8007818 <UART_Start_Receive_IT+0x48>
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007816:	e02d      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	22ff      	movs	r2, #255	; 0xff
 800781c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007820:	e028      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	689b      	ldr	r3, [r3, #8]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d10d      	bne.n	8007846 <UART_Start_Receive_IT+0x76>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	691b      	ldr	r3, [r3, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d104      	bne.n	800783c <UART_Start_Receive_IT+0x6c>
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	22ff      	movs	r2, #255	; 0xff
 8007836:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800783a:	e01b      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	227f      	movs	r2, #127	; 0x7f
 8007840:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007844:	e016      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	689b      	ldr	r3, [r3, #8]
 800784a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800784e:	d10d      	bne.n	800786c <UART_Start_Receive_IT+0x9c>
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	691b      	ldr	r3, [r3, #16]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d104      	bne.n	8007862 <UART_Start_Receive_IT+0x92>
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	227f      	movs	r2, #127	; 0x7f
 800785c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007860:	e008      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	223f      	movs	r2, #63	; 0x3f
 8007866:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800786a:	e003      	b.n	8007874 <UART_Start_Receive_IT+0xa4>
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2222      	movs	r2, #34	; 0x22
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3308      	adds	r3, #8
 800788a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800788c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800788e:	e853 3f00 	ldrex	r3, [r3]
 8007892:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007896:	f043 0301 	orr.w	r3, r3, #1
 800789a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3308      	adds	r3, #8
 80078a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80078a8:	673a      	str	r2, [r7, #112]	; 0x70
 80078aa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078ac:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80078ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078b0:	e841 2300 	strex	r3, r2, [r1]
 80078b4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80078b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1e3      	bne.n	8007884 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80078c4:	d153      	bne.n	800796e <UART_Start_Receive_IT+0x19e>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80078cc:	88fa      	ldrh	r2, [r7, #6]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d34d      	bcc.n	800796e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	689b      	ldr	r3, [r3, #8]
 80078d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078da:	d107      	bne.n	80078ec <UART_Start_Receive_IT+0x11c>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	691b      	ldr	r3, [r3, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d103      	bne.n	80078ec <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	4a4b      	ldr	r2, [pc, #300]	; (8007a14 <UART_Start_Receive_IT+0x244>)
 80078e8:	671a      	str	r2, [r3, #112]	; 0x70
 80078ea:	e002      	b.n	80078f2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	4a4a      	ldr	r2, [pc, #296]	; (8007a18 <UART_Start_Receive_IT+0x248>)
 80078f0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01a      	beq.n	8007938 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007916:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007924:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007926:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800792a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007932:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e4      	bne.n	8007902 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800794a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800794e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	3308      	adds	r3, #8
 8007956:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007958:	64ba      	str	r2, [r7, #72]	; 0x48
 800795a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800795e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007960:	e841 2300 	strex	r3, r2, [r1]
 8007964:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007966:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007968:	2b00      	cmp	r3, #0
 800796a:	d1e5      	bne.n	8007938 <UART_Start_Receive_IT+0x168>
 800796c:	e04a      	b.n	8007a04 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	689b      	ldr	r3, [r3, #8]
 8007972:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007976:	d107      	bne.n	8007988 <UART_Start_Receive_IT+0x1b8>
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	691b      	ldr	r3, [r3, #16]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d103      	bne.n	8007988 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <UART_Start_Receive_IT+0x24c>)
 8007984:	671a      	str	r2, [r3, #112]	; 0x70
 8007986:	e002      	b.n	800798e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	4a25      	ldr	r2, [pc, #148]	; (8007a20 <UART_Start_Receive_IT+0x250>)
 800798c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d019      	beq.n	80079d2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ae:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80079b2:	677b      	str	r3, [r7, #116]	; 0x74
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079bc:	637b      	str	r3, [r7, #52]	; 0x34
 80079be:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_Start_Receive_IT+0x1ce>
 80079d0:	e018      	b.n	8007a04 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	e853 3f00 	ldrex	r3, [r3]
 80079de:	613b      	str	r3, [r7, #16]
   return(result);
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	f043 0320 	orr.w	r3, r3, #32
 80079e6:	67bb      	str	r3, [r7, #120]	; 0x78
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	461a      	mov	r2, r3
 80079ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80079f0:	623b      	str	r3, [r7, #32]
 80079f2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f4:	69f9      	ldr	r1, [r7, #28]
 80079f6:	6a3a      	ldr	r2, [r7, #32]
 80079f8:	e841 2300 	strex	r3, r2, [r1]
 80079fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d1e6      	bne.n	80079d2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007a04:	2300      	movs	r3, #0
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	378c      	adds	r7, #140	; 0x8c
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a10:	4770      	bx	lr
 8007a12:	bf00      	nop
 8007a14:	0800812d 	.word	0x0800812d
 8007a18:	08007e35 	.word	0x08007e35
 8007a1c:	08007cd3 	.word	0x08007cd3
 8007a20:	08007b73 	.word	0x08007b73

08007a24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b095      	sub	sp, #84	; 0x54
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a34:	e853 3f00 	ldrex	r3, [r3]
 8007a38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	461a      	mov	r2, r3
 8007a48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a4a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a52:	e841 2300 	strex	r3, r2, [r1]
 8007a56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d1e6      	bne.n	8007a2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	3308      	adds	r3, #8
 8007a64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	e853 3f00 	ldrex	r3, [r3]
 8007a6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007a6e:	69fb      	ldr	r3, [r7, #28]
 8007a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a74:	f023 0301 	bic.w	r3, r3, #1
 8007a78:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007a84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007a88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e3      	bne.n	8007a5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d118      	bne.n	8007ad0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	e853 3f00 	ldrex	r3, [r3]
 8007aaa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	f023 0310 	bic.w	r3, r3, #16
 8007ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007abc:	61bb      	str	r3, [r7, #24]
 8007abe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac0:	6979      	ldr	r1, [r7, #20]
 8007ac2:	69ba      	ldr	r2, [r7, #24]
 8007ac4:	e841 2300 	strex	r3, r2, [r1]
 8007ac8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d1e6      	bne.n	8007a9e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007ae4:	bf00      	nop
 8007ae6:	3754      	adds	r7, #84	; 0x54
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aee:	4770      	bx	lr

08007af0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b084      	sub	sp, #16
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007afc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b0e:	68f8      	ldr	r0, [r7, #12]
 8007b10:	f7ff f996 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b14:	bf00      	nop
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b088      	sub	sp, #32
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	e853 3f00 	ldrex	r3, [r3]
 8007b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b32:	68bb      	ldr	r3, [r7, #8]
 8007b34:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b38:	61fb      	str	r3, [r7, #28]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	69fb      	ldr	r3, [r7, #28]
 8007b42:	61bb      	str	r3, [r7, #24]
 8007b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	69ba      	ldr	r2, [r7, #24]
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8007b50:	693b      	ldr	r3, [r7, #16]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d1e6      	bne.n	8007b24 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2220      	movs	r2, #32
 8007b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2200      	movs	r2, #0
 8007b62:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f7ff f961 	bl	8006e2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6a:	bf00      	nop
 8007b6c:	3720      	adds	r7, #32
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}

08007b72 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007b72:	b580      	push	{r7, lr}
 8007b74:	b096      	sub	sp, #88	; 0x58
 8007b76:	af00      	add	r7, sp, #0
 8007b78:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b80:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b8a:	2b22      	cmp	r3, #34	; 0x22
 8007b8c:	f040 8095 	bne.w	8007cba <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007b9a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007b9e:	b2d9      	uxtb	r1, r3
 8007ba0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007ba4:	b2da      	uxtb	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007baa:	400a      	ands	r2, r1
 8007bac:	b2d2      	uxtb	r2, r2
 8007bae:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bb4:	1c5a      	adds	r2, r3, #1
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	b29a      	uxth	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bd2:	b29b      	uxth	r3, r3
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d178      	bne.n	8007cca <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bec:	653b      	str	r3, [r7, #80]	; 0x50
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007bf6:	647b      	str	r3, [r7, #68]	; 0x44
 8007bf8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bfc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e6      	bne.n	8007bd8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	623b      	str	r3, [r7, #32]
   return(result);
 8007c1a:	6a3b      	ldr	r3, [r7, #32]
 8007c1c:	f023 0301 	bic.w	r3, r3, #1
 8007c20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c2a:	633a      	str	r2, [r7, #48]	; 0x30
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e5      	bne.n	8007c0a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2220      	movs	r2, #32
 8007c42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d12e      	bne.n	8007cb2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c60:	693b      	ldr	r3, [r7, #16]
 8007c62:	e853 3f00 	ldrex	r3, [r3]
 8007c66:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f023 0310 	bic.w	r3, r3, #16
 8007c6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007c78:	61fb      	str	r3, [r7, #28]
 8007c7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7c:	69b9      	ldr	r1, [r7, #24]
 8007c7e:	69fa      	ldr	r2, [r7, #28]
 8007c80:	e841 2300 	strex	r3, r2, [r1]
 8007c84:	617b      	str	r3, [r7, #20]
   return(result);
 8007c86:	697b      	ldr	r3, [r7, #20]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e6      	bne.n	8007c5a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	f003 0310 	and.w	r3, r3, #16
 8007c96:	2b10      	cmp	r3, #16
 8007c98:	d103      	bne.n	8007ca2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2210      	movs	r2, #16
 8007ca0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007ca8:	4619      	mov	r1, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f7ff f8d2 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cb0:	e00b      	b.n	8007cca <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007cb2:	6878      	ldr	r0, [r7, #4]
 8007cb4:	f7f9 fc16 	bl	80014e4 <HAL_UART_RxCpltCallback>
}
 8007cb8:	e007      	b.n	8007cca <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	699a      	ldr	r2, [r3, #24]
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 0208 	orr.w	r2, r2, #8
 8007cc8:	619a      	str	r2, [r3, #24]
}
 8007cca:	bf00      	nop
 8007ccc:	3758      	adds	r7, #88	; 0x58
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	bd80      	pop	{r7, pc}

08007cd2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007cd2:	b580      	push	{r7, lr}
 8007cd4:	b096      	sub	sp, #88	; 0x58
 8007cd6:	af00      	add	r7, sp, #0
 8007cd8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ce0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cea:	2b22      	cmp	r3, #34	; 0x22
 8007cec:	f040 8095 	bne.w	8007e1a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cf6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cfe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d00:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d04:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d08:	4013      	ands	r3, r2
 8007d0a:	b29a      	uxth	r2, r3
 8007d0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d0e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	1c9a      	adds	r2, r3, #2
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d20:	b29b      	uxth	r3, r3
 8007d22:	3b01      	subs	r3, #1
 8007d24:	b29a      	uxth	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d178      	bne.n	8007e2a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d40:	e853 3f00 	ldrex	r3, [r3]
 8007d44:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	461a      	mov	r2, r3
 8007d54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d56:	643b      	str	r3, [r7, #64]	; 0x40
 8007d58:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d5a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d5e:	e841 2300 	strex	r3, r2, [r1]
 8007d62:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1e6      	bne.n	8007d38 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	3308      	adds	r3, #8
 8007d70:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	f023 0301 	bic.w	r3, r3, #1
 8007d80:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	3308      	adds	r3, #8
 8007d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d8c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e5      	bne.n	8007d6a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2220      	movs	r2, #32
 8007da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2200      	movs	r2, #0
 8007daa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d12e      	bne.n	8007e12 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2200      	movs	r2, #0
 8007db8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	e853 3f00 	ldrex	r3, [r3]
 8007dc6:	60bb      	str	r3, [r7, #8]
   return(result);
 8007dc8:	68bb      	ldr	r3, [r7, #8]
 8007dca:	f023 0310 	bic.w	r3, r3, #16
 8007dce:	647b      	str	r3, [r7, #68]	; 0x44
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007dd8:	61bb      	str	r3, [r7, #24]
 8007dda:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ddc:	6979      	ldr	r1, [r7, #20]
 8007dde:	69ba      	ldr	r2, [r7, #24]
 8007de0:	e841 2300 	strex	r3, r2, [r1]
 8007de4:	613b      	str	r3, [r7, #16]
   return(result);
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d1e6      	bne.n	8007dba <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	69db      	ldr	r3, [r3, #28]
 8007df2:	f003 0310 	and.w	r3, r3, #16
 8007df6:	2b10      	cmp	r3, #16
 8007df8:	d103      	bne.n	8007e02 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f7ff f822 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e10:	e00b      	b.n	8007e2a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7f9 fb66 	bl	80014e4 <HAL_UART_RxCpltCallback>
}
 8007e18:	e007      	b.n	8007e2a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	699a      	ldr	r2, [r3, #24]
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	f042 0208 	orr.w	r2, r2, #8
 8007e28:	619a      	str	r2, [r3, #24]
}
 8007e2a:	bf00      	nop
 8007e2c:	3758      	adds	r7, #88	; 0x58
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
	...

08007e34 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b0a6      	sub	sp, #152	; 0x98
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e42:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	69db      	ldr	r3, [r3, #28]
 8007e4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	689b      	ldr	r3, [r3, #8]
 8007e60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e6a:	2b22      	cmp	r3, #34	; 0x22
 8007e6c:	f040 814f 	bne.w	800810e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e76:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e7a:	e0f6      	b.n	800806a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e82:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e86:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007e8a:	b2d9      	uxtb	r1, r3
 8007e8c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e96:	400a      	ands	r2, r1
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eac:	b29b      	uxth	r3, r3
 8007eae:	3b01      	subs	r3, #1
 8007eb0:	b29a      	uxth	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ec6:	f003 0307 	and.w	r3, r3, #7
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d053      	beq.n	8007f76 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d011      	beq.n	8007efe <UART_RxISR_8BIT_FIFOEN+0xca>
 8007eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d00b      	beq.n	8007efe <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2201      	movs	r2, #1
 8007eec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ef4:	f043 0201 	orr.w	r2, r3, #1
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007efe:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f02:	f003 0302 	and.w	r3, r3, #2
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d011      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007f0a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00b      	beq.n	8007f2e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	2202      	movs	r2, #2
 8007f1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f24:	f043 0204 	orr.w	r2, r3, #4
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f2e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f32:	f003 0304 	and.w	r3, r3, #4
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d011      	beq.n	8007f5e <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007f3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00b      	beq.n	8007f5e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	2204      	movs	r2, #4
 8007f4c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f54:	f043 0202 	orr.w	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d006      	beq.n	8007f76 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f7fe ff69 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f7c:	b29b      	uxth	r3, r3
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d173      	bne.n	800806a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f8a:	e853 3f00 	ldrex	r3, [r3]
 8007f8e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007f90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f96:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8007fa6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fa8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007faa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007fac:	e841 2300 	strex	r3, r2, [r1]
 8007fb0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007fb2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d1e4      	bne.n	8007f82 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	3308      	adds	r3, #8
 8007fbe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fc2:	e853 3f00 	ldrex	r3, [r3]
 8007fc6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007fce:	f023 0301 	bic.w	r3, r3, #1
 8007fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	3308      	adds	r3, #8
 8007fda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007fdc:	657a      	str	r2, [r7, #84]	; 0x54
 8007fde:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007fe2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007fe4:	e841 2300 	strex	r3, r2, [r1]
 8007fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d1e3      	bne.n	8007fb8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2200      	movs	r2, #0
 8007ffc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008002:	2b01      	cmp	r3, #1
 8008004:	d12e      	bne.n	8008064 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2200      	movs	r2, #0
 800800a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008014:	e853 3f00 	ldrex	r3, [r3]
 8008018:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800801a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800801c:	f023 0310 	bic.w	r3, r3, #16
 8008020:	67bb      	str	r3, [r7, #120]	; 0x78
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	461a      	mov	r2, r3
 8008028:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800802a:	643b      	str	r3, [r7, #64]	; 0x40
 800802c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800802e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008030:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008032:	e841 2300 	strex	r3, r2, [r1]
 8008036:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800803a:	2b00      	cmp	r3, #0
 800803c:	d1e6      	bne.n	800800c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	f003 0310 	and.w	r3, r3, #16
 8008048:	2b10      	cmp	r3, #16
 800804a:	d103      	bne.n	8008054 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2210      	movs	r2, #16
 8008052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800805a:	4619      	mov	r1, r3
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f7fe fef9 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
 8008062:	e002      	b.n	800806a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7f9 fa3d 	bl	80014e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800806a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800806e:	2b00      	cmp	r3, #0
 8008070:	d006      	beq.n	8008080 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8008072:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	f47f aefe 	bne.w	8007e7c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008086:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800808a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800808e:	2b00      	cmp	r3, #0
 8008090:	d045      	beq.n	800811e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008098:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800809c:	429a      	cmp	r2, r3
 800809e:	d23e      	bcs.n	800811e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6a3b      	ldr	r3, [r7, #32]
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b6:	673b      	str	r3, [r7, #112]	; 0x70
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	3308      	adds	r3, #8
 80080be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80080c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080c8:	e841 2300 	strex	r3, r2, [r1]
 80080cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e5      	bne.n	80080a0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	4a14      	ldr	r2, [pc, #80]	; (8008128 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80080d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	e853 3f00 	ldrex	r3, [r3]
 80080e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f043 0320 	orr.w	r3, r3, #32
 80080ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	461a      	mov	r2, r3
 80080f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080f8:	61bb      	str	r3, [r7, #24]
 80080fa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080fc:	6979      	ldr	r1, [r7, #20]
 80080fe:	69ba      	ldr	r2, [r7, #24]
 8008100:	e841 2300 	strex	r3, r2, [r1]
 8008104:	613b      	str	r3, [r7, #16]
   return(result);
 8008106:	693b      	ldr	r3, [r7, #16]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d1e6      	bne.n	80080da <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800810c:	e007      	b.n	800811e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	699a      	ldr	r2, [r3, #24]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	f042 0208 	orr.w	r2, r2, #8
 800811c:	619a      	str	r2, [r3, #24]
}
 800811e:	bf00      	nop
 8008120:	3798      	adds	r7, #152	; 0x98
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop
 8008128:	08007b73 	.word	0x08007b73

0800812c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b0a8      	sub	sp, #160	; 0xa0
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800813a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	69db      	ldr	r3, [r3, #28]
 8008144:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008162:	2b22      	cmp	r3, #34	; 0x22
 8008164:	f040 8153 	bne.w	800840e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800816e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008172:	e0fa      	b.n	800836a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800817a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008182:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8008186:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800818a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800818e:	4013      	ands	r3, r2
 8008190:	b29a      	uxth	r2, r3
 8008192:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008196:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800819c:	1c9a      	adds	r2, r3, #2
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80081a8:	b29b      	uxth	r3, r3
 80081aa:	3b01      	subs	r3, #1
 80081ac:	b29a      	uxth	r2, r3
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	69db      	ldr	r3, [r3, #28]
 80081ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081be:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081c2:	f003 0307 	and.w	r3, r3, #7
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d053      	beq.n	8008272 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081ce:	f003 0301 	and.w	r3, r3, #1
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d011      	beq.n	80081fa <UART_RxISR_16BIT_FIFOEN+0xce>
 80081d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80081da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d00b      	beq.n	80081fa <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	2201      	movs	r2, #1
 80081e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081f0:	f043 0201 	orr.w	r2, r3, #1
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80081fe:	f003 0302 	and.w	r3, r3, #2
 8008202:	2b00      	cmp	r3, #0
 8008204:	d011      	beq.n	800822a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8008206:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800820a:	f003 0301 	and.w	r3, r3, #1
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00b      	beq.n	800822a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2202      	movs	r2, #2
 8008218:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008220:	f043 0204 	orr.w	r2, r3, #4
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800822a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800822e:	f003 0304 	and.w	r3, r3, #4
 8008232:	2b00      	cmp	r3, #0
 8008234:	d011      	beq.n	800825a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008236:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800823a:	f003 0301 	and.w	r3, r3, #1
 800823e:	2b00      	cmp	r3, #0
 8008240:	d00b      	beq.n	800825a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2204      	movs	r2, #4
 8008248:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008250:	f043 0202 	orr.w	r2, r3, #2
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008260:	2b00      	cmp	r3, #0
 8008262:	d006      	beq.n	8008272 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f7fe fdeb 	bl	8006e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	2200      	movs	r2, #0
 800826e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008278:	b29b      	uxth	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d175      	bne.n	800836a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008284:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008286:	e853 3f00 	ldrex	r3, [r3]
 800828a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800828c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800828e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008292:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	461a      	mov	r2, r3
 800829c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80082a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80082a2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082a4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082a6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082a8:	e841 2300 	strex	r3, r2, [r1]
 80082ac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80082ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e4      	bne.n	800827e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082be:	e853 3f00 	ldrex	r3, [r3]
 80082c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80082c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80082ca:	f023 0301 	bic.w	r3, r3, #1
 80082ce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	3308      	adds	r3, #8
 80082d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082dc:	65ba      	str	r2, [r7, #88]	; 0x58
 80082de:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082e0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80082e2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082e4:	e841 2300 	strex	r3, r2, [r1]
 80082e8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80082ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1e1      	bne.n	80082b4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2220      	movs	r2, #32
 80082f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008302:	2b01      	cmp	r3, #1
 8008304:	d12e      	bne.n	8008364 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2200      	movs	r2, #0
 800830a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008314:	e853 3f00 	ldrex	r3, [r3]
 8008318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	f023 0310 	bic.w	r3, r3, #16
 8008320:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800832a:	647b      	str	r3, [r7, #68]	; 0x44
 800832c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800832e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008330:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008332:	e841 2300 	strex	r3, r2, [r1]
 8008336:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008338:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833a:	2b00      	cmp	r3, #0
 800833c:	d1e6      	bne.n	800830c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	69db      	ldr	r3, [r3, #28]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	2b10      	cmp	r3, #16
 800834a:	d103      	bne.n	8008354 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	2210      	movs	r2, #16
 8008352:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800835a:	4619      	mov	r1, r3
 800835c:	6878      	ldr	r0, [r7, #4]
 800835e:	f7fe fd79 	bl	8006e54 <HAL_UARTEx_RxEventCallback>
 8008362:	e002      	b.n	800836a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f7f9 f8bd 	bl	80014e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800836a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800836e:	2b00      	cmp	r3, #0
 8008370:	d006      	beq.n	8008380 <UART_RxISR_16BIT_FIFOEN+0x254>
 8008372:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008376:	f003 0320 	and.w	r3, r3, #32
 800837a:	2b00      	cmp	r3, #0
 800837c:	f47f aefa 	bne.w	8008174 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008386:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800838a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800838e:	2b00      	cmp	r3, #0
 8008390:	d045      	beq.n	800841e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008398:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800839c:	429a      	cmp	r2, r3
 800839e:	d23e      	bcs.n	800841e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	3308      	adds	r3, #8
 80083a6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083aa:	e853 3f00 	ldrex	r3, [r3]
 80083ae:	623b      	str	r3, [r7, #32]
   return(result);
 80083b0:	6a3b      	ldr	r3, [r7, #32]
 80083b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083b6:	677b      	str	r3, [r7, #116]	; 0x74
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	3308      	adds	r3, #8
 80083be:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80083c0:	633a      	str	r2, [r7, #48]	; 0x30
 80083c2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083c8:	e841 2300 	strex	r3, r2, [r1]
 80083cc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d1e5      	bne.n	80083a0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a14      	ldr	r2, [pc, #80]	; (8008428 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 80083d8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083e0:	693b      	ldr	r3, [r7, #16]
 80083e2:	e853 3f00 	ldrex	r3, [r3]
 80083e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f043 0320 	orr.w	r3, r3, #32
 80083ee:	673b      	str	r3, [r7, #112]	; 0x70
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	461a      	mov	r2, r3
 80083f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80083f8:	61fb      	str	r3, [r7, #28]
 80083fa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fc:	69b9      	ldr	r1, [r7, #24]
 80083fe:	69fa      	ldr	r2, [r7, #28]
 8008400:	e841 2300 	strex	r3, r2, [r1]
 8008404:	617b      	str	r3, [r7, #20]
   return(result);
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d1e6      	bne.n	80083da <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800840c:	e007      	b.n	800841e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699a      	ldr	r2, [r3, #24]
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f042 0208 	orr.w	r2, r2, #8
 800841c:	619a      	str	r2, [r3, #24]
}
 800841e:	bf00      	nop
 8008420:	37a0      	adds	r7, #160	; 0xa0
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}
 8008426:	bf00      	nop
 8008428:	08007cd3 	.word	0x08007cd3

0800842c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800842c:	b480      	push	{r7}
 800842e:	b083      	sub	sp, #12
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008434:	bf00      	nop
 8008436:	370c      	adds	r7, #12
 8008438:	46bd      	mov	sp, r7
 800843a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843e:	4770      	bx	lr

08008440 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800845c:	bf00      	nop
 800845e:	370c      	adds	r7, #12
 8008460:	46bd      	mov	sp, r7
 8008462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008466:	4770      	bx	lr

08008468 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008476:	2b01      	cmp	r3, #1
 8008478:	d101      	bne.n	800847e <HAL_UARTEx_DisableFifoMode+0x16>
 800847a:	2302      	movs	r3, #2
 800847c:	e027      	b.n	80084ce <HAL_UARTEx_DisableFifoMode+0x66>
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2224      	movs	r2, #36	; 0x24
 800848a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	681a      	ldr	r2, [r3, #0]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 0201 	bic.w	r2, r2, #1
 80084a4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80084ac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	68fa      	ldr	r2, [r7, #12]
 80084ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2200      	movs	r2, #0
 80084c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3714      	adds	r7, #20
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
 80084e2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d101      	bne.n	80084f2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084ee:	2302      	movs	r3, #2
 80084f0:	e02d      	b.n	800854e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2224      	movs	r2, #36	; 0x24
 80084fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	681a      	ldr	r2, [r3, #0]
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f022 0201 	bic.w	r2, r2, #1
 8008518:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	683a      	ldr	r2, [r7, #0]
 800852a:	430a      	orrs	r2, r1
 800852c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f000 f850 	bl	80085d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2220      	movs	r2, #32
 8008540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2200      	movs	r2, #0
 8008548:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800854c:	2300      	movs	r3, #0
}
 800854e:	4618      	mov	r0, r3
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
 800855e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008566:	2b01      	cmp	r3, #1
 8008568:	d101      	bne.n	800856e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800856a:	2302      	movs	r3, #2
 800856c:	e02d      	b.n	80085ca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2201      	movs	r2, #1
 8008572:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	2224      	movs	r2, #36	; 0x24
 800857a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f022 0201 	bic.w	r2, r2, #1
 8008594:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	683a      	ldr	r2, [r7, #0]
 80085a6:	430a      	orrs	r2, r1
 80085a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f000 f812 	bl	80085d4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2220      	movs	r2, #32
 80085bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	3710      	adds	r7, #16
 80085ce:	46bd      	mov	sp, r7
 80085d0:	bd80      	pop	{r7, pc}
	...

080085d4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b085      	sub	sp, #20
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d108      	bne.n	80085f6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085f4:	e031      	b.n	800865a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085f6:	2308      	movs	r3, #8
 80085f8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085fa:	2308      	movs	r3, #8
 80085fc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	0e5b      	lsrs	r3, r3, #25
 8008606:	b2db      	uxtb	r3, r3
 8008608:	f003 0307 	and.w	r3, r3, #7
 800860c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	0f5b      	lsrs	r3, r3, #29
 8008616:	b2db      	uxtb	r3, r3
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	7b3a      	ldrb	r2, [r7, #12]
 8008622:	4911      	ldr	r1, [pc, #68]	; (8008668 <UARTEx_SetNbDataToProcess+0x94>)
 8008624:	5c8a      	ldrb	r2, [r1, r2]
 8008626:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800862a:	7b3a      	ldrb	r2, [r7, #12]
 800862c:	490f      	ldr	r1, [pc, #60]	; (800866c <UARTEx_SetNbDataToProcess+0x98>)
 800862e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008630:	fb93 f3f2 	sdiv	r3, r3, r2
 8008634:	b29a      	uxth	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800863c:	7bfb      	ldrb	r3, [r7, #15]
 800863e:	7b7a      	ldrb	r2, [r7, #13]
 8008640:	4909      	ldr	r1, [pc, #36]	; (8008668 <UARTEx_SetNbDataToProcess+0x94>)
 8008642:	5c8a      	ldrb	r2, [r1, r2]
 8008644:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008648:	7b7a      	ldrb	r2, [r7, #13]
 800864a:	4908      	ldr	r1, [pc, #32]	; (800866c <UARTEx_SetNbDataToProcess+0x98>)
 800864c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800864e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008652:	b29a      	uxth	r2, r3
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800865a:	bf00      	nop
 800865c:	3714      	adds	r7, #20
 800865e:	46bd      	mov	sp, r7
 8008660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008664:	4770      	bx	lr
 8008666:	bf00      	nop
 8008668:	0800b95c 	.word	0x0800b95c
 800866c:	0800b964 	.word	0x0800b964

08008670 <atoi>:
 8008670:	220a      	movs	r2, #10
 8008672:	2100      	movs	r1, #0
 8008674:	f000 be3c 	b.w	80092f0 <strtol>

08008678 <__errno>:
 8008678:	4b01      	ldr	r3, [pc, #4]	; (8008680 <__errno+0x8>)
 800867a:	6818      	ldr	r0, [r3, #0]
 800867c:	4770      	bx	lr
 800867e:	bf00      	nop
 8008680:	200000f8 	.word	0x200000f8

08008684 <__libc_init_array>:
 8008684:	b570      	push	{r4, r5, r6, lr}
 8008686:	4d0d      	ldr	r5, [pc, #52]	; (80086bc <__libc_init_array+0x38>)
 8008688:	4c0d      	ldr	r4, [pc, #52]	; (80086c0 <__libc_init_array+0x3c>)
 800868a:	1b64      	subs	r4, r4, r5
 800868c:	10a4      	asrs	r4, r4, #2
 800868e:	2600      	movs	r6, #0
 8008690:	42a6      	cmp	r6, r4
 8008692:	d109      	bne.n	80086a8 <__libc_init_array+0x24>
 8008694:	4d0b      	ldr	r5, [pc, #44]	; (80086c4 <__libc_init_array+0x40>)
 8008696:	4c0c      	ldr	r4, [pc, #48]	; (80086c8 <__libc_init_array+0x44>)
 8008698:	f003 f88e 	bl	800b7b8 <_init>
 800869c:	1b64      	subs	r4, r4, r5
 800869e:	10a4      	asrs	r4, r4, #2
 80086a0:	2600      	movs	r6, #0
 80086a2:	42a6      	cmp	r6, r4
 80086a4:	d105      	bne.n	80086b2 <__libc_init_array+0x2e>
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ac:	4798      	blx	r3
 80086ae:	3601      	adds	r6, #1
 80086b0:	e7ee      	b.n	8008690 <__libc_init_array+0xc>
 80086b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086b6:	4798      	blx	r3
 80086b8:	3601      	adds	r6, #1
 80086ba:	e7f2      	b.n	80086a2 <__libc_init_array+0x1e>
 80086bc:	0800bdb0 	.word	0x0800bdb0
 80086c0:	0800bdb0 	.word	0x0800bdb0
 80086c4:	0800bdb0 	.word	0x0800bdb0
 80086c8:	0800bdb4 	.word	0x0800bdb4

080086cc <memset>:
 80086cc:	4402      	add	r2, r0
 80086ce:	4603      	mov	r3, r0
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d100      	bne.n	80086d6 <memset+0xa>
 80086d4:	4770      	bx	lr
 80086d6:	f803 1b01 	strb.w	r1, [r3], #1
 80086da:	e7f9      	b.n	80086d0 <memset+0x4>

080086dc <__cvt>:
 80086dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086e0:	ec55 4b10 	vmov	r4, r5, d0
 80086e4:	2d00      	cmp	r5, #0
 80086e6:	460e      	mov	r6, r1
 80086e8:	4619      	mov	r1, r3
 80086ea:	462b      	mov	r3, r5
 80086ec:	bfbb      	ittet	lt
 80086ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80086f2:	461d      	movlt	r5, r3
 80086f4:	2300      	movge	r3, #0
 80086f6:	232d      	movlt	r3, #45	; 0x2d
 80086f8:	700b      	strb	r3, [r1, #0]
 80086fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80086fc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008700:	4691      	mov	r9, r2
 8008702:	f023 0820 	bic.w	r8, r3, #32
 8008706:	bfbc      	itt	lt
 8008708:	4622      	movlt	r2, r4
 800870a:	4614      	movlt	r4, r2
 800870c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008710:	d005      	beq.n	800871e <__cvt+0x42>
 8008712:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008716:	d100      	bne.n	800871a <__cvt+0x3e>
 8008718:	3601      	adds	r6, #1
 800871a:	2102      	movs	r1, #2
 800871c:	e000      	b.n	8008720 <__cvt+0x44>
 800871e:	2103      	movs	r1, #3
 8008720:	ab03      	add	r3, sp, #12
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	ab02      	add	r3, sp, #8
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	ec45 4b10 	vmov	d0, r4, r5
 800872c:	4653      	mov	r3, sl
 800872e:	4632      	mov	r2, r6
 8008730:	f000 ff52 	bl	80095d8 <_dtoa_r>
 8008734:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008738:	4607      	mov	r7, r0
 800873a:	d102      	bne.n	8008742 <__cvt+0x66>
 800873c:	f019 0f01 	tst.w	r9, #1
 8008740:	d022      	beq.n	8008788 <__cvt+0xac>
 8008742:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008746:	eb07 0906 	add.w	r9, r7, r6
 800874a:	d110      	bne.n	800876e <__cvt+0x92>
 800874c:	783b      	ldrb	r3, [r7, #0]
 800874e:	2b30      	cmp	r3, #48	; 0x30
 8008750:	d10a      	bne.n	8008768 <__cvt+0x8c>
 8008752:	2200      	movs	r2, #0
 8008754:	2300      	movs	r3, #0
 8008756:	4620      	mov	r0, r4
 8008758:	4629      	mov	r1, r5
 800875a:	f7f8 f9ed 	bl	8000b38 <__aeabi_dcmpeq>
 800875e:	b918      	cbnz	r0, 8008768 <__cvt+0x8c>
 8008760:	f1c6 0601 	rsb	r6, r6, #1
 8008764:	f8ca 6000 	str.w	r6, [sl]
 8008768:	f8da 3000 	ldr.w	r3, [sl]
 800876c:	4499      	add	r9, r3
 800876e:	2200      	movs	r2, #0
 8008770:	2300      	movs	r3, #0
 8008772:	4620      	mov	r0, r4
 8008774:	4629      	mov	r1, r5
 8008776:	f7f8 f9df 	bl	8000b38 <__aeabi_dcmpeq>
 800877a:	b108      	cbz	r0, 8008780 <__cvt+0xa4>
 800877c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008780:	2230      	movs	r2, #48	; 0x30
 8008782:	9b03      	ldr	r3, [sp, #12]
 8008784:	454b      	cmp	r3, r9
 8008786:	d307      	bcc.n	8008798 <__cvt+0xbc>
 8008788:	9b03      	ldr	r3, [sp, #12]
 800878a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800878c:	1bdb      	subs	r3, r3, r7
 800878e:	4638      	mov	r0, r7
 8008790:	6013      	str	r3, [r2, #0]
 8008792:	b004      	add	sp, #16
 8008794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008798:	1c59      	adds	r1, r3, #1
 800879a:	9103      	str	r1, [sp, #12]
 800879c:	701a      	strb	r2, [r3, #0]
 800879e:	e7f0      	b.n	8008782 <__cvt+0xa6>

080087a0 <__exponent>:
 80087a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a2:	4603      	mov	r3, r0
 80087a4:	2900      	cmp	r1, #0
 80087a6:	bfb8      	it	lt
 80087a8:	4249      	neglt	r1, r1
 80087aa:	f803 2b02 	strb.w	r2, [r3], #2
 80087ae:	bfb4      	ite	lt
 80087b0:	222d      	movlt	r2, #45	; 0x2d
 80087b2:	222b      	movge	r2, #43	; 0x2b
 80087b4:	2909      	cmp	r1, #9
 80087b6:	7042      	strb	r2, [r0, #1]
 80087b8:	dd2a      	ble.n	8008810 <__exponent+0x70>
 80087ba:	f10d 0407 	add.w	r4, sp, #7
 80087be:	46a4      	mov	ip, r4
 80087c0:	270a      	movs	r7, #10
 80087c2:	46a6      	mov	lr, r4
 80087c4:	460a      	mov	r2, r1
 80087c6:	fb91 f6f7 	sdiv	r6, r1, r7
 80087ca:	fb07 1516 	mls	r5, r7, r6, r1
 80087ce:	3530      	adds	r5, #48	; 0x30
 80087d0:	2a63      	cmp	r2, #99	; 0x63
 80087d2:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80087d6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087da:	4631      	mov	r1, r6
 80087dc:	dcf1      	bgt.n	80087c2 <__exponent+0x22>
 80087de:	3130      	adds	r1, #48	; 0x30
 80087e0:	f1ae 0502 	sub.w	r5, lr, #2
 80087e4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80087e8:	1c44      	adds	r4, r0, #1
 80087ea:	4629      	mov	r1, r5
 80087ec:	4561      	cmp	r1, ip
 80087ee:	d30a      	bcc.n	8008806 <__exponent+0x66>
 80087f0:	f10d 0209 	add.w	r2, sp, #9
 80087f4:	eba2 020e 	sub.w	r2, r2, lr
 80087f8:	4565      	cmp	r5, ip
 80087fa:	bf88      	it	hi
 80087fc:	2200      	movhi	r2, #0
 80087fe:	4413      	add	r3, r2
 8008800:	1a18      	subs	r0, r3, r0
 8008802:	b003      	add	sp, #12
 8008804:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008806:	f811 2b01 	ldrb.w	r2, [r1], #1
 800880a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800880e:	e7ed      	b.n	80087ec <__exponent+0x4c>
 8008810:	2330      	movs	r3, #48	; 0x30
 8008812:	3130      	adds	r1, #48	; 0x30
 8008814:	7083      	strb	r3, [r0, #2]
 8008816:	70c1      	strb	r1, [r0, #3]
 8008818:	1d03      	adds	r3, r0, #4
 800881a:	e7f1      	b.n	8008800 <__exponent+0x60>

0800881c <_printf_float>:
 800881c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008820:	ed2d 8b02 	vpush	{d8}
 8008824:	b08d      	sub	sp, #52	; 0x34
 8008826:	460c      	mov	r4, r1
 8008828:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800882c:	4616      	mov	r6, r2
 800882e:	461f      	mov	r7, r3
 8008830:	4605      	mov	r5, r0
 8008832:	f001 fe89 	bl	800a548 <_localeconv_r>
 8008836:	f8d0 a000 	ldr.w	sl, [r0]
 800883a:	4650      	mov	r0, sl
 800883c:	f7f7 fcfa 	bl	8000234 <strlen>
 8008840:	2300      	movs	r3, #0
 8008842:	930a      	str	r3, [sp, #40]	; 0x28
 8008844:	6823      	ldr	r3, [r4, #0]
 8008846:	9305      	str	r3, [sp, #20]
 8008848:	f8d8 3000 	ldr.w	r3, [r8]
 800884c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008850:	3307      	adds	r3, #7
 8008852:	f023 0307 	bic.w	r3, r3, #7
 8008856:	f103 0208 	add.w	r2, r3, #8
 800885a:	f8c8 2000 	str.w	r2, [r8]
 800885e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008862:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008866:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800886a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800886e:	9307      	str	r3, [sp, #28]
 8008870:	f8cd 8018 	str.w	r8, [sp, #24]
 8008874:	ee08 0a10 	vmov	s16, r0
 8008878:	4b9f      	ldr	r3, [pc, #636]	; (8008af8 <_printf_float+0x2dc>)
 800887a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800887e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008882:	f7f8 f98b 	bl	8000b9c <__aeabi_dcmpun>
 8008886:	bb88      	cbnz	r0, 80088ec <_printf_float+0xd0>
 8008888:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800888c:	4b9a      	ldr	r3, [pc, #616]	; (8008af8 <_printf_float+0x2dc>)
 800888e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008892:	f7f8 f965 	bl	8000b60 <__aeabi_dcmple>
 8008896:	bb48      	cbnz	r0, 80088ec <_printf_float+0xd0>
 8008898:	2200      	movs	r2, #0
 800889a:	2300      	movs	r3, #0
 800889c:	4640      	mov	r0, r8
 800889e:	4649      	mov	r1, r9
 80088a0:	f7f8 f954 	bl	8000b4c <__aeabi_dcmplt>
 80088a4:	b110      	cbz	r0, 80088ac <_printf_float+0x90>
 80088a6:	232d      	movs	r3, #45	; 0x2d
 80088a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088ac:	4b93      	ldr	r3, [pc, #588]	; (8008afc <_printf_float+0x2e0>)
 80088ae:	4894      	ldr	r0, [pc, #592]	; (8008b00 <_printf_float+0x2e4>)
 80088b0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088b4:	bf94      	ite	ls
 80088b6:	4698      	movls	r8, r3
 80088b8:	4680      	movhi	r8, r0
 80088ba:	2303      	movs	r3, #3
 80088bc:	6123      	str	r3, [r4, #16]
 80088be:	9b05      	ldr	r3, [sp, #20]
 80088c0:	f023 0204 	bic.w	r2, r3, #4
 80088c4:	6022      	str	r2, [r4, #0]
 80088c6:	f04f 0900 	mov.w	r9, #0
 80088ca:	9700      	str	r7, [sp, #0]
 80088cc:	4633      	mov	r3, r6
 80088ce:	aa0b      	add	r2, sp, #44	; 0x2c
 80088d0:	4621      	mov	r1, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f9d8 	bl	8008c88 <_printf_common>
 80088d8:	3001      	adds	r0, #1
 80088da:	f040 8090 	bne.w	80089fe <_printf_float+0x1e2>
 80088de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80088e2:	b00d      	add	sp, #52	; 0x34
 80088e4:	ecbd 8b02 	vpop	{d8}
 80088e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ec:	4642      	mov	r2, r8
 80088ee:	464b      	mov	r3, r9
 80088f0:	4640      	mov	r0, r8
 80088f2:	4649      	mov	r1, r9
 80088f4:	f7f8 f952 	bl	8000b9c <__aeabi_dcmpun>
 80088f8:	b140      	cbz	r0, 800890c <_printf_float+0xf0>
 80088fa:	464b      	mov	r3, r9
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	bfbc      	itt	lt
 8008900:	232d      	movlt	r3, #45	; 0x2d
 8008902:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008906:	487f      	ldr	r0, [pc, #508]	; (8008b04 <_printf_float+0x2e8>)
 8008908:	4b7f      	ldr	r3, [pc, #508]	; (8008b08 <_printf_float+0x2ec>)
 800890a:	e7d1      	b.n	80088b0 <_printf_float+0x94>
 800890c:	6863      	ldr	r3, [r4, #4]
 800890e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008912:	9206      	str	r2, [sp, #24]
 8008914:	1c5a      	adds	r2, r3, #1
 8008916:	d13f      	bne.n	8008998 <_printf_float+0x17c>
 8008918:	2306      	movs	r3, #6
 800891a:	6063      	str	r3, [r4, #4]
 800891c:	9b05      	ldr	r3, [sp, #20]
 800891e:	6861      	ldr	r1, [r4, #4]
 8008920:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008924:	2300      	movs	r3, #0
 8008926:	9303      	str	r3, [sp, #12]
 8008928:	ab0a      	add	r3, sp, #40	; 0x28
 800892a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800892e:	ab09      	add	r3, sp, #36	; 0x24
 8008930:	ec49 8b10 	vmov	d0, r8, r9
 8008934:	9300      	str	r3, [sp, #0]
 8008936:	6022      	str	r2, [r4, #0]
 8008938:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800893c:	4628      	mov	r0, r5
 800893e:	f7ff fecd 	bl	80086dc <__cvt>
 8008942:	9b06      	ldr	r3, [sp, #24]
 8008944:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008946:	2b47      	cmp	r3, #71	; 0x47
 8008948:	4680      	mov	r8, r0
 800894a:	d108      	bne.n	800895e <_printf_float+0x142>
 800894c:	1cc8      	adds	r0, r1, #3
 800894e:	db02      	blt.n	8008956 <_printf_float+0x13a>
 8008950:	6863      	ldr	r3, [r4, #4]
 8008952:	4299      	cmp	r1, r3
 8008954:	dd41      	ble.n	80089da <_printf_float+0x1be>
 8008956:	f1ab 0b02 	sub.w	fp, fp, #2
 800895a:	fa5f fb8b 	uxtb.w	fp, fp
 800895e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008962:	d820      	bhi.n	80089a6 <_printf_float+0x18a>
 8008964:	3901      	subs	r1, #1
 8008966:	465a      	mov	r2, fp
 8008968:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800896c:	9109      	str	r1, [sp, #36]	; 0x24
 800896e:	f7ff ff17 	bl	80087a0 <__exponent>
 8008972:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008974:	1813      	adds	r3, r2, r0
 8008976:	2a01      	cmp	r2, #1
 8008978:	4681      	mov	r9, r0
 800897a:	6123      	str	r3, [r4, #16]
 800897c:	dc02      	bgt.n	8008984 <_printf_float+0x168>
 800897e:	6822      	ldr	r2, [r4, #0]
 8008980:	07d2      	lsls	r2, r2, #31
 8008982:	d501      	bpl.n	8008988 <_printf_float+0x16c>
 8008984:	3301      	adds	r3, #1
 8008986:	6123      	str	r3, [r4, #16]
 8008988:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800898c:	2b00      	cmp	r3, #0
 800898e:	d09c      	beq.n	80088ca <_printf_float+0xae>
 8008990:	232d      	movs	r3, #45	; 0x2d
 8008992:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008996:	e798      	b.n	80088ca <_printf_float+0xae>
 8008998:	9a06      	ldr	r2, [sp, #24]
 800899a:	2a47      	cmp	r2, #71	; 0x47
 800899c:	d1be      	bne.n	800891c <_printf_float+0x100>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1bc      	bne.n	800891c <_printf_float+0x100>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e7b9      	b.n	800891a <_printf_float+0xfe>
 80089a6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089aa:	d118      	bne.n	80089de <_printf_float+0x1c2>
 80089ac:	2900      	cmp	r1, #0
 80089ae:	6863      	ldr	r3, [r4, #4]
 80089b0:	dd0b      	ble.n	80089ca <_printf_float+0x1ae>
 80089b2:	6121      	str	r1, [r4, #16]
 80089b4:	b913      	cbnz	r3, 80089bc <_printf_float+0x1a0>
 80089b6:	6822      	ldr	r2, [r4, #0]
 80089b8:	07d0      	lsls	r0, r2, #31
 80089ba:	d502      	bpl.n	80089c2 <_printf_float+0x1a6>
 80089bc:	3301      	adds	r3, #1
 80089be:	440b      	add	r3, r1
 80089c0:	6123      	str	r3, [r4, #16]
 80089c2:	65a1      	str	r1, [r4, #88]	; 0x58
 80089c4:	f04f 0900 	mov.w	r9, #0
 80089c8:	e7de      	b.n	8008988 <_printf_float+0x16c>
 80089ca:	b913      	cbnz	r3, 80089d2 <_printf_float+0x1b6>
 80089cc:	6822      	ldr	r2, [r4, #0]
 80089ce:	07d2      	lsls	r2, r2, #31
 80089d0:	d501      	bpl.n	80089d6 <_printf_float+0x1ba>
 80089d2:	3302      	adds	r3, #2
 80089d4:	e7f4      	b.n	80089c0 <_printf_float+0x1a4>
 80089d6:	2301      	movs	r3, #1
 80089d8:	e7f2      	b.n	80089c0 <_printf_float+0x1a4>
 80089da:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80089de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089e0:	4299      	cmp	r1, r3
 80089e2:	db05      	blt.n	80089f0 <_printf_float+0x1d4>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	6121      	str	r1, [r4, #16]
 80089e8:	07d8      	lsls	r0, r3, #31
 80089ea:	d5ea      	bpl.n	80089c2 <_printf_float+0x1a6>
 80089ec:	1c4b      	adds	r3, r1, #1
 80089ee:	e7e7      	b.n	80089c0 <_printf_float+0x1a4>
 80089f0:	2900      	cmp	r1, #0
 80089f2:	bfd4      	ite	le
 80089f4:	f1c1 0202 	rsble	r2, r1, #2
 80089f8:	2201      	movgt	r2, #1
 80089fa:	4413      	add	r3, r2
 80089fc:	e7e0      	b.n	80089c0 <_printf_float+0x1a4>
 80089fe:	6823      	ldr	r3, [r4, #0]
 8008a00:	055a      	lsls	r2, r3, #21
 8008a02:	d407      	bmi.n	8008a14 <_printf_float+0x1f8>
 8008a04:	6923      	ldr	r3, [r4, #16]
 8008a06:	4642      	mov	r2, r8
 8008a08:	4631      	mov	r1, r6
 8008a0a:	4628      	mov	r0, r5
 8008a0c:	47b8      	blx	r7
 8008a0e:	3001      	adds	r0, #1
 8008a10:	d12c      	bne.n	8008a6c <_printf_float+0x250>
 8008a12:	e764      	b.n	80088de <_printf_float+0xc2>
 8008a14:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a18:	f240 80e0 	bls.w	8008bdc <_printf_float+0x3c0>
 8008a1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a20:	2200      	movs	r2, #0
 8008a22:	2300      	movs	r3, #0
 8008a24:	f7f8 f888 	bl	8000b38 <__aeabi_dcmpeq>
 8008a28:	2800      	cmp	r0, #0
 8008a2a:	d034      	beq.n	8008a96 <_printf_float+0x27a>
 8008a2c:	4a37      	ldr	r2, [pc, #220]	; (8008b0c <_printf_float+0x2f0>)
 8008a2e:	2301      	movs	r3, #1
 8008a30:	4631      	mov	r1, r6
 8008a32:	4628      	mov	r0, r5
 8008a34:	47b8      	blx	r7
 8008a36:	3001      	adds	r0, #1
 8008a38:	f43f af51 	beq.w	80088de <_printf_float+0xc2>
 8008a3c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a40:	429a      	cmp	r2, r3
 8008a42:	db02      	blt.n	8008a4a <_printf_float+0x22e>
 8008a44:	6823      	ldr	r3, [r4, #0]
 8008a46:	07d8      	lsls	r0, r3, #31
 8008a48:	d510      	bpl.n	8008a6c <_printf_float+0x250>
 8008a4a:	ee18 3a10 	vmov	r3, s16
 8008a4e:	4652      	mov	r2, sl
 8008a50:	4631      	mov	r1, r6
 8008a52:	4628      	mov	r0, r5
 8008a54:	47b8      	blx	r7
 8008a56:	3001      	adds	r0, #1
 8008a58:	f43f af41 	beq.w	80088de <_printf_float+0xc2>
 8008a5c:	f04f 0800 	mov.w	r8, #0
 8008a60:	f104 091a 	add.w	r9, r4, #26
 8008a64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a66:	3b01      	subs	r3, #1
 8008a68:	4543      	cmp	r3, r8
 8008a6a:	dc09      	bgt.n	8008a80 <_printf_float+0x264>
 8008a6c:	6823      	ldr	r3, [r4, #0]
 8008a6e:	079b      	lsls	r3, r3, #30
 8008a70:	f100 8105 	bmi.w	8008c7e <_printf_float+0x462>
 8008a74:	68e0      	ldr	r0, [r4, #12]
 8008a76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a78:	4298      	cmp	r0, r3
 8008a7a:	bfb8      	it	lt
 8008a7c:	4618      	movlt	r0, r3
 8008a7e:	e730      	b.n	80088e2 <_printf_float+0xc6>
 8008a80:	2301      	movs	r3, #1
 8008a82:	464a      	mov	r2, r9
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f af27 	beq.w	80088de <_printf_float+0xc2>
 8008a90:	f108 0801 	add.w	r8, r8, #1
 8008a94:	e7e6      	b.n	8008a64 <_printf_float+0x248>
 8008a96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	dc39      	bgt.n	8008b10 <_printf_float+0x2f4>
 8008a9c:	4a1b      	ldr	r2, [pc, #108]	; (8008b0c <_printf_float+0x2f0>)
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	4631      	mov	r1, r6
 8008aa2:	4628      	mov	r0, r5
 8008aa4:	47b8      	blx	r7
 8008aa6:	3001      	adds	r0, #1
 8008aa8:	f43f af19 	beq.w	80088de <_printf_float+0xc2>
 8008aac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	d102      	bne.n	8008aba <_printf_float+0x29e>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	07d9      	lsls	r1, r3, #31
 8008ab8:	d5d8      	bpl.n	8008a6c <_printf_float+0x250>
 8008aba:	ee18 3a10 	vmov	r3, s16
 8008abe:	4652      	mov	r2, sl
 8008ac0:	4631      	mov	r1, r6
 8008ac2:	4628      	mov	r0, r5
 8008ac4:	47b8      	blx	r7
 8008ac6:	3001      	adds	r0, #1
 8008ac8:	f43f af09 	beq.w	80088de <_printf_float+0xc2>
 8008acc:	f04f 0900 	mov.w	r9, #0
 8008ad0:	f104 0a1a 	add.w	sl, r4, #26
 8008ad4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ad6:	425b      	negs	r3, r3
 8008ad8:	454b      	cmp	r3, r9
 8008ada:	dc01      	bgt.n	8008ae0 <_printf_float+0x2c4>
 8008adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ade:	e792      	b.n	8008a06 <_printf_float+0x1ea>
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f aef7 	beq.w	80088de <_printf_float+0xc2>
 8008af0:	f109 0901 	add.w	r9, r9, #1
 8008af4:	e7ee      	b.n	8008ad4 <_printf_float+0x2b8>
 8008af6:	bf00      	nop
 8008af8:	7fefffff 	.word	0x7fefffff
 8008afc:	0800b970 	.word	0x0800b970
 8008b00:	0800b974 	.word	0x0800b974
 8008b04:	0800b97c 	.word	0x0800b97c
 8008b08:	0800b978 	.word	0x0800b978
 8008b0c:	0800b980 	.word	0x0800b980
 8008b10:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b14:	429a      	cmp	r2, r3
 8008b16:	bfa8      	it	ge
 8008b18:	461a      	movge	r2, r3
 8008b1a:	2a00      	cmp	r2, #0
 8008b1c:	4691      	mov	r9, r2
 8008b1e:	dc37      	bgt.n	8008b90 <_printf_float+0x374>
 8008b20:	f04f 0b00 	mov.w	fp, #0
 8008b24:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b28:	f104 021a 	add.w	r2, r4, #26
 8008b2c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b2e:	9305      	str	r3, [sp, #20]
 8008b30:	eba3 0309 	sub.w	r3, r3, r9
 8008b34:	455b      	cmp	r3, fp
 8008b36:	dc33      	bgt.n	8008ba0 <_printf_float+0x384>
 8008b38:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b3c:	429a      	cmp	r2, r3
 8008b3e:	db3b      	blt.n	8008bb8 <_printf_float+0x39c>
 8008b40:	6823      	ldr	r3, [r4, #0]
 8008b42:	07da      	lsls	r2, r3, #31
 8008b44:	d438      	bmi.n	8008bb8 <_printf_float+0x39c>
 8008b46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b48:	9a05      	ldr	r2, [sp, #20]
 8008b4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b4c:	1a9a      	subs	r2, r3, r2
 8008b4e:	eba3 0901 	sub.w	r9, r3, r1
 8008b52:	4591      	cmp	r9, r2
 8008b54:	bfa8      	it	ge
 8008b56:	4691      	movge	r9, r2
 8008b58:	f1b9 0f00 	cmp.w	r9, #0
 8008b5c:	dc35      	bgt.n	8008bca <_printf_float+0x3ae>
 8008b5e:	f04f 0800 	mov.w	r8, #0
 8008b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b66:	f104 0a1a 	add.w	sl, r4, #26
 8008b6a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b6e:	1a9b      	subs	r3, r3, r2
 8008b70:	eba3 0309 	sub.w	r3, r3, r9
 8008b74:	4543      	cmp	r3, r8
 8008b76:	f77f af79 	ble.w	8008a6c <_printf_float+0x250>
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	4652      	mov	r2, sl
 8008b7e:	4631      	mov	r1, r6
 8008b80:	4628      	mov	r0, r5
 8008b82:	47b8      	blx	r7
 8008b84:	3001      	adds	r0, #1
 8008b86:	f43f aeaa 	beq.w	80088de <_printf_float+0xc2>
 8008b8a:	f108 0801 	add.w	r8, r8, #1
 8008b8e:	e7ec      	b.n	8008b6a <_printf_float+0x34e>
 8008b90:	4613      	mov	r3, r2
 8008b92:	4631      	mov	r1, r6
 8008b94:	4642      	mov	r2, r8
 8008b96:	4628      	mov	r0, r5
 8008b98:	47b8      	blx	r7
 8008b9a:	3001      	adds	r0, #1
 8008b9c:	d1c0      	bne.n	8008b20 <_printf_float+0x304>
 8008b9e:	e69e      	b.n	80088de <_printf_float+0xc2>
 8008ba0:	2301      	movs	r3, #1
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	9205      	str	r2, [sp, #20]
 8008ba8:	47b8      	blx	r7
 8008baa:	3001      	adds	r0, #1
 8008bac:	f43f ae97 	beq.w	80088de <_printf_float+0xc2>
 8008bb0:	9a05      	ldr	r2, [sp, #20]
 8008bb2:	f10b 0b01 	add.w	fp, fp, #1
 8008bb6:	e7b9      	b.n	8008b2c <_printf_float+0x310>
 8008bb8:	ee18 3a10 	vmov	r3, s16
 8008bbc:	4652      	mov	r2, sl
 8008bbe:	4631      	mov	r1, r6
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	47b8      	blx	r7
 8008bc4:	3001      	adds	r0, #1
 8008bc6:	d1be      	bne.n	8008b46 <_printf_float+0x32a>
 8008bc8:	e689      	b.n	80088de <_printf_float+0xc2>
 8008bca:	9a05      	ldr	r2, [sp, #20]
 8008bcc:	464b      	mov	r3, r9
 8008bce:	4442      	add	r2, r8
 8008bd0:	4631      	mov	r1, r6
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	47b8      	blx	r7
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d1c1      	bne.n	8008b5e <_printf_float+0x342>
 8008bda:	e680      	b.n	80088de <_printf_float+0xc2>
 8008bdc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008bde:	2a01      	cmp	r2, #1
 8008be0:	dc01      	bgt.n	8008be6 <_printf_float+0x3ca>
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d538      	bpl.n	8008c58 <_printf_float+0x43c>
 8008be6:	2301      	movs	r3, #1
 8008be8:	4642      	mov	r2, r8
 8008bea:	4631      	mov	r1, r6
 8008bec:	4628      	mov	r0, r5
 8008bee:	47b8      	blx	r7
 8008bf0:	3001      	adds	r0, #1
 8008bf2:	f43f ae74 	beq.w	80088de <_printf_float+0xc2>
 8008bf6:	ee18 3a10 	vmov	r3, s16
 8008bfa:	4652      	mov	r2, sl
 8008bfc:	4631      	mov	r1, r6
 8008bfe:	4628      	mov	r0, r5
 8008c00:	47b8      	blx	r7
 8008c02:	3001      	adds	r0, #1
 8008c04:	f43f ae6b 	beq.w	80088de <_printf_float+0xc2>
 8008c08:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	2300      	movs	r3, #0
 8008c10:	f7f7 ff92 	bl	8000b38 <__aeabi_dcmpeq>
 8008c14:	b9d8      	cbnz	r0, 8008c4e <_printf_float+0x432>
 8008c16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c18:	f108 0201 	add.w	r2, r8, #1
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4628      	mov	r0, r5
 8008c22:	47b8      	blx	r7
 8008c24:	3001      	adds	r0, #1
 8008c26:	d10e      	bne.n	8008c46 <_printf_float+0x42a>
 8008c28:	e659      	b.n	80088de <_printf_float+0xc2>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4631      	mov	r1, r6
 8008c30:	4628      	mov	r0, r5
 8008c32:	47b8      	blx	r7
 8008c34:	3001      	adds	r0, #1
 8008c36:	f43f ae52 	beq.w	80088de <_printf_float+0xc2>
 8008c3a:	f108 0801 	add.w	r8, r8, #1
 8008c3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c40:	3b01      	subs	r3, #1
 8008c42:	4543      	cmp	r3, r8
 8008c44:	dcf1      	bgt.n	8008c2a <_printf_float+0x40e>
 8008c46:	464b      	mov	r3, r9
 8008c48:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c4c:	e6dc      	b.n	8008a08 <_printf_float+0x1ec>
 8008c4e:	f04f 0800 	mov.w	r8, #0
 8008c52:	f104 0a1a 	add.w	sl, r4, #26
 8008c56:	e7f2      	b.n	8008c3e <_printf_float+0x422>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	4642      	mov	r2, r8
 8008c5c:	e7df      	b.n	8008c1e <_printf_float+0x402>
 8008c5e:	2301      	movs	r3, #1
 8008c60:	464a      	mov	r2, r9
 8008c62:	4631      	mov	r1, r6
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b8      	blx	r7
 8008c68:	3001      	adds	r0, #1
 8008c6a:	f43f ae38 	beq.w	80088de <_printf_float+0xc2>
 8008c6e:	f108 0801 	add.w	r8, r8, #1
 8008c72:	68e3      	ldr	r3, [r4, #12]
 8008c74:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c76:	1a5b      	subs	r3, r3, r1
 8008c78:	4543      	cmp	r3, r8
 8008c7a:	dcf0      	bgt.n	8008c5e <_printf_float+0x442>
 8008c7c:	e6fa      	b.n	8008a74 <_printf_float+0x258>
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	f104 0919 	add.w	r9, r4, #25
 8008c86:	e7f4      	b.n	8008c72 <_printf_float+0x456>

08008c88 <_printf_common>:
 8008c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c8c:	4616      	mov	r6, r2
 8008c8e:	4699      	mov	r9, r3
 8008c90:	688a      	ldr	r2, [r1, #8]
 8008c92:	690b      	ldr	r3, [r1, #16]
 8008c94:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	bfb8      	it	lt
 8008c9c:	4613      	movlt	r3, r2
 8008c9e:	6033      	str	r3, [r6, #0]
 8008ca0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008ca4:	4607      	mov	r7, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	b10a      	cbz	r2, 8008cae <_printf_common+0x26>
 8008caa:	3301      	adds	r3, #1
 8008cac:	6033      	str	r3, [r6, #0]
 8008cae:	6823      	ldr	r3, [r4, #0]
 8008cb0:	0699      	lsls	r1, r3, #26
 8008cb2:	bf42      	ittt	mi
 8008cb4:	6833      	ldrmi	r3, [r6, #0]
 8008cb6:	3302      	addmi	r3, #2
 8008cb8:	6033      	strmi	r3, [r6, #0]
 8008cba:	6825      	ldr	r5, [r4, #0]
 8008cbc:	f015 0506 	ands.w	r5, r5, #6
 8008cc0:	d106      	bne.n	8008cd0 <_printf_common+0x48>
 8008cc2:	f104 0a19 	add.w	sl, r4, #25
 8008cc6:	68e3      	ldr	r3, [r4, #12]
 8008cc8:	6832      	ldr	r2, [r6, #0]
 8008cca:	1a9b      	subs	r3, r3, r2
 8008ccc:	42ab      	cmp	r3, r5
 8008cce:	dc26      	bgt.n	8008d1e <_printf_common+0x96>
 8008cd0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cd4:	1e13      	subs	r3, r2, #0
 8008cd6:	6822      	ldr	r2, [r4, #0]
 8008cd8:	bf18      	it	ne
 8008cda:	2301      	movne	r3, #1
 8008cdc:	0692      	lsls	r2, r2, #26
 8008cde:	d42b      	bmi.n	8008d38 <_printf_common+0xb0>
 8008ce0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	47c0      	blx	r8
 8008cea:	3001      	adds	r0, #1
 8008cec:	d01e      	beq.n	8008d2c <_printf_common+0xa4>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	68e5      	ldr	r5, [r4, #12]
 8008cf2:	6832      	ldr	r2, [r6, #0]
 8008cf4:	f003 0306 	and.w	r3, r3, #6
 8008cf8:	2b04      	cmp	r3, #4
 8008cfa:	bf08      	it	eq
 8008cfc:	1aad      	subeq	r5, r5, r2
 8008cfe:	68a3      	ldr	r3, [r4, #8]
 8008d00:	6922      	ldr	r2, [r4, #16]
 8008d02:	bf0c      	ite	eq
 8008d04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d08:	2500      	movne	r5, #0
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	bfc4      	itt	gt
 8008d0e:	1a9b      	subgt	r3, r3, r2
 8008d10:	18ed      	addgt	r5, r5, r3
 8008d12:	2600      	movs	r6, #0
 8008d14:	341a      	adds	r4, #26
 8008d16:	42b5      	cmp	r5, r6
 8008d18:	d11a      	bne.n	8008d50 <_printf_common+0xc8>
 8008d1a:	2000      	movs	r0, #0
 8008d1c:	e008      	b.n	8008d30 <_printf_common+0xa8>
 8008d1e:	2301      	movs	r3, #1
 8008d20:	4652      	mov	r2, sl
 8008d22:	4649      	mov	r1, r9
 8008d24:	4638      	mov	r0, r7
 8008d26:	47c0      	blx	r8
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d103      	bne.n	8008d34 <_printf_common+0xac>
 8008d2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d34:	3501      	adds	r5, #1
 8008d36:	e7c6      	b.n	8008cc6 <_printf_common+0x3e>
 8008d38:	18e1      	adds	r1, r4, r3
 8008d3a:	1c5a      	adds	r2, r3, #1
 8008d3c:	2030      	movs	r0, #48	; 0x30
 8008d3e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d42:	4422      	add	r2, r4
 8008d44:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d48:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d4c:	3302      	adds	r3, #2
 8008d4e:	e7c7      	b.n	8008ce0 <_printf_common+0x58>
 8008d50:	2301      	movs	r3, #1
 8008d52:	4622      	mov	r2, r4
 8008d54:	4649      	mov	r1, r9
 8008d56:	4638      	mov	r0, r7
 8008d58:	47c0      	blx	r8
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d0e6      	beq.n	8008d2c <_printf_common+0xa4>
 8008d5e:	3601      	adds	r6, #1
 8008d60:	e7d9      	b.n	8008d16 <_printf_common+0x8e>
	...

08008d64 <_printf_i>:
 8008d64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d68:	7e0f      	ldrb	r7, [r1, #24]
 8008d6a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d6c:	2f78      	cmp	r7, #120	; 0x78
 8008d6e:	4691      	mov	r9, r2
 8008d70:	4680      	mov	r8, r0
 8008d72:	460c      	mov	r4, r1
 8008d74:	469a      	mov	sl, r3
 8008d76:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d7a:	d807      	bhi.n	8008d8c <_printf_i+0x28>
 8008d7c:	2f62      	cmp	r7, #98	; 0x62
 8008d7e:	d80a      	bhi.n	8008d96 <_printf_i+0x32>
 8008d80:	2f00      	cmp	r7, #0
 8008d82:	f000 80d8 	beq.w	8008f36 <_printf_i+0x1d2>
 8008d86:	2f58      	cmp	r7, #88	; 0x58
 8008d88:	f000 80a3 	beq.w	8008ed2 <_printf_i+0x16e>
 8008d8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d90:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008d94:	e03a      	b.n	8008e0c <_printf_i+0xa8>
 8008d96:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008d9a:	2b15      	cmp	r3, #21
 8008d9c:	d8f6      	bhi.n	8008d8c <_printf_i+0x28>
 8008d9e:	a101      	add	r1, pc, #4	; (adr r1, 8008da4 <_printf_i+0x40>)
 8008da0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008da4:	08008dfd 	.word	0x08008dfd
 8008da8:	08008e11 	.word	0x08008e11
 8008dac:	08008d8d 	.word	0x08008d8d
 8008db0:	08008d8d 	.word	0x08008d8d
 8008db4:	08008d8d 	.word	0x08008d8d
 8008db8:	08008d8d 	.word	0x08008d8d
 8008dbc:	08008e11 	.word	0x08008e11
 8008dc0:	08008d8d 	.word	0x08008d8d
 8008dc4:	08008d8d 	.word	0x08008d8d
 8008dc8:	08008d8d 	.word	0x08008d8d
 8008dcc:	08008d8d 	.word	0x08008d8d
 8008dd0:	08008f1d 	.word	0x08008f1d
 8008dd4:	08008e41 	.word	0x08008e41
 8008dd8:	08008eff 	.word	0x08008eff
 8008ddc:	08008d8d 	.word	0x08008d8d
 8008de0:	08008d8d 	.word	0x08008d8d
 8008de4:	08008f3f 	.word	0x08008f3f
 8008de8:	08008d8d 	.word	0x08008d8d
 8008dec:	08008e41 	.word	0x08008e41
 8008df0:	08008d8d 	.word	0x08008d8d
 8008df4:	08008d8d 	.word	0x08008d8d
 8008df8:	08008f07 	.word	0x08008f07
 8008dfc:	682b      	ldr	r3, [r5, #0]
 8008dfe:	1d1a      	adds	r2, r3, #4
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	602a      	str	r2, [r5, #0]
 8008e04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e0a3      	b.n	8008f58 <_printf_i+0x1f4>
 8008e10:	6820      	ldr	r0, [r4, #0]
 8008e12:	6829      	ldr	r1, [r5, #0]
 8008e14:	0606      	lsls	r6, r0, #24
 8008e16:	f101 0304 	add.w	r3, r1, #4
 8008e1a:	d50a      	bpl.n	8008e32 <_printf_i+0xce>
 8008e1c:	680e      	ldr	r6, [r1, #0]
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	2e00      	cmp	r6, #0
 8008e22:	da03      	bge.n	8008e2c <_printf_i+0xc8>
 8008e24:	232d      	movs	r3, #45	; 0x2d
 8008e26:	4276      	negs	r6, r6
 8008e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e2c:	485e      	ldr	r0, [pc, #376]	; (8008fa8 <_printf_i+0x244>)
 8008e2e:	230a      	movs	r3, #10
 8008e30:	e019      	b.n	8008e66 <_printf_i+0x102>
 8008e32:	680e      	ldr	r6, [r1, #0]
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e3a:	bf18      	it	ne
 8008e3c:	b236      	sxthne	r6, r6
 8008e3e:	e7ef      	b.n	8008e20 <_printf_i+0xbc>
 8008e40:	682b      	ldr	r3, [r5, #0]
 8008e42:	6820      	ldr	r0, [r4, #0]
 8008e44:	1d19      	adds	r1, r3, #4
 8008e46:	6029      	str	r1, [r5, #0]
 8008e48:	0601      	lsls	r1, r0, #24
 8008e4a:	d501      	bpl.n	8008e50 <_printf_i+0xec>
 8008e4c:	681e      	ldr	r6, [r3, #0]
 8008e4e:	e002      	b.n	8008e56 <_printf_i+0xf2>
 8008e50:	0646      	lsls	r6, r0, #25
 8008e52:	d5fb      	bpl.n	8008e4c <_printf_i+0xe8>
 8008e54:	881e      	ldrh	r6, [r3, #0]
 8008e56:	4854      	ldr	r0, [pc, #336]	; (8008fa8 <_printf_i+0x244>)
 8008e58:	2f6f      	cmp	r7, #111	; 0x6f
 8008e5a:	bf0c      	ite	eq
 8008e5c:	2308      	moveq	r3, #8
 8008e5e:	230a      	movne	r3, #10
 8008e60:	2100      	movs	r1, #0
 8008e62:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e66:	6865      	ldr	r5, [r4, #4]
 8008e68:	60a5      	str	r5, [r4, #8]
 8008e6a:	2d00      	cmp	r5, #0
 8008e6c:	bfa2      	ittt	ge
 8008e6e:	6821      	ldrge	r1, [r4, #0]
 8008e70:	f021 0104 	bicge.w	r1, r1, #4
 8008e74:	6021      	strge	r1, [r4, #0]
 8008e76:	b90e      	cbnz	r6, 8008e7c <_printf_i+0x118>
 8008e78:	2d00      	cmp	r5, #0
 8008e7a:	d04d      	beq.n	8008f18 <_printf_i+0x1b4>
 8008e7c:	4615      	mov	r5, r2
 8008e7e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008e82:	fb03 6711 	mls	r7, r3, r1, r6
 8008e86:	5dc7      	ldrb	r7, [r0, r7]
 8008e88:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008e8c:	4637      	mov	r7, r6
 8008e8e:	42bb      	cmp	r3, r7
 8008e90:	460e      	mov	r6, r1
 8008e92:	d9f4      	bls.n	8008e7e <_printf_i+0x11a>
 8008e94:	2b08      	cmp	r3, #8
 8008e96:	d10b      	bne.n	8008eb0 <_printf_i+0x14c>
 8008e98:	6823      	ldr	r3, [r4, #0]
 8008e9a:	07de      	lsls	r6, r3, #31
 8008e9c:	d508      	bpl.n	8008eb0 <_printf_i+0x14c>
 8008e9e:	6923      	ldr	r3, [r4, #16]
 8008ea0:	6861      	ldr	r1, [r4, #4]
 8008ea2:	4299      	cmp	r1, r3
 8008ea4:	bfde      	ittt	le
 8008ea6:	2330      	movle	r3, #48	; 0x30
 8008ea8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008eac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008eb0:	1b52      	subs	r2, r2, r5
 8008eb2:	6122      	str	r2, [r4, #16]
 8008eb4:	f8cd a000 	str.w	sl, [sp]
 8008eb8:	464b      	mov	r3, r9
 8008eba:	aa03      	add	r2, sp, #12
 8008ebc:	4621      	mov	r1, r4
 8008ebe:	4640      	mov	r0, r8
 8008ec0:	f7ff fee2 	bl	8008c88 <_printf_common>
 8008ec4:	3001      	adds	r0, #1
 8008ec6:	d14c      	bne.n	8008f62 <_printf_i+0x1fe>
 8008ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ecc:	b004      	add	sp, #16
 8008ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed2:	4835      	ldr	r0, [pc, #212]	; (8008fa8 <_printf_i+0x244>)
 8008ed4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008ed8:	6829      	ldr	r1, [r5, #0]
 8008eda:	6823      	ldr	r3, [r4, #0]
 8008edc:	f851 6b04 	ldr.w	r6, [r1], #4
 8008ee0:	6029      	str	r1, [r5, #0]
 8008ee2:	061d      	lsls	r5, r3, #24
 8008ee4:	d514      	bpl.n	8008f10 <_printf_i+0x1ac>
 8008ee6:	07df      	lsls	r7, r3, #31
 8008ee8:	bf44      	itt	mi
 8008eea:	f043 0320 	orrmi.w	r3, r3, #32
 8008eee:	6023      	strmi	r3, [r4, #0]
 8008ef0:	b91e      	cbnz	r6, 8008efa <_printf_i+0x196>
 8008ef2:	6823      	ldr	r3, [r4, #0]
 8008ef4:	f023 0320 	bic.w	r3, r3, #32
 8008ef8:	6023      	str	r3, [r4, #0]
 8008efa:	2310      	movs	r3, #16
 8008efc:	e7b0      	b.n	8008e60 <_printf_i+0xfc>
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	f043 0320 	orr.w	r3, r3, #32
 8008f04:	6023      	str	r3, [r4, #0]
 8008f06:	2378      	movs	r3, #120	; 0x78
 8008f08:	4828      	ldr	r0, [pc, #160]	; (8008fac <_printf_i+0x248>)
 8008f0a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f0e:	e7e3      	b.n	8008ed8 <_printf_i+0x174>
 8008f10:	0659      	lsls	r1, r3, #25
 8008f12:	bf48      	it	mi
 8008f14:	b2b6      	uxthmi	r6, r6
 8008f16:	e7e6      	b.n	8008ee6 <_printf_i+0x182>
 8008f18:	4615      	mov	r5, r2
 8008f1a:	e7bb      	b.n	8008e94 <_printf_i+0x130>
 8008f1c:	682b      	ldr	r3, [r5, #0]
 8008f1e:	6826      	ldr	r6, [r4, #0]
 8008f20:	6961      	ldr	r1, [r4, #20]
 8008f22:	1d18      	adds	r0, r3, #4
 8008f24:	6028      	str	r0, [r5, #0]
 8008f26:	0635      	lsls	r5, r6, #24
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	d501      	bpl.n	8008f30 <_printf_i+0x1cc>
 8008f2c:	6019      	str	r1, [r3, #0]
 8008f2e:	e002      	b.n	8008f36 <_printf_i+0x1d2>
 8008f30:	0670      	lsls	r0, r6, #25
 8008f32:	d5fb      	bpl.n	8008f2c <_printf_i+0x1c8>
 8008f34:	8019      	strh	r1, [r3, #0]
 8008f36:	2300      	movs	r3, #0
 8008f38:	6123      	str	r3, [r4, #16]
 8008f3a:	4615      	mov	r5, r2
 8008f3c:	e7ba      	b.n	8008eb4 <_printf_i+0x150>
 8008f3e:	682b      	ldr	r3, [r5, #0]
 8008f40:	1d1a      	adds	r2, r3, #4
 8008f42:	602a      	str	r2, [r5, #0]
 8008f44:	681d      	ldr	r5, [r3, #0]
 8008f46:	6862      	ldr	r2, [r4, #4]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	4628      	mov	r0, r5
 8008f4c:	f7f7 f980 	bl	8000250 <memchr>
 8008f50:	b108      	cbz	r0, 8008f56 <_printf_i+0x1f2>
 8008f52:	1b40      	subs	r0, r0, r5
 8008f54:	6060      	str	r0, [r4, #4]
 8008f56:	6863      	ldr	r3, [r4, #4]
 8008f58:	6123      	str	r3, [r4, #16]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f60:	e7a8      	b.n	8008eb4 <_printf_i+0x150>
 8008f62:	6923      	ldr	r3, [r4, #16]
 8008f64:	462a      	mov	r2, r5
 8008f66:	4649      	mov	r1, r9
 8008f68:	4640      	mov	r0, r8
 8008f6a:	47d0      	blx	sl
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d0ab      	beq.n	8008ec8 <_printf_i+0x164>
 8008f70:	6823      	ldr	r3, [r4, #0]
 8008f72:	079b      	lsls	r3, r3, #30
 8008f74:	d413      	bmi.n	8008f9e <_printf_i+0x23a>
 8008f76:	68e0      	ldr	r0, [r4, #12]
 8008f78:	9b03      	ldr	r3, [sp, #12]
 8008f7a:	4298      	cmp	r0, r3
 8008f7c:	bfb8      	it	lt
 8008f7e:	4618      	movlt	r0, r3
 8008f80:	e7a4      	b.n	8008ecc <_printf_i+0x168>
 8008f82:	2301      	movs	r3, #1
 8008f84:	4632      	mov	r2, r6
 8008f86:	4649      	mov	r1, r9
 8008f88:	4640      	mov	r0, r8
 8008f8a:	47d0      	blx	sl
 8008f8c:	3001      	adds	r0, #1
 8008f8e:	d09b      	beq.n	8008ec8 <_printf_i+0x164>
 8008f90:	3501      	adds	r5, #1
 8008f92:	68e3      	ldr	r3, [r4, #12]
 8008f94:	9903      	ldr	r1, [sp, #12]
 8008f96:	1a5b      	subs	r3, r3, r1
 8008f98:	42ab      	cmp	r3, r5
 8008f9a:	dcf2      	bgt.n	8008f82 <_printf_i+0x21e>
 8008f9c:	e7eb      	b.n	8008f76 <_printf_i+0x212>
 8008f9e:	2500      	movs	r5, #0
 8008fa0:	f104 0619 	add.w	r6, r4, #25
 8008fa4:	e7f5      	b.n	8008f92 <_printf_i+0x22e>
 8008fa6:	bf00      	nop
 8008fa8:	0800b982 	.word	0x0800b982
 8008fac:	0800b993 	.word	0x0800b993

08008fb0 <iprintf>:
 8008fb0:	b40f      	push	{r0, r1, r2, r3}
 8008fb2:	4b0a      	ldr	r3, [pc, #40]	; (8008fdc <iprintf+0x2c>)
 8008fb4:	b513      	push	{r0, r1, r4, lr}
 8008fb6:	681c      	ldr	r4, [r3, #0]
 8008fb8:	b124      	cbz	r4, 8008fc4 <iprintf+0x14>
 8008fba:	69a3      	ldr	r3, [r4, #24]
 8008fbc:	b913      	cbnz	r3, 8008fc4 <iprintf+0x14>
 8008fbe:	4620      	mov	r0, r4
 8008fc0:	f001 fa12 	bl	800a3e8 <__sinit>
 8008fc4:	ab05      	add	r3, sp, #20
 8008fc6:	9a04      	ldr	r2, [sp, #16]
 8008fc8:	68a1      	ldr	r1, [r4, #8]
 8008fca:	9301      	str	r3, [sp, #4]
 8008fcc:	4620      	mov	r0, r4
 8008fce:	f002 f93d 	bl	800b24c <_vfiprintf_r>
 8008fd2:	b002      	add	sp, #8
 8008fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd8:	b004      	add	sp, #16
 8008fda:	4770      	bx	lr
 8008fdc:	200000f8 	.word	0x200000f8

08008fe0 <_puts_r>:
 8008fe0:	b570      	push	{r4, r5, r6, lr}
 8008fe2:	460e      	mov	r6, r1
 8008fe4:	4605      	mov	r5, r0
 8008fe6:	b118      	cbz	r0, 8008ff0 <_puts_r+0x10>
 8008fe8:	6983      	ldr	r3, [r0, #24]
 8008fea:	b90b      	cbnz	r3, 8008ff0 <_puts_r+0x10>
 8008fec:	f001 f9fc 	bl	800a3e8 <__sinit>
 8008ff0:	69ab      	ldr	r3, [r5, #24]
 8008ff2:	68ac      	ldr	r4, [r5, #8]
 8008ff4:	b913      	cbnz	r3, 8008ffc <_puts_r+0x1c>
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	f001 f9f6 	bl	800a3e8 <__sinit>
 8008ffc:	4b2c      	ldr	r3, [pc, #176]	; (80090b0 <_puts_r+0xd0>)
 8008ffe:	429c      	cmp	r4, r3
 8009000:	d120      	bne.n	8009044 <_puts_r+0x64>
 8009002:	686c      	ldr	r4, [r5, #4]
 8009004:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009006:	07db      	lsls	r3, r3, #31
 8009008:	d405      	bmi.n	8009016 <_puts_r+0x36>
 800900a:	89a3      	ldrh	r3, [r4, #12]
 800900c:	0598      	lsls	r0, r3, #22
 800900e:	d402      	bmi.n	8009016 <_puts_r+0x36>
 8009010:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009012:	f001 fa9e 	bl	800a552 <__retarget_lock_acquire_recursive>
 8009016:	89a3      	ldrh	r3, [r4, #12]
 8009018:	0719      	lsls	r1, r3, #28
 800901a:	d51d      	bpl.n	8009058 <_puts_r+0x78>
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	b1db      	cbz	r3, 8009058 <_puts_r+0x78>
 8009020:	3e01      	subs	r6, #1
 8009022:	68a3      	ldr	r3, [r4, #8]
 8009024:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009028:	3b01      	subs	r3, #1
 800902a:	60a3      	str	r3, [r4, #8]
 800902c:	bb39      	cbnz	r1, 800907e <_puts_r+0x9e>
 800902e:	2b00      	cmp	r3, #0
 8009030:	da38      	bge.n	80090a4 <_puts_r+0xc4>
 8009032:	4622      	mov	r2, r4
 8009034:	210a      	movs	r1, #10
 8009036:	4628      	mov	r0, r5
 8009038:	f000 f964 	bl	8009304 <__swbuf_r>
 800903c:	3001      	adds	r0, #1
 800903e:	d011      	beq.n	8009064 <_puts_r+0x84>
 8009040:	250a      	movs	r5, #10
 8009042:	e011      	b.n	8009068 <_puts_r+0x88>
 8009044:	4b1b      	ldr	r3, [pc, #108]	; (80090b4 <_puts_r+0xd4>)
 8009046:	429c      	cmp	r4, r3
 8009048:	d101      	bne.n	800904e <_puts_r+0x6e>
 800904a:	68ac      	ldr	r4, [r5, #8]
 800904c:	e7da      	b.n	8009004 <_puts_r+0x24>
 800904e:	4b1a      	ldr	r3, [pc, #104]	; (80090b8 <_puts_r+0xd8>)
 8009050:	429c      	cmp	r4, r3
 8009052:	bf08      	it	eq
 8009054:	68ec      	ldreq	r4, [r5, #12]
 8009056:	e7d5      	b.n	8009004 <_puts_r+0x24>
 8009058:	4621      	mov	r1, r4
 800905a:	4628      	mov	r0, r5
 800905c:	f000 f9a4 	bl	80093a8 <__swsetup_r>
 8009060:	2800      	cmp	r0, #0
 8009062:	d0dd      	beq.n	8009020 <_puts_r+0x40>
 8009064:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009068:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800906a:	07da      	lsls	r2, r3, #31
 800906c:	d405      	bmi.n	800907a <_puts_r+0x9a>
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	059b      	lsls	r3, r3, #22
 8009072:	d402      	bmi.n	800907a <_puts_r+0x9a>
 8009074:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009076:	f001 fa6d 	bl	800a554 <__retarget_lock_release_recursive>
 800907a:	4628      	mov	r0, r5
 800907c:	bd70      	pop	{r4, r5, r6, pc}
 800907e:	2b00      	cmp	r3, #0
 8009080:	da04      	bge.n	800908c <_puts_r+0xac>
 8009082:	69a2      	ldr	r2, [r4, #24]
 8009084:	429a      	cmp	r2, r3
 8009086:	dc06      	bgt.n	8009096 <_puts_r+0xb6>
 8009088:	290a      	cmp	r1, #10
 800908a:	d004      	beq.n	8009096 <_puts_r+0xb6>
 800908c:	6823      	ldr	r3, [r4, #0]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	6022      	str	r2, [r4, #0]
 8009092:	7019      	strb	r1, [r3, #0]
 8009094:	e7c5      	b.n	8009022 <_puts_r+0x42>
 8009096:	4622      	mov	r2, r4
 8009098:	4628      	mov	r0, r5
 800909a:	f000 f933 	bl	8009304 <__swbuf_r>
 800909e:	3001      	adds	r0, #1
 80090a0:	d1bf      	bne.n	8009022 <_puts_r+0x42>
 80090a2:	e7df      	b.n	8009064 <_puts_r+0x84>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	250a      	movs	r5, #10
 80090a8:	1c5a      	adds	r2, r3, #1
 80090aa:	6022      	str	r2, [r4, #0]
 80090ac:	701d      	strb	r5, [r3, #0]
 80090ae:	e7db      	b.n	8009068 <_puts_r+0x88>
 80090b0:	0800bbf0 	.word	0x0800bbf0
 80090b4:	0800bc10 	.word	0x0800bc10
 80090b8:	0800bbd0 	.word	0x0800bbd0

080090bc <puts>:
 80090bc:	4b02      	ldr	r3, [pc, #8]	; (80090c8 <puts+0xc>)
 80090be:	4601      	mov	r1, r0
 80090c0:	6818      	ldr	r0, [r3, #0]
 80090c2:	f7ff bf8d 	b.w	8008fe0 <_puts_r>
 80090c6:	bf00      	nop
 80090c8:	200000f8 	.word	0x200000f8

080090cc <siprintf>:
 80090cc:	b40e      	push	{r1, r2, r3}
 80090ce:	b500      	push	{lr}
 80090d0:	b09c      	sub	sp, #112	; 0x70
 80090d2:	ab1d      	add	r3, sp, #116	; 0x74
 80090d4:	9002      	str	r0, [sp, #8]
 80090d6:	9006      	str	r0, [sp, #24]
 80090d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80090dc:	4809      	ldr	r0, [pc, #36]	; (8009104 <siprintf+0x38>)
 80090de:	9107      	str	r1, [sp, #28]
 80090e0:	9104      	str	r1, [sp, #16]
 80090e2:	4909      	ldr	r1, [pc, #36]	; (8009108 <siprintf+0x3c>)
 80090e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80090e8:	9105      	str	r1, [sp, #20]
 80090ea:	6800      	ldr	r0, [r0, #0]
 80090ec:	9301      	str	r3, [sp, #4]
 80090ee:	a902      	add	r1, sp, #8
 80090f0:	f001 ff82 	bl	800aff8 <_svfiprintf_r>
 80090f4:	9b02      	ldr	r3, [sp, #8]
 80090f6:	2200      	movs	r2, #0
 80090f8:	701a      	strb	r2, [r3, #0]
 80090fa:	b01c      	add	sp, #112	; 0x70
 80090fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009100:	b003      	add	sp, #12
 8009102:	4770      	bx	lr
 8009104:	200000f8 	.word	0x200000f8
 8009108:	ffff0208 	.word	0xffff0208

0800910c <strncmp>:
 800910c:	b510      	push	{r4, lr}
 800910e:	b17a      	cbz	r2, 8009130 <strncmp+0x24>
 8009110:	4603      	mov	r3, r0
 8009112:	3901      	subs	r1, #1
 8009114:	1884      	adds	r4, r0, r2
 8009116:	f813 0b01 	ldrb.w	r0, [r3], #1
 800911a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800911e:	4290      	cmp	r0, r2
 8009120:	d101      	bne.n	8009126 <strncmp+0x1a>
 8009122:	42a3      	cmp	r3, r4
 8009124:	d101      	bne.n	800912a <strncmp+0x1e>
 8009126:	1a80      	subs	r0, r0, r2
 8009128:	bd10      	pop	{r4, pc}
 800912a:	2800      	cmp	r0, #0
 800912c:	d1f3      	bne.n	8009116 <strncmp+0xa>
 800912e:	e7fa      	b.n	8009126 <strncmp+0x1a>
 8009130:	4610      	mov	r0, r2
 8009132:	e7f9      	b.n	8009128 <strncmp+0x1c>

08009134 <strtok>:
 8009134:	4b16      	ldr	r3, [pc, #88]	; (8009190 <strtok+0x5c>)
 8009136:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009138:	681e      	ldr	r6, [r3, #0]
 800913a:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800913c:	4605      	mov	r5, r0
 800913e:	b9fc      	cbnz	r4, 8009180 <strtok+0x4c>
 8009140:	2050      	movs	r0, #80	; 0x50
 8009142:	9101      	str	r1, [sp, #4]
 8009144:	f001 fa6c 	bl	800a620 <malloc>
 8009148:	9901      	ldr	r1, [sp, #4]
 800914a:	65b0      	str	r0, [r6, #88]	; 0x58
 800914c:	4602      	mov	r2, r0
 800914e:	b920      	cbnz	r0, 800915a <strtok+0x26>
 8009150:	4b10      	ldr	r3, [pc, #64]	; (8009194 <strtok+0x60>)
 8009152:	4811      	ldr	r0, [pc, #68]	; (8009198 <strtok+0x64>)
 8009154:	2157      	movs	r1, #87	; 0x57
 8009156:	f000 f995 	bl	8009484 <__assert_func>
 800915a:	e9c0 4400 	strd	r4, r4, [r0]
 800915e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009162:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009166:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800916a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800916e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009172:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009176:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800917a:	6184      	str	r4, [r0, #24]
 800917c:	7704      	strb	r4, [r0, #28]
 800917e:	6244      	str	r4, [r0, #36]	; 0x24
 8009180:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8009182:	2301      	movs	r3, #1
 8009184:	4628      	mov	r0, r5
 8009186:	b002      	add	sp, #8
 8009188:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800918c:	f000 b806 	b.w	800919c <__strtok_r>
 8009190:	200000f8 	.word	0x200000f8
 8009194:	0800b9a4 	.word	0x0800b9a4
 8009198:	0800b9bb 	.word	0x0800b9bb

0800919c <__strtok_r>:
 800919c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800919e:	b908      	cbnz	r0, 80091a4 <__strtok_r+0x8>
 80091a0:	6810      	ldr	r0, [r2, #0]
 80091a2:	b188      	cbz	r0, 80091c8 <__strtok_r+0x2c>
 80091a4:	4604      	mov	r4, r0
 80091a6:	4620      	mov	r0, r4
 80091a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80091ac:	460f      	mov	r7, r1
 80091ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80091b2:	b91e      	cbnz	r6, 80091bc <__strtok_r+0x20>
 80091b4:	b965      	cbnz	r5, 80091d0 <__strtok_r+0x34>
 80091b6:	6015      	str	r5, [r2, #0]
 80091b8:	4628      	mov	r0, r5
 80091ba:	e005      	b.n	80091c8 <__strtok_r+0x2c>
 80091bc:	42b5      	cmp	r5, r6
 80091be:	d1f6      	bne.n	80091ae <__strtok_r+0x12>
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1f0      	bne.n	80091a6 <__strtok_r+0xa>
 80091c4:	6014      	str	r4, [r2, #0]
 80091c6:	7003      	strb	r3, [r0, #0]
 80091c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091ca:	461c      	mov	r4, r3
 80091cc:	e00c      	b.n	80091e8 <__strtok_r+0x4c>
 80091ce:	b915      	cbnz	r5, 80091d6 <__strtok_r+0x3a>
 80091d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091d4:	460e      	mov	r6, r1
 80091d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80091da:	42ab      	cmp	r3, r5
 80091dc:	d1f7      	bne.n	80091ce <__strtok_r+0x32>
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d0f3      	beq.n	80091ca <__strtok_r+0x2e>
 80091e2:	2300      	movs	r3, #0
 80091e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80091e8:	6014      	str	r4, [r2, #0]
 80091ea:	e7ed      	b.n	80091c8 <__strtok_r+0x2c>

080091ec <_strtol_l.constprop.0>:
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091f2:	d001      	beq.n	80091f8 <_strtol_l.constprop.0+0xc>
 80091f4:	2b24      	cmp	r3, #36	; 0x24
 80091f6:	d906      	bls.n	8009206 <_strtol_l.constprop.0+0x1a>
 80091f8:	f7ff fa3e 	bl	8008678 <__errno>
 80091fc:	2316      	movs	r3, #22
 80091fe:	6003      	str	r3, [r0, #0]
 8009200:	2000      	movs	r0, #0
 8009202:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009206:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80092ec <_strtol_l.constprop.0+0x100>
 800920a:	460d      	mov	r5, r1
 800920c:	462e      	mov	r6, r5
 800920e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009212:	f814 700c 	ldrb.w	r7, [r4, ip]
 8009216:	f017 0708 	ands.w	r7, r7, #8
 800921a:	d1f7      	bne.n	800920c <_strtol_l.constprop.0+0x20>
 800921c:	2c2d      	cmp	r4, #45	; 0x2d
 800921e:	d132      	bne.n	8009286 <_strtol_l.constprop.0+0x9a>
 8009220:	782c      	ldrb	r4, [r5, #0]
 8009222:	2701      	movs	r7, #1
 8009224:	1cb5      	adds	r5, r6, #2
 8009226:	2b00      	cmp	r3, #0
 8009228:	d05b      	beq.n	80092e2 <_strtol_l.constprop.0+0xf6>
 800922a:	2b10      	cmp	r3, #16
 800922c:	d109      	bne.n	8009242 <_strtol_l.constprop.0+0x56>
 800922e:	2c30      	cmp	r4, #48	; 0x30
 8009230:	d107      	bne.n	8009242 <_strtol_l.constprop.0+0x56>
 8009232:	782c      	ldrb	r4, [r5, #0]
 8009234:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009238:	2c58      	cmp	r4, #88	; 0x58
 800923a:	d14d      	bne.n	80092d8 <_strtol_l.constprop.0+0xec>
 800923c:	786c      	ldrb	r4, [r5, #1]
 800923e:	2310      	movs	r3, #16
 8009240:	3502      	adds	r5, #2
 8009242:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009246:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800924a:	f04f 0c00 	mov.w	ip, #0
 800924e:	fbb8 f9f3 	udiv	r9, r8, r3
 8009252:	4666      	mov	r6, ip
 8009254:	fb03 8a19 	mls	sl, r3, r9, r8
 8009258:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800925c:	f1be 0f09 	cmp.w	lr, #9
 8009260:	d816      	bhi.n	8009290 <_strtol_l.constprop.0+0xa4>
 8009262:	4674      	mov	r4, lr
 8009264:	42a3      	cmp	r3, r4
 8009266:	dd24      	ble.n	80092b2 <_strtol_l.constprop.0+0xc6>
 8009268:	f1bc 0f00 	cmp.w	ip, #0
 800926c:	db1e      	blt.n	80092ac <_strtol_l.constprop.0+0xc0>
 800926e:	45b1      	cmp	r9, r6
 8009270:	d31c      	bcc.n	80092ac <_strtol_l.constprop.0+0xc0>
 8009272:	d101      	bne.n	8009278 <_strtol_l.constprop.0+0x8c>
 8009274:	45a2      	cmp	sl, r4
 8009276:	db19      	blt.n	80092ac <_strtol_l.constprop.0+0xc0>
 8009278:	fb06 4603 	mla	r6, r6, r3, r4
 800927c:	f04f 0c01 	mov.w	ip, #1
 8009280:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009284:	e7e8      	b.n	8009258 <_strtol_l.constprop.0+0x6c>
 8009286:	2c2b      	cmp	r4, #43	; 0x2b
 8009288:	bf04      	itt	eq
 800928a:	782c      	ldrbeq	r4, [r5, #0]
 800928c:	1cb5      	addeq	r5, r6, #2
 800928e:	e7ca      	b.n	8009226 <_strtol_l.constprop.0+0x3a>
 8009290:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009294:	f1be 0f19 	cmp.w	lr, #25
 8009298:	d801      	bhi.n	800929e <_strtol_l.constprop.0+0xb2>
 800929a:	3c37      	subs	r4, #55	; 0x37
 800929c:	e7e2      	b.n	8009264 <_strtol_l.constprop.0+0x78>
 800929e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80092a2:	f1be 0f19 	cmp.w	lr, #25
 80092a6:	d804      	bhi.n	80092b2 <_strtol_l.constprop.0+0xc6>
 80092a8:	3c57      	subs	r4, #87	; 0x57
 80092aa:	e7db      	b.n	8009264 <_strtol_l.constprop.0+0x78>
 80092ac:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80092b0:	e7e6      	b.n	8009280 <_strtol_l.constprop.0+0x94>
 80092b2:	f1bc 0f00 	cmp.w	ip, #0
 80092b6:	da05      	bge.n	80092c4 <_strtol_l.constprop.0+0xd8>
 80092b8:	2322      	movs	r3, #34	; 0x22
 80092ba:	6003      	str	r3, [r0, #0]
 80092bc:	4646      	mov	r6, r8
 80092be:	b942      	cbnz	r2, 80092d2 <_strtol_l.constprop.0+0xe6>
 80092c0:	4630      	mov	r0, r6
 80092c2:	e79e      	b.n	8009202 <_strtol_l.constprop.0+0x16>
 80092c4:	b107      	cbz	r7, 80092c8 <_strtol_l.constprop.0+0xdc>
 80092c6:	4276      	negs	r6, r6
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	d0f9      	beq.n	80092c0 <_strtol_l.constprop.0+0xd4>
 80092cc:	f1bc 0f00 	cmp.w	ip, #0
 80092d0:	d000      	beq.n	80092d4 <_strtol_l.constprop.0+0xe8>
 80092d2:	1e69      	subs	r1, r5, #1
 80092d4:	6011      	str	r1, [r2, #0]
 80092d6:	e7f3      	b.n	80092c0 <_strtol_l.constprop.0+0xd4>
 80092d8:	2430      	movs	r4, #48	; 0x30
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d1b1      	bne.n	8009242 <_strtol_l.constprop.0+0x56>
 80092de:	2308      	movs	r3, #8
 80092e0:	e7af      	b.n	8009242 <_strtol_l.constprop.0+0x56>
 80092e2:	2c30      	cmp	r4, #48	; 0x30
 80092e4:	d0a5      	beq.n	8009232 <_strtol_l.constprop.0+0x46>
 80092e6:	230a      	movs	r3, #10
 80092e8:	e7ab      	b.n	8009242 <_strtol_l.constprop.0+0x56>
 80092ea:	bf00      	nop
 80092ec:	0800ba55 	.word	0x0800ba55

080092f0 <strtol>:
 80092f0:	4613      	mov	r3, r2
 80092f2:	460a      	mov	r2, r1
 80092f4:	4601      	mov	r1, r0
 80092f6:	4802      	ldr	r0, [pc, #8]	; (8009300 <strtol+0x10>)
 80092f8:	6800      	ldr	r0, [r0, #0]
 80092fa:	f7ff bf77 	b.w	80091ec <_strtol_l.constprop.0>
 80092fe:	bf00      	nop
 8009300:	200000f8 	.word	0x200000f8

08009304 <__swbuf_r>:
 8009304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009306:	460e      	mov	r6, r1
 8009308:	4614      	mov	r4, r2
 800930a:	4605      	mov	r5, r0
 800930c:	b118      	cbz	r0, 8009316 <__swbuf_r+0x12>
 800930e:	6983      	ldr	r3, [r0, #24]
 8009310:	b90b      	cbnz	r3, 8009316 <__swbuf_r+0x12>
 8009312:	f001 f869 	bl	800a3e8 <__sinit>
 8009316:	4b21      	ldr	r3, [pc, #132]	; (800939c <__swbuf_r+0x98>)
 8009318:	429c      	cmp	r4, r3
 800931a:	d12b      	bne.n	8009374 <__swbuf_r+0x70>
 800931c:	686c      	ldr	r4, [r5, #4]
 800931e:	69a3      	ldr	r3, [r4, #24]
 8009320:	60a3      	str	r3, [r4, #8]
 8009322:	89a3      	ldrh	r3, [r4, #12]
 8009324:	071a      	lsls	r2, r3, #28
 8009326:	d52f      	bpl.n	8009388 <__swbuf_r+0x84>
 8009328:	6923      	ldr	r3, [r4, #16]
 800932a:	b36b      	cbz	r3, 8009388 <__swbuf_r+0x84>
 800932c:	6923      	ldr	r3, [r4, #16]
 800932e:	6820      	ldr	r0, [r4, #0]
 8009330:	1ac0      	subs	r0, r0, r3
 8009332:	6963      	ldr	r3, [r4, #20]
 8009334:	b2f6      	uxtb	r6, r6
 8009336:	4283      	cmp	r3, r0
 8009338:	4637      	mov	r7, r6
 800933a:	dc04      	bgt.n	8009346 <__swbuf_r+0x42>
 800933c:	4621      	mov	r1, r4
 800933e:	4628      	mov	r0, r5
 8009340:	f000 ffbe 	bl	800a2c0 <_fflush_r>
 8009344:	bb30      	cbnz	r0, 8009394 <__swbuf_r+0x90>
 8009346:	68a3      	ldr	r3, [r4, #8]
 8009348:	3b01      	subs	r3, #1
 800934a:	60a3      	str	r3, [r4, #8]
 800934c:	6823      	ldr	r3, [r4, #0]
 800934e:	1c5a      	adds	r2, r3, #1
 8009350:	6022      	str	r2, [r4, #0]
 8009352:	701e      	strb	r6, [r3, #0]
 8009354:	6963      	ldr	r3, [r4, #20]
 8009356:	3001      	adds	r0, #1
 8009358:	4283      	cmp	r3, r0
 800935a:	d004      	beq.n	8009366 <__swbuf_r+0x62>
 800935c:	89a3      	ldrh	r3, [r4, #12]
 800935e:	07db      	lsls	r3, r3, #31
 8009360:	d506      	bpl.n	8009370 <__swbuf_r+0x6c>
 8009362:	2e0a      	cmp	r6, #10
 8009364:	d104      	bne.n	8009370 <__swbuf_r+0x6c>
 8009366:	4621      	mov	r1, r4
 8009368:	4628      	mov	r0, r5
 800936a:	f000 ffa9 	bl	800a2c0 <_fflush_r>
 800936e:	b988      	cbnz	r0, 8009394 <__swbuf_r+0x90>
 8009370:	4638      	mov	r0, r7
 8009372:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009374:	4b0a      	ldr	r3, [pc, #40]	; (80093a0 <__swbuf_r+0x9c>)
 8009376:	429c      	cmp	r4, r3
 8009378:	d101      	bne.n	800937e <__swbuf_r+0x7a>
 800937a:	68ac      	ldr	r4, [r5, #8]
 800937c:	e7cf      	b.n	800931e <__swbuf_r+0x1a>
 800937e:	4b09      	ldr	r3, [pc, #36]	; (80093a4 <__swbuf_r+0xa0>)
 8009380:	429c      	cmp	r4, r3
 8009382:	bf08      	it	eq
 8009384:	68ec      	ldreq	r4, [r5, #12]
 8009386:	e7ca      	b.n	800931e <__swbuf_r+0x1a>
 8009388:	4621      	mov	r1, r4
 800938a:	4628      	mov	r0, r5
 800938c:	f000 f80c 	bl	80093a8 <__swsetup_r>
 8009390:	2800      	cmp	r0, #0
 8009392:	d0cb      	beq.n	800932c <__swbuf_r+0x28>
 8009394:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009398:	e7ea      	b.n	8009370 <__swbuf_r+0x6c>
 800939a:	bf00      	nop
 800939c:	0800bbf0 	.word	0x0800bbf0
 80093a0:	0800bc10 	.word	0x0800bc10
 80093a4:	0800bbd0 	.word	0x0800bbd0

080093a8 <__swsetup_r>:
 80093a8:	4b32      	ldr	r3, [pc, #200]	; (8009474 <__swsetup_r+0xcc>)
 80093aa:	b570      	push	{r4, r5, r6, lr}
 80093ac:	681d      	ldr	r5, [r3, #0]
 80093ae:	4606      	mov	r6, r0
 80093b0:	460c      	mov	r4, r1
 80093b2:	b125      	cbz	r5, 80093be <__swsetup_r+0x16>
 80093b4:	69ab      	ldr	r3, [r5, #24]
 80093b6:	b913      	cbnz	r3, 80093be <__swsetup_r+0x16>
 80093b8:	4628      	mov	r0, r5
 80093ba:	f001 f815 	bl	800a3e8 <__sinit>
 80093be:	4b2e      	ldr	r3, [pc, #184]	; (8009478 <__swsetup_r+0xd0>)
 80093c0:	429c      	cmp	r4, r3
 80093c2:	d10f      	bne.n	80093e4 <__swsetup_r+0x3c>
 80093c4:	686c      	ldr	r4, [r5, #4]
 80093c6:	89a3      	ldrh	r3, [r4, #12]
 80093c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80093cc:	0719      	lsls	r1, r3, #28
 80093ce:	d42c      	bmi.n	800942a <__swsetup_r+0x82>
 80093d0:	06dd      	lsls	r5, r3, #27
 80093d2:	d411      	bmi.n	80093f8 <__swsetup_r+0x50>
 80093d4:	2309      	movs	r3, #9
 80093d6:	6033      	str	r3, [r6, #0]
 80093d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80093dc:	81a3      	strh	r3, [r4, #12]
 80093de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80093e2:	e03e      	b.n	8009462 <__swsetup_r+0xba>
 80093e4:	4b25      	ldr	r3, [pc, #148]	; (800947c <__swsetup_r+0xd4>)
 80093e6:	429c      	cmp	r4, r3
 80093e8:	d101      	bne.n	80093ee <__swsetup_r+0x46>
 80093ea:	68ac      	ldr	r4, [r5, #8]
 80093ec:	e7eb      	b.n	80093c6 <__swsetup_r+0x1e>
 80093ee:	4b24      	ldr	r3, [pc, #144]	; (8009480 <__swsetup_r+0xd8>)
 80093f0:	429c      	cmp	r4, r3
 80093f2:	bf08      	it	eq
 80093f4:	68ec      	ldreq	r4, [r5, #12]
 80093f6:	e7e6      	b.n	80093c6 <__swsetup_r+0x1e>
 80093f8:	0758      	lsls	r0, r3, #29
 80093fa:	d512      	bpl.n	8009422 <__swsetup_r+0x7a>
 80093fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80093fe:	b141      	cbz	r1, 8009412 <__swsetup_r+0x6a>
 8009400:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009404:	4299      	cmp	r1, r3
 8009406:	d002      	beq.n	800940e <__swsetup_r+0x66>
 8009408:	4630      	mov	r0, r6
 800940a:	f001 fcb9 	bl	800ad80 <_free_r>
 800940e:	2300      	movs	r3, #0
 8009410:	6363      	str	r3, [r4, #52]	; 0x34
 8009412:	89a3      	ldrh	r3, [r4, #12]
 8009414:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009418:	81a3      	strh	r3, [r4, #12]
 800941a:	2300      	movs	r3, #0
 800941c:	6063      	str	r3, [r4, #4]
 800941e:	6923      	ldr	r3, [r4, #16]
 8009420:	6023      	str	r3, [r4, #0]
 8009422:	89a3      	ldrh	r3, [r4, #12]
 8009424:	f043 0308 	orr.w	r3, r3, #8
 8009428:	81a3      	strh	r3, [r4, #12]
 800942a:	6923      	ldr	r3, [r4, #16]
 800942c:	b94b      	cbnz	r3, 8009442 <__swsetup_r+0x9a>
 800942e:	89a3      	ldrh	r3, [r4, #12]
 8009430:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009438:	d003      	beq.n	8009442 <__swsetup_r+0x9a>
 800943a:	4621      	mov	r1, r4
 800943c:	4630      	mov	r0, r6
 800943e:	f001 f8af 	bl	800a5a0 <__smakebuf_r>
 8009442:	89a0      	ldrh	r0, [r4, #12]
 8009444:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009448:	f010 0301 	ands.w	r3, r0, #1
 800944c:	d00a      	beq.n	8009464 <__swsetup_r+0xbc>
 800944e:	2300      	movs	r3, #0
 8009450:	60a3      	str	r3, [r4, #8]
 8009452:	6963      	ldr	r3, [r4, #20]
 8009454:	425b      	negs	r3, r3
 8009456:	61a3      	str	r3, [r4, #24]
 8009458:	6923      	ldr	r3, [r4, #16]
 800945a:	b943      	cbnz	r3, 800946e <__swsetup_r+0xc6>
 800945c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009460:	d1ba      	bne.n	80093d8 <__swsetup_r+0x30>
 8009462:	bd70      	pop	{r4, r5, r6, pc}
 8009464:	0781      	lsls	r1, r0, #30
 8009466:	bf58      	it	pl
 8009468:	6963      	ldrpl	r3, [r4, #20]
 800946a:	60a3      	str	r3, [r4, #8]
 800946c:	e7f4      	b.n	8009458 <__swsetup_r+0xb0>
 800946e:	2000      	movs	r0, #0
 8009470:	e7f7      	b.n	8009462 <__swsetup_r+0xba>
 8009472:	bf00      	nop
 8009474:	200000f8 	.word	0x200000f8
 8009478:	0800bbf0 	.word	0x0800bbf0
 800947c:	0800bc10 	.word	0x0800bc10
 8009480:	0800bbd0 	.word	0x0800bbd0

08009484 <__assert_func>:
 8009484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009486:	4614      	mov	r4, r2
 8009488:	461a      	mov	r2, r3
 800948a:	4b09      	ldr	r3, [pc, #36]	; (80094b0 <__assert_func+0x2c>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4605      	mov	r5, r0
 8009490:	68d8      	ldr	r0, [r3, #12]
 8009492:	b14c      	cbz	r4, 80094a8 <__assert_func+0x24>
 8009494:	4b07      	ldr	r3, [pc, #28]	; (80094b4 <__assert_func+0x30>)
 8009496:	9100      	str	r1, [sp, #0]
 8009498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800949c:	4906      	ldr	r1, [pc, #24]	; (80094b8 <__assert_func+0x34>)
 800949e:	462b      	mov	r3, r5
 80094a0:	f001 f820 	bl	800a4e4 <fiprintf>
 80094a4:	f002 f868 	bl	800b578 <abort>
 80094a8:	4b04      	ldr	r3, [pc, #16]	; (80094bc <__assert_func+0x38>)
 80094aa:	461c      	mov	r4, r3
 80094ac:	e7f3      	b.n	8009496 <__assert_func+0x12>
 80094ae:	bf00      	nop
 80094b0:	200000f8 	.word	0x200000f8
 80094b4:	0800ba18 	.word	0x0800ba18
 80094b8:	0800ba25 	.word	0x0800ba25
 80094bc:	0800ba53 	.word	0x0800ba53

080094c0 <quorem>:
 80094c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094c4:	6903      	ldr	r3, [r0, #16]
 80094c6:	690c      	ldr	r4, [r1, #16]
 80094c8:	42a3      	cmp	r3, r4
 80094ca:	4607      	mov	r7, r0
 80094cc:	f2c0 8081 	blt.w	80095d2 <quorem+0x112>
 80094d0:	3c01      	subs	r4, #1
 80094d2:	f101 0814 	add.w	r8, r1, #20
 80094d6:	f100 0514 	add.w	r5, r0, #20
 80094da:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094de:	9301      	str	r3, [sp, #4]
 80094e0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80094e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094e8:	3301      	adds	r3, #1
 80094ea:	429a      	cmp	r2, r3
 80094ec:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80094f0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80094f4:	fbb2 f6f3 	udiv	r6, r2, r3
 80094f8:	d331      	bcc.n	800955e <quorem+0x9e>
 80094fa:	f04f 0e00 	mov.w	lr, #0
 80094fe:	4640      	mov	r0, r8
 8009500:	46ac      	mov	ip, r5
 8009502:	46f2      	mov	sl, lr
 8009504:	f850 2b04 	ldr.w	r2, [r0], #4
 8009508:	b293      	uxth	r3, r2
 800950a:	fb06 e303 	mla	r3, r6, r3, lr
 800950e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009512:	b29b      	uxth	r3, r3
 8009514:	ebaa 0303 	sub.w	r3, sl, r3
 8009518:	f8dc a000 	ldr.w	sl, [ip]
 800951c:	0c12      	lsrs	r2, r2, #16
 800951e:	fa13 f38a 	uxtah	r3, r3, sl
 8009522:	fb06 e202 	mla	r2, r6, r2, lr
 8009526:	9300      	str	r3, [sp, #0]
 8009528:	9b00      	ldr	r3, [sp, #0]
 800952a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800952e:	b292      	uxth	r2, r2
 8009530:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009534:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009538:	f8bd 3000 	ldrh.w	r3, [sp]
 800953c:	4581      	cmp	r9, r0
 800953e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009542:	f84c 3b04 	str.w	r3, [ip], #4
 8009546:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800954a:	d2db      	bcs.n	8009504 <quorem+0x44>
 800954c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009550:	b92b      	cbnz	r3, 800955e <quorem+0x9e>
 8009552:	9b01      	ldr	r3, [sp, #4]
 8009554:	3b04      	subs	r3, #4
 8009556:	429d      	cmp	r5, r3
 8009558:	461a      	mov	r2, r3
 800955a:	d32e      	bcc.n	80095ba <quorem+0xfa>
 800955c:	613c      	str	r4, [r7, #16]
 800955e:	4638      	mov	r0, r7
 8009560:	f001 faf6 	bl	800ab50 <__mcmp>
 8009564:	2800      	cmp	r0, #0
 8009566:	db24      	blt.n	80095b2 <quorem+0xf2>
 8009568:	3601      	adds	r6, #1
 800956a:	4628      	mov	r0, r5
 800956c:	f04f 0c00 	mov.w	ip, #0
 8009570:	f858 2b04 	ldr.w	r2, [r8], #4
 8009574:	f8d0 e000 	ldr.w	lr, [r0]
 8009578:	b293      	uxth	r3, r2
 800957a:	ebac 0303 	sub.w	r3, ip, r3
 800957e:	0c12      	lsrs	r2, r2, #16
 8009580:	fa13 f38e 	uxtah	r3, r3, lr
 8009584:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8009588:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800958c:	b29b      	uxth	r3, r3
 800958e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009592:	45c1      	cmp	r9, r8
 8009594:	f840 3b04 	str.w	r3, [r0], #4
 8009598:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800959c:	d2e8      	bcs.n	8009570 <quorem+0xb0>
 800959e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80095a2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80095a6:	b922      	cbnz	r2, 80095b2 <quorem+0xf2>
 80095a8:	3b04      	subs	r3, #4
 80095aa:	429d      	cmp	r5, r3
 80095ac:	461a      	mov	r2, r3
 80095ae:	d30a      	bcc.n	80095c6 <quorem+0x106>
 80095b0:	613c      	str	r4, [r7, #16]
 80095b2:	4630      	mov	r0, r6
 80095b4:	b003      	add	sp, #12
 80095b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ba:	6812      	ldr	r2, [r2, #0]
 80095bc:	3b04      	subs	r3, #4
 80095be:	2a00      	cmp	r2, #0
 80095c0:	d1cc      	bne.n	800955c <quorem+0x9c>
 80095c2:	3c01      	subs	r4, #1
 80095c4:	e7c7      	b.n	8009556 <quorem+0x96>
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	2a00      	cmp	r2, #0
 80095cc:	d1f0      	bne.n	80095b0 <quorem+0xf0>
 80095ce:	3c01      	subs	r4, #1
 80095d0:	e7eb      	b.n	80095aa <quorem+0xea>
 80095d2:	2000      	movs	r0, #0
 80095d4:	e7ee      	b.n	80095b4 <quorem+0xf4>
	...

080095d8 <_dtoa_r>:
 80095d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095dc:	ed2d 8b04 	vpush	{d8-d9}
 80095e0:	ec57 6b10 	vmov	r6, r7, d0
 80095e4:	b093      	sub	sp, #76	; 0x4c
 80095e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80095e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80095ec:	9106      	str	r1, [sp, #24]
 80095ee:	ee10 aa10 	vmov	sl, s0
 80095f2:	4604      	mov	r4, r0
 80095f4:	9209      	str	r2, [sp, #36]	; 0x24
 80095f6:	930c      	str	r3, [sp, #48]	; 0x30
 80095f8:	46bb      	mov	fp, r7
 80095fa:	b975      	cbnz	r5, 800961a <_dtoa_r+0x42>
 80095fc:	2010      	movs	r0, #16
 80095fe:	f001 f80f 	bl	800a620 <malloc>
 8009602:	4602      	mov	r2, r0
 8009604:	6260      	str	r0, [r4, #36]	; 0x24
 8009606:	b920      	cbnz	r0, 8009612 <_dtoa_r+0x3a>
 8009608:	4ba7      	ldr	r3, [pc, #668]	; (80098a8 <_dtoa_r+0x2d0>)
 800960a:	21ea      	movs	r1, #234	; 0xea
 800960c:	48a7      	ldr	r0, [pc, #668]	; (80098ac <_dtoa_r+0x2d4>)
 800960e:	f7ff ff39 	bl	8009484 <__assert_func>
 8009612:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009616:	6005      	str	r5, [r0, #0]
 8009618:	60c5      	str	r5, [r0, #12]
 800961a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800961c:	6819      	ldr	r1, [r3, #0]
 800961e:	b151      	cbz	r1, 8009636 <_dtoa_r+0x5e>
 8009620:	685a      	ldr	r2, [r3, #4]
 8009622:	604a      	str	r2, [r1, #4]
 8009624:	2301      	movs	r3, #1
 8009626:	4093      	lsls	r3, r2
 8009628:	608b      	str	r3, [r1, #8]
 800962a:	4620      	mov	r0, r4
 800962c:	f001 f84e 	bl	800a6cc <_Bfree>
 8009630:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009632:	2200      	movs	r2, #0
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	1e3b      	subs	r3, r7, #0
 8009638:	bfaa      	itet	ge
 800963a:	2300      	movge	r3, #0
 800963c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009640:	f8c8 3000 	strge.w	r3, [r8]
 8009644:	4b9a      	ldr	r3, [pc, #616]	; (80098b0 <_dtoa_r+0x2d8>)
 8009646:	bfbc      	itt	lt
 8009648:	2201      	movlt	r2, #1
 800964a:	f8c8 2000 	strlt.w	r2, [r8]
 800964e:	ea33 030b 	bics.w	r3, r3, fp
 8009652:	d11b      	bne.n	800968c <_dtoa_r+0xb4>
 8009654:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009656:	f242 730f 	movw	r3, #9999	; 0x270f
 800965a:	6013      	str	r3, [r2, #0]
 800965c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009660:	4333      	orrs	r3, r6
 8009662:	f000 8592 	beq.w	800a18a <_dtoa_r+0xbb2>
 8009666:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009668:	b963      	cbnz	r3, 8009684 <_dtoa_r+0xac>
 800966a:	4b92      	ldr	r3, [pc, #584]	; (80098b4 <_dtoa_r+0x2dc>)
 800966c:	e022      	b.n	80096b4 <_dtoa_r+0xdc>
 800966e:	4b92      	ldr	r3, [pc, #584]	; (80098b8 <_dtoa_r+0x2e0>)
 8009670:	9301      	str	r3, [sp, #4]
 8009672:	3308      	adds	r3, #8
 8009674:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009676:	6013      	str	r3, [r2, #0]
 8009678:	9801      	ldr	r0, [sp, #4]
 800967a:	b013      	add	sp, #76	; 0x4c
 800967c:	ecbd 8b04 	vpop	{d8-d9}
 8009680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009684:	4b8b      	ldr	r3, [pc, #556]	; (80098b4 <_dtoa_r+0x2dc>)
 8009686:	9301      	str	r3, [sp, #4]
 8009688:	3303      	adds	r3, #3
 800968a:	e7f3      	b.n	8009674 <_dtoa_r+0x9c>
 800968c:	2200      	movs	r2, #0
 800968e:	2300      	movs	r3, #0
 8009690:	4650      	mov	r0, sl
 8009692:	4659      	mov	r1, fp
 8009694:	f7f7 fa50 	bl	8000b38 <__aeabi_dcmpeq>
 8009698:	ec4b ab19 	vmov	d9, sl, fp
 800969c:	4680      	mov	r8, r0
 800969e:	b158      	cbz	r0, 80096b8 <_dtoa_r+0xe0>
 80096a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096a2:	2301      	movs	r3, #1
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	f000 856b 	beq.w	800a184 <_dtoa_r+0xbac>
 80096ae:	4883      	ldr	r0, [pc, #524]	; (80098bc <_dtoa_r+0x2e4>)
 80096b0:	6018      	str	r0, [r3, #0]
 80096b2:	1e43      	subs	r3, r0, #1
 80096b4:	9301      	str	r3, [sp, #4]
 80096b6:	e7df      	b.n	8009678 <_dtoa_r+0xa0>
 80096b8:	ec4b ab10 	vmov	d0, sl, fp
 80096bc:	aa10      	add	r2, sp, #64	; 0x40
 80096be:	a911      	add	r1, sp, #68	; 0x44
 80096c0:	4620      	mov	r0, r4
 80096c2:	f001 faeb 	bl	800ac9c <__d2b>
 80096c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80096ca:	ee08 0a10 	vmov	s16, r0
 80096ce:	2d00      	cmp	r5, #0
 80096d0:	f000 8084 	beq.w	80097dc <_dtoa_r+0x204>
 80096d4:	ee19 3a90 	vmov	r3, s19
 80096d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80096dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80096e0:	4656      	mov	r6, sl
 80096e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80096e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80096ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80096ee:	4b74      	ldr	r3, [pc, #464]	; (80098c0 <_dtoa_r+0x2e8>)
 80096f0:	2200      	movs	r2, #0
 80096f2:	4630      	mov	r0, r6
 80096f4:	4639      	mov	r1, r7
 80096f6:	f7f6 fdff 	bl	80002f8 <__aeabi_dsub>
 80096fa:	a365      	add	r3, pc, #404	; (adr r3, 8009890 <_dtoa_r+0x2b8>)
 80096fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009700:	f7f6 ffb2 	bl	8000668 <__aeabi_dmul>
 8009704:	a364      	add	r3, pc, #400	; (adr r3, 8009898 <_dtoa_r+0x2c0>)
 8009706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970a:	f7f6 fdf7 	bl	80002fc <__adddf3>
 800970e:	4606      	mov	r6, r0
 8009710:	4628      	mov	r0, r5
 8009712:	460f      	mov	r7, r1
 8009714:	f7f6 ff3e 	bl	8000594 <__aeabi_i2d>
 8009718:	a361      	add	r3, pc, #388	; (adr r3, 80098a0 <_dtoa_r+0x2c8>)
 800971a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800971e:	f7f6 ffa3 	bl	8000668 <__aeabi_dmul>
 8009722:	4602      	mov	r2, r0
 8009724:	460b      	mov	r3, r1
 8009726:	4630      	mov	r0, r6
 8009728:	4639      	mov	r1, r7
 800972a:	f7f6 fde7 	bl	80002fc <__adddf3>
 800972e:	4606      	mov	r6, r0
 8009730:	460f      	mov	r7, r1
 8009732:	f7f7 fa49 	bl	8000bc8 <__aeabi_d2iz>
 8009736:	2200      	movs	r2, #0
 8009738:	9000      	str	r0, [sp, #0]
 800973a:	2300      	movs	r3, #0
 800973c:	4630      	mov	r0, r6
 800973e:	4639      	mov	r1, r7
 8009740:	f7f7 fa04 	bl	8000b4c <__aeabi_dcmplt>
 8009744:	b150      	cbz	r0, 800975c <_dtoa_r+0x184>
 8009746:	9800      	ldr	r0, [sp, #0]
 8009748:	f7f6 ff24 	bl	8000594 <__aeabi_i2d>
 800974c:	4632      	mov	r2, r6
 800974e:	463b      	mov	r3, r7
 8009750:	f7f7 f9f2 	bl	8000b38 <__aeabi_dcmpeq>
 8009754:	b910      	cbnz	r0, 800975c <_dtoa_r+0x184>
 8009756:	9b00      	ldr	r3, [sp, #0]
 8009758:	3b01      	subs	r3, #1
 800975a:	9300      	str	r3, [sp, #0]
 800975c:	9b00      	ldr	r3, [sp, #0]
 800975e:	2b16      	cmp	r3, #22
 8009760:	d85a      	bhi.n	8009818 <_dtoa_r+0x240>
 8009762:	9a00      	ldr	r2, [sp, #0]
 8009764:	4b57      	ldr	r3, [pc, #348]	; (80098c4 <_dtoa_r+0x2ec>)
 8009766:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800976a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976e:	ec51 0b19 	vmov	r0, r1, d9
 8009772:	f7f7 f9eb 	bl	8000b4c <__aeabi_dcmplt>
 8009776:	2800      	cmp	r0, #0
 8009778:	d050      	beq.n	800981c <_dtoa_r+0x244>
 800977a:	9b00      	ldr	r3, [sp, #0]
 800977c:	3b01      	subs	r3, #1
 800977e:	9300      	str	r3, [sp, #0]
 8009780:	2300      	movs	r3, #0
 8009782:	930b      	str	r3, [sp, #44]	; 0x2c
 8009784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009786:	1b5d      	subs	r5, r3, r5
 8009788:	1e6b      	subs	r3, r5, #1
 800978a:	9305      	str	r3, [sp, #20]
 800978c:	bf45      	ittet	mi
 800978e:	f1c5 0301 	rsbmi	r3, r5, #1
 8009792:	9304      	strmi	r3, [sp, #16]
 8009794:	2300      	movpl	r3, #0
 8009796:	2300      	movmi	r3, #0
 8009798:	bf4c      	ite	mi
 800979a:	9305      	strmi	r3, [sp, #20]
 800979c:	9304      	strpl	r3, [sp, #16]
 800979e:	9b00      	ldr	r3, [sp, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	db3d      	blt.n	8009820 <_dtoa_r+0x248>
 80097a4:	9b05      	ldr	r3, [sp, #20]
 80097a6:	9a00      	ldr	r2, [sp, #0]
 80097a8:	920a      	str	r2, [sp, #40]	; 0x28
 80097aa:	4413      	add	r3, r2
 80097ac:	9305      	str	r3, [sp, #20]
 80097ae:	2300      	movs	r3, #0
 80097b0:	9307      	str	r3, [sp, #28]
 80097b2:	9b06      	ldr	r3, [sp, #24]
 80097b4:	2b09      	cmp	r3, #9
 80097b6:	f200 8089 	bhi.w	80098cc <_dtoa_r+0x2f4>
 80097ba:	2b05      	cmp	r3, #5
 80097bc:	bfc4      	itt	gt
 80097be:	3b04      	subgt	r3, #4
 80097c0:	9306      	strgt	r3, [sp, #24]
 80097c2:	9b06      	ldr	r3, [sp, #24]
 80097c4:	f1a3 0302 	sub.w	r3, r3, #2
 80097c8:	bfcc      	ite	gt
 80097ca:	2500      	movgt	r5, #0
 80097cc:	2501      	movle	r5, #1
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	f200 8087 	bhi.w	80098e2 <_dtoa_r+0x30a>
 80097d4:	e8df f003 	tbb	[pc, r3]
 80097d8:	59383a2d 	.word	0x59383a2d
 80097dc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80097e0:	441d      	add	r5, r3
 80097e2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80097e6:	2b20      	cmp	r3, #32
 80097e8:	bfc1      	itttt	gt
 80097ea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80097ee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80097f2:	fa0b f303 	lslgt.w	r3, fp, r3
 80097f6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80097fa:	bfda      	itte	le
 80097fc:	f1c3 0320 	rsble	r3, r3, #32
 8009800:	fa06 f003 	lslle.w	r0, r6, r3
 8009804:	4318      	orrgt	r0, r3
 8009806:	f7f6 feb5 	bl	8000574 <__aeabi_ui2d>
 800980a:	2301      	movs	r3, #1
 800980c:	4606      	mov	r6, r0
 800980e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009812:	3d01      	subs	r5, #1
 8009814:	930e      	str	r3, [sp, #56]	; 0x38
 8009816:	e76a      	b.n	80096ee <_dtoa_r+0x116>
 8009818:	2301      	movs	r3, #1
 800981a:	e7b2      	b.n	8009782 <_dtoa_r+0x1aa>
 800981c:	900b      	str	r0, [sp, #44]	; 0x2c
 800981e:	e7b1      	b.n	8009784 <_dtoa_r+0x1ac>
 8009820:	9b04      	ldr	r3, [sp, #16]
 8009822:	9a00      	ldr	r2, [sp, #0]
 8009824:	1a9b      	subs	r3, r3, r2
 8009826:	9304      	str	r3, [sp, #16]
 8009828:	4253      	negs	r3, r2
 800982a:	9307      	str	r3, [sp, #28]
 800982c:	2300      	movs	r3, #0
 800982e:	930a      	str	r3, [sp, #40]	; 0x28
 8009830:	e7bf      	b.n	80097b2 <_dtoa_r+0x1da>
 8009832:	2300      	movs	r3, #0
 8009834:	9308      	str	r3, [sp, #32]
 8009836:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009838:	2b00      	cmp	r3, #0
 800983a:	dc55      	bgt.n	80098e8 <_dtoa_r+0x310>
 800983c:	2301      	movs	r3, #1
 800983e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009842:	461a      	mov	r2, r3
 8009844:	9209      	str	r2, [sp, #36]	; 0x24
 8009846:	e00c      	b.n	8009862 <_dtoa_r+0x28a>
 8009848:	2301      	movs	r3, #1
 800984a:	e7f3      	b.n	8009834 <_dtoa_r+0x25c>
 800984c:	2300      	movs	r3, #0
 800984e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009850:	9308      	str	r3, [sp, #32]
 8009852:	9b00      	ldr	r3, [sp, #0]
 8009854:	4413      	add	r3, r2
 8009856:	9302      	str	r3, [sp, #8]
 8009858:	3301      	adds	r3, #1
 800985a:	2b01      	cmp	r3, #1
 800985c:	9303      	str	r3, [sp, #12]
 800985e:	bfb8      	it	lt
 8009860:	2301      	movlt	r3, #1
 8009862:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009864:	2200      	movs	r2, #0
 8009866:	6042      	str	r2, [r0, #4]
 8009868:	2204      	movs	r2, #4
 800986a:	f102 0614 	add.w	r6, r2, #20
 800986e:	429e      	cmp	r6, r3
 8009870:	6841      	ldr	r1, [r0, #4]
 8009872:	d93d      	bls.n	80098f0 <_dtoa_r+0x318>
 8009874:	4620      	mov	r0, r4
 8009876:	f000 fee9 	bl	800a64c <_Balloc>
 800987a:	9001      	str	r0, [sp, #4]
 800987c:	2800      	cmp	r0, #0
 800987e:	d13b      	bne.n	80098f8 <_dtoa_r+0x320>
 8009880:	4b11      	ldr	r3, [pc, #68]	; (80098c8 <_dtoa_r+0x2f0>)
 8009882:	4602      	mov	r2, r0
 8009884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009888:	e6c0      	b.n	800960c <_dtoa_r+0x34>
 800988a:	2301      	movs	r3, #1
 800988c:	e7df      	b.n	800984e <_dtoa_r+0x276>
 800988e:	bf00      	nop
 8009890:	636f4361 	.word	0x636f4361
 8009894:	3fd287a7 	.word	0x3fd287a7
 8009898:	8b60c8b3 	.word	0x8b60c8b3
 800989c:	3fc68a28 	.word	0x3fc68a28
 80098a0:	509f79fb 	.word	0x509f79fb
 80098a4:	3fd34413 	.word	0x3fd34413
 80098a8:	0800b9a4 	.word	0x0800b9a4
 80098ac:	0800bb62 	.word	0x0800bb62
 80098b0:	7ff00000 	.word	0x7ff00000
 80098b4:	0800bb5e 	.word	0x0800bb5e
 80098b8:	0800bb55 	.word	0x0800bb55
 80098bc:	0800b981 	.word	0x0800b981
 80098c0:	3ff80000 	.word	0x3ff80000
 80098c4:	0800bcb8 	.word	0x0800bcb8
 80098c8:	0800bbbd 	.word	0x0800bbbd
 80098cc:	2501      	movs	r5, #1
 80098ce:	2300      	movs	r3, #0
 80098d0:	9306      	str	r3, [sp, #24]
 80098d2:	9508      	str	r5, [sp, #32]
 80098d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80098d8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098dc:	2200      	movs	r2, #0
 80098de:	2312      	movs	r3, #18
 80098e0:	e7b0      	b.n	8009844 <_dtoa_r+0x26c>
 80098e2:	2301      	movs	r3, #1
 80098e4:	9308      	str	r3, [sp, #32]
 80098e6:	e7f5      	b.n	80098d4 <_dtoa_r+0x2fc>
 80098e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098ea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098ee:	e7b8      	b.n	8009862 <_dtoa_r+0x28a>
 80098f0:	3101      	adds	r1, #1
 80098f2:	6041      	str	r1, [r0, #4]
 80098f4:	0052      	lsls	r2, r2, #1
 80098f6:	e7b8      	b.n	800986a <_dtoa_r+0x292>
 80098f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80098fa:	9a01      	ldr	r2, [sp, #4]
 80098fc:	601a      	str	r2, [r3, #0]
 80098fe:	9b03      	ldr	r3, [sp, #12]
 8009900:	2b0e      	cmp	r3, #14
 8009902:	f200 809d 	bhi.w	8009a40 <_dtoa_r+0x468>
 8009906:	2d00      	cmp	r5, #0
 8009908:	f000 809a 	beq.w	8009a40 <_dtoa_r+0x468>
 800990c:	9b00      	ldr	r3, [sp, #0]
 800990e:	2b00      	cmp	r3, #0
 8009910:	dd32      	ble.n	8009978 <_dtoa_r+0x3a0>
 8009912:	4ab7      	ldr	r2, [pc, #732]	; (8009bf0 <_dtoa_r+0x618>)
 8009914:	f003 030f 	and.w	r3, r3, #15
 8009918:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800991c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009920:	9b00      	ldr	r3, [sp, #0]
 8009922:	05d8      	lsls	r0, r3, #23
 8009924:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009928:	d516      	bpl.n	8009958 <_dtoa_r+0x380>
 800992a:	4bb2      	ldr	r3, [pc, #712]	; (8009bf4 <_dtoa_r+0x61c>)
 800992c:	ec51 0b19 	vmov	r0, r1, d9
 8009930:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009934:	f7f6 ffc2 	bl	80008bc <__aeabi_ddiv>
 8009938:	f007 070f 	and.w	r7, r7, #15
 800993c:	4682      	mov	sl, r0
 800993e:	468b      	mov	fp, r1
 8009940:	2503      	movs	r5, #3
 8009942:	4eac      	ldr	r6, [pc, #688]	; (8009bf4 <_dtoa_r+0x61c>)
 8009944:	b957      	cbnz	r7, 800995c <_dtoa_r+0x384>
 8009946:	4642      	mov	r2, r8
 8009948:	464b      	mov	r3, r9
 800994a:	4650      	mov	r0, sl
 800994c:	4659      	mov	r1, fp
 800994e:	f7f6 ffb5 	bl	80008bc <__aeabi_ddiv>
 8009952:	4682      	mov	sl, r0
 8009954:	468b      	mov	fp, r1
 8009956:	e028      	b.n	80099aa <_dtoa_r+0x3d2>
 8009958:	2502      	movs	r5, #2
 800995a:	e7f2      	b.n	8009942 <_dtoa_r+0x36a>
 800995c:	07f9      	lsls	r1, r7, #31
 800995e:	d508      	bpl.n	8009972 <_dtoa_r+0x39a>
 8009960:	4640      	mov	r0, r8
 8009962:	4649      	mov	r1, r9
 8009964:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009968:	f7f6 fe7e 	bl	8000668 <__aeabi_dmul>
 800996c:	3501      	adds	r5, #1
 800996e:	4680      	mov	r8, r0
 8009970:	4689      	mov	r9, r1
 8009972:	107f      	asrs	r7, r7, #1
 8009974:	3608      	adds	r6, #8
 8009976:	e7e5      	b.n	8009944 <_dtoa_r+0x36c>
 8009978:	f000 809b 	beq.w	8009ab2 <_dtoa_r+0x4da>
 800997c:	9b00      	ldr	r3, [sp, #0]
 800997e:	4f9d      	ldr	r7, [pc, #628]	; (8009bf4 <_dtoa_r+0x61c>)
 8009980:	425e      	negs	r6, r3
 8009982:	4b9b      	ldr	r3, [pc, #620]	; (8009bf0 <_dtoa_r+0x618>)
 8009984:	f006 020f 	and.w	r2, r6, #15
 8009988:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800998c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009990:	ec51 0b19 	vmov	r0, r1, d9
 8009994:	f7f6 fe68 	bl	8000668 <__aeabi_dmul>
 8009998:	1136      	asrs	r6, r6, #4
 800999a:	4682      	mov	sl, r0
 800999c:	468b      	mov	fp, r1
 800999e:	2300      	movs	r3, #0
 80099a0:	2502      	movs	r5, #2
 80099a2:	2e00      	cmp	r6, #0
 80099a4:	d17a      	bne.n	8009a9c <_dtoa_r+0x4c4>
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d1d3      	bne.n	8009952 <_dtoa_r+0x37a>
 80099aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	f000 8082 	beq.w	8009ab6 <_dtoa_r+0x4de>
 80099b2:	4b91      	ldr	r3, [pc, #580]	; (8009bf8 <_dtoa_r+0x620>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	4650      	mov	r0, sl
 80099b8:	4659      	mov	r1, fp
 80099ba:	f7f7 f8c7 	bl	8000b4c <__aeabi_dcmplt>
 80099be:	2800      	cmp	r0, #0
 80099c0:	d079      	beq.n	8009ab6 <_dtoa_r+0x4de>
 80099c2:	9b03      	ldr	r3, [sp, #12]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d076      	beq.n	8009ab6 <_dtoa_r+0x4de>
 80099c8:	9b02      	ldr	r3, [sp, #8]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dd36      	ble.n	8009a3c <_dtoa_r+0x464>
 80099ce:	9b00      	ldr	r3, [sp, #0]
 80099d0:	4650      	mov	r0, sl
 80099d2:	4659      	mov	r1, fp
 80099d4:	1e5f      	subs	r7, r3, #1
 80099d6:	2200      	movs	r2, #0
 80099d8:	4b88      	ldr	r3, [pc, #544]	; (8009bfc <_dtoa_r+0x624>)
 80099da:	f7f6 fe45 	bl	8000668 <__aeabi_dmul>
 80099de:	9e02      	ldr	r6, [sp, #8]
 80099e0:	4682      	mov	sl, r0
 80099e2:	468b      	mov	fp, r1
 80099e4:	3501      	adds	r5, #1
 80099e6:	4628      	mov	r0, r5
 80099e8:	f7f6 fdd4 	bl	8000594 <__aeabi_i2d>
 80099ec:	4652      	mov	r2, sl
 80099ee:	465b      	mov	r3, fp
 80099f0:	f7f6 fe3a 	bl	8000668 <__aeabi_dmul>
 80099f4:	4b82      	ldr	r3, [pc, #520]	; (8009c00 <_dtoa_r+0x628>)
 80099f6:	2200      	movs	r2, #0
 80099f8:	f7f6 fc80 	bl	80002fc <__adddf3>
 80099fc:	46d0      	mov	r8, sl
 80099fe:	46d9      	mov	r9, fp
 8009a00:	4682      	mov	sl, r0
 8009a02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a06:	2e00      	cmp	r6, #0
 8009a08:	d158      	bne.n	8009abc <_dtoa_r+0x4e4>
 8009a0a:	4b7e      	ldr	r3, [pc, #504]	; (8009c04 <_dtoa_r+0x62c>)
 8009a0c:	2200      	movs	r2, #0
 8009a0e:	4640      	mov	r0, r8
 8009a10:	4649      	mov	r1, r9
 8009a12:	f7f6 fc71 	bl	80002f8 <__aeabi_dsub>
 8009a16:	4652      	mov	r2, sl
 8009a18:	465b      	mov	r3, fp
 8009a1a:	4680      	mov	r8, r0
 8009a1c:	4689      	mov	r9, r1
 8009a1e:	f7f7 f8b3 	bl	8000b88 <__aeabi_dcmpgt>
 8009a22:	2800      	cmp	r0, #0
 8009a24:	f040 8295 	bne.w	8009f52 <_dtoa_r+0x97a>
 8009a28:	4652      	mov	r2, sl
 8009a2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009a2e:	4640      	mov	r0, r8
 8009a30:	4649      	mov	r1, r9
 8009a32:	f7f7 f88b 	bl	8000b4c <__aeabi_dcmplt>
 8009a36:	2800      	cmp	r0, #0
 8009a38:	f040 8289 	bne.w	8009f4e <_dtoa_r+0x976>
 8009a3c:	ec5b ab19 	vmov	sl, fp, d9
 8009a40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f2c0 8148 	blt.w	8009cd8 <_dtoa_r+0x700>
 8009a48:	9a00      	ldr	r2, [sp, #0]
 8009a4a:	2a0e      	cmp	r2, #14
 8009a4c:	f300 8144 	bgt.w	8009cd8 <_dtoa_r+0x700>
 8009a50:	4b67      	ldr	r3, [pc, #412]	; (8009bf0 <_dtoa_r+0x618>)
 8009a52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f280 80d5 	bge.w	8009c0c <_dtoa_r+0x634>
 8009a62:	9b03      	ldr	r3, [sp, #12]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	f300 80d1 	bgt.w	8009c0c <_dtoa_r+0x634>
 8009a6a:	f040 826f 	bne.w	8009f4c <_dtoa_r+0x974>
 8009a6e:	4b65      	ldr	r3, [pc, #404]	; (8009c04 <_dtoa_r+0x62c>)
 8009a70:	2200      	movs	r2, #0
 8009a72:	4640      	mov	r0, r8
 8009a74:	4649      	mov	r1, r9
 8009a76:	f7f6 fdf7 	bl	8000668 <__aeabi_dmul>
 8009a7a:	4652      	mov	r2, sl
 8009a7c:	465b      	mov	r3, fp
 8009a7e:	f7f7 f879 	bl	8000b74 <__aeabi_dcmpge>
 8009a82:	9e03      	ldr	r6, [sp, #12]
 8009a84:	4637      	mov	r7, r6
 8009a86:	2800      	cmp	r0, #0
 8009a88:	f040 8245 	bne.w	8009f16 <_dtoa_r+0x93e>
 8009a8c:	9d01      	ldr	r5, [sp, #4]
 8009a8e:	2331      	movs	r3, #49	; 0x31
 8009a90:	f805 3b01 	strb.w	r3, [r5], #1
 8009a94:	9b00      	ldr	r3, [sp, #0]
 8009a96:	3301      	adds	r3, #1
 8009a98:	9300      	str	r3, [sp, #0]
 8009a9a:	e240      	b.n	8009f1e <_dtoa_r+0x946>
 8009a9c:	07f2      	lsls	r2, r6, #31
 8009a9e:	d505      	bpl.n	8009aac <_dtoa_r+0x4d4>
 8009aa0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009aa4:	f7f6 fde0 	bl	8000668 <__aeabi_dmul>
 8009aa8:	3501      	adds	r5, #1
 8009aaa:	2301      	movs	r3, #1
 8009aac:	1076      	asrs	r6, r6, #1
 8009aae:	3708      	adds	r7, #8
 8009ab0:	e777      	b.n	80099a2 <_dtoa_r+0x3ca>
 8009ab2:	2502      	movs	r5, #2
 8009ab4:	e779      	b.n	80099aa <_dtoa_r+0x3d2>
 8009ab6:	9f00      	ldr	r7, [sp, #0]
 8009ab8:	9e03      	ldr	r6, [sp, #12]
 8009aba:	e794      	b.n	80099e6 <_dtoa_r+0x40e>
 8009abc:	9901      	ldr	r1, [sp, #4]
 8009abe:	4b4c      	ldr	r3, [pc, #304]	; (8009bf0 <_dtoa_r+0x618>)
 8009ac0:	4431      	add	r1, r6
 8009ac2:	910d      	str	r1, [sp, #52]	; 0x34
 8009ac4:	9908      	ldr	r1, [sp, #32]
 8009ac6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009aca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009ace:	2900      	cmp	r1, #0
 8009ad0:	d043      	beq.n	8009b5a <_dtoa_r+0x582>
 8009ad2:	494d      	ldr	r1, [pc, #308]	; (8009c08 <_dtoa_r+0x630>)
 8009ad4:	2000      	movs	r0, #0
 8009ad6:	f7f6 fef1 	bl	80008bc <__aeabi_ddiv>
 8009ada:	4652      	mov	r2, sl
 8009adc:	465b      	mov	r3, fp
 8009ade:	f7f6 fc0b 	bl	80002f8 <__aeabi_dsub>
 8009ae2:	9d01      	ldr	r5, [sp, #4]
 8009ae4:	4682      	mov	sl, r0
 8009ae6:	468b      	mov	fp, r1
 8009ae8:	4649      	mov	r1, r9
 8009aea:	4640      	mov	r0, r8
 8009aec:	f7f7 f86c 	bl	8000bc8 <__aeabi_d2iz>
 8009af0:	4606      	mov	r6, r0
 8009af2:	f7f6 fd4f 	bl	8000594 <__aeabi_i2d>
 8009af6:	4602      	mov	r2, r0
 8009af8:	460b      	mov	r3, r1
 8009afa:	4640      	mov	r0, r8
 8009afc:	4649      	mov	r1, r9
 8009afe:	f7f6 fbfb 	bl	80002f8 <__aeabi_dsub>
 8009b02:	3630      	adds	r6, #48	; 0x30
 8009b04:	f805 6b01 	strb.w	r6, [r5], #1
 8009b08:	4652      	mov	r2, sl
 8009b0a:	465b      	mov	r3, fp
 8009b0c:	4680      	mov	r8, r0
 8009b0e:	4689      	mov	r9, r1
 8009b10:	f7f7 f81c 	bl	8000b4c <__aeabi_dcmplt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d163      	bne.n	8009be0 <_dtoa_r+0x608>
 8009b18:	4642      	mov	r2, r8
 8009b1a:	464b      	mov	r3, r9
 8009b1c:	4936      	ldr	r1, [pc, #216]	; (8009bf8 <_dtoa_r+0x620>)
 8009b1e:	2000      	movs	r0, #0
 8009b20:	f7f6 fbea 	bl	80002f8 <__aeabi_dsub>
 8009b24:	4652      	mov	r2, sl
 8009b26:	465b      	mov	r3, fp
 8009b28:	f7f7 f810 	bl	8000b4c <__aeabi_dcmplt>
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	f040 80b5 	bne.w	8009c9c <_dtoa_r+0x6c4>
 8009b32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b34:	429d      	cmp	r5, r3
 8009b36:	d081      	beq.n	8009a3c <_dtoa_r+0x464>
 8009b38:	4b30      	ldr	r3, [pc, #192]	; (8009bfc <_dtoa_r+0x624>)
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	4650      	mov	r0, sl
 8009b3e:	4659      	mov	r1, fp
 8009b40:	f7f6 fd92 	bl	8000668 <__aeabi_dmul>
 8009b44:	4b2d      	ldr	r3, [pc, #180]	; (8009bfc <_dtoa_r+0x624>)
 8009b46:	4682      	mov	sl, r0
 8009b48:	468b      	mov	fp, r1
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f7f6 fd8a 	bl	8000668 <__aeabi_dmul>
 8009b54:	4680      	mov	r8, r0
 8009b56:	4689      	mov	r9, r1
 8009b58:	e7c6      	b.n	8009ae8 <_dtoa_r+0x510>
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	f7f6 fd83 	bl	8000668 <__aeabi_dmul>
 8009b62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b64:	9d01      	ldr	r5, [sp, #4]
 8009b66:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b68:	4682      	mov	sl, r0
 8009b6a:	468b      	mov	fp, r1
 8009b6c:	4649      	mov	r1, r9
 8009b6e:	4640      	mov	r0, r8
 8009b70:	f7f7 f82a 	bl	8000bc8 <__aeabi_d2iz>
 8009b74:	4606      	mov	r6, r0
 8009b76:	f7f6 fd0d 	bl	8000594 <__aeabi_i2d>
 8009b7a:	3630      	adds	r6, #48	; 0x30
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4640      	mov	r0, r8
 8009b82:	4649      	mov	r1, r9
 8009b84:	f7f6 fbb8 	bl	80002f8 <__aeabi_dsub>
 8009b88:	f805 6b01 	strb.w	r6, [r5], #1
 8009b8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009b8e:	429d      	cmp	r5, r3
 8009b90:	4680      	mov	r8, r0
 8009b92:	4689      	mov	r9, r1
 8009b94:	f04f 0200 	mov.w	r2, #0
 8009b98:	d124      	bne.n	8009be4 <_dtoa_r+0x60c>
 8009b9a:	4b1b      	ldr	r3, [pc, #108]	; (8009c08 <_dtoa_r+0x630>)
 8009b9c:	4650      	mov	r0, sl
 8009b9e:	4659      	mov	r1, fp
 8009ba0:	f7f6 fbac 	bl	80002fc <__adddf3>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	4640      	mov	r0, r8
 8009baa:	4649      	mov	r1, r9
 8009bac:	f7f6 ffec 	bl	8000b88 <__aeabi_dcmpgt>
 8009bb0:	2800      	cmp	r0, #0
 8009bb2:	d173      	bne.n	8009c9c <_dtoa_r+0x6c4>
 8009bb4:	4652      	mov	r2, sl
 8009bb6:	465b      	mov	r3, fp
 8009bb8:	4913      	ldr	r1, [pc, #76]	; (8009c08 <_dtoa_r+0x630>)
 8009bba:	2000      	movs	r0, #0
 8009bbc:	f7f6 fb9c 	bl	80002f8 <__aeabi_dsub>
 8009bc0:	4602      	mov	r2, r0
 8009bc2:	460b      	mov	r3, r1
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	f7f6 ffc0 	bl	8000b4c <__aeabi_dcmplt>
 8009bcc:	2800      	cmp	r0, #0
 8009bce:	f43f af35 	beq.w	8009a3c <_dtoa_r+0x464>
 8009bd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009bd4:	1e6b      	subs	r3, r5, #1
 8009bd6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009bd8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009bdc:	2b30      	cmp	r3, #48	; 0x30
 8009bde:	d0f8      	beq.n	8009bd2 <_dtoa_r+0x5fa>
 8009be0:	9700      	str	r7, [sp, #0]
 8009be2:	e049      	b.n	8009c78 <_dtoa_r+0x6a0>
 8009be4:	4b05      	ldr	r3, [pc, #20]	; (8009bfc <_dtoa_r+0x624>)
 8009be6:	f7f6 fd3f 	bl	8000668 <__aeabi_dmul>
 8009bea:	4680      	mov	r8, r0
 8009bec:	4689      	mov	r9, r1
 8009bee:	e7bd      	b.n	8009b6c <_dtoa_r+0x594>
 8009bf0:	0800bcb8 	.word	0x0800bcb8
 8009bf4:	0800bc90 	.word	0x0800bc90
 8009bf8:	3ff00000 	.word	0x3ff00000
 8009bfc:	40240000 	.word	0x40240000
 8009c00:	401c0000 	.word	0x401c0000
 8009c04:	40140000 	.word	0x40140000
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	9d01      	ldr	r5, [sp, #4]
 8009c0e:	4656      	mov	r6, sl
 8009c10:	465f      	mov	r7, fp
 8009c12:	4642      	mov	r2, r8
 8009c14:	464b      	mov	r3, r9
 8009c16:	4630      	mov	r0, r6
 8009c18:	4639      	mov	r1, r7
 8009c1a:	f7f6 fe4f 	bl	80008bc <__aeabi_ddiv>
 8009c1e:	f7f6 ffd3 	bl	8000bc8 <__aeabi_d2iz>
 8009c22:	4682      	mov	sl, r0
 8009c24:	f7f6 fcb6 	bl	8000594 <__aeabi_i2d>
 8009c28:	4642      	mov	r2, r8
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	f7f6 fd1c 	bl	8000668 <__aeabi_dmul>
 8009c30:	4602      	mov	r2, r0
 8009c32:	460b      	mov	r3, r1
 8009c34:	4630      	mov	r0, r6
 8009c36:	4639      	mov	r1, r7
 8009c38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009c3c:	f7f6 fb5c 	bl	80002f8 <__aeabi_dsub>
 8009c40:	f805 6b01 	strb.w	r6, [r5], #1
 8009c44:	9e01      	ldr	r6, [sp, #4]
 8009c46:	9f03      	ldr	r7, [sp, #12]
 8009c48:	1bae      	subs	r6, r5, r6
 8009c4a:	42b7      	cmp	r7, r6
 8009c4c:	4602      	mov	r2, r0
 8009c4e:	460b      	mov	r3, r1
 8009c50:	d135      	bne.n	8009cbe <_dtoa_r+0x6e6>
 8009c52:	f7f6 fb53 	bl	80002fc <__adddf3>
 8009c56:	4642      	mov	r2, r8
 8009c58:	464b      	mov	r3, r9
 8009c5a:	4606      	mov	r6, r0
 8009c5c:	460f      	mov	r7, r1
 8009c5e:	f7f6 ff93 	bl	8000b88 <__aeabi_dcmpgt>
 8009c62:	b9d0      	cbnz	r0, 8009c9a <_dtoa_r+0x6c2>
 8009c64:	4642      	mov	r2, r8
 8009c66:	464b      	mov	r3, r9
 8009c68:	4630      	mov	r0, r6
 8009c6a:	4639      	mov	r1, r7
 8009c6c:	f7f6 ff64 	bl	8000b38 <__aeabi_dcmpeq>
 8009c70:	b110      	cbz	r0, 8009c78 <_dtoa_r+0x6a0>
 8009c72:	f01a 0f01 	tst.w	sl, #1
 8009c76:	d110      	bne.n	8009c9a <_dtoa_r+0x6c2>
 8009c78:	4620      	mov	r0, r4
 8009c7a:	ee18 1a10 	vmov	r1, s16
 8009c7e:	f000 fd25 	bl	800a6cc <_Bfree>
 8009c82:	2300      	movs	r3, #0
 8009c84:	9800      	ldr	r0, [sp, #0]
 8009c86:	702b      	strb	r3, [r5, #0]
 8009c88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c8a:	3001      	adds	r0, #1
 8009c8c:	6018      	str	r0, [r3, #0]
 8009c8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	f43f acf1 	beq.w	8009678 <_dtoa_r+0xa0>
 8009c96:	601d      	str	r5, [r3, #0]
 8009c98:	e4ee      	b.n	8009678 <_dtoa_r+0xa0>
 8009c9a:	9f00      	ldr	r7, [sp, #0]
 8009c9c:	462b      	mov	r3, r5
 8009c9e:	461d      	mov	r5, r3
 8009ca0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ca4:	2a39      	cmp	r2, #57	; 0x39
 8009ca6:	d106      	bne.n	8009cb6 <_dtoa_r+0x6de>
 8009ca8:	9a01      	ldr	r2, [sp, #4]
 8009caa:	429a      	cmp	r2, r3
 8009cac:	d1f7      	bne.n	8009c9e <_dtoa_r+0x6c6>
 8009cae:	9901      	ldr	r1, [sp, #4]
 8009cb0:	2230      	movs	r2, #48	; 0x30
 8009cb2:	3701      	adds	r7, #1
 8009cb4:	700a      	strb	r2, [r1, #0]
 8009cb6:	781a      	ldrb	r2, [r3, #0]
 8009cb8:	3201      	adds	r2, #1
 8009cba:	701a      	strb	r2, [r3, #0]
 8009cbc:	e790      	b.n	8009be0 <_dtoa_r+0x608>
 8009cbe:	4ba6      	ldr	r3, [pc, #664]	; (8009f58 <_dtoa_r+0x980>)
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f7f6 fcd1 	bl	8000668 <__aeabi_dmul>
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	2300      	movs	r3, #0
 8009cca:	4606      	mov	r6, r0
 8009ccc:	460f      	mov	r7, r1
 8009cce:	f7f6 ff33 	bl	8000b38 <__aeabi_dcmpeq>
 8009cd2:	2800      	cmp	r0, #0
 8009cd4:	d09d      	beq.n	8009c12 <_dtoa_r+0x63a>
 8009cd6:	e7cf      	b.n	8009c78 <_dtoa_r+0x6a0>
 8009cd8:	9a08      	ldr	r2, [sp, #32]
 8009cda:	2a00      	cmp	r2, #0
 8009cdc:	f000 80d7 	beq.w	8009e8e <_dtoa_r+0x8b6>
 8009ce0:	9a06      	ldr	r2, [sp, #24]
 8009ce2:	2a01      	cmp	r2, #1
 8009ce4:	f300 80ba 	bgt.w	8009e5c <_dtoa_r+0x884>
 8009ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009cea:	2a00      	cmp	r2, #0
 8009cec:	f000 80b2 	beq.w	8009e54 <_dtoa_r+0x87c>
 8009cf0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009cf4:	9e07      	ldr	r6, [sp, #28]
 8009cf6:	9d04      	ldr	r5, [sp, #16]
 8009cf8:	9a04      	ldr	r2, [sp, #16]
 8009cfa:	441a      	add	r2, r3
 8009cfc:	9204      	str	r2, [sp, #16]
 8009cfe:	9a05      	ldr	r2, [sp, #20]
 8009d00:	2101      	movs	r1, #1
 8009d02:	441a      	add	r2, r3
 8009d04:	4620      	mov	r0, r4
 8009d06:	9205      	str	r2, [sp, #20]
 8009d08:	f000 fd98 	bl	800a83c <__i2b>
 8009d0c:	4607      	mov	r7, r0
 8009d0e:	2d00      	cmp	r5, #0
 8009d10:	dd0c      	ble.n	8009d2c <_dtoa_r+0x754>
 8009d12:	9b05      	ldr	r3, [sp, #20]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	dd09      	ble.n	8009d2c <_dtoa_r+0x754>
 8009d18:	42ab      	cmp	r3, r5
 8009d1a:	9a04      	ldr	r2, [sp, #16]
 8009d1c:	bfa8      	it	ge
 8009d1e:	462b      	movge	r3, r5
 8009d20:	1ad2      	subs	r2, r2, r3
 8009d22:	9204      	str	r2, [sp, #16]
 8009d24:	9a05      	ldr	r2, [sp, #20]
 8009d26:	1aed      	subs	r5, r5, r3
 8009d28:	1ad3      	subs	r3, r2, r3
 8009d2a:	9305      	str	r3, [sp, #20]
 8009d2c:	9b07      	ldr	r3, [sp, #28]
 8009d2e:	b31b      	cbz	r3, 8009d78 <_dtoa_r+0x7a0>
 8009d30:	9b08      	ldr	r3, [sp, #32]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f000 80af 	beq.w	8009e96 <_dtoa_r+0x8be>
 8009d38:	2e00      	cmp	r6, #0
 8009d3a:	dd13      	ble.n	8009d64 <_dtoa_r+0x78c>
 8009d3c:	4639      	mov	r1, r7
 8009d3e:	4632      	mov	r2, r6
 8009d40:	4620      	mov	r0, r4
 8009d42:	f000 fe3b 	bl	800a9bc <__pow5mult>
 8009d46:	ee18 2a10 	vmov	r2, s16
 8009d4a:	4601      	mov	r1, r0
 8009d4c:	4607      	mov	r7, r0
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 fd8a 	bl	800a868 <__multiply>
 8009d54:	ee18 1a10 	vmov	r1, s16
 8009d58:	4680      	mov	r8, r0
 8009d5a:	4620      	mov	r0, r4
 8009d5c:	f000 fcb6 	bl	800a6cc <_Bfree>
 8009d60:	ee08 8a10 	vmov	s16, r8
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	1b9a      	subs	r2, r3, r6
 8009d68:	d006      	beq.n	8009d78 <_dtoa_r+0x7a0>
 8009d6a:	ee18 1a10 	vmov	r1, s16
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f000 fe24 	bl	800a9bc <__pow5mult>
 8009d74:	ee08 0a10 	vmov	s16, r0
 8009d78:	2101      	movs	r1, #1
 8009d7a:	4620      	mov	r0, r4
 8009d7c:	f000 fd5e 	bl	800a83c <__i2b>
 8009d80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	4606      	mov	r6, r0
 8009d86:	f340 8088 	ble.w	8009e9a <_dtoa_r+0x8c2>
 8009d8a:	461a      	mov	r2, r3
 8009d8c:	4601      	mov	r1, r0
 8009d8e:	4620      	mov	r0, r4
 8009d90:	f000 fe14 	bl	800a9bc <__pow5mult>
 8009d94:	9b06      	ldr	r3, [sp, #24]
 8009d96:	2b01      	cmp	r3, #1
 8009d98:	4606      	mov	r6, r0
 8009d9a:	f340 8081 	ble.w	8009ea0 <_dtoa_r+0x8c8>
 8009d9e:	f04f 0800 	mov.w	r8, #0
 8009da2:	6933      	ldr	r3, [r6, #16]
 8009da4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009da8:	6918      	ldr	r0, [r3, #16]
 8009daa:	f000 fcf7 	bl	800a79c <__hi0bits>
 8009dae:	f1c0 0020 	rsb	r0, r0, #32
 8009db2:	9b05      	ldr	r3, [sp, #20]
 8009db4:	4418      	add	r0, r3
 8009db6:	f010 001f 	ands.w	r0, r0, #31
 8009dba:	f000 8092 	beq.w	8009ee2 <_dtoa_r+0x90a>
 8009dbe:	f1c0 0320 	rsb	r3, r0, #32
 8009dc2:	2b04      	cmp	r3, #4
 8009dc4:	f340 808a 	ble.w	8009edc <_dtoa_r+0x904>
 8009dc8:	f1c0 001c 	rsb	r0, r0, #28
 8009dcc:	9b04      	ldr	r3, [sp, #16]
 8009dce:	4403      	add	r3, r0
 8009dd0:	9304      	str	r3, [sp, #16]
 8009dd2:	9b05      	ldr	r3, [sp, #20]
 8009dd4:	4403      	add	r3, r0
 8009dd6:	4405      	add	r5, r0
 8009dd8:	9305      	str	r3, [sp, #20]
 8009dda:	9b04      	ldr	r3, [sp, #16]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	dd07      	ble.n	8009df0 <_dtoa_r+0x818>
 8009de0:	ee18 1a10 	vmov	r1, s16
 8009de4:	461a      	mov	r2, r3
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 fe42 	bl	800aa70 <__lshift>
 8009dec:	ee08 0a10 	vmov	s16, r0
 8009df0:	9b05      	ldr	r3, [sp, #20]
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	dd05      	ble.n	8009e02 <_dtoa_r+0x82a>
 8009df6:	4631      	mov	r1, r6
 8009df8:	461a      	mov	r2, r3
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fe38 	bl	800aa70 <__lshift>
 8009e00:	4606      	mov	r6, r0
 8009e02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d06e      	beq.n	8009ee6 <_dtoa_r+0x90e>
 8009e08:	ee18 0a10 	vmov	r0, s16
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	f000 fe9f 	bl	800ab50 <__mcmp>
 8009e12:	2800      	cmp	r0, #0
 8009e14:	da67      	bge.n	8009ee6 <_dtoa_r+0x90e>
 8009e16:	9b00      	ldr	r3, [sp, #0]
 8009e18:	3b01      	subs	r3, #1
 8009e1a:	ee18 1a10 	vmov	r1, s16
 8009e1e:	9300      	str	r3, [sp, #0]
 8009e20:	220a      	movs	r2, #10
 8009e22:	2300      	movs	r3, #0
 8009e24:	4620      	mov	r0, r4
 8009e26:	f000 fc73 	bl	800a710 <__multadd>
 8009e2a:	9b08      	ldr	r3, [sp, #32]
 8009e2c:	ee08 0a10 	vmov	s16, r0
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	f000 81b1 	beq.w	800a198 <_dtoa_r+0xbc0>
 8009e36:	2300      	movs	r3, #0
 8009e38:	4639      	mov	r1, r7
 8009e3a:	220a      	movs	r2, #10
 8009e3c:	4620      	mov	r0, r4
 8009e3e:	f000 fc67 	bl	800a710 <__multadd>
 8009e42:	9b02      	ldr	r3, [sp, #8]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	4607      	mov	r7, r0
 8009e48:	f300 808e 	bgt.w	8009f68 <_dtoa_r+0x990>
 8009e4c:	9b06      	ldr	r3, [sp, #24]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	dc51      	bgt.n	8009ef6 <_dtoa_r+0x91e>
 8009e52:	e089      	b.n	8009f68 <_dtoa_r+0x990>
 8009e54:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009e56:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009e5a:	e74b      	b.n	8009cf4 <_dtoa_r+0x71c>
 8009e5c:	9b03      	ldr	r3, [sp, #12]
 8009e5e:	1e5e      	subs	r6, r3, #1
 8009e60:	9b07      	ldr	r3, [sp, #28]
 8009e62:	42b3      	cmp	r3, r6
 8009e64:	bfbf      	itttt	lt
 8009e66:	9b07      	ldrlt	r3, [sp, #28]
 8009e68:	9607      	strlt	r6, [sp, #28]
 8009e6a:	1af2      	sublt	r2, r6, r3
 8009e6c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009e6e:	bfb6      	itet	lt
 8009e70:	189b      	addlt	r3, r3, r2
 8009e72:	1b9e      	subge	r6, r3, r6
 8009e74:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	bfb8      	it	lt
 8009e7a:	2600      	movlt	r6, #0
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bfb7      	itett	lt
 8009e80:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009e84:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009e88:	1a9d      	sublt	r5, r3, r2
 8009e8a:	2300      	movlt	r3, #0
 8009e8c:	e734      	b.n	8009cf8 <_dtoa_r+0x720>
 8009e8e:	9e07      	ldr	r6, [sp, #28]
 8009e90:	9d04      	ldr	r5, [sp, #16]
 8009e92:	9f08      	ldr	r7, [sp, #32]
 8009e94:	e73b      	b.n	8009d0e <_dtoa_r+0x736>
 8009e96:	9a07      	ldr	r2, [sp, #28]
 8009e98:	e767      	b.n	8009d6a <_dtoa_r+0x792>
 8009e9a:	9b06      	ldr	r3, [sp, #24]
 8009e9c:	2b01      	cmp	r3, #1
 8009e9e:	dc18      	bgt.n	8009ed2 <_dtoa_r+0x8fa>
 8009ea0:	f1ba 0f00 	cmp.w	sl, #0
 8009ea4:	d115      	bne.n	8009ed2 <_dtoa_r+0x8fa>
 8009ea6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009eaa:	b993      	cbnz	r3, 8009ed2 <_dtoa_r+0x8fa>
 8009eac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009eb0:	0d1b      	lsrs	r3, r3, #20
 8009eb2:	051b      	lsls	r3, r3, #20
 8009eb4:	b183      	cbz	r3, 8009ed8 <_dtoa_r+0x900>
 8009eb6:	9b04      	ldr	r3, [sp, #16]
 8009eb8:	3301      	adds	r3, #1
 8009eba:	9304      	str	r3, [sp, #16]
 8009ebc:	9b05      	ldr	r3, [sp, #20]
 8009ebe:	3301      	adds	r3, #1
 8009ec0:	9305      	str	r3, [sp, #20]
 8009ec2:	f04f 0801 	mov.w	r8, #1
 8009ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f47f af6a 	bne.w	8009da2 <_dtoa_r+0x7ca>
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e76f      	b.n	8009db2 <_dtoa_r+0x7da>
 8009ed2:	f04f 0800 	mov.w	r8, #0
 8009ed6:	e7f6      	b.n	8009ec6 <_dtoa_r+0x8ee>
 8009ed8:	4698      	mov	r8, r3
 8009eda:	e7f4      	b.n	8009ec6 <_dtoa_r+0x8ee>
 8009edc:	f43f af7d 	beq.w	8009dda <_dtoa_r+0x802>
 8009ee0:	4618      	mov	r0, r3
 8009ee2:	301c      	adds	r0, #28
 8009ee4:	e772      	b.n	8009dcc <_dtoa_r+0x7f4>
 8009ee6:	9b03      	ldr	r3, [sp, #12]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	dc37      	bgt.n	8009f5c <_dtoa_r+0x984>
 8009eec:	9b06      	ldr	r3, [sp, #24]
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	dd34      	ble.n	8009f5c <_dtoa_r+0x984>
 8009ef2:	9b03      	ldr	r3, [sp, #12]
 8009ef4:	9302      	str	r3, [sp, #8]
 8009ef6:	9b02      	ldr	r3, [sp, #8]
 8009ef8:	b96b      	cbnz	r3, 8009f16 <_dtoa_r+0x93e>
 8009efa:	4631      	mov	r1, r6
 8009efc:	2205      	movs	r2, #5
 8009efe:	4620      	mov	r0, r4
 8009f00:	f000 fc06 	bl	800a710 <__multadd>
 8009f04:	4601      	mov	r1, r0
 8009f06:	4606      	mov	r6, r0
 8009f08:	ee18 0a10 	vmov	r0, s16
 8009f0c:	f000 fe20 	bl	800ab50 <__mcmp>
 8009f10:	2800      	cmp	r0, #0
 8009f12:	f73f adbb 	bgt.w	8009a8c <_dtoa_r+0x4b4>
 8009f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f18:	9d01      	ldr	r5, [sp, #4]
 8009f1a:	43db      	mvns	r3, r3
 8009f1c:	9300      	str	r3, [sp, #0]
 8009f1e:	f04f 0800 	mov.w	r8, #0
 8009f22:	4631      	mov	r1, r6
 8009f24:	4620      	mov	r0, r4
 8009f26:	f000 fbd1 	bl	800a6cc <_Bfree>
 8009f2a:	2f00      	cmp	r7, #0
 8009f2c:	f43f aea4 	beq.w	8009c78 <_dtoa_r+0x6a0>
 8009f30:	f1b8 0f00 	cmp.w	r8, #0
 8009f34:	d005      	beq.n	8009f42 <_dtoa_r+0x96a>
 8009f36:	45b8      	cmp	r8, r7
 8009f38:	d003      	beq.n	8009f42 <_dtoa_r+0x96a>
 8009f3a:	4641      	mov	r1, r8
 8009f3c:	4620      	mov	r0, r4
 8009f3e:	f000 fbc5 	bl	800a6cc <_Bfree>
 8009f42:	4639      	mov	r1, r7
 8009f44:	4620      	mov	r0, r4
 8009f46:	f000 fbc1 	bl	800a6cc <_Bfree>
 8009f4a:	e695      	b.n	8009c78 <_dtoa_r+0x6a0>
 8009f4c:	2600      	movs	r6, #0
 8009f4e:	4637      	mov	r7, r6
 8009f50:	e7e1      	b.n	8009f16 <_dtoa_r+0x93e>
 8009f52:	9700      	str	r7, [sp, #0]
 8009f54:	4637      	mov	r7, r6
 8009f56:	e599      	b.n	8009a8c <_dtoa_r+0x4b4>
 8009f58:	40240000 	.word	0x40240000
 8009f5c:	9b08      	ldr	r3, [sp, #32]
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	f000 80ca 	beq.w	800a0f8 <_dtoa_r+0xb20>
 8009f64:	9b03      	ldr	r3, [sp, #12]
 8009f66:	9302      	str	r3, [sp, #8]
 8009f68:	2d00      	cmp	r5, #0
 8009f6a:	dd05      	ble.n	8009f78 <_dtoa_r+0x9a0>
 8009f6c:	4639      	mov	r1, r7
 8009f6e:	462a      	mov	r2, r5
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 fd7d 	bl	800aa70 <__lshift>
 8009f76:	4607      	mov	r7, r0
 8009f78:	f1b8 0f00 	cmp.w	r8, #0
 8009f7c:	d05b      	beq.n	800a036 <_dtoa_r+0xa5e>
 8009f7e:	6879      	ldr	r1, [r7, #4]
 8009f80:	4620      	mov	r0, r4
 8009f82:	f000 fb63 	bl	800a64c <_Balloc>
 8009f86:	4605      	mov	r5, r0
 8009f88:	b928      	cbnz	r0, 8009f96 <_dtoa_r+0x9be>
 8009f8a:	4b87      	ldr	r3, [pc, #540]	; (800a1a8 <_dtoa_r+0xbd0>)
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009f92:	f7ff bb3b 	b.w	800960c <_dtoa_r+0x34>
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	3202      	adds	r2, #2
 8009f9a:	0092      	lsls	r2, r2, #2
 8009f9c:	f107 010c 	add.w	r1, r7, #12
 8009fa0:	300c      	adds	r0, #12
 8009fa2:	f000 fb45 	bl	800a630 <memcpy>
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	4629      	mov	r1, r5
 8009faa:	4620      	mov	r0, r4
 8009fac:	f000 fd60 	bl	800aa70 <__lshift>
 8009fb0:	9b01      	ldr	r3, [sp, #4]
 8009fb2:	f103 0901 	add.w	r9, r3, #1
 8009fb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009fba:	4413      	add	r3, r2
 8009fbc:	9305      	str	r3, [sp, #20]
 8009fbe:	f00a 0301 	and.w	r3, sl, #1
 8009fc2:	46b8      	mov	r8, r7
 8009fc4:	9304      	str	r3, [sp, #16]
 8009fc6:	4607      	mov	r7, r0
 8009fc8:	4631      	mov	r1, r6
 8009fca:	ee18 0a10 	vmov	r0, s16
 8009fce:	f7ff fa77 	bl	80094c0 <quorem>
 8009fd2:	4641      	mov	r1, r8
 8009fd4:	9002      	str	r0, [sp, #8]
 8009fd6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009fda:	ee18 0a10 	vmov	r0, s16
 8009fde:	f000 fdb7 	bl	800ab50 <__mcmp>
 8009fe2:	463a      	mov	r2, r7
 8009fe4:	9003      	str	r0, [sp, #12]
 8009fe6:	4631      	mov	r1, r6
 8009fe8:	4620      	mov	r0, r4
 8009fea:	f000 fdcd 	bl	800ab88 <__mdiff>
 8009fee:	68c2      	ldr	r2, [r0, #12]
 8009ff0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	bb02      	cbnz	r2, 800a03a <_dtoa_r+0xa62>
 8009ff8:	4601      	mov	r1, r0
 8009ffa:	ee18 0a10 	vmov	r0, s16
 8009ffe:	f000 fda7 	bl	800ab50 <__mcmp>
 800a002:	4602      	mov	r2, r0
 800a004:	4629      	mov	r1, r5
 800a006:	4620      	mov	r0, r4
 800a008:	9207      	str	r2, [sp, #28]
 800a00a:	f000 fb5f 	bl	800a6cc <_Bfree>
 800a00e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a012:	ea43 0102 	orr.w	r1, r3, r2
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	430b      	orrs	r3, r1
 800a01a:	464d      	mov	r5, r9
 800a01c:	d10f      	bne.n	800a03e <_dtoa_r+0xa66>
 800a01e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a022:	d02a      	beq.n	800a07a <_dtoa_r+0xaa2>
 800a024:	9b03      	ldr	r3, [sp, #12]
 800a026:	2b00      	cmp	r3, #0
 800a028:	dd02      	ble.n	800a030 <_dtoa_r+0xa58>
 800a02a:	9b02      	ldr	r3, [sp, #8]
 800a02c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a030:	f88b a000 	strb.w	sl, [fp]
 800a034:	e775      	b.n	8009f22 <_dtoa_r+0x94a>
 800a036:	4638      	mov	r0, r7
 800a038:	e7ba      	b.n	8009fb0 <_dtoa_r+0x9d8>
 800a03a:	2201      	movs	r2, #1
 800a03c:	e7e2      	b.n	800a004 <_dtoa_r+0xa2c>
 800a03e:	9b03      	ldr	r3, [sp, #12]
 800a040:	2b00      	cmp	r3, #0
 800a042:	db04      	blt.n	800a04e <_dtoa_r+0xa76>
 800a044:	9906      	ldr	r1, [sp, #24]
 800a046:	430b      	orrs	r3, r1
 800a048:	9904      	ldr	r1, [sp, #16]
 800a04a:	430b      	orrs	r3, r1
 800a04c:	d122      	bne.n	800a094 <_dtoa_r+0xabc>
 800a04e:	2a00      	cmp	r2, #0
 800a050:	ddee      	ble.n	800a030 <_dtoa_r+0xa58>
 800a052:	ee18 1a10 	vmov	r1, s16
 800a056:	2201      	movs	r2, #1
 800a058:	4620      	mov	r0, r4
 800a05a:	f000 fd09 	bl	800aa70 <__lshift>
 800a05e:	4631      	mov	r1, r6
 800a060:	ee08 0a10 	vmov	s16, r0
 800a064:	f000 fd74 	bl	800ab50 <__mcmp>
 800a068:	2800      	cmp	r0, #0
 800a06a:	dc03      	bgt.n	800a074 <_dtoa_r+0xa9c>
 800a06c:	d1e0      	bne.n	800a030 <_dtoa_r+0xa58>
 800a06e:	f01a 0f01 	tst.w	sl, #1
 800a072:	d0dd      	beq.n	800a030 <_dtoa_r+0xa58>
 800a074:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a078:	d1d7      	bne.n	800a02a <_dtoa_r+0xa52>
 800a07a:	2339      	movs	r3, #57	; 0x39
 800a07c:	f88b 3000 	strb.w	r3, [fp]
 800a080:	462b      	mov	r3, r5
 800a082:	461d      	mov	r5, r3
 800a084:	3b01      	subs	r3, #1
 800a086:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a08a:	2a39      	cmp	r2, #57	; 0x39
 800a08c:	d071      	beq.n	800a172 <_dtoa_r+0xb9a>
 800a08e:	3201      	adds	r2, #1
 800a090:	701a      	strb	r2, [r3, #0]
 800a092:	e746      	b.n	8009f22 <_dtoa_r+0x94a>
 800a094:	2a00      	cmp	r2, #0
 800a096:	dd07      	ble.n	800a0a8 <_dtoa_r+0xad0>
 800a098:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a09c:	d0ed      	beq.n	800a07a <_dtoa_r+0xaa2>
 800a09e:	f10a 0301 	add.w	r3, sl, #1
 800a0a2:	f88b 3000 	strb.w	r3, [fp]
 800a0a6:	e73c      	b.n	8009f22 <_dtoa_r+0x94a>
 800a0a8:	9b05      	ldr	r3, [sp, #20]
 800a0aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a0ae:	4599      	cmp	r9, r3
 800a0b0:	d047      	beq.n	800a142 <_dtoa_r+0xb6a>
 800a0b2:	ee18 1a10 	vmov	r1, s16
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	220a      	movs	r2, #10
 800a0ba:	4620      	mov	r0, r4
 800a0bc:	f000 fb28 	bl	800a710 <__multadd>
 800a0c0:	45b8      	cmp	r8, r7
 800a0c2:	ee08 0a10 	vmov	s16, r0
 800a0c6:	f04f 0300 	mov.w	r3, #0
 800a0ca:	f04f 020a 	mov.w	r2, #10
 800a0ce:	4641      	mov	r1, r8
 800a0d0:	4620      	mov	r0, r4
 800a0d2:	d106      	bne.n	800a0e2 <_dtoa_r+0xb0a>
 800a0d4:	f000 fb1c 	bl	800a710 <__multadd>
 800a0d8:	4680      	mov	r8, r0
 800a0da:	4607      	mov	r7, r0
 800a0dc:	f109 0901 	add.w	r9, r9, #1
 800a0e0:	e772      	b.n	8009fc8 <_dtoa_r+0x9f0>
 800a0e2:	f000 fb15 	bl	800a710 <__multadd>
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	4680      	mov	r8, r0
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	220a      	movs	r2, #10
 800a0ee:	4620      	mov	r0, r4
 800a0f0:	f000 fb0e 	bl	800a710 <__multadd>
 800a0f4:	4607      	mov	r7, r0
 800a0f6:	e7f1      	b.n	800a0dc <_dtoa_r+0xb04>
 800a0f8:	9b03      	ldr	r3, [sp, #12]
 800a0fa:	9302      	str	r3, [sp, #8]
 800a0fc:	9d01      	ldr	r5, [sp, #4]
 800a0fe:	ee18 0a10 	vmov	r0, s16
 800a102:	4631      	mov	r1, r6
 800a104:	f7ff f9dc 	bl	80094c0 <quorem>
 800a108:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a10c:	9b01      	ldr	r3, [sp, #4]
 800a10e:	f805 ab01 	strb.w	sl, [r5], #1
 800a112:	1aea      	subs	r2, r5, r3
 800a114:	9b02      	ldr	r3, [sp, #8]
 800a116:	4293      	cmp	r3, r2
 800a118:	dd09      	ble.n	800a12e <_dtoa_r+0xb56>
 800a11a:	ee18 1a10 	vmov	r1, s16
 800a11e:	2300      	movs	r3, #0
 800a120:	220a      	movs	r2, #10
 800a122:	4620      	mov	r0, r4
 800a124:	f000 faf4 	bl	800a710 <__multadd>
 800a128:	ee08 0a10 	vmov	s16, r0
 800a12c:	e7e7      	b.n	800a0fe <_dtoa_r+0xb26>
 800a12e:	9b02      	ldr	r3, [sp, #8]
 800a130:	2b00      	cmp	r3, #0
 800a132:	bfc8      	it	gt
 800a134:	461d      	movgt	r5, r3
 800a136:	9b01      	ldr	r3, [sp, #4]
 800a138:	bfd8      	it	le
 800a13a:	2501      	movle	r5, #1
 800a13c:	441d      	add	r5, r3
 800a13e:	f04f 0800 	mov.w	r8, #0
 800a142:	ee18 1a10 	vmov	r1, s16
 800a146:	2201      	movs	r2, #1
 800a148:	4620      	mov	r0, r4
 800a14a:	f000 fc91 	bl	800aa70 <__lshift>
 800a14e:	4631      	mov	r1, r6
 800a150:	ee08 0a10 	vmov	s16, r0
 800a154:	f000 fcfc 	bl	800ab50 <__mcmp>
 800a158:	2800      	cmp	r0, #0
 800a15a:	dc91      	bgt.n	800a080 <_dtoa_r+0xaa8>
 800a15c:	d102      	bne.n	800a164 <_dtoa_r+0xb8c>
 800a15e:	f01a 0f01 	tst.w	sl, #1
 800a162:	d18d      	bne.n	800a080 <_dtoa_r+0xaa8>
 800a164:	462b      	mov	r3, r5
 800a166:	461d      	mov	r5, r3
 800a168:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a16c:	2a30      	cmp	r2, #48	; 0x30
 800a16e:	d0fa      	beq.n	800a166 <_dtoa_r+0xb8e>
 800a170:	e6d7      	b.n	8009f22 <_dtoa_r+0x94a>
 800a172:	9a01      	ldr	r2, [sp, #4]
 800a174:	429a      	cmp	r2, r3
 800a176:	d184      	bne.n	800a082 <_dtoa_r+0xaaa>
 800a178:	9b00      	ldr	r3, [sp, #0]
 800a17a:	3301      	adds	r3, #1
 800a17c:	9300      	str	r3, [sp, #0]
 800a17e:	2331      	movs	r3, #49	; 0x31
 800a180:	7013      	strb	r3, [r2, #0]
 800a182:	e6ce      	b.n	8009f22 <_dtoa_r+0x94a>
 800a184:	4b09      	ldr	r3, [pc, #36]	; (800a1ac <_dtoa_r+0xbd4>)
 800a186:	f7ff ba95 	b.w	80096b4 <_dtoa_r+0xdc>
 800a18a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	f47f aa6e 	bne.w	800966e <_dtoa_r+0x96>
 800a192:	4b07      	ldr	r3, [pc, #28]	; (800a1b0 <_dtoa_r+0xbd8>)
 800a194:	f7ff ba8e 	b.w	80096b4 <_dtoa_r+0xdc>
 800a198:	9b02      	ldr	r3, [sp, #8]
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	dcae      	bgt.n	800a0fc <_dtoa_r+0xb24>
 800a19e:	9b06      	ldr	r3, [sp, #24]
 800a1a0:	2b02      	cmp	r3, #2
 800a1a2:	f73f aea8 	bgt.w	8009ef6 <_dtoa_r+0x91e>
 800a1a6:	e7a9      	b.n	800a0fc <_dtoa_r+0xb24>
 800a1a8:	0800bbbd 	.word	0x0800bbbd
 800a1ac:	0800b980 	.word	0x0800b980
 800a1b0:	0800bb55 	.word	0x0800bb55

0800a1b4 <__sflush_r>:
 800a1b4:	898a      	ldrh	r2, [r1, #12]
 800a1b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1ba:	4605      	mov	r5, r0
 800a1bc:	0710      	lsls	r0, r2, #28
 800a1be:	460c      	mov	r4, r1
 800a1c0:	d458      	bmi.n	800a274 <__sflush_r+0xc0>
 800a1c2:	684b      	ldr	r3, [r1, #4]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	dc05      	bgt.n	800a1d4 <__sflush_r+0x20>
 800a1c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	dc02      	bgt.n	800a1d4 <__sflush_r+0x20>
 800a1ce:	2000      	movs	r0, #0
 800a1d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a1d6:	2e00      	cmp	r6, #0
 800a1d8:	d0f9      	beq.n	800a1ce <__sflush_r+0x1a>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a1e0:	682f      	ldr	r7, [r5, #0]
 800a1e2:	602b      	str	r3, [r5, #0]
 800a1e4:	d032      	beq.n	800a24c <__sflush_r+0x98>
 800a1e6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a1e8:	89a3      	ldrh	r3, [r4, #12]
 800a1ea:	075a      	lsls	r2, r3, #29
 800a1ec:	d505      	bpl.n	800a1fa <__sflush_r+0x46>
 800a1ee:	6863      	ldr	r3, [r4, #4]
 800a1f0:	1ac0      	subs	r0, r0, r3
 800a1f2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a1f4:	b10b      	cbz	r3, 800a1fa <__sflush_r+0x46>
 800a1f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a1f8:	1ac0      	subs	r0, r0, r3
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	4602      	mov	r2, r0
 800a1fe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a200:	6a21      	ldr	r1, [r4, #32]
 800a202:	4628      	mov	r0, r5
 800a204:	47b0      	blx	r6
 800a206:	1c43      	adds	r3, r0, #1
 800a208:	89a3      	ldrh	r3, [r4, #12]
 800a20a:	d106      	bne.n	800a21a <__sflush_r+0x66>
 800a20c:	6829      	ldr	r1, [r5, #0]
 800a20e:	291d      	cmp	r1, #29
 800a210:	d82c      	bhi.n	800a26c <__sflush_r+0xb8>
 800a212:	4a2a      	ldr	r2, [pc, #168]	; (800a2bc <__sflush_r+0x108>)
 800a214:	40ca      	lsrs	r2, r1
 800a216:	07d6      	lsls	r6, r2, #31
 800a218:	d528      	bpl.n	800a26c <__sflush_r+0xb8>
 800a21a:	2200      	movs	r2, #0
 800a21c:	6062      	str	r2, [r4, #4]
 800a21e:	04d9      	lsls	r1, r3, #19
 800a220:	6922      	ldr	r2, [r4, #16]
 800a222:	6022      	str	r2, [r4, #0]
 800a224:	d504      	bpl.n	800a230 <__sflush_r+0x7c>
 800a226:	1c42      	adds	r2, r0, #1
 800a228:	d101      	bne.n	800a22e <__sflush_r+0x7a>
 800a22a:	682b      	ldr	r3, [r5, #0]
 800a22c:	b903      	cbnz	r3, 800a230 <__sflush_r+0x7c>
 800a22e:	6560      	str	r0, [r4, #84]	; 0x54
 800a230:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a232:	602f      	str	r7, [r5, #0]
 800a234:	2900      	cmp	r1, #0
 800a236:	d0ca      	beq.n	800a1ce <__sflush_r+0x1a>
 800a238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a23c:	4299      	cmp	r1, r3
 800a23e:	d002      	beq.n	800a246 <__sflush_r+0x92>
 800a240:	4628      	mov	r0, r5
 800a242:	f000 fd9d 	bl	800ad80 <_free_r>
 800a246:	2000      	movs	r0, #0
 800a248:	6360      	str	r0, [r4, #52]	; 0x34
 800a24a:	e7c1      	b.n	800a1d0 <__sflush_r+0x1c>
 800a24c:	6a21      	ldr	r1, [r4, #32]
 800a24e:	2301      	movs	r3, #1
 800a250:	4628      	mov	r0, r5
 800a252:	47b0      	blx	r6
 800a254:	1c41      	adds	r1, r0, #1
 800a256:	d1c7      	bne.n	800a1e8 <__sflush_r+0x34>
 800a258:	682b      	ldr	r3, [r5, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d0c4      	beq.n	800a1e8 <__sflush_r+0x34>
 800a25e:	2b1d      	cmp	r3, #29
 800a260:	d001      	beq.n	800a266 <__sflush_r+0xb2>
 800a262:	2b16      	cmp	r3, #22
 800a264:	d101      	bne.n	800a26a <__sflush_r+0xb6>
 800a266:	602f      	str	r7, [r5, #0]
 800a268:	e7b1      	b.n	800a1ce <__sflush_r+0x1a>
 800a26a:	89a3      	ldrh	r3, [r4, #12]
 800a26c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a270:	81a3      	strh	r3, [r4, #12]
 800a272:	e7ad      	b.n	800a1d0 <__sflush_r+0x1c>
 800a274:	690f      	ldr	r7, [r1, #16]
 800a276:	2f00      	cmp	r7, #0
 800a278:	d0a9      	beq.n	800a1ce <__sflush_r+0x1a>
 800a27a:	0793      	lsls	r3, r2, #30
 800a27c:	680e      	ldr	r6, [r1, #0]
 800a27e:	bf08      	it	eq
 800a280:	694b      	ldreq	r3, [r1, #20]
 800a282:	600f      	str	r7, [r1, #0]
 800a284:	bf18      	it	ne
 800a286:	2300      	movne	r3, #0
 800a288:	eba6 0807 	sub.w	r8, r6, r7
 800a28c:	608b      	str	r3, [r1, #8]
 800a28e:	f1b8 0f00 	cmp.w	r8, #0
 800a292:	dd9c      	ble.n	800a1ce <__sflush_r+0x1a>
 800a294:	6a21      	ldr	r1, [r4, #32]
 800a296:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a298:	4643      	mov	r3, r8
 800a29a:	463a      	mov	r2, r7
 800a29c:	4628      	mov	r0, r5
 800a29e:	47b0      	blx	r6
 800a2a0:	2800      	cmp	r0, #0
 800a2a2:	dc06      	bgt.n	800a2b2 <__sflush_r+0xfe>
 800a2a4:	89a3      	ldrh	r3, [r4, #12]
 800a2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2aa:	81a3      	strh	r3, [r4, #12]
 800a2ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a2b0:	e78e      	b.n	800a1d0 <__sflush_r+0x1c>
 800a2b2:	4407      	add	r7, r0
 800a2b4:	eba8 0800 	sub.w	r8, r8, r0
 800a2b8:	e7e9      	b.n	800a28e <__sflush_r+0xda>
 800a2ba:	bf00      	nop
 800a2bc:	20400001 	.word	0x20400001

0800a2c0 <_fflush_r>:
 800a2c0:	b538      	push	{r3, r4, r5, lr}
 800a2c2:	690b      	ldr	r3, [r1, #16]
 800a2c4:	4605      	mov	r5, r0
 800a2c6:	460c      	mov	r4, r1
 800a2c8:	b913      	cbnz	r3, 800a2d0 <_fflush_r+0x10>
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	4628      	mov	r0, r5
 800a2ce:	bd38      	pop	{r3, r4, r5, pc}
 800a2d0:	b118      	cbz	r0, 800a2da <_fflush_r+0x1a>
 800a2d2:	6983      	ldr	r3, [r0, #24]
 800a2d4:	b90b      	cbnz	r3, 800a2da <_fflush_r+0x1a>
 800a2d6:	f000 f887 	bl	800a3e8 <__sinit>
 800a2da:	4b14      	ldr	r3, [pc, #80]	; (800a32c <_fflush_r+0x6c>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d11b      	bne.n	800a318 <_fflush_r+0x58>
 800a2e0:	686c      	ldr	r4, [r5, #4]
 800a2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d0ef      	beq.n	800a2ca <_fflush_r+0xa>
 800a2ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a2ec:	07d0      	lsls	r0, r2, #31
 800a2ee:	d404      	bmi.n	800a2fa <_fflush_r+0x3a>
 800a2f0:	0599      	lsls	r1, r3, #22
 800a2f2:	d402      	bmi.n	800a2fa <_fflush_r+0x3a>
 800a2f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a2f6:	f000 f92c 	bl	800a552 <__retarget_lock_acquire_recursive>
 800a2fa:	4628      	mov	r0, r5
 800a2fc:	4621      	mov	r1, r4
 800a2fe:	f7ff ff59 	bl	800a1b4 <__sflush_r>
 800a302:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a304:	07da      	lsls	r2, r3, #31
 800a306:	4605      	mov	r5, r0
 800a308:	d4e0      	bmi.n	800a2cc <_fflush_r+0xc>
 800a30a:	89a3      	ldrh	r3, [r4, #12]
 800a30c:	059b      	lsls	r3, r3, #22
 800a30e:	d4dd      	bmi.n	800a2cc <_fflush_r+0xc>
 800a310:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a312:	f000 f91f 	bl	800a554 <__retarget_lock_release_recursive>
 800a316:	e7d9      	b.n	800a2cc <_fflush_r+0xc>
 800a318:	4b05      	ldr	r3, [pc, #20]	; (800a330 <_fflush_r+0x70>)
 800a31a:	429c      	cmp	r4, r3
 800a31c:	d101      	bne.n	800a322 <_fflush_r+0x62>
 800a31e:	68ac      	ldr	r4, [r5, #8]
 800a320:	e7df      	b.n	800a2e2 <_fflush_r+0x22>
 800a322:	4b04      	ldr	r3, [pc, #16]	; (800a334 <_fflush_r+0x74>)
 800a324:	429c      	cmp	r4, r3
 800a326:	bf08      	it	eq
 800a328:	68ec      	ldreq	r4, [r5, #12]
 800a32a:	e7da      	b.n	800a2e2 <_fflush_r+0x22>
 800a32c:	0800bbf0 	.word	0x0800bbf0
 800a330:	0800bc10 	.word	0x0800bc10
 800a334:	0800bbd0 	.word	0x0800bbd0

0800a338 <std>:
 800a338:	2300      	movs	r3, #0
 800a33a:	b510      	push	{r4, lr}
 800a33c:	4604      	mov	r4, r0
 800a33e:	e9c0 3300 	strd	r3, r3, [r0]
 800a342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a346:	6083      	str	r3, [r0, #8]
 800a348:	8181      	strh	r1, [r0, #12]
 800a34a:	6643      	str	r3, [r0, #100]	; 0x64
 800a34c:	81c2      	strh	r2, [r0, #14]
 800a34e:	6183      	str	r3, [r0, #24]
 800a350:	4619      	mov	r1, r3
 800a352:	2208      	movs	r2, #8
 800a354:	305c      	adds	r0, #92	; 0x5c
 800a356:	f7fe f9b9 	bl	80086cc <memset>
 800a35a:	4b05      	ldr	r3, [pc, #20]	; (800a370 <std+0x38>)
 800a35c:	6263      	str	r3, [r4, #36]	; 0x24
 800a35e:	4b05      	ldr	r3, [pc, #20]	; (800a374 <std+0x3c>)
 800a360:	62a3      	str	r3, [r4, #40]	; 0x28
 800a362:	4b05      	ldr	r3, [pc, #20]	; (800a378 <std+0x40>)
 800a364:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a366:	4b05      	ldr	r3, [pc, #20]	; (800a37c <std+0x44>)
 800a368:	6224      	str	r4, [r4, #32]
 800a36a:	6323      	str	r3, [r4, #48]	; 0x30
 800a36c:	bd10      	pop	{r4, pc}
 800a36e:	bf00      	nop
 800a370:	0800b4cd 	.word	0x0800b4cd
 800a374:	0800b4ef 	.word	0x0800b4ef
 800a378:	0800b527 	.word	0x0800b527
 800a37c:	0800b54b 	.word	0x0800b54b

0800a380 <_cleanup_r>:
 800a380:	4901      	ldr	r1, [pc, #4]	; (800a388 <_cleanup_r+0x8>)
 800a382:	f000 b8c1 	b.w	800a508 <_fwalk_reent>
 800a386:	bf00      	nop
 800a388:	0800a2c1 	.word	0x0800a2c1

0800a38c <__sfmoreglue>:
 800a38c:	b570      	push	{r4, r5, r6, lr}
 800a38e:	2268      	movs	r2, #104	; 0x68
 800a390:	1e4d      	subs	r5, r1, #1
 800a392:	4355      	muls	r5, r2
 800a394:	460e      	mov	r6, r1
 800a396:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a39a:	f000 fd5d 	bl	800ae58 <_malloc_r>
 800a39e:	4604      	mov	r4, r0
 800a3a0:	b140      	cbz	r0, 800a3b4 <__sfmoreglue+0x28>
 800a3a2:	2100      	movs	r1, #0
 800a3a4:	e9c0 1600 	strd	r1, r6, [r0]
 800a3a8:	300c      	adds	r0, #12
 800a3aa:	60a0      	str	r0, [r4, #8]
 800a3ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a3b0:	f7fe f98c 	bl	80086cc <memset>
 800a3b4:	4620      	mov	r0, r4
 800a3b6:	bd70      	pop	{r4, r5, r6, pc}

0800a3b8 <__sfp_lock_acquire>:
 800a3b8:	4801      	ldr	r0, [pc, #4]	; (800a3c0 <__sfp_lock_acquire+0x8>)
 800a3ba:	f000 b8ca 	b.w	800a552 <__retarget_lock_acquire_recursive>
 800a3be:	bf00      	nop
 800a3c0:	200004fd 	.word	0x200004fd

0800a3c4 <__sfp_lock_release>:
 800a3c4:	4801      	ldr	r0, [pc, #4]	; (800a3cc <__sfp_lock_release+0x8>)
 800a3c6:	f000 b8c5 	b.w	800a554 <__retarget_lock_release_recursive>
 800a3ca:	bf00      	nop
 800a3cc:	200004fd 	.word	0x200004fd

0800a3d0 <__sinit_lock_acquire>:
 800a3d0:	4801      	ldr	r0, [pc, #4]	; (800a3d8 <__sinit_lock_acquire+0x8>)
 800a3d2:	f000 b8be 	b.w	800a552 <__retarget_lock_acquire_recursive>
 800a3d6:	bf00      	nop
 800a3d8:	200004fe 	.word	0x200004fe

0800a3dc <__sinit_lock_release>:
 800a3dc:	4801      	ldr	r0, [pc, #4]	; (800a3e4 <__sinit_lock_release+0x8>)
 800a3de:	f000 b8b9 	b.w	800a554 <__retarget_lock_release_recursive>
 800a3e2:	bf00      	nop
 800a3e4:	200004fe 	.word	0x200004fe

0800a3e8 <__sinit>:
 800a3e8:	b510      	push	{r4, lr}
 800a3ea:	4604      	mov	r4, r0
 800a3ec:	f7ff fff0 	bl	800a3d0 <__sinit_lock_acquire>
 800a3f0:	69a3      	ldr	r3, [r4, #24]
 800a3f2:	b11b      	cbz	r3, 800a3fc <__sinit+0x14>
 800a3f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a3f8:	f7ff bff0 	b.w	800a3dc <__sinit_lock_release>
 800a3fc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a400:	6523      	str	r3, [r4, #80]	; 0x50
 800a402:	4b13      	ldr	r3, [pc, #76]	; (800a450 <__sinit+0x68>)
 800a404:	4a13      	ldr	r2, [pc, #76]	; (800a454 <__sinit+0x6c>)
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	62a2      	str	r2, [r4, #40]	; 0x28
 800a40a:	42a3      	cmp	r3, r4
 800a40c:	bf04      	itt	eq
 800a40e:	2301      	moveq	r3, #1
 800a410:	61a3      	streq	r3, [r4, #24]
 800a412:	4620      	mov	r0, r4
 800a414:	f000 f820 	bl	800a458 <__sfp>
 800a418:	6060      	str	r0, [r4, #4]
 800a41a:	4620      	mov	r0, r4
 800a41c:	f000 f81c 	bl	800a458 <__sfp>
 800a420:	60a0      	str	r0, [r4, #8]
 800a422:	4620      	mov	r0, r4
 800a424:	f000 f818 	bl	800a458 <__sfp>
 800a428:	2200      	movs	r2, #0
 800a42a:	60e0      	str	r0, [r4, #12]
 800a42c:	2104      	movs	r1, #4
 800a42e:	6860      	ldr	r0, [r4, #4]
 800a430:	f7ff ff82 	bl	800a338 <std>
 800a434:	68a0      	ldr	r0, [r4, #8]
 800a436:	2201      	movs	r2, #1
 800a438:	2109      	movs	r1, #9
 800a43a:	f7ff ff7d 	bl	800a338 <std>
 800a43e:	68e0      	ldr	r0, [r4, #12]
 800a440:	2202      	movs	r2, #2
 800a442:	2112      	movs	r1, #18
 800a444:	f7ff ff78 	bl	800a338 <std>
 800a448:	2301      	movs	r3, #1
 800a44a:	61a3      	str	r3, [r4, #24]
 800a44c:	e7d2      	b.n	800a3f4 <__sinit+0xc>
 800a44e:	bf00      	nop
 800a450:	0800b96c 	.word	0x0800b96c
 800a454:	0800a381 	.word	0x0800a381

0800a458 <__sfp>:
 800a458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a45a:	4607      	mov	r7, r0
 800a45c:	f7ff ffac 	bl	800a3b8 <__sfp_lock_acquire>
 800a460:	4b1e      	ldr	r3, [pc, #120]	; (800a4dc <__sfp+0x84>)
 800a462:	681e      	ldr	r6, [r3, #0]
 800a464:	69b3      	ldr	r3, [r6, #24]
 800a466:	b913      	cbnz	r3, 800a46e <__sfp+0x16>
 800a468:	4630      	mov	r0, r6
 800a46a:	f7ff ffbd 	bl	800a3e8 <__sinit>
 800a46e:	3648      	adds	r6, #72	; 0x48
 800a470:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a474:	3b01      	subs	r3, #1
 800a476:	d503      	bpl.n	800a480 <__sfp+0x28>
 800a478:	6833      	ldr	r3, [r6, #0]
 800a47a:	b30b      	cbz	r3, 800a4c0 <__sfp+0x68>
 800a47c:	6836      	ldr	r6, [r6, #0]
 800a47e:	e7f7      	b.n	800a470 <__sfp+0x18>
 800a480:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a484:	b9d5      	cbnz	r5, 800a4bc <__sfp+0x64>
 800a486:	4b16      	ldr	r3, [pc, #88]	; (800a4e0 <__sfp+0x88>)
 800a488:	60e3      	str	r3, [r4, #12]
 800a48a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a48e:	6665      	str	r5, [r4, #100]	; 0x64
 800a490:	f000 f85e 	bl	800a550 <__retarget_lock_init_recursive>
 800a494:	f7ff ff96 	bl	800a3c4 <__sfp_lock_release>
 800a498:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a49c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a4a0:	6025      	str	r5, [r4, #0]
 800a4a2:	61a5      	str	r5, [r4, #24]
 800a4a4:	2208      	movs	r2, #8
 800a4a6:	4629      	mov	r1, r5
 800a4a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a4ac:	f7fe f90e 	bl	80086cc <memset>
 800a4b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a4b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a4b8:	4620      	mov	r0, r4
 800a4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a4bc:	3468      	adds	r4, #104	; 0x68
 800a4be:	e7d9      	b.n	800a474 <__sfp+0x1c>
 800a4c0:	2104      	movs	r1, #4
 800a4c2:	4638      	mov	r0, r7
 800a4c4:	f7ff ff62 	bl	800a38c <__sfmoreglue>
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	6030      	str	r0, [r6, #0]
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	d1d5      	bne.n	800a47c <__sfp+0x24>
 800a4d0:	f7ff ff78 	bl	800a3c4 <__sfp_lock_release>
 800a4d4:	230c      	movs	r3, #12
 800a4d6:	603b      	str	r3, [r7, #0]
 800a4d8:	e7ee      	b.n	800a4b8 <__sfp+0x60>
 800a4da:	bf00      	nop
 800a4dc:	0800b96c 	.word	0x0800b96c
 800a4e0:	ffff0001 	.word	0xffff0001

0800a4e4 <fiprintf>:
 800a4e4:	b40e      	push	{r1, r2, r3}
 800a4e6:	b503      	push	{r0, r1, lr}
 800a4e8:	4601      	mov	r1, r0
 800a4ea:	ab03      	add	r3, sp, #12
 800a4ec:	4805      	ldr	r0, [pc, #20]	; (800a504 <fiprintf+0x20>)
 800a4ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4f2:	6800      	ldr	r0, [r0, #0]
 800a4f4:	9301      	str	r3, [sp, #4]
 800a4f6:	f000 fea9 	bl	800b24c <_vfiprintf_r>
 800a4fa:	b002      	add	sp, #8
 800a4fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a500:	b003      	add	sp, #12
 800a502:	4770      	bx	lr
 800a504:	200000f8 	.word	0x200000f8

0800a508 <_fwalk_reent>:
 800a508:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a50c:	4606      	mov	r6, r0
 800a50e:	4688      	mov	r8, r1
 800a510:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a514:	2700      	movs	r7, #0
 800a516:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a51a:	f1b9 0901 	subs.w	r9, r9, #1
 800a51e:	d505      	bpl.n	800a52c <_fwalk_reent+0x24>
 800a520:	6824      	ldr	r4, [r4, #0]
 800a522:	2c00      	cmp	r4, #0
 800a524:	d1f7      	bne.n	800a516 <_fwalk_reent+0xe>
 800a526:	4638      	mov	r0, r7
 800a528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a52c:	89ab      	ldrh	r3, [r5, #12]
 800a52e:	2b01      	cmp	r3, #1
 800a530:	d907      	bls.n	800a542 <_fwalk_reent+0x3a>
 800a532:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a536:	3301      	adds	r3, #1
 800a538:	d003      	beq.n	800a542 <_fwalk_reent+0x3a>
 800a53a:	4629      	mov	r1, r5
 800a53c:	4630      	mov	r0, r6
 800a53e:	47c0      	blx	r8
 800a540:	4307      	orrs	r7, r0
 800a542:	3568      	adds	r5, #104	; 0x68
 800a544:	e7e9      	b.n	800a51a <_fwalk_reent+0x12>
	...

0800a548 <_localeconv_r>:
 800a548:	4800      	ldr	r0, [pc, #0]	; (800a54c <_localeconv_r+0x4>)
 800a54a:	4770      	bx	lr
 800a54c:	2000024c 	.word	0x2000024c

0800a550 <__retarget_lock_init_recursive>:
 800a550:	4770      	bx	lr

0800a552 <__retarget_lock_acquire_recursive>:
 800a552:	4770      	bx	lr

0800a554 <__retarget_lock_release_recursive>:
 800a554:	4770      	bx	lr

0800a556 <__swhatbuf_r>:
 800a556:	b570      	push	{r4, r5, r6, lr}
 800a558:	460e      	mov	r6, r1
 800a55a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a55e:	2900      	cmp	r1, #0
 800a560:	b096      	sub	sp, #88	; 0x58
 800a562:	4614      	mov	r4, r2
 800a564:	461d      	mov	r5, r3
 800a566:	da08      	bge.n	800a57a <__swhatbuf_r+0x24>
 800a568:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a56c:	2200      	movs	r2, #0
 800a56e:	602a      	str	r2, [r5, #0]
 800a570:	061a      	lsls	r2, r3, #24
 800a572:	d410      	bmi.n	800a596 <__swhatbuf_r+0x40>
 800a574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a578:	e00e      	b.n	800a598 <__swhatbuf_r+0x42>
 800a57a:	466a      	mov	r2, sp
 800a57c:	f001 f814 	bl	800b5a8 <_fstat_r>
 800a580:	2800      	cmp	r0, #0
 800a582:	dbf1      	blt.n	800a568 <__swhatbuf_r+0x12>
 800a584:	9a01      	ldr	r2, [sp, #4]
 800a586:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a58a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a58e:	425a      	negs	r2, r3
 800a590:	415a      	adcs	r2, r3
 800a592:	602a      	str	r2, [r5, #0]
 800a594:	e7ee      	b.n	800a574 <__swhatbuf_r+0x1e>
 800a596:	2340      	movs	r3, #64	; 0x40
 800a598:	2000      	movs	r0, #0
 800a59a:	6023      	str	r3, [r4, #0]
 800a59c:	b016      	add	sp, #88	; 0x58
 800a59e:	bd70      	pop	{r4, r5, r6, pc}

0800a5a0 <__smakebuf_r>:
 800a5a0:	898b      	ldrh	r3, [r1, #12]
 800a5a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5a4:	079d      	lsls	r5, r3, #30
 800a5a6:	4606      	mov	r6, r0
 800a5a8:	460c      	mov	r4, r1
 800a5aa:	d507      	bpl.n	800a5bc <__smakebuf_r+0x1c>
 800a5ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5b0:	6023      	str	r3, [r4, #0]
 800a5b2:	6123      	str	r3, [r4, #16]
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	6163      	str	r3, [r4, #20]
 800a5b8:	b002      	add	sp, #8
 800a5ba:	bd70      	pop	{r4, r5, r6, pc}
 800a5bc:	ab01      	add	r3, sp, #4
 800a5be:	466a      	mov	r2, sp
 800a5c0:	f7ff ffc9 	bl	800a556 <__swhatbuf_r>
 800a5c4:	9900      	ldr	r1, [sp, #0]
 800a5c6:	4605      	mov	r5, r0
 800a5c8:	4630      	mov	r0, r6
 800a5ca:	f000 fc45 	bl	800ae58 <_malloc_r>
 800a5ce:	b948      	cbnz	r0, 800a5e4 <__smakebuf_r+0x44>
 800a5d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5d4:	059a      	lsls	r2, r3, #22
 800a5d6:	d4ef      	bmi.n	800a5b8 <__smakebuf_r+0x18>
 800a5d8:	f023 0303 	bic.w	r3, r3, #3
 800a5dc:	f043 0302 	orr.w	r3, r3, #2
 800a5e0:	81a3      	strh	r3, [r4, #12]
 800a5e2:	e7e3      	b.n	800a5ac <__smakebuf_r+0xc>
 800a5e4:	4b0d      	ldr	r3, [pc, #52]	; (800a61c <__smakebuf_r+0x7c>)
 800a5e6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a5e8:	89a3      	ldrh	r3, [r4, #12]
 800a5ea:	6020      	str	r0, [r4, #0]
 800a5ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a5f0:	81a3      	strh	r3, [r4, #12]
 800a5f2:	9b00      	ldr	r3, [sp, #0]
 800a5f4:	6163      	str	r3, [r4, #20]
 800a5f6:	9b01      	ldr	r3, [sp, #4]
 800a5f8:	6120      	str	r0, [r4, #16]
 800a5fa:	b15b      	cbz	r3, 800a614 <__smakebuf_r+0x74>
 800a5fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a600:	4630      	mov	r0, r6
 800a602:	f000 ffe3 	bl	800b5cc <_isatty_r>
 800a606:	b128      	cbz	r0, 800a614 <__smakebuf_r+0x74>
 800a608:	89a3      	ldrh	r3, [r4, #12]
 800a60a:	f023 0303 	bic.w	r3, r3, #3
 800a60e:	f043 0301 	orr.w	r3, r3, #1
 800a612:	81a3      	strh	r3, [r4, #12]
 800a614:	89a0      	ldrh	r0, [r4, #12]
 800a616:	4305      	orrs	r5, r0
 800a618:	81a5      	strh	r5, [r4, #12]
 800a61a:	e7cd      	b.n	800a5b8 <__smakebuf_r+0x18>
 800a61c:	0800a381 	.word	0x0800a381

0800a620 <malloc>:
 800a620:	4b02      	ldr	r3, [pc, #8]	; (800a62c <malloc+0xc>)
 800a622:	4601      	mov	r1, r0
 800a624:	6818      	ldr	r0, [r3, #0]
 800a626:	f000 bc17 	b.w	800ae58 <_malloc_r>
 800a62a:	bf00      	nop
 800a62c:	200000f8 	.word	0x200000f8

0800a630 <memcpy>:
 800a630:	440a      	add	r2, r1
 800a632:	4291      	cmp	r1, r2
 800a634:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a638:	d100      	bne.n	800a63c <memcpy+0xc>
 800a63a:	4770      	bx	lr
 800a63c:	b510      	push	{r4, lr}
 800a63e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a642:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a646:	4291      	cmp	r1, r2
 800a648:	d1f9      	bne.n	800a63e <memcpy+0xe>
 800a64a:	bd10      	pop	{r4, pc}

0800a64c <_Balloc>:
 800a64c:	b570      	push	{r4, r5, r6, lr}
 800a64e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a650:	4604      	mov	r4, r0
 800a652:	460d      	mov	r5, r1
 800a654:	b976      	cbnz	r6, 800a674 <_Balloc+0x28>
 800a656:	2010      	movs	r0, #16
 800a658:	f7ff ffe2 	bl	800a620 <malloc>
 800a65c:	4602      	mov	r2, r0
 800a65e:	6260      	str	r0, [r4, #36]	; 0x24
 800a660:	b920      	cbnz	r0, 800a66c <_Balloc+0x20>
 800a662:	4b18      	ldr	r3, [pc, #96]	; (800a6c4 <_Balloc+0x78>)
 800a664:	4818      	ldr	r0, [pc, #96]	; (800a6c8 <_Balloc+0x7c>)
 800a666:	2166      	movs	r1, #102	; 0x66
 800a668:	f7fe ff0c 	bl	8009484 <__assert_func>
 800a66c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a670:	6006      	str	r6, [r0, #0]
 800a672:	60c6      	str	r6, [r0, #12]
 800a674:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a676:	68f3      	ldr	r3, [r6, #12]
 800a678:	b183      	cbz	r3, 800a69c <_Balloc+0x50>
 800a67a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a67c:	68db      	ldr	r3, [r3, #12]
 800a67e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a682:	b9b8      	cbnz	r0, 800a6b4 <_Balloc+0x68>
 800a684:	2101      	movs	r1, #1
 800a686:	fa01 f605 	lsl.w	r6, r1, r5
 800a68a:	1d72      	adds	r2, r6, #5
 800a68c:	0092      	lsls	r2, r2, #2
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 fb60 	bl	800ad54 <_calloc_r>
 800a694:	b160      	cbz	r0, 800a6b0 <_Balloc+0x64>
 800a696:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a69a:	e00e      	b.n	800a6ba <_Balloc+0x6e>
 800a69c:	2221      	movs	r2, #33	; 0x21
 800a69e:	2104      	movs	r1, #4
 800a6a0:	4620      	mov	r0, r4
 800a6a2:	f000 fb57 	bl	800ad54 <_calloc_r>
 800a6a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6a8:	60f0      	str	r0, [r6, #12]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1e4      	bne.n	800a67a <_Balloc+0x2e>
 800a6b0:	2000      	movs	r0, #0
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	6802      	ldr	r2, [r0, #0]
 800a6b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6c0:	e7f7      	b.n	800a6b2 <_Balloc+0x66>
 800a6c2:	bf00      	nop
 800a6c4:	0800b9a4 	.word	0x0800b9a4
 800a6c8:	0800bc30 	.word	0x0800bc30

0800a6cc <_Bfree>:
 800a6cc:	b570      	push	{r4, r5, r6, lr}
 800a6ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6d0:	4605      	mov	r5, r0
 800a6d2:	460c      	mov	r4, r1
 800a6d4:	b976      	cbnz	r6, 800a6f4 <_Bfree+0x28>
 800a6d6:	2010      	movs	r0, #16
 800a6d8:	f7ff ffa2 	bl	800a620 <malloc>
 800a6dc:	4602      	mov	r2, r0
 800a6de:	6268      	str	r0, [r5, #36]	; 0x24
 800a6e0:	b920      	cbnz	r0, 800a6ec <_Bfree+0x20>
 800a6e2:	4b09      	ldr	r3, [pc, #36]	; (800a708 <_Bfree+0x3c>)
 800a6e4:	4809      	ldr	r0, [pc, #36]	; (800a70c <_Bfree+0x40>)
 800a6e6:	218a      	movs	r1, #138	; 0x8a
 800a6e8:	f7fe fecc 	bl	8009484 <__assert_func>
 800a6ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f0:	6006      	str	r6, [r0, #0]
 800a6f2:	60c6      	str	r6, [r0, #12]
 800a6f4:	b13c      	cbz	r4, 800a706 <_Bfree+0x3a>
 800a6f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6f8:	6862      	ldr	r2, [r4, #4]
 800a6fa:	68db      	ldr	r3, [r3, #12]
 800a6fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a700:	6021      	str	r1, [r4, #0]
 800a702:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a706:	bd70      	pop	{r4, r5, r6, pc}
 800a708:	0800b9a4 	.word	0x0800b9a4
 800a70c:	0800bc30 	.word	0x0800bc30

0800a710 <__multadd>:
 800a710:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a714:	690d      	ldr	r5, [r1, #16]
 800a716:	4607      	mov	r7, r0
 800a718:	460c      	mov	r4, r1
 800a71a:	461e      	mov	r6, r3
 800a71c:	f101 0c14 	add.w	ip, r1, #20
 800a720:	2000      	movs	r0, #0
 800a722:	f8dc 3000 	ldr.w	r3, [ip]
 800a726:	b299      	uxth	r1, r3
 800a728:	fb02 6101 	mla	r1, r2, r1, r6
 800a72c:	0c1e      	lsrs	r6, r3, #16
 800a72e:	0c0b      	lsrs	r3, r1, #16
 800a730:	fb02 3306 	mla	r3, r2, r6, r3
 800a734:	b289      	uxth	r1, r1
 800a736:	3001      	adds	r0, #1
 800a738:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a73c:	4285      	cmp	r5, r0
 800a73e:	f84c 1b04 	str.w	r1, [ip], #4
 800a742:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a746:	dcec      	bgt.n	800a722 <__multadd+0x12>
 800a748:	b30e      	cbz	r6, 800a78e <__multadd+0x7e>
 800a74a:	68a3      	ldr	r3, [r4, #8]
 800a74c:	42ab      	cmp	r3, r5
 800a74e:	dc19      	bgt.n	800a784 <__multadd+0x74>
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	4638      	mov	r0, r7
 800a754:	3101      	adds	r1, #1
 800a756:	f7ff ff79 	bl	800a64c <_Balloc>
 800a75a:	4680      	mov	r8, r0
 800a75c:	b928      	cbnz	r0, 800a76a <__multadd+0x5a>
 800a75e:	4602      	mov	r2, r0
 800a760:	4b0c      	ldr	r3, [pc, #48]	; (800a794 <__multadd+0x84>)
 800a762:	480d      	ldr	r0, [pc, #52]	; (800a798 <__multadd+0x88>)
 800a764:	21b5      	movs	r1, #181	; 0xb5
 800a766:	f7fe fe8d 	bl	8009484 <__assert_func>
 800a76a:	6922      	ldr	r2, [r4, #16]
 800a76c:	3202      	adds	r2, #2
 800a76e:	f104 010c 	add.w	r1, r4, #12
 800a772:	0092      	lsls	r2, r2, #2
 800a774:	300c      	adds	r0, #12
 800a776:	f7ff ff5b 	bl	800a630 <memcpy>
 800a77a:	4621      	mov	r1, r4
 800a77c:	4638      	mov	r0, r7
 800a77e:	f7ff ffa5 	bl	800a6cc <_Bfree>
 800a782:	4644      	mov	r4, r8
 800a784:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a788:	3501      	adds	r5, #1
 800a78a:	615e      	str	r6, [r3, #20]
 800a78c:	6125      	str	r5, [r4, #16]
 800a78e:	4620      	mov	r0, r4
 800a790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a794:	0800bbbd 	.word	0x0800bbbd
 800a798:	0800bc30 	.word	0x0800bc30

0800a79c <__hi0bits>:
 800a79c:	0c03      	lsrs	r3, r0, #16
 800a79e:	041b      	lsls	r3, r3, #16
 800a7a0:	b9d3      	cbnz	r3, 800a7d8 <__hi0bits+0x3c>
 800a7a2:	0400      	lsls	r0, r0, #16
 800a7a4:	2310      	movs	r3, #16
 800a7a6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a7aa:	bf04      	itt	eq
 800a7ac:	0200      	lsleq	r0, r0, #8
 800a7ae:	3308      	addeq	r3, #8
 800a7b0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a7b4:	bf04      	itt	eq
 800a7b6:	0100      	lsleq	r0, r0, #4
 800a7b8:	3304      	addeq	r3, #4
 800a7ba:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a7be:	bf04      	itt	eq
 800a7c0:	0080      	lsleq	r0, r0, #2
 800a7c2:	3302      	addeq	r3, #2
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	db05      	blt.n	800a7d4 <__hi0bits+0x38>
 800a7c8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a7cc:	f103 0301 	add.w	r3, r3, #1
 800a7d0:	bf08      	it	eq
 800a7d2:	2320      	moveq	r3, #32
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	4770      	bx	lr
 800a7d8:	2300      	movs	r3, #0
 800a7da:	e7e4      	b.n	800a7a6 <__hi0bits+0xa>

0800a7dc <__lo0bits>:
 800a7dc:	6803      	ldr	r3, [r0, #0]
 800a7de:	f013 0207 	ands.w	r2, r3, #7
 800a7e2:	4601      	mov	r1, r0
 800a7e4:	d00b      	beq.n	800a7fe <__lo0bits+0x22>
 800a7e6:	07da      	lsls	r2, r3, #31
 800a7e8:	d423      	bmi.n	800a832 <__lo0bits+0x56>
 800a7ea:	0798      	lsls	r0, r3, #30
 800a7ec:	bf49      	itett	mi
 800a7ee:	085b      	lsrmi	r3, r3, #1
 800a7f0:	089b      	lsrpl	r3, r3, #2
 800a7f2:	2001      	movmi	r0, #1
 800a7f4:	600b      	strmi	r3, [r1, #0]
 800a7f6:	bf5c      	itt	pl
 800a7f8:	600b      	strpl	r3, [r1, #0]
 800a7fa:	2002      	movpl	r0, #2
 800a7fc:	4770      	bx	lr
 800a7fe:	b298      	uxth	r0, r3
 800a800:	b9a8      	cbnz	r0, 800a82e <__lo0bits+0x52>
 800a802:	0c1b      	lsrs	r3, r3, #16
 800a804:	2010      	movs	r0, #16
 800a806:	b2da      	uxtb	r2, r3
 800a808:	b90a      	cbnz	r2, 800a80e <__lo0bits+0x32>
 800a80a:	3008      	adds	r0, #8
 800a80c:	0a1b      	lsrs	r3, r3, #8
 800a80e:	071a      	lsls	r2, r3, #28
 800a810:	bf04      	itt	eq
 800a812:	091b      	lsreq	r3, r3, #4
 800a814:	3004      	addeq	r0, #4
 800a816:	079a      	lsls	r2, r3, #30
 800a818:	bf04      	itt	eq
 800a81a:	089b      	lsreq	r3, r3, #2
 800a81c:	3002      	addeq	r0, #2
 800a81e:	07da      	lsls	r2, r3, #31
 800a820:	d403      	bmi.n	800a82a <__lo0bits+0x4e>
 800a822:	085b      	lsrs	r3, r3, #1
 800a824:	f100 0001 	add.w	r0, r0, #1
 800a828:	d005      	beq.n	800a836 <__lo0bits+0x5a>
 800a82a:	600b      	str	r3, [r1, #0]
 800a82c:	4770      	bx	lr
 800a82e:	4610      	mov	r0, r2
 800a830:	e7e9      	b.n	800a806 <__lo0bits+0x2a>
 800a832:	2000      	movs	r0, #0
 800a834:	4770      	bx	lr
 800a836:	2020      	movs	r0, #32
 800a838:	4770      	bx	lr
	...

0800a83c <__i2b>:
 800a83c:	b510      	push	{r4, lr}
 800a83e:	460c      	mov	r4, r1
 800a840:	2101      	movs	r1, #1
 800a842:	f7ff ff03 	bl	800a64c <_Balloc>
 800a846:	4602      	mov	r2, r0
 800a848:	b928      	cbnz	r0, 800a856 <__i2b+0x1a>
 800a84a:	4b05      	ldr	r3, [pc, #20]	; (800a860 <__i2b+0x24>)
 800a84c:	4805      	ldr	r0, [pc, #20]	; (800a864 <__i2b+0x28>)
 800a84e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a852:	f7fe fe17 	bl	8009484 <__assert_func>
 800a856:	2301      	movs	r3, #1
 800a858:	6144      	str	r4, [r0, #20]
 800a85a:	6103      	str	r3, [r0, #16]
 800a85c:	bd10      	pop	{r4, pc}
 800a85e:	bf00      	nop
 800a860:	0800bbbd 	.word	0x0800bbbd
 800a864:	0800bc30 	.word	0x0800bc30

0800a868 <__multiply>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	4691      	mov	r9, r2
 800a86e:	690a      	ldr	r2, [r1, #16]
 800a870:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a874:	429a      	cmp	r2, r3
 800a876:	bfb8      	it	lt
 800a878:	460b      	movlt	r3, r1
 800a87a:	460c      	mov	r4, r1
 800a87c:	bfbc      	itt	lt
 800a87e:	464c      	movlt	r4, r9
 800a880:	4699      	movlt	r9, r3
 800a882:	6927      	ldr	r7, [r4, #16]
 800a884:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a888:	68a3      	ldr	r3, [r4, #8]
 800a88a:	6861      	ldr	r1, [r4, #4]
 800a88c:	eb07 060a 	add.w	r6, r7, sl
 800a890:	42b3      	cmp	r3, r6
 800a892:	b085      	sub	sp, #20
 800a894:	bfb8      	it	lt
 800a896:	3101      	addlt	r1, #1
 800a898:	f7ff fed8 	bl	800a64c <_Balloc>
 800a89c:	b930      	cbnz	r0, 800a8ac <__multiply+0x44>
 800a89e:	4602      	mov	r2, r0
 800a8a0:	4b44      	ldr	r3, [pc, #272]	; (800a9b4 <__multiply+0x14c>)
 800a8a2:	4845      	ldr	r0, [pc, #276]	; (800a9b8 <__multiply+0x150>)
 800a8a4:	f240 115d 	movw	r1, #349	; 0x15d
 800a8a8:	f7fe fdec 	bl	8009484 <__assert_func>
 800a8ac:	f100 0514 	add.w	r5, r0, #20
 800a8b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a8b4:	462b      	mov	r3, r5
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	4543      	cmp	r3, r8
 800a8ba:	d321      	bcc.n	800a900 <__multiply+0x98>
 800a8bc:	f104 0314 	add.w	r3, r4, #20
 800a8c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a8c4:	f109 0314 	add.w	r3, r9, #20
 800a8c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a8cc:	9202      	str	r2, [sp, #8]
 800a8ce:	1b3a      	subs	r2, r7, r4
 800a8d0:	3a15      	subs	r2, #21
 800a8d2:	f022 0203 	bic.w	r2, r2, #3
 800a8d6:	3204      	adds	r2, #4
 800a8d8:	f104 0115 	add.w	r1, r4, #21
 800a8dc:	428f      	cmp	r7, r1
 800a8de:	bf38      	it	cc
 800a8e0:	2204      	movcc	r2, #4
 800a8e2:	9201      	str	r2, [sp, #4]
 800a8e4:	9a02      	ldr	r2, [sp, #8]
 800a8e6:	9303      	str	r3, [sp, #12]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d80c      	bhi.n	800a906 <__multiply+0x9e>
 800a8ec:	2e00      	cmp	r6, #0
 800a8ee:	dd03      	ble.n	800a8f8 <__multiply+0x90>
 800a8f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d05a      	beq.n	800a9ae <__multiply+0x146>
 800a8f8:	6106      	str	r6, [r0, #16]
 800a8fa:	b005      	add	sp, #20
 800a8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a900:	f843 2b04 	str.w	r2, [r3], #4
 800a904:	e7d8      	b.n	800a8b8 <__multiply+0x50>
 800a906:	f8b3 a000 	ldrh.w	sl, [r3]
 800a90a:	f1ba 0f00 	cmp.w	sl, #0
 800a90e:	d024      	beq.n	800a95a <__multiply+0xf2>
 800a910:	f104 0e14 	add.w	lr, r4, #20
 800a914:	46a9      	mov	r9, r5
 800a916:	f04f 0c00 	mov.w	ip, #0
 800a91a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a91e:	f8d9 1000 	ldr.w	r1, [r9]
 800a922:	fa1f fb82 	uxth.w	fp, r2
 800a926:	b289      	uxth	r1, r1
 800a928:	fb0a 110b 	mla	r1, sl, fp, r1
 800a92c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a930:	f8d9 2000 	ldr.w	r2, [r9]
 800a934:	4461      	add	r1, ip
 800a936:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a93a:	fb0a c20b 	mla	r2, sl, fp, ip
 800a93e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a942:	b289      	uxth	r1, r1
 800a944:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a948:	4577      	cmp	r7, lr
 800a94a:	f849 1b04 	str.w	r1, [r9], #4
 800a94e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a952:	d8e2      	bhi.n	800a91a <__multiply+0xb2>
 800a954:	9a01      	ldr	r2, [sp, #4]
 800a956:	f845 c002 	str.w	ip, [r5, r2]
 800a95a:	9a03      	ldr	r2, [sp, #12]
 800a95c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a960:	3304      	adds	r3, #4
 800a962:	f1b9 0f00 	cmp.w	r9, #0
 800a966:	d020      	beq.n	800a9aa <__multiply+0x142>
 800a968:	6829      	ldr	r1, [r5, #0]
 800a96a:	f104 0c14 	add.w	ip, r4, #20
 800a96e:	46ae      	mov	lr, r5
 800a970:	f04f 0a00 	mov.w	sl, #0
 800a974:	f8bc b000 	ldrh.w	fp, [ip]
 800a978:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a97c:	fb09 220b 	mla	r2, r9, fp, r2
 800a980:	4492      	add	sl, r2
 800a982:	b289      	uxth	r1, r1
 800a984:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a988:	f84e 1b04 	str.w	r1, [lr], #4
 800a98c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a990:	f8be 1000 	ldrh.w	r1, [lr]
 800a994:	0c12      	lsrs	r2, r2, #16
 800a996:	fb09 1102 	mla	r1, r9, r2, r1
 800a99a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a99e:	4567      	cmp	r7, ip
 800a9a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a9a4:	d8e6      	bhi.n	800a974 <__multiply+0x10c>
 800a9a6:	9a01      	ldr	r2, [sp, #4]
 800a9a8:	50a9      	str	r1, [r5, r2]
 800a9aa:	3504      	adds	r5, #4
 800a9ac:	e79a      	b.n	800a8e4 <__multiply+0x7c>
 800a9ae:	3e01      	subs	r6, #1
 800a9b0:	e79c      	b.n	800a8ec <__multiply+0x84>
 800a9b2:	bf00      	nop
 800a9b4:	0800bbbd 	.word	0x0800bbbd
 800a9b8:	0800bc30 	.word	0x0800bc30

0800a9bc <__pow5mult>:
 800a9bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a9c0:	4615      	mov	r5, r2
 800a9c2:	f012 0203 	ands.w	r2, r2, #3
 800a9c6:	4606      	mov	r6, r0
 800a9c8:	460f      	mov	r7, r1
 800a9ca:	d007      	beq.n	800a9dc <__pow5mult+0x20>
 800a9cc:	4c25      	ldr	r4, [pc, #148]	; (800aa64 <__pow5mult+0xa8>)
 800a9ce:	3a01      	subs	r2, #1
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a9d6:	f7ff fe9b 	bl	800a710 <__multadd>
 800a9da:	4607      	mov	r7, r0
 800a9dc:	10ad      	asrs	r5, r5, #2
 800a9de:	d03d      	beq.n	800aa5c <__pow5mult+0xa0>
 800a9e0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a9e2:	b97c      	cbnz	r4, 800aa04 <__pow5mult+0x48>
 800a9e4:	2010      	movs	r0, #16
 800a9e6:	f7ff fe1b 	bl	800a620 <malloc>
 800a9ea:	4602      	mov	r2, r0
 800a9ec:	6270      	str	r0, [r6, #36]	; 0x24
 800a9ee:	b928      	cbnz	r0, 800a9fc <__pow5mult+0x40>
 800a9f0:	4b1d      	ldr	r3, [pc, #116]	; (800aa68 <__pow5mult+0xac>)
 800a9f2:	481e      	ldr	r0, [pc, #120]	; (800aa6c <__pow5mult+0xb0>)
 800a9f4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a9f8:	f7fe fd44 	bl	8009484 <__assert_func>
 800a9fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa00:	6004      	str	r4, [r0, #0]
 800aa02:	60c4      	str	r4, [r0, #12]
 800aa04:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aa08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aa0c:	b94c      	cbnz	r4, 800aa22 <__pow5mult+0x66>
 800aa0e:	f240 2171 	movw	r1, #625	; 0x271
 800aa12:	4630      	mov	r0, r6
 800aa14:	f7ff ff12 	bl	800a83c <__i2b>
 800aa18:	2300      	movs	r3, #0
 800aa1a:	f8c8 0008 	str.w	r0, [r8, #8]
 800aa1e:	4604      	mov	r4, r0
 800aa20:	6003      	str	r3, [r0, #0]
 800aa22:	f04f 0900 	mov.w	r9, #0
 800aa26:	07eb      	lsls	r3, r5, #31
 800aa28:	d50a      	bpl.n	800aa40 <__pow5mult+0x84>
 800aa2a:	4639      	mov	r1, r7
 800aa2c:	4622      	mov	r2, r4
 800aa2e:	4630      	mov	r0, r6
 800aa30:	f7ff ff1a 	bl	800a868 <__multiply>
 800aa34:	4639      	mov	r1, r7
 800aa36:	4680      	mov	r8, r0
 800aa38:	4630      	mov	r0, r6
 800aa3a:	f7ff fe47 	bl	800a6cc <_Bfree>
 800aa3e:	4647      	mov	r7, r8
 800aa40:	106d      	asrs	r5, r5, #1
 800aa42:	d00b      	beq.n	800aa5c <__pow5mult+0xa0>
 800aa44:	6820      	ldr	r0, [r4, #0]
 800aa46:	b938      	cbnz	r0, 800aa58 <__pow5mult+0x9c>
 800aa48:	4622      	mov	r2, r4
 800aa4a:	4621      	mov	r1, r4
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f7ff ff0b 	bl	800a868 <__multiply>
 800aa52:	6020      	str	r0, [r4, #0]
 800aa54:	f8c0 9000 	str.w	r9, [r0]
 800aa58:	4604      	mov	r4, r0
 800aa5a:	e7e4      	b.n	800aa26 <__pow5mult+0x6a>
 800aa5c:	4638      	mov	r0, r7
 800aa5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa62:	bf00      	nop
 800aa64:	0800bd80 	.word	0x0800bd80
 800aa68:	0800b9a4 	.word	0x0800b9a4
 800aa6c:	0800bc30 	.word	0x0800bc30

0800aa70 <__lshift>:
 800aa70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aa74:	460c      	mov	r4, r1
 800aa76:	6849      	ldr	r1, [r1, #4]
 800aa78:	6923      	ldr	r3, [r4, #16]
 800aa7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800aa7e:	68a3      	ldr	r3, [r4, #8]
 800aa80:	4607      	mov	r7, r0
 800aa82:	4691      	mov	r9, r2
 800aa84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800aa88:	f108 0601 	add.w	r6, r8, #1
 800aa8c:	42b3      	cmp	r3, r6
 800aa8e:	db0b      	blt.n	800aaa8 <__lshift+0x38>
 800aa90:	4638      	mov	r0, r7
 800aa92:	f7ff fddb 	bl	800a64c <_Balloc>
 800aa96:	4605      	mov	r5, r0
 800aa98:	b948      	cbnz	r0, 800aaae <__lshift+0x3e>
 800aa9a:	4602      	mov	r2, r0
 800aa9c:	4b2a      	ldr	r3, [pc, #168]	; (800ab48 <__lshift+0xd8>)
 800aa9e:	482b      	ldr	r0, [pc, #172]	; (800ab4c <__lshift+0xdc>)
 800aaa0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800aaa4:	f7fe fcee 	bl	8009484 <__assert_func>
 800aaa8:	3101      	adds	r1, #1
 800aaaa:	005b      	lsls	r3, r3, #1
 800aaac:	e7ee      	b.n	800aa8c <__lshift+0x1c>
 800aaae:	2300      	movs	r3, #0
 800aab0:	f100 0114 	add.w	r1, r0, #20
 800aab4:	f100 0210 	add.w	r2, r0, #16
 800aab8:	4618      	mov	r0, r3
 800aaba:	4553      	cmp	r3, sl
 800aabc:	db37      	blt.n	800ab2e <__lshift+0xbe>
 800aabe:	6920      	ldr	r0, [r4, #16]
 800aac0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aac4:	f104 0314 	add.w	r3, r4, #20
 800aac8:	f019 091f 	ands.w	r9, r9, #31
 800aacc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aad0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aad4:	d02f      	beq.n	800ab36 <__lshift+0xc6>
 800aad6:	f1c9 0e20 	rsb	lr, r9, #32
 800aada:	468a      	mov	sl, r1
 800aadc:	f04f 0c00 	mov.w	ip, #0
 800aae0:	681a      	ldr	r2, [r3, #0]
 800aae2:	fa02 f209 	lsl.w	r2, r2, r9
 800aae6:	ea42 020c 	orr.w	r2, r2, ip
 800aaea:	f84a 2b04 	str.w	r2, [sl], #4
 800aaee:	f853 2b04 	ldr.w	r2, [r3], #4
 800aaf2:	4298      	cmp	r0, r3
 800aaf4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aaf8:	d8f2      	bhi.n	800aae0 <__lshift+0x70>
 800aafa:	1b03      	subs	r3, r0, r4
 800aafc:	3b15      	subs	r3, #21
 800aafe:	f023 0303 	bic.w	r3, r3, #3
 800ab02:	3304      	adds	r3, #4
 800ab04:	f104 0215 	add.w	r2, r4, #21
 800ab08:	4290      	cmp	r0, r2
 800ab0a:	bf38      	it	cc
 800ab0c:	2304      	movcc	r3, #4
 800ab0e:	f841 c003 	str.w	ip, [r1, r3]
 800ab12:	f1bc 0f00 	cmp.w	ip, #0
 800ab16:	d001      	beq.n	800ab1c <__lshift+0xac>
 800ab18:	f108 0602 	add.w	r6, r8, #2
 800ab1c:	3e01      	subs	r6, #1
 800ab1e:	4638      	mov	r0, r7
 800ab20:	612e      	str	r6, [r5, #16]
 800ab22:	4621      	mov	r1, r4
 800ab24:	f7ff fdd2 	bl	800a6cc <_Bfree>
 800ab28:	4628      	mov	r0, r5
 800ab2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab2e:	f842 0f04 	str.w	r0, [r2, #4]!
 800ab32:	3301      	adds	r3, #1
 800ab34:	e7c1      	b.n	800aaba <__lshift+0x4a>
 800ab36:	3904      	subs	r1, #4
 800ab38:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab3c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ab40:	4298      	cmp	r0, r3
 800ab42:	d8f9      	bhi.n	800ab38 <__lshift+0xc8>
 800ab44:	e7ea      	b.n	800ab1c <__lshift+0xac>
 800ab46:	bf00      	nop
 800ab48:	0800bbbd 	.word	0x0800bbbd
 800ab4c:	0800bc30 	.word	0x0800bc30

0800ab50 <__mcmp>:
 800ab50:	b530      	push	{r4, r5, lr}
 800ab52:	6902      	ldr	r2, [r0, #16]
 800ab54:	690c      	ldr	r4, [r1, #16]
 800ab56:	1b12      	subs	r2, r2, r4
 800ab58:	d10e      	bne.n	800ab78 <__mcmp+0x28>
 800ab5a:	f100 0314 	add.w	r3, r0, #20
 800ab5e:	3114      	adds	r1, #20
 800ab60:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ab64:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ab68:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ab6c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ab70:	42a5      	cmp	r5, r4
 800ab72:	d003      	beq.n	800ab7c <__mcmp+0x2c>
 800ab74:	d305      	bcc.n	800ab82 <__mcmp+0x32>
 800ab76:	2201      	movs	r2, #1
 800ab78:	4610      	mov	r0, r2
 800ab7a:	bd30      	pop	{r4, r5, pc}
 800ab7c:	4283      	cmp	r3, r0
 800ab7e:	d3f3      	bcc.n	800ab68 <__mcmp+0x18>
 800ab80:	e7fa      	b.n	800ab78 <__mcmp+0x28>
 800ab82:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab86:	e7f7      	b.n	800ab78 <__mcmp+0x28>

0800ab88 <__mdiff>:
 800ab88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab8c:	460c      	mov	r4, r1
 800ab8e:	4606      	mov	r6, r0
 800ab90:	4611      	mov	r1, r2
 800ab92:	4620      	mov	r0, r4
 800ab94:	4690      	mov	r8, r2
 800ab96:	f7ff ffdb 	bl	800ab50 <__mcmp>
 800ab9a:	1e05      	subs	r5, r0, #0
 800ab9c:	d110      	bne.n	800abc0 <__mdiff+0x38>
 800ab9e:	4629      	mov	r1, r5
 800aba0:	4630      	mov	r0, r6
 800aba2:	f7ff fd53 	bl	800a64c <_Balloc>
 800aba6:	b930      	cbnz	r0, 800abb6 <__mdiff+0x2e>
 800aba8:	4b3a      	ldr	r3, [pc, #232]	; (800ac94 <__mdiff+0x10c>)
 800abaa:	4602      	mov	r2, r0
 800abac:	f240 2132 	movw	r1, #562	; 0x232
 800abb0:	4839      	ldr	r0, [pc, #228]	; (800ac98 <__mdiff+0x110>)
 800abb2:	f7fe fc67 	bl	8009484 <__assert_func>
 800abb6:	2301      	movs	r3, #1
 800abb8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800abbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abc0:	bfa4      	itt	ge
 800abc2:	4643      	movge	r3, r8
 800abc4:	46a0      	movge	r8, r4
 800abc6:	4630      	mov	r0, r6
 800abc8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800abcc:	bfa6      	itte	ge
 800abce:	461c      	movge	r4, r3
 800abd0:	2500      	movge	r5, #0
 800abd2:	2501      	movlt	r5, #1
 800abd4:	f7ff fd3a 	bl	800a64c <_Balloc>
 800abd8:	b920      	cbnz	r0, 800abe4 <__mdiff+0x5c>
 800abda:	4b2e      	ldr	r3, [pc, #184]	; (800ac94 <__mdiff+0x10c>)
 800abdc:	4602      	mov	r2, r0
 800abde:	f44f 7110 	mov.w	r1, #576	; 0x240
 800abe2:	e7e5      	b.n	800abb0 <__mdiff+0x28>
 800abe4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800abe8:	6926      	ldr	r6, [r4, #16]
 800abea:	60c5      	str	r5, [r0, #12]
 800abec:	f104 0914 	add.w	r9, r4, #20
 800abf0:	f108 0514 	add.w	r5, r8, #20
 800abf4:	f100 0e14 	add.w	lr, r0, #20
 800abf8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800abfc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac00:	f108 0210 	add.w	r2, r8, #16
 800ac04:	46f2      	mov	sl, lr
 800ac06:	2100      	movs	r1, #0
 800ac08:	f859 3b04 	ldr.w	r3, [r9], #4
 800ac0c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ac10:	fa1f f883 	uxth.w	r8, r3
 800ac14:	fa11 f18b 	uxtah	r1, r1, fp
 800ac18:	0c1b      	lsrs	r3, r3, #16
 800ac1a:	eba1 0808 	sub.w	r8, r1, r8
 800ac1e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ac22:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ac26:	fa1f f888 	uxth.w	r8, r8
 800ac2a:	1419      	asrs	r1, r3, #16
 800ac2c:	454e      	cmp	r6, r9
 800ac2e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ac32:	f84a 3b04 	str.w	r3, [sl], #4
 800ac36:	d8e7      	bhi.n	800ac08 <__mdiff+0x80>
 800ac38:	1b33      	subs	r3, r6, r4
 800ac3a:	3b15      	subs	r3, #21
 800ac3c:	f023 0303 	bic.w	r3, r3, #3
 800ac40:	3304      	adds	r3, #4
 800ac42:	3415      	adds	r4, #21
 800ac44:	42a6      	cmp	r6, r4
 800ac46:	bf38      	it	cc
 800ac48:	2304      	movcc	r3, #4
 800ac4a:	441d      	add	r5, r3
 800ac4c:	4473      	add	r3, lr
 800ac4e:	469e      	mov	lr, r3
 800ac50:	462e      	mov	r6, r5
 800ac52:	4566      	cmp	r6, ip
 800ac54:	d30e      	bcc.n	800ac74 <__mdiff+0xec>
 800ac56:	f10c 0203 	add.w	r2, ip, #3
 800ac5a:	1b52      	subs	r2, r2, r5
 800ac5c:	f022 0203 	bic.w	r2, r2, #3
 800ac60:	3d03      	subs	r5, #3
 800ac62:	45ac      	cmp	ip, r5
 800ac64:	bf38      	it	cc
 800ac66:	2200      	movcc	r2, #0
 800ac68:	441a      	add	r2, r3
 800ac6a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ac6e:	b17b      	cbz	r3, 800ac90 <__mdiff+0x108>
 800ac70:	6107      	str	r7, [r0, #16]
 800ac72:	e7a3      	b.n	800abbc <__mdiff+0x34>
 800ac74:	f856 8b04 	ldr.w	r8, [r6], #4
 800ac78:	fa11 f288 	uxtah	r2, r1, r8
 800ac7c:	1414      	asrs	r4, r2, #16
 800ac7e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ac82:	b292      	uxth	r2, r2
 800ac84:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ac88:	f84e 2b04 	str.w	r2, [lr], #4
 800ac8c:	1421      	asrs	r1, r4, #16
 800ac8e:	e7e0      	b.n	800ac52 <__mdiff+0xca>
 800ac90:	3f01      	subs	r7, #1
 800ac92:	e7ea      	b.n	800ac6a <__mdiff+0xe2>
 800ac94:	0800bbbd 	.word	0x0800bbbd
 800ac98:	0800bc30 	.word	0x0800bc30

0800ac9c <__d2b>:
 800ac9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aca0:	4689      	mov	r9, r1
 800aca2:	2101      	movs	r1, #1
 800aca4:	ec57 6b10 	vmov	r6, r7, d0
 800aca8:	4690      	mov	r8, r2
 800acaa:	f7ff fccf 	bl	800a64c <_Balloc>
 800acae:	4604      	mov	r4, r0
 800acb0:	b930      	cbnz	r0, 800acc0 <__d2b+0x24>
 800acb2:	4602      	mov	r2, r0
 800acb4:	4b25      	ldr	r3, [pc, #148]	; (800ad4c <__d2b+0xb0>)
 800acb6:	4826      	ldr	r0, [pc, #152]	; (800ad50 <__d2b+0xb4>)
 800acb8:	f240 310a 	movw	r1, #778	; 0x30a
 800acbc:	f7fe fbe2 	bl	8009484 <__assert_func>
 800acc0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800acc4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800acc8:	bb35      	cbnz	r5, 800ad18 <__d2b+0x7c>
 800acca:	2e00      	cmp	r6, #0
 800accc:	9301      	str	r3, [sp, #4]
 800acce:	d028      	beq.n	800ad22 <__d2b+0x86>
 800acd0:	4668      	mov	r0, sp
 800acd2:	9600      	str	r6, [sp, #0]
 800acd4:	f7ff fd82 	bl	800a7dc <__lo0bits>
 800acd8:	9900      	ldr	r1, [sp, #0]
 800acda:	b300      	cbz	r0, 800ad1e <__d2b+0x82>
 800acdc:	9a01      	ldr	r2, [sp, #4]
 800acde:	f1c0 0320 	rsb	r3, r0, #32
 800ace2:	fa02 f303 	lsl.w	r3, r2, r3
 800ace6:	430b      	orrs	r3, r1
 800ace8:	40c2      	lsrs	r2, r0
 800acea:	6163      	str	r3, [r4, #20]
 800acec:	9201      	str	r2, [sp, #4]
 800acee:	9b01      	ldr	r3, [sp, #4]
 800acf0:	61a3      	str	r3, [r4, #24]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	bf14      	ite	ne
 800acf6:	2202      	movne	r2, #2
 800acf8:	2201      	moveq	r2, #1
 800acfa:	6122      	str	r2, [r4, #16]
 800acfc:	b1d5      	cbz	r5, 800ad34 <__d2b+0x98>
 800acfe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ad02:	4405      	add	r5, r0
 800ad04:	f8c9 5000 	str.w	r5, [r9]
 800ad08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ad0c:	f8c8 0000 	str.w	r0, [r8]
 800ad10:	4620      	mov	r0, r4
 800ad12:	b003      	add	sp, #12
 800ad14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ad18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ad1c:	e7d5      	b.n	800acca <__d2b+0x2e>
 800ad1e:	6161      	str	r1, [r4, #20]
 800ad20:	e7e5      	b.n	800acee <__d2b+0x52>
 800ad22:	a801      	add	r0, sp, #4
 800ad24:	f7ff fd5a 	bl	800a7dc <__lo0bits>
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	6163      	str	r3, [r4, #20]
 800ad2c:	2201      	movs	r2, #1
 800ad2e:	6122      	str	r2, [r4, #16]
 800ad30:	3020      	adds	r0, #32
 800ad32:	e7e3      	b.n	800acfc <__d2b+0x60>
 800ad34:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ad38:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ad3c:	f8c9 0000 	str.w	r0, [r9]
 800ad40:	6918      	ldr	r0, [r3, #16]
 800ad42:	f7ff fd2b 	bl	800a79c <__hi0bits>
 800ad46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ad4a:	e7df      	b.n	800ad0c <__d2b+0x70>
 800ad4c:	0800bbbd 	.word	0x0800bbbd
 800ad50:	0800bc30 	.word	0x0800bc30

0800ad54 <_calloc_r>:
 800ad54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad56:	fba1 2402 	umull	r2, r4, r1, r2
 800ad5a:	b94c      	cbnz	r4, 800ad70 <_calloc_r+0x1c>
 800ad5c:	4611      	mov	r1, r2
 800ad5e:	9201      	str	r2, [sp, #4]
 800ad60:	f000 f87a 	bl	800ae58 <_malloc_r>
 800ad64:	9a01      	ldr	r2, [sp, #4]
 800ad66:	4605      	mov	r5, r0
 800ad68:	b930      	cbnz	r0, 800ad78 <_calloc_r+0x24>
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	b003      	add	sp, #12
 800ad6e:	bd30      	pop	{r4, r5, pc}
 800ad70:	220c      	movs	r2, #12
 800ad72:	6002      	str	r2, [r0, #0]
 800ad74:	2500      	movs	r5, #0
 800ad76:	e7f8      	b.n	800ad6a <_calloc_r+0x16>
 800ad78:	4621      	mov	r1, r4
 800ad7a:	f7fd fca7 	bl	80086cc <memset>
 800ad7e:	e7f4      	b.n	800ad6a <_calloc_r+0x16>

0800ad80 <_free_r>:
 800ad80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ad82:	2900      	cmp	r1, #0
 800ad84:	d044      	beq.n	800ae10 <_free_r+0x90>
 800ad86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ad8a:	9001      	str	r0, [sp, #4]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	f1a1 0404 	sub.w	r4, r1, #4
 800ad92:	bfb8      	it	lt
 800ad94:	18e4      	addlt	r4, r4, r3
 800ad96:	f000 fc67 	bl	800b668 <__malloc_lock>
 800ad9a:	4a1e      	ldr	r2, [pc, #120]	; (800ae14 <_free_r+0x94>)
 800ad9c:	9801      	ldr	r0, [sp, #4]
 800ad9e:	6813      	ldr	r3, [r2, #0]
 800ada0:	b933      	cbnz	r3, 800adb0 <_free_r+0x30>
 800ada2:	6063      	str	r3, [r4, #4]
 800ada4:	6014      	str	r4, [r2, #0]
 800ada6:	b003      	add	sp, #12
 800ada8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800adac:	f000 bc62 	b.w	800b674 <__malloc_unlock>
 800adb0:	42a3      	cmp	r3, r4
 800adb2:	d908      	bls.n	800adc6 <_free_r+0x46>
 800adb4:	6825      	ldr	r5, [r4, #0]
 800adb6:	1961      	adds	r1, r4, r5
 800adb8:	428b      	cmp	r3, r1
 800adba:	bf01      	itttt	eq
 800adbc:	6819      	ldreq	r1, [r3, #0]
 800adbe:	685b      	ldreq	r3, [r3, #4]
 800adc0:	1949      	addeq	r1, r1, r5
 800adc2:	6021      	streq	r1, [r4, #0]
 800adc4:	e7ed      	b.n	800ada2 <_free_r+0x22>
 800adc6:	461a      	mov	r2, r3
 800adc8:	685b      	ldr	r3, [r3, #4]
 800adca:	b10b      	cbz	r3, 800add0 <_free_r+0x50>
 800adcc:	42a3      	cmp	r3, r4
 800adce:	d9fa      	bls.n	800adc6 <_free_r+0x46>
 800add0:	6811      	ldr	r1, [r2, #0]
 800add2:	1855      	adds	r5, r2, r1
 800add4:	42a5      	cmp	r5, r4
 800add6:	d10b      	bne.n	800adf0 <_free_r+0x70>
 800add8:	6824      	ldr	r4, [r4, #0]
 800adda:	4421      	add	r1, r4
 800addc:	1854      	adds	r4, r2, r1
 800adde:	42a3      	cmp	r3, r4
 800ade0:	6011      	str	r1, [r2, #0]
 800ade2:	d1e0      	bne.n	800ada6 <_free_r+0x26>
 800ade4:	681c      	ldr	r4, [r3, #0]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	6053      	str	r3, [r2, #4]
 800adea:	4421      	add	r1, r4
 800adec:	6011      	str	r1, [r2, #0]
 800adee:	e7da      	b.n	800ada6 <_free_r+0x26>
 800adf0:	d902      	bls.n	800adf8 <_free_r+0x78>
 800adf2:	230c      	movs	r3, #12
 800adf4:	6003      	str	r3, [r0, #0]
 800adf6:	e7d6      	b.n	800ada6 <_free_r+0x26>
 800adf8:	6825      	ldr	r5, [r4, #0]
 800adfa:	1961      	adds	r1, r4, r5
 800adfc:	428b      	cmp	r3, r1
 800adfe:	bf04      	itt	eq
 800ae00:	6819      	ldreq	r1, [r3, #0]
 800ae02:	685b      	ldreq	r3, [r3, #4]
 800ae04:	6063      	str	r3, [r4, #4]
 800ae06:	bf04      	itt	eq
 800ae08:	1949      	addeq	r1, r1, r5
 800ae0a:	6021      	streq	r1, [r4, #0]
 800ae0c:	6054      	str	r4, [r2, #4]
 800ae0e:	e7ca      	b.n	800ada6 <_free_r+0x26>
 800ae10:	b003      	add	sp, #12
 800ae12:	bd30      	pop	{r4, r5, pc}
 800ae14:	20000500 	.word	0x20000500

0800ae18 <sbrk_aligned>:
 800ae18:	b570      	push	{r4, r5, r6, lr}
 800ae1a:	4e0e      	ldr	r6, [pc, #56]	; (800ae54 <sbrk_aligned+0x3c>)
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	6831      	ldr	r1, [r6, #0]
 800ae20:	4605      	mov	r5, r0
 800ae22:	b911      	cbnz	r1, 800ae2a <sbrk_aligned+0x12>
 800ae24:	f000 fb42 	bl	800b4ac <_sbrk_r>
 800ae28:	6030      	str	r0, [r6, #0]
 800ae2a:	4621      	mov	r1, r4
 800ae2c:	4628      	mov	r0, r5
 800ae2e:	f000 fb3d 	bl	800b4ac <_sbrk_r>
 800ae32:	1c43      	adds	r3, r0, #1
 800ae34:	d00a      	beq.n	800ae4c <sbrk_aligned+0x34>
 800ae36:	1cc4      	adds	r4, r0, #3
 800ae38:	f024 0403 	bic.w	r4, r4, #3
 800ae3c:	42a0      	cmp	r0, r4
 800ae3e:	d007      	beq.n	800ae50 <sbrk_aligned+0x38>
 800ae40:	1a21      	subs	r1, r4, r0
 800ae42:	4628      	mov	r0, r5
 800ae44:	f000 fb32 	bl	800b4ac <_sbrk_r>
 800ae48:	3001      	adds	r0, #1
 800ae4a:	d101      	bne.n	800ae50 <sbrk_aligned+0x38>
 800ae4c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800ae50:	4620      	mov	r0, r4
 800ae52:	bd70      	pop	{r4, r5, r6, pc}
 800ae54:	20000504 	.word	0x20000504

0800ae58 <_malloc_r>:
 800ae58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae5c:	1ccd      	adds	r5, r1, #3
 800ae5e:	f025 0503 	bic.w	r5, r5, #3
 800ae62:	3508      	adds	r5, #8
 800ae64:	2d0c      	cmp	r5, #12
 800ae66:	bf38      	it	cc
 800ae68:	250c      	movcc	r5, #12
 800ae6a:	2d00      	cmp	r5, #0
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	db01      	blt.n	800ae74 <_malloc_r+0x1c>
 800ae70:	42a9      	cmp	r1, r5
 800ae72:	d905      	bls.n	800ae80 <_malloc_r+0x28>
 800ae74:	230c      	movs	r3, #12
 800ae76:	603b      	str	r3, [r7, #0]
 800ae78:	2600      	movs	r6, #0
 800ae7a:	4630      	mov	r0, r6
 800ae7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae80:	4e2e      	ldr	r6, [pc, #184]	; (800af3c <_malloc_r+0xe4>)
 800ae82:	f000 fbf1 	bl	800b668 <__malloc_lock>
 800ae86:	6833      	ldr	r3, [r6, #0]
 800ae88:	461c      	mov	r4, r3
 800ae8a:	bb34      	cbnz	r4, 800aeda <_malloc_r+0x82>
 800ae8c:	4629      	mov	r1, r5
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f7ff ffc2 	bl	800ae18 <sbrk_aligned>
 800ae94:	1c43      	adds	r3, r0, #1
 800ae96:	4604      	mov	r4, r0
 800ae98:	d14d      	bne.n	800af36 <_malloc_r+0xde>
 800ae9a:	6834      	ldr	r4, [r6, #0]
 800ae9c:	4626      	mov	r6, r4
 800ae9e:	2e00      	cmp	r6, #0
 800aea0:	d140      	bne.n	800af24 <_malloc_r+0xcc>
 800aea2:	6823      	ldr	r3, [r4, #0]
 800aea4:	4631      	mov	r1, r6
 800aea6:	4638      	mov	r0, r7
 800aea8:	eb04 0803 	add.w	r8, r4, r3
 800aeac:	f000 fafe 	bl	800b4ac <_sbrk_r>
 800aeb0:	4580      	cmp	r8, r0
 800aeb2:	d13a      	bne.n	800af2a <_malloc_r+0xd2>
 800aeb4:	6821      	ldr	r1, [r4, #0]
 800aeb6:	3503      	adds	r5, #3
 800aeb8:	1a6d      	subs	r5, r5, r1
 800aeba:	f025 0503 	bic.w	r5, r5, #3
 800aebe:	3508      	adds	r5, #8
 800aec0:	2d0c      	cmp	r5, #12
 800aec2:	bf38      	it	cc
 800aec4:	250c      	movcc	r5, #12
 800aec6:	4629      	mov	r1, r5
 800aec8:	4638      	mov	r0, r7
 800aeca:	f7ff ffa5 	bl	800ae18 <sbrk_aligned>
 800aece:	3001      	adds	r0, #1
 800aed0:	d02b      	beq.n	800af2a <_malloc_r+0xd2>
 800aed2:	6823      	ldr	r3, [r4, #0]
 800aed4:	442b      	add	r3, r5
 800aed6:	6023      	str	r3, [r4, #0]
 800aed8:	e00e      	b.n	800aef8 <_malloc_r+0xa0>
 800aeda:	6822      	ldr	r2, [r4, #0]
 800aedc:	1b52      	subs	r2, r2, r5
 800aede:	d41e      	bmi.n	800af1e <_malloc_r+0xc6>
 800aee0:	2a0b      	cmp	r2, #11
 800aee2:	d916      	bls.n	800af12 <_malloc_r+0xba>
 800aee4:	1961      	adds	r1, r4, r5
 800aee6:	42a3      	cmp	r3, r4
 800aee8:	6025      	str	r5, [r4, #0]
 800aeea:	bf18      	it	ne
 800aeec:	6059      	strne	r1, [r3, #4]
 800aeee:	6863      	ldr	r3, [r4, #4]
 800aef0:	bf08      	it	eq
 800aef2:	6031      	streq	r1, [r6, #0]
 800aef4:	5162      	str	r2, [r4, r5]
 800aef6:	604b      	str	r3, [r1, #4]
 800aef8:	4638      	mov	r0, r7
 800aefa:	f104 060b 	add.w	r6, r4, #11
 800aefe:	f000 fbb9 	bl	800b674 <__malloc_unlock>
 800af02:	f026 0607 	bic.w	r6, r6, #7
 800af06:	1d23      	adds	r3, r4, #4
 800af08:	1af2      	subs	r2, r6, r3
 800af0a:	d0b6      	beq.n	800ae7a <_malloc_r+0x22>
 800af0c:	1b9b      	subs	r3, r3, r6
 800af0e:	50a3      	str	r3, [r4, r2]
 800af10:	e7b3      	b.n	800ae7a <_malloc_r+0x22>
 800af12:	6862      	ldr	r2, [r4, #4]
 800af14:	42a3      	cmp	r3, r4
 800af16:	bf0c      	ite	eq
 800af18:	6032      	streq	r2, [r6, #0]
 800af1a:	605a      	strne	r2, [r3, #4]
 800af1c:	e7ec      	b.n	800aef8 <_malloc_r+0xa0>
 800af1e:	4623      	mov	r3, r4
 800af20:	6864      	ldr	r4, [r4, #4]
 800af22:	e7b2      	b.n	800ae8a <_malloc_r+0x32>
 800af24:	4634      	mov	r4, r6
 800af26:	6876      	ldr	r6, [r6, #4]
 800af28:	e7b9      	b.n	800ae9e <_malloc_r+0x46>
 800af2a:	230c      	movs	r3, #12
 800af2c:	603b      	str	r3, [r7, #0]
 800af2e:	4638      	mov	r0, r7
 800af30:	f000 fba0 	bl	800b674 <__malloc_unlock>
 800af34:	e7a1      	b.n	800ae7a <_malloc_r+0x22>
 800af36:	6025      	str	r5, [r4, #0]
 800af38:	e7de      	b.n	800aef8 <_malloc_r+0xa0>
 800af3a:	bf00      	nop
 800af3c:	20000500 	.word	0x20000500

0800af40 <__ssputs_r>:
 800af40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af44:	688e      	ldr	r6, [r1, #8]
 800af46:	429e      	cmp	r6, r3
 800af48:	4682      	mov	sl, r0
 800af4a:	460c      	mov	r4, r1
 800af4c:	4690      	mov	r8, r2
 800af4e:	461f      	mov	r7, r3
 800af50:	d838      	bhi.n	800afc4 <__ssputs_r+0x84>
 800af52:	898a      	ldrh	r2, [r1, #12]
 800af54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800af58:	d032      	beq.n	800afc0 <__ssputs_r+0x80>
 800af5a:	6825      	ldr	r5, [r4, #0]
 800af5c:	6909      	ldr	r1, [r1, #16]
 800af5e:	eba5 0901 	sub.w	r9, r5, r1
 800af62:	6965      	ldr	r5, [r4, #20]
 800af64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800af68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800af6c:	3301      	adds	r3, #1
 800af6e:	444b      	add	r3, r9
 800af70:	106d      	asrs	r5, r5, #1
 800af72:	429d      	cmp	r5, r3
 800af74:	bf38      	it	cc
 800af76:	461d      	movcc	r5, r3
 800af78:	0553      	lsls	r3, r2, #21
 800af7a:	d531      	bpl.n	800afe0 <__ssputs_r+0xa0>
 800af7c:	4629      	mov	r1, r5
 800af7e:	f7ff ff6b 	bl	800ae58 <_malloc_r>
 800af82:	4606      	mov	r6, r0
 800af84:	b950      	cbnz	r0, 800af9c <__ssputs_r+0x5c>
 800af86:	230c      	movs	r3, #12
 800af88:	f8ca 3000 	str.w	r3, [sl]
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af92:	81a3      	strh	r3, [r4, #12]
 800af94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800af98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af9c:	6921      	ldr	r1, [r4, #16]
 800af9e:	464a      	mov	r2, r9
 800afa0:	f7ff fb46 	bl	800a630 <memcpy>
 800afa4:	89a3      	ldrh	r3, [r4, #12]
 800afa6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800afaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800afae:	81a3      	strh	r3, [r4, #12]
 800afb0:	6126      	str	r6, [r4, #16]
 800afb2:	6165      	str	r5, [r4, #20]
 800afb4:	444e      	add	r6, r9
 800afb6:	eba5 0509 	sub.w	r5, r5, r9
 800afba:	6026      	str	r6, [r4, #0]
 800afbc:	60a5      	str	r5, [r4, #8]
 800afbe:	463e      	mov	r6, r7
 800afc0:	42be      	cmp	r6, r7
 800afc2:	d900      	bls.n	800afc6 <__ssputs_r+0x86>
 800afc4:	463e      	mov	r6, r7
 800afc6:	6820      	ldr	r0, [r4, #0]
 800afc8:	4632      	mov	r2, r6
 800afca:	4641      	mov	r1, r8
 800afcc:	f000 fb32 	bl	800b634 <memmove>
 800afd0:	68a3      	ldr	r3, [r4, #8]
 800afd2:	1b9b      	subs	r3, r3, r6
 800afd4:	60a3      	str	r3, [r4, #8]
 800afd6:	6823      	ldr	r3, [r4, #0]
 800afd8:	4433      	add	r3, r6
 800afda:	6023      	str	r3, [r4, #0]
 800afdc:	2000      	movs	r0, #0
 800afde:	e7db      	b.n	800af98 <__ssputs_r+0x58>
 800afe0:	462a      	mov	r2, r5
 800afe2:	f000 fb4d 	bl	800b680 <_realloc_r>
 800afe6:	4606      	mov	r6, r0
 800afe8:	2800      	cmp	r0, #0
 800afea:	d1e1      	bne.n	800afb0 <__ssputs_r+0x70>
 800afec:	6921      	ldr	r1, [r4, #16]
 800afee:	4650      	mov	r0, sl
 800aff0:	f7ff fec6 	bl	800ad80 <_free_r>
 800aff4:	e7c7      	b.n	800af86 <__ssputs_r+0x46>
	...

0800aff8 <_svfiprintf_r>:
 800aff8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affc:	4698      	mov	r8, r3
 800affe:	898b      	ldrh	r3, [r1, #12]
 800b000:	061b      	lsls	r3, r3, #24
 800b002:	b09d      	sub	sp, #116	; 0x74
 800b004:	4607      	mov	r7, r0
 800b006:	460d      	mov	r5, r1
 800b008:	4614      	mov	r4, r2
 800b00a:	d50e      	bpl.n	800b02a <_svfiprintf_r+0x32>
 800b00c:	690b      	ldr	r3, [r1, #16]
 800b00e:	b963      	cbnz	r3, 800b02a <_svfiprintf_r+0x32>
 800b010:	2140      	movs	r1, #64	; 0x40
 800b012:	f7ff ff21 	bl	800ae58 <_malloc_r>
 800b016:	6028      	str	r0, [r5, #0]
 800b018:	6128      	str	r0, [r5, #16]
 800b01a:	b920      	cbnz	r0, 800b026 <_svfiprintf_r+0x2e>
 800b01c:	230c      	movs	r3, #12
 800b01e:	603b      	str	r3, [r7, #0]
 800b020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b024:	e0d1      	b.n	800b1ca <_svfiprintf_r+0x1d2>
 800b026:	2340      	movs	r3, #64	; 0x40
 800b028:	616b      	str	r3, [r5, #20]
 800b02a:	2300      	movs	r3, #0
 800b02c:	9309      	str	r3, [sp, #36]	; 0x24
 800b02e:	2320      	movs	r3, #32
 800b030:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b034:	f8cd 800c 	str.w	r8, [sp, #12]
 800b038:	2330      	movs	r3, #48	; 0x30
 800b03a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b1e4 <_svfiprintf_r+0x1ec>
 800b03e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b042:	f04f 0901 	mov.w	r9, #1
 800b046:	4623      	mov	r3, r4
 800b048:	469a      	mov	sl, r3
 800b04a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b04e:	b10a      	cbz	r2, 800b054 <_svfiprintf_r+0x5c>
 800b050:	2a25      	cmp	r2, #37	; 0x25
 800b052:	d1f9      	bne.n	800b048 <_svfiprintf_r+0x50>
 800b054:	ebba 0b04 	subs.w	fp, sl, r4
 800b058:	d00b      	beq.n	800b072 <_svfiprintf_r+0x7a>
 800b05a:	465b      	mov	r3, fp
 800b05c:	4622      	mov	r2, r4
 800b05e:	4629      	mov	r1, r5
 800b060:	4638      	mov	r0, r7
 800b062:	f7ff ff6d 	bl	800af40 <__ssputs_r>
 800b066:	3001      	adds	r0, #1
 800b068:	f000 80aa 	beq.w	800b1c0 <_svfiprintf_r+0x1c8>
 800b06c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b06e:	445a      	add	r2, fp
 800b070:	9209      	str	r2, [sp, #36]	; 0x24
 800b072:	f89a 3000 	ldrb.w	r3, [sl]
 800b076:	2b00      	cmp	r3, #0
 800b078:	f000 80a2 	beq.w	800b1c0 <_svfiprintf_r+0x1c8>
 800b07c:	2300      	movs	r3, #0
 800b07e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b082:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b086:	f10a 0a01 	add.w	sl, sl, #1
 800b08a:	9304      	str	r3, [sp, #16]
 800b08c:	9307      	str	r3, [sp, #28]
 800b08e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b092:	931a      	str	r3, [sp, #104]	; 0x68
 800b094:	4654      	mov	r4, sl
 800b096:	2205      	movs	r2, #5
 800b098:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b09c:	4851      	ldr	r0, [pc, #324]	; (800b1e4 <_svfiprintf_r+0x1ec>)
 800b09e:	f7f5 f8d7 	bl	8000250 <memchr>
 800b0a2:	9a04      	ldr	r2, [sp, #16]
 800b0a4:	b9d8      	cbnz	r0, 800b0de <_svfiprintf_r+0xe6>
 800b0a6:	06d0      	lsls	r0, r2, #27
 800b0a8:	bf44      	itt	mi
 800b0aa:	2320      	movmi	r3, #32
 800b0ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0b0:	0711      	lsls	r1, r2, #28
 800b0b2:	bf44      	itt	mi
 800b0b4:	232b      	movmi	r3, #43	; 0x2b
 800b0b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b0ba:	f89a 3000 	ldrb.w	r3, [sl]
 800b0be:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c0:	d015      	beq.n	800b0ee <_svfiprintf_r+0xf6>
 800b0c2:	9a07      	ldr	r2, [sp, #28]
 800b0c4:	4654      	mov	r4, sl
 800b0c6:	2000      	movs	r0, #0
 800b0c8:	f04f 0c0a 	mov.w	ip, #10
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b0d2:	3b30      	subs	r3, #48	; 0x30
 800b0d4:	2b09      	cmp	r3, #9
 800b0d6:	d94e      	bls.n	800b176 <_svfiprintf_r+0x17e>
 800b0d8:	b1b0      	cbz	r0, 800b108 <_svfiprintf_r+0x110>
 800b0da:	9207      	str	r2, [sp, #28]
 800b0dc:	e014      	b.n	800b108 <_svfiprintf_r+0x110>
 800b0de:	eba0 0308 	sub.w	r3, r0, r8
 800b0e2:	fa09 f303 	lsl.w	r3, r9, r3
 800b0e6:	4313      	orrs	r3, r2
 800b0e8:	9304      	str	r3, [sp, #16]
 800b0ea:	46a2      	mov	sl, r4
 800b0ec:	e7d2      	b.n	800b094 <_svfiprintf_r+0x9c>
 800b0ee:	9b03      	ldr	r3, [sp, #12]
 800b0f0:	1d19      	adds	r1, r3, #4
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	9103      	str	r1, [sp, #12]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bfbb      	ittet	lt
 800b0fa:	425b      	neglt	r3, r3
 800b0fc:	f042 0202 	orrlt.w	r2, r2, #2
 800b100:	9307      	strge	r3, [sp, #28]
 800b102:	9307      	strlt	r3, [sp, #28]
 800b104:	bfb8      	it	lt
 800b106:	9204      	strlt	r2, [sp, #16]
 800b108:	7823      	ldrb	r3, [r4, #0]
 800b10a:	2b2e      	cmp	r3, #46	; 0x2e
 800b10c:	d10c      	bne.n	800b128 <_svfiprintf_r+0x130>
 800b10e:	7863      	ldrb	r3, [r4, #1]
 800b110:	2b2a      	cmp	r3, #42	; 0x2a
 800b112:	d135      	bne.n	800b180 <_svfiprintf_r+0x188>
 800b114:	9b03      	ldr	r3, [sp, #12]
 800b116:	1d1a      	adds	r2, r3, #4
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	9203      	str	r2, [sp, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	bfb8      	it	lt
 800b120:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b124:	3402      	adds	r4, #2
 800b126:	9305      	str	r3, [sp, #20]
 800b128:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b1f4 <_svfiprintf_r+0x1fc>
 800b12c:	7821      	ldrb	r1, [r4, #0]
 800b12e:	2203      	movs	r2, #3
 800b130:	4650      	mov	r0, sl
 800b132:	f7f5 f88d 	bl	8000250 <memchr>
 800b136:	b140      	cbz	r0, 800b14a <_svfiprintf_r+0x152>
 800b138:	2340      	movs	r3, #64	; 0x40
 800b13a:	eba0 000a 	sub.w	r0, r0, sl
 800b13e:	fa03 f000 	lsl.w	r0, r3, r0
 800b142:	9b04      	ldr	r3, [sp, #16]
 800b144:	4303      	orrs	r3, r0
 800b146:	3401      	adds	r4, #1
 800b148:	9304      	str	r3, [sp, #16]
 800b14a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b14e:	4826      	ldr	r0, [pc, #152]	; (800b1e8 <_svfiprintf_r+0x1f0>)
 800b150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b154:	2206      	movs	r2, #6
 800b156:	f7f5 f87b 	bl	8000250 <memchr>
 800b15a:	2800      	cmp	r0, #0
 800b15c:	d038      	beq.n	800b1d0 <_svfiprintf_r+0x1d8>
 800b15e:	4b23      	ldr	r3, [pc, #140]	; (800b1ec <_svfiprintf_r+0x1f4>)
 800b160:	bb1b      	cbnz	r3, 800b1aa <_svfiprintf_r+0x1b2>
 800b162:	9b03      	ldr	r3, [sp, #12]
 800b164:	3307      	adds	r3, #7
 800b166:	f023 0307 	bic.w	r3, r3, #7
 800b16a:	3308      	adds	r3, #8
 800b16c:	9303      	str	r3, [sp, #12]
 800b16e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b170:	4433      	add	r3, r6
 800b172:	9309      	str	r3, [sp, #36]	; 0x24
 800b174:	e767      	b.n	800b046 <_svfiprintf_r+0x4e>
 800b176:	fb0c 3202 	mla	r2, ip, r2, r3
 800b17a:	460c      	mov	r4, r1
 800b17c:	2001      	movs	r0, #1
 800b17e:	e7a5      	b.n	800b0cc <_svfiprintf_r+0xd4>
 800b180:	2300      	movs	r3, #0
 800b182:	3401      	adds	r4, #1
 800b184:	9305      	str	r3, [sp, #20]
 800b186:	4619      	mov	r1, r3
 800b188:	f04f 0c0a 	mov.w	ip, #10
 800b18c:	4620      	mov	r0, r4
 800b18e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b192:	3a30      	subs	r2, #48	; 0x30
 800b194:	2a09      	cmp	r2, #9
 800b196:	d903      	bls.n	800b1a0 <_svfiprintf_r+0x1a8>
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d0c5      	beq.n	800b128 <_svfiprintf_r+0x130>
 800b19c:	9105      	str	r1, [sp, #20]
 800b19e:	e7c3      	b.n	800b128 <_svfiprintf_r+0x130>
 800b1a0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b1a4:	4604      	mov	r4, r0
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	e7f0      	b.n	800b18c <_svfiprintf_r+0x194>
 800b1aa:	ab03      	add	r3, sp, #12
 800b1ac:	9300      	str	r3, [sp, #0]
 800b1ae:	462a      	mov	r2, r5
 800b1b0:	4b0f      	ldr	r3, [pc, #60]	; (800b1f0 <_svfiprintf_r+0x1f8>)
 800b1b2:	a904      	add	r1, sp, #16
 800b1b4:	4638      	mov	r0, r7
 800b1b6:	f7fd fb31 	bl	800881c <_printf_float>
 800b1ba:	1c42      	adds	r2, r0, #1
 800b1bc:	4606      	mov	r6, r0
 800b1be:	d1d6      	bne.n	800b16e <_svfiprintf_r+0x176>
 800b1c0:	89ab      	ldrh	r3, [r5, #12]
 800b1c2:	065b      	lsls	r3, r3, #25
 800b1c4:	f53f af2c 	bmi.w	800b020 <_svfiprintf_r+0x28>
 800b1c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b1ca:	b01d      	add	sp, #116	; 0x74
 800b1cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1d0:	ab03      	add	r3, sp, #12
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	462a      	mov	r2, r5
 800b1d6:	4b06      	ldr	r3, [pc, #24]	; (800b1f0 <_svfiprintf_r+0x1f8>)
 800b1d8:	a904      	add	r1, sp, #16
 800b1da:	4638      	mov	r0, r7
 800b1dc:	f7fd fdc2 	bl	8008d64 <_printf_i>
 800b1e0:	e7eb      	b.n	800b1ba <_svfiprintf_r+0x1c2>
 800b1e2:	bf00      	nop
 800b1e4:	0800bd8c 	.word	0x0800bd8c
 800b1e8:	0800bd96 	.word	0x0800bd96
 800b1ec:	0800881d 	.word	0x0800881d
 800b1f0:	0800af41 	.word	0x0800af41
 800b1f4:	0800bd92 	.word	0x0800bd92

0800b1f8 <__sfputc_r>:
 800b1f8:	6893      	ldr	r3, [r2, #8]
 800b1fa:	3b01      	subs	r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	b410      	push	{r4}
 800b200:	6093      	str	r3, [r2, #8]
 800b202:	da08      	bge.n	800b216 <__sfputc_r+0x1e>
 800b204:	6994      	ldr	r4, [r2, #24]
 800b206:	42a3      	cmp	r3, r4
 800b208:	db01      	blt.n	800b20e <__sfputc_r+0x16>
 800b20a:	290a      	cmp	r1, #10
 800b20c:	d103      	bne.n	800b216 <__sfputc_r+0x1e>
 800b20e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b212:	f7fe b877 	b.w	8009304 <__swbuf_r>
 800b216:	6813      	ldr	r3, [r2, #0]
 800b218:	1c58      	adds	r0, r3, #1
 800b21a:	6010      	str	r0, [r2, #0]
 800b21c:	7019      	strb	r1, [r3, #0]
 800b21e:	4608      	mov	r0, r1
 800b220:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b224:	4770      	bx	lr

0800b226 <__sfputs_r>:
 800b226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b228:	4606      	mov	r6, r0
 800b22a:	460f      	mov	r7, r1
 800b22c:	4614      	mov	r4, r2
 800b22e:	18d5      	adds	r5, r2, r3
 800b230:	42ac      	cmp	r4, r5
 800b232:	d101      	bne.n	800b238 <__sfputs_r+0x12>
 800b234:	2000      	movs	r0, #0
 800b236:	e007      	b.n	800b248 <__sfputs_r+0x22>
 800b238:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b23c:	463a      	mov	r2, r7
 800b23e:	4630      	mov	r0, r6
 800b240:	f7ff ffda 	bl	800b1f8 <__sfputc_r>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d1f3      	bne.n	800b230 <__sfputs_r+0xa>
 800b248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b24c <_vfiprintf_r>:
 800b24c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b250:	460d      	mov	r5, r1
 800b252:	b09d      	sub	sp, #116	; 0x74
 800b254:	4614      	mov	r4, r2
 800b256:	4698      	mov	r8, r3
 800b258:	4606      	mov	r6, r0
 800b25a:	b118      	cbz	r0, 800b264 <_vfiprintf_r+0x18>
 800b25c:	6983      	ldr	r3, [r0, #24]
 800b25e:	b90b      	cbnz	r3, 800b264 <_vfiprintf_r+0x18>
 800b260:	f7ff f8c2 	bl	800a3e8 <__sinit>
 800b264:	4b89      	ldr	r3, [pc, #548]	; (800b48c <_vfiprintf_r+0x240>)
 800b266:	429d      	cmp	r5, r3
 800b268:	d11b      	bne.n	800b2a2 <_vfiprintf_r+0x56>
 800b26a:	6875      	ldr	r5, [r6, #4]
 800b26c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b26e:	07d9      	lsls	r1, r3, #31
 800b270:	d405      	bmi.n	800b27e <_vfiprintf_r+0x32>
 800b272:	89ab      	ldrh	r3, [r5, #12]
 800b274:	059a      	lsls	r2, r3, #22
 800b276:	d402      	bmi.n	800b27e <_vfiprintf_r+0x32>
 800b278:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b27a:	f7ff f96a 	bl	800a552 <__retarget_lock_acquire_recursive>
 800b27e:	89ab      	ldrh	r3, [r5, #12]
 800b280:	071b      	lsls	r3, r3, #28
 800b282:	d501      	bpl.n	800b288 <_vfiprintf_r+0x3c>
 800b284:	692b      	ldr	r3, [r5, #16]
 800b286:	b9eb      	cbnz	r3, 800b2c4 <_vfiprintf_r+0x78>
 800b288:	4629      	mov	r1, r5
 800b28a:	4630      	mov	r0, r6
 800b28c:	f7fe f88c 	bl	80093a8 <__swsetup_r>
 800b290:	b1c0      	cbz	r0, 800b2c4 <_vfiprintf_r+0x78>
 800b292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b294:	07dc      	lsls	r4, r3, #31
 800b296:	d50e      	bpl.n	800b2b6 <_vfiprintf_r+0x6a>
 800b298:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b29c:	b01d      	add	sp, #116	; 0x74
 800b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a2:	4b7b      	ldr	r3, [pc, #492]	; (800b490 <_vfiprintf_r+0x244>)
 800b2a4:	429d      	cmp	r5, r3
 800b2a6:	d101      	bne.n	800b2ac <_vfiprintf_r+0x60>
 800b2a8:	68b5      	ldr	r5, [r6, #8]
 800b2aa:	e7df      	b.n	800b26c <_vfiprintf_r+0x20>
 800b2ac:	4b79      	ldr	r3, [pc, #484]	; (800b494 <_vfiprintf_r+0x248>)
 800b2ae:	429d      	cmp	r5, r3
 800b2b0:	bf08      	it	eq
 800b2b2:	68f5      	ldreq	r5, [r6, #12]
 800b2b4:	e7da      	b.n	800b26c <_vfiprintf_r+0x20>
 800b2b6:	89ab      	ldrh	r3, [r5, #12]
 800b2b8:	0598      	lsls	r0, r3, #22
 800b2ba:	d4ed      	bmi.n	800b298 <_vfiprintf_r+0x4c>
 800b2bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b2be:	f7ff f949 	bl	800a554 <__retarget_lock_release_recursive>
 800b2c2:	e7e9      	b.n	800b298 <_vfiprintf_r+0x4c>
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b2c8:	2320      	movs	r3, #32
 800b2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2d2:	2330      	movs	r3, #48	; 0x30
 800b2d4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b498 <_vfiprintf_r+0x24c>
 800b2d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2dc:	f04f 0901 	mov.w	r9, #1
 800b2e0:	4623      	mov	r3, r4
 800b2e2:	469a      	mov	sl, r3
 800b2e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2e8:	b10a      	cbz	r2, 800b2ee <_vfiprintf_r+0xa2>
 800b2ea:	2a25      	cmp	r2, #37	; 0x25
 800b2ec:	d1f9      	bne.n	800b2e2 <_vfiprintf_r+0x96>
 800b2ee:	ebba 0b04 	subs.w	fp, sl, r4
 800b2f2:	d00b      	beq.n	800b30c <_vfiprintf_r+0xc0>
 800b2f4:	465b      	mov	r3, fp
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4629      	mov	r1, r5
 800b2fa:	4630      	mov	r0, r6
 800b2fc:	f7ff ff93 	bl	800b226 <__sfputs_r>
 800b300:	3001      	adds	r0, #1
 800b302:	f000 80aa 	beq.w	800b45a <_vfiprintf_r+0x20e>
 800b306:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b308:	445a      	add	r2, fp
 800b30a:	9209      	str	r2, [sp, #36]	; 0x24
 800b30c:	f89a 3000 	ldrb.w	r3, [sl]
 800b310:	2b00      	cmp	r3, #0
 800b312:	f000 80a2 	beq.w	800b45a <_vfiprintf_r+0x20e>
 800b316:	2300      	movs	r3, #0
 800b318:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b31c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b320:	f10a 0a01 	add.w	sl, sl, #1
 800b324:	9304      	str	r3, [sp, #16]
 800b326:	9307      	str	r3, [sp, #28]
 800b328:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b32c:	931a      	str	r3, [sp, #104]	; 0x68
 800b32e:	4654      	mov	r4, sl
 800b330:	2205      	movs	r2, #5
 800b332:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b336:	4858      	ldr	r0, [pc, #352]	; (800b498 <_vfiprintf_r+0x24c>)
 800b338:	f7f4 ff8a 	bl	8000250 <memchr>
 800b33c:	9a04      	ldr	r2, [sp, #16]
 800b33e:	b9d8      	cbnz	r0, 800b378 <_vfiprintf_r+0x12c>
 800b340:	06d1      	lsls	r1, r2, #27
 800b342:	bf44      	itt	mi
 800b344:	2320      	movmi	r3, #32
 800b346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b34a:	0713      	lsls	r3, r2, #28
 800b34c:	bf44      	itt	mi
 800b34e:	232b      	movmi	r3, #43	; 0x2b
 800b350:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b354:	f89a 3000 	ldrb.w	r3, [sl]
 800b358:	2b2a      	cmp	r3, #42	; 0x2a
 800b35a:	d015      	beq.n	800b388 <_vfiprintf_r+0x13c>
 800b35c:	9a07      	ldr	r2, [sp, #28]
 800b35e:	4654      	mov	r4, sl
 800b360:	2000      	movs	r0, #0
 800b362:	f04f 0c0a 	mov.w	ip, #10
 800b366:	4621      	mov	r1, r4
 800b368:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b36c:	3b30      	subs	r3, #48	; 0x30
 800b36e:	2b09      	cmp	r3, #9
 800b370:	d94e      	bls.n	800b410 <_vfiprintf_r+0x1c4>
 800b372:	b1b0      	cbz	r0, 800b3a2 <_vfiprintf_r+0x156>
 800b374:	9207      	str	r2, [sp, #28]
 800b376:	e014      	b.n	800b3a2 <_vfiprintf_r+0x156>
 800b378:	eba0 0308 	sub.w	r3, r0, r8
 800b37c:	fa09 f303 	lsl.w	r3, r9, r3
 800b380:	4313      	orrs	r3, r2
 800b382:	9304      	str	r3, [sp, #16]
 800b384:	46a2      	mov	sl, r4
 800b386:	e7d2      	b.n	800b32e <_vfiprintf_r+0xe2>
 800b388:	9b03      	ldr	r3, [sp, #12]
 800b38a:	1d19      	adds	r1, r3, #4
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	9103      	str	r1, [sp, #12]
 800b390:	2b00      	cmp	r3, #0
 800b392:	bfbb      	ittet	lt
 800b394:	425b      	neglt	r3, r3
 800b396:	f042 0202 	orrlt.w	r2, r2, #2
 800b39a:	9307      	strge	r3, [sp, #28]
 800b39c:	9307      	strlt	r3, [sp, #28]
 800b39e:	bfb8      	it	lt
 800b3a0:	9204      	strlt	r2, [sp, #16]
 800b3a2:	7823      	ldrb	r3, [r4, #0]
 800b3a4:	2b2e      	cmp	r3, #46	; 0x2e
 800b3a6:	d10c      	bne.n	800b3c2 <_vfiprintf_r+0x176>
 800b3a8:	7863      	ldrb	r3, [r4, #1]
 800b3aa:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ac:	d135      	bne.n	800b41a <_vfiprintf_r+0x1ce>
 800b3ae:	9b03      	ldr	r3, [sp, #12]
 800b3b0:	1d1a      	adds	r2, r3, #4
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	9203      	str	r2, [sp, #12]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	bfb8      	it	lt
 800b3ba:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800b3be:	3402      	adds	r4, #2
 800b3c0:	9305      	str	r3, [sp, #20]
 800b3c2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b4a8 <_vfiprintf_r+0x25c>
 800b3c6:	7821      	ldrb	r1, [r4, #0]
 800b3c8:	2203      	movs	r2, #3
 800b3ca:	4650      	mov	r0, sl
 800b3cc:	f7f4 ff40 	bl	8000250 <memchr>
 800b3d0:	b140      	cbz	r0, 800b3e4 <_vfiprintf_r+0x198>
 800b3d2:	2340      	movs	r3, #64	; 0x40
 800b3d4:	eba0 000a 	sub.w	r0, r0, sl
 800b3d8:	fa03 f000 	lsl.w	r0, r3, r0
 800b3dc:	9b04      	ldr	r3, [sp, #16]
 800b3de:	4303      	orrs	r3, r0
 800b3e0:	3401      	adds	r4, #1
 800b3e2:	9304      	str	r3, [sp, #16]
 800b3e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3e8:	482c      	ldr	r0, [pc, #176]	; (800b49c <_vfiprintf_r+0x250>)
 800b3ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3ee:	2206      	movs	r2, #6
 800b3f0:	f7f4 ff2e 	bl	8000250 <memchr>
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	d03f      	beq.n	800b478 <_vfiprintf_r+0x22c>
 800b3f8:	4b29      	ldr	r3, [pc, #164]	; (800b4a0 <_vfiprintf_r+0x254>)
 800b3fa:	bb1b      	cbnz	r3, 800b444 <_vfiprintf_r+0x1f8>
 800b3fc:	9b03      	ldr	r3, [sp, #12]
 800b3fe:	3307      	adds	r3, #7
 800b400:	f023 0307 	bic.w	r3, r3, #7
 800b404:	3308      	adds	r3, #8
 800b406:	9303      	str	r3, [sp, #12]
 800b408:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b40a:	443b      	add	r3, r7
 800b40c:	9309      	str	r3, [sp, #36]	; 0x24
 800b40e:	e767      	b.n	800b2e0 <_vfiprintf_r+0x94>
 800b410:	fb0c 3202 	mla	r2, ip, r2, r3
 800b414:	460c      	mov	r4, r1
 800b416:	2001      	movs	r0, #1
 800b418:	e7a5      	b.n	800b366 <_vfiprintf_r+0x11a>
 800b41a:	2300      	movs	r3, #0
 800b41c:	3401      	adds	r4, #1
 800b41e:	9305      	str	r3, [sp, #20]
 800b420:	4619      	mov	r1, r3
 800b422:	f04f 0c0a 	mov.w	ip, #10
 800b426:	4620      	mov	r0, r4
 800b428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b42c:	3a30      	subs	r2, #48	; 0x30
 800b42e:	2a09      	cmp	r2, #9
 800b430:	d903      	bls.n	800b43a <_vfiprintf_r+0x1ee>
 800b432:	2b00      	cmp	r3, #0
 800b434:	d0c5      	beq.n	800b3c2 <_vfiprintf_r+0x176>
 800b436:	9105      	str	r1, [sp, #20]
 800b438:	e7c3      	b.n	800b3c2 <_vfiprintf_r+0x176>
 800b43a:	fb0c 2101 	mla	r1, ip, r1, r2
 800b43e:	4604      	mov	r4, r0
 800b440:	2301      	movs	r3, #1
 800b442:	e7f0      	b.n	800b426 <_vfiprintf_r+0x1da>
 800b444:	ab03      	add	r3, sp, #12
 800b446:	9300      	str	r3, [sp, #0]
 800b448:	462a      	mov	r2, r5
 800b44a:	4b16      	ldr	r3, [pc, #88]	; (800b4a4 <_vfiprintf_r+0x258>)
 800b44c:	a904      	add	r1, sp, #16
 800b44e:	4630      	mov	r0, r6
 800b450:	f7fd f9e4 	bl	800881c <_printf_float>
 800b454:	4607      	mov	r7, r0
 800b456:	1c78      	adds	r0, r7, #1
 800b458:	d1d6      	bne.n	800b408 <_vfiprintf_r+0x1bc>
 800b45a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b45c:	07d9      	lsls	r1, r3, #31
 800b45e:	d405      	bmi.n	800b46c <_vfiprintf_r+0x220>
 800b460:	89ab      	ldrh	r3, [r5, #12]
 800b462:	059a      	lsls	r2, r3, #22
 800b464:	d402      	bmi.n	800b46c <_vfiprintf_r+0x220>
 800b466:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b468:	f7ff f874 	bl	800a554 <__retarget_lock_release_recursive>
 800b46c:	89ab      	ldrh	r3, [r5, #12]
 800b46e:	065b      	lsls	r3, r3, #25
 800b470:	f53f af12 	bmi.w	800b298 <_vfiprintf_r+0x4c>
 800b474:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b476:	e711      	b.n	800b29c <_vfiprintf_r+0x50>
 800b478:	ab03      	add	r3, sp, #12
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	462a      	mov	r2, r5
 800b47e:	4b09      	ldr	r3, [pc, #36]	; (800b4a4 <_vfiprintf_r+0x258>)
 800b480:	a904      	add	r1, sp, #16
 800b482:	4630      	mov	r0, r6
 800b484:	f7fd fc6e 	bl	8008d64 <_printf_i>
 800b488:	e7e4      	b.n	800b454 <_vfiprintf_r+0x208>
 800b48a:	bf00      	nop
 800b48c:	0800bbf0 	.word	0x0800bbf0
 800b490:	0800bc10 	.word	0x0800bc10
 800b494:	0800bbd0 	.word	0x0800bbd0
 800b498:	0800bd8c 	.word	0x0800bd8c
 800b49c:	0800bd96 	.word	0x0800bd96
 800b4a0:	0800881d 	.word	0x0800881d
 800b4a4:	0800b227 	.word	0x0800b227
 800b4a8:	0800bd92 	.word	0x0800bd92

0800b4ac <_sbrk_r>:
 800b4ac:	b538      	push	{r3, r4, r5, lr}
 800b4ae:	4d06      	ldr	r5, [pc, #24]	; (800b4c8 <_sbrk_r+0x1c>)
 800b4b0:	2300      	movs	r3, #0
 800b4b2:	4604      	mov	r4, r0
 800b4b4:	4608      	mov	r0, r1
 800b4b6:	602b      	str	r3, [r5, #0]
 800b4b8:	f7f6 fc56 	bl	8001d68 <_sbrk>
 800b4bc:	1c43      	adds	r3, r0, #1
 800b4be:	d102      	bne.n	800b4c6 <_sbrk_r+0x1a>
 800b4c0:	682b      	ldr	r3, [r5, #0]
 800b4c2:	b103      	cbz	r3, 800b4c6 <_sbrk_r+0x1a>
 800b4c4:	6023      	str	r3, [r4, #0]
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	20000508 	.word	0x20000508

0800b4cc <__sread>:
 800b4cc:	b510      	push	{r4, lr}
 800b4ce:	460c      	mov	r4, r1
 800b4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b4d4:	f000 f904 	bl	800b6e0 <_read_r>
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	bfab      	itete	ge
 800b4dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b4de:	89a3      	ldrhlt	r3, [r4, #12]
 800b4e0:	181b      	addge	r3, r3, r0
 800b4e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b4e6:	bfac      	ite	ge
 800b4e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800b4ea:	81a3      	strhlt	r3, [r4, #12]
 800b4ec:	bd10      	pop	{r4, pc}

0800b4ee <__swrite>:
 800b4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b4f2:	461f      	mov	r7, r3
 800b4f4:	898b      	ldrh	r3, [r1, #12]
 800b4f6:	05db      	lsls	r3, r3, #23
 800b4f8:	4605      	mov	r5, r0
 800b4fa:	460c      	mov	r4, r1
 800b4fc:	4616      	mov	r6, r2
 800b4fe:	d505      	bpl.n	800b50c <__swrite+0x1e>
 800b500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b504:	2302      	movs	r3, #2
 800b506:	2200      	movs	r2, #0
 800b508:	f000 f870 	bl	800b5ec <_lseek_r>
 800b50c:	89a3      	ldrh	r3, [r4, #12]
 800b50e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b516:	81a3      	strh	r3, [r4, #12]
 800b518:	4632      	mov	r2, r6
 800b51a:	463b      	mov	r3, r7
 800b51c:	4628      	mov	r0, r5
 800b51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b522:	f000 b817 	b.w	800b554 <_write_r>

0800b526 <__sseek>:
 800b526:	b510      	push	{r4, lr}
 800b528:	460c      	mov	r4, r1
 800b52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b52e:	f000 f85d 	bl	800b5ec <_lseek_r>
 800b532:	1c43      	adds	r3, r0, #1
 800b534:	89a3      	ldrh	r3, [r4, #12]
 800b536:	bf15      	itete	ne
 800b538:	6560      	strne	r0, [r4, #84]	; 0x54
 800b53a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b53e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b542:	81a3      	strheq	r3, [r4, #12]
 800b544:	bf18      	it	ne
 800b546:	81a3      	strhne	r3, [r4, #12]
 800b548:	bd10      	pop	{r4, pc}

0800b54a <__sclose>:
 800b54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b54e:	f000 b81b 	b.w	800b588 <_close_r>
	...

0800b554 <_write_r>:
 800b554:	b538      	push	{r3, r4, r5, lr}
 800b556:	4d07      	ldr	r5, [pc, #28]	; (800b574 <_write_r+0x20>)
 800b558:	4604      	mov	r4, r0
 800b55a:	4608      	mov	r0, r1
 800b55c:	4611      	mov	r1, r2
 800b55e:	2200      	movs	r2, #0
 800b560:	602a      	str	r2, [r5, #0]
 800b562:	461a      	mov	r2, r3
 800b564:	f7f6 fbaf 	bl	8001cc6 <_write>
 800b568:	1c43      	adds	r3, r0, #1
 800b56a:	d102      	bne.n	800b572 <_write_r+0x1e>
 800b56c:	682b      	ldr	r3, [r5, #0]
 800b56e:	b103      	cbz	r3, 800b572 <_write_r+0x1e>
 800b570:	6023      	str	r3, [r4, #0]
 800b572:	bd38      	pop	{r3, r4, r5, pc}
 800b574:	20000508 	.word	0x20000508

0800b578 <abort>:
 800b578:	b508      	push	{r3, lr}
 800b57a:	2006      	movs	r0, #6
 800b57c:	f000 f8ea 	bl	800b754 <raise>
 800b580:	2001      	movs	r0, #1
 800b582:	f7f6 fb79 	bl	8001c78 <_exit>
	...

0800b588 <_close_r>:
 800b588:	b538      	push	{r3, r4, r5, lr}
 800b58a:	4d06      	ldr	r5, [pc, #24]	; (800b5a4 <_close_r+0x1c>)
 800b58c:	2300      	movs	r3, #0
 800b58e:	4604      	mov	r4, r0
 800b590:	4608      	mov	r0, r1
 800b592:	602b      	str	r3, [r5, #0]
 800b594:	f7f6 fbb3 	bl	8001cfe <_close>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_close_r+0x1a>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_close_r+0x1a>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	20000508 	.word	0x20000508

0800b5a8 <_fstat_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	; (800b5c8 <_fstat_r+0x20>)
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	4608      	mov	r0, r1
 800b5b2:	4611      	mov	r1, r2
 800b5b4:	602b      	str	r3, [r5, #0]
 800b5b6:	f7f6 fbae 	bl	8001d16 <_fstat>
 800b5ba:	1c43      	adds	r3, r0, #1
 800b5bc:	d102      	bne.n	800b5c4 <_fstat_r+0x1c>
 800b5be:	682b      	ldr	r3, [r5, #0]
 800b5c0:	b103      	cbz	r3, 800b5c4 <_fstat_r+0x1c>
 800b5c2:	6023      	str	r3, [r4, #0]
 800b5c4:	bd38      	pop	{r3, r4, r5, pc}
 800b5c6:	bf00      	nop
 800b5c8:	20000508 	.word	0x20000508

0800b5cc <_isatty_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	; (800b5e8 <_isatty_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f6 fbad 	bl	8001d36 <_isatty>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_isatty_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_isatty_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	20000508 	.word	0x20000508

0800b5ec <_lseek_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d07      	ldr	r5, [pc, #28]	; (800b60c <_lseek_r+0x20>)
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	602a      	str	r2, [r5, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f7f6 fba6 	bl	8001d4c <_lseek>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_lseek_r+0x1e>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_lseek_r+0x1e>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	20000508 	.word	0x20000508

0800b610 <__ascii_mbtowc>:
 800b610:	b082      	sub	sp, #8
 800b612:	b901      	cbnz	r1, 800b616 <__ascii_mbtowc+0x6>
 800b614:	a901      	add	r1, sp, #4
 800b616:	b142      	cbz	r2, 800b62a <__ascii_mbtowc+0x1a>
 800b618:	b14b      	cbz	r3, 800b62e <__ascii_mbtowc+0x1e>
 800b61a:	7813      	ldrb	r3, [r2, #0]
 800b61c:	600b      	str	r3, [r1, #0]
 800b61e:	7812      	ldrb	r2, [r2, #0]
 800b620:	1e10      	subs	r0, r2, #0
 800b622:	bf18      	it	ne
 800b624:	2001      	movne	r0, #1
 800b626:	b002      	add	sp, #8
 800b628:	4770      	bx	lr
 800b62a:	4610      	mov	r0, r2
 800b62c:	e7fb      	b.n	800b626 <__ascii_mbtowc+0x16>
 800b62e:	f06f 0001 	mvn.w	r0, #1
 800b632:	e7f8      	b.n	800b626 <__ascii_mbtowc+0x16>

0800b634 <memmove>:
 800b634:	4288      	cmp	r0, r1
 800b636:	b510      	push	{r4, lr}
 800b638:	eb01 0402 	add.w	r4, r1, r2
 800b63c:	d902      	bls.n	800b644 <memmove+0x10>
 800b63e:	4284      	cmp	r4, r0
 800b640:	4623      	mov	r3, r4
 800b642:	d807      	bhi.n	800b654 <memmove+0x20>
 800b644:	1e43      	subs	r3, r0, #1
 800b646:	42a1      	cmp	r1, r4
 800b648:	d008      	beq.n	800b65c <memmove+0x28>
 800b64a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b64e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b652:	e7f8      	b.n	800b646 <memmove+0x12>
 800b654:	4402      	add	r2, r0
 800b656:	4601      	mov	r1, r0
 800b658:	428a      	cmp	r2, r1
 800b65a:	d100      	bne.n	800b65e <memmove+0x2a>
 800b65c:	bd10      	pop	{r4, pc}
 800b65e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b666:	e7f7      	b.n	800b658 <memmove+0x24>

0800b668 <__malloc_lock>:
 800b668:	4801      	ldr	r0, [pc, #4]	; (800b670 <__malloc_lock+0x8>)
 800b66a:	f7fe bf72 	b.w	800a552 <__retarget_lock_acquire_recursive>
 800b66e:	bf00      	nop
 800b670:	200004fc 	.word	0x200004fc

0800b674 <__malloc_unlock>:
 800b674:	4801      	ldr	r0, [pc, #4]	; (800b67c <__malloc_unlock+0x8>)
 800b676:	f7fe bf6d 	b.w	800a554 <__retarget_lock_release_recursive>
 800b67a:	bf00      	nop
 800b67c:	200004fc 	.word	0x200004fc

0800b680 <_realloc_r>:
 800b680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b684:	4680      	mov	r8, r0
 800b686:	4614      	mov	r4, r2
 800b688:	460e      	mov	r6, r1
 800b68a:	b921      	cbnz	r1, 800b696 <_realloc_r+0x16>
 800b68c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b690:	4611      	mov	r1, r2
 800b692:	f7ff bbe1 	b.w	800ae58 <_malloc_r>
 800b696:	b92a      	cbnz	r2, 800b6a4 <_realloc_r+0x24>
 800b698:	f7ff fb72 	bl	800ad80 <_free_r>
 800b69c:	4625      	mov	r5, r4
 800b69e:	4628      	mov	r0, r5
 800b6a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6a4:	f000 f87f 	bl	800b7a6 <_malloc_usable_size_r>
 800b6a8:	4284      	cmp	r4, r0
 800b6aa:	4607      	mov	r7, r0
 800b6ac:	d802      	bhi.n	800b6b4 <_realloc_r+0x34>
 800b6ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b6b2:	d812      	bhi.n	800b6da <_realloc_r+0x5a>
 800b6b4:	4621      	mov	r1, r4
 800b6b6:	4640      	mov	r0, r8
 800b6b8:	f7ff fbce 	bl	800ae58 <_malloc_r>
 800b6bc:	4605      	mov	r5, r0
 800b6be:	2800      	cmp	r0, #0
 800b6c0:	d0ed      	beq.n	800b69e <_realloc_r+0x1e>
 800b6c2:	42bc      	cmp	r4, r7
 800b6c4:	4622      	mov	r2, r4
 800b6c6:	4631      	mov	r1, r6
 800b6c8:	bf28      	it	cs
 800b6ca:	463a      	movcs	r2, r7
 800b6cc:	f7fe ffb0 	bl	800a630 <memcpy>
 800b6d0:	4631      	mov	r1, r6
 800b6d2:	4640      	mov	r0, r8
 800b6d4:	f7ff fb54 	bl	800ad80 <_free_r>
 800b6d8:	e7e1      	b.n	800b69e <_realloc_r+0x1e>
 800b6da:	4635      	mov	r5, r6
 800b6dc:	e7df      	b.n	800b69e <_realloc_r+0x1e>
	...

0800b6e0 <_read_r>:
 800b6e0:	b538      	push	{r3, r4, r5, lr}
 800b6e2:	4d07      	ldr	r5, [pc, #28]	; (800b700 <_read_r+0x20>)
 800b6e4:	4604      	mov	r4, r0
 800b6e6:	4608      	mov	r0, r1
 800b6e8:	4611      	mov	r1, r2
 800b6ea:	2200      	movs	r2, #0
 800b6ec:	602a      	str	r2, [r5, #0]
 800b6ee:	461a      	mov	r2, r3
 800b6f0:	f7f6 facc 	bl	8001c8c <_read>
 800b6f4:	1c43      	adds	r3, r0, #1
 800b6f6:	d102      	bne.n	800b6fe <_read_r+0x1e>
 800b6f8:	682b      	ldr	r3, [r5, #0]
 800b6fa:	b103      	cbz	r3, 800b6fe <_read_r+0x1e>
 800b6fc:	6023      	str	r3, [r4, #0]
 800b6fe:	bd38      	pop	{r3, r4, r5, pc}
 800b700:	20000508 	.word	0x20000508

0800b704 <_raise_r>:
 800b704:	291f      	cmp	r1, #31
 800b706:	b538      	push	{r3, r4, r5, lr}
 800b708:	4604      	mov	r4, r0
 800b70a:	460d      	mov	r5, r1
 800b70c:	d904      	bls.n	800b718 <_raise_r+0x14>
 800b70e:	2316      	movs	r3, #22
 800b710:	6003      	str	r3, [r0, #0]
 800b712:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b716:	bd38      	pop	{r3, r4, r5, pc}
 800b718:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b71a:	b112      	cbz	r2, 800b722 <_raise_r+0x1e>
 800b71c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b720:	b94b      	cbnz	r3, 800b736 <_raise_r+0x32>
 800b722:	4620      	mov	r0, r4
 800b724:	f000 f830 	bl	800b788 <_getpid_r>
 800b728:	462a      	mov	r2, r5
 800b72a:	4601      	mov	r1, r0
 800b72c:	4620      	mov	r0, r4
 800b72e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b732:	f000 b817 	b.w	800b764 <_kill_r>
 800b736:	2b01      	cmp	r3, #1
 800b738:	d00a      	beq.n	800b750 <_raise_r+0x4c>
 800b73a:	1c59      	adds	r1, r3, #1
 800b73c:	d103      	bne.n	800b746 <_raise_r+0x42>
 800b73e:	2316      	movs	r3, #22
 800b740:	6003      	str	r3, [r0, #0]
 800b742:	2001      	movs	r0, #1
 800b744:	e7e7      	b.n	800b716 <_raise_r+0x12>
 800b746:	2400      	movs	r4, #0
 800b748:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b74c:	4628      	mov	r0, r5
 800b74e:	4798      	blx	r3
 800b750:	2000      	movs	r0, #0
 800b752:	e7e0      	b.n	800b716 <_raise_r+0x12>

0800b754 <raise>:
 800b754:	4b02      	ldr	r3, [pc, #8]	; (800b760 <raise+0xc>)
 800b756:	4601      	mov	r1, r0
 800b758:	6818      	ldr	r0, [r3, #0]
 800b75a:	f7ff bfd3 	b.w	800b704 <_raise_r>
 800b75e:	bf00      	nop
 800b760:	200000f8 	.word	0x200000f8

0800b764 <_kill_r>:
 800b764:	b538      	push	{r3, r4, r5, lr}
 800b766:	4d07      	ldr	r5, [pc, #28]	; (800b784 <_kill_r+0x20>)
 800b768:	2300      	movs	r3, #0
 800b76a:	4604      	mov	r4, r0
 800b76c:	4608      	mov	r0, r1
 800b76e:	4611      	mov	r1, r2
 800b770:	602b      	str	r3, [r5, #0]
 800b772:	f7f6 fa71 	bl	8001c58 <_kill>
 800b776:	1c43      	adds	r3, r0, #1
 800b778:	d102      	bne.n	800b780 <_kill_r+0x1c>
 800b77a:	682b      	ldr	r3, [r5, #0]
 800b77c:	b103      	cbz	r3, 800b780 <_kill_r+0x1c>
 800b77e:	6023      	str	r3, [r4, #0]
 800b780:	bd38      	pop	{r3, r4, r5, pc}
 800b782:	bf00      	nop
 800b784:	20000508 	.word	0x20000508

0800b788 <_getpid_r>:
 800b788:	f7f6 ba5e 	b.w	8001c48 <_getpid>

0800b78c <__ascii_wctomb>:
 800b78c:	b149      	cbz	r1, 800b7a2 <__ascii_wctomb+0x16>
 800b78e:	2aff      	cmp	r2, #255	; 0xff
 800b790:	bf85      	ittet	hi
 800b792:	238a      	movhi	r3, #138	; 0x8a
 800b794:	6003      	strhi	r3, [r0, #0]
 800b796:	700a      	strbls	r2, [r1, #0]
 800b798:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800b79c:	bf98      	it	ls
 800b79e:	2001      	movls	r0, #1
 800b7a0:	4770      	bx	lr
 800b7a2:	4608      	mov	r0, r1
 800b7a4:	4770      	bx	lr

0800b7a6 <_malloc_usable_size_r>:
 800b7a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b7aa:	1f18      	subs	r0, r3, #4
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfbc      	itt	lt
 800b7b0:	580b      	ldrlt	r3, [r1, r0]
 800b7b2:	18c0      	addlt	r0, r0, r3
 800b7b4:	4770      	bx	lr
	...

0800b7b8 <_init>:
 800b7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7ba:	bf00      	nop
 800b7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7be:	bc08      	pop	{r3}
 800b7c0:	469e      	mov	lr, r3
 800b7c2:	4770      	bx	lr

0800b7c4 <_fini>:
 800b7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7c6:	bf00      	nop
 800b7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b7ca:	bc08      	pop	{r3}
 800b7cc:	469e      	mov	lr, r3
 800b7ce:	4770      	bx	lr
