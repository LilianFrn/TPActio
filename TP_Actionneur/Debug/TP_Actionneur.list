
TP_Actionneur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000427c  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004454  08004454  00014454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004494  08004494  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800449c  0800449c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800449c  0800449c  0001449c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044a0  080044a0  000144a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044a4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000fc  2000000c  080044b0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000108  080044b0  00020108  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ebc  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002022  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f78  00000000  00000000  00033f20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec0  00000000  00000000  00034e98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025659  00000000  00000000  00035d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001177c  00000000  00000000  0005b3b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7acd  00000000  00000000  0006cb2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001645fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000420c  00000000  00000000  0016464c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800443c 	.word	0x0800443c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	0800443c 	.word	0x0800443c

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b974 	b.w	8000518 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	468e      	mov	lr, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14d      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000256:	428a      	cmp	r2, r1
 8000258:	4694      	mov	ip, r2
 800025a:	d969      	bls.n	8000330 <__udivmoddi4+0xe8>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b152      	cbz	r2, 8000278 <__udivmoddi4+0x30>
 8000262:	fa01 f302 	lsl.w	r3, r1, r2
 8000266:	f1c2 0120 	rsb	r1, r2, #32
 800026a:	fa20 f101 	lsr.w	r1, r0, r1
 800026e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000272:	ea41 0e03 	orr.w	lr, r1, r3
 8000276:	4094      	lsls	r4, r2
 8000278:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800027c:	0c21      	lsrs	r1, r4, #16
 800027e:	fbbe f6f8 	udiv	r6, lr, r8
 8000282:	fa1f f78c 	uxth.w	r7, ip
 8000286:	fb08 e316 	mls	r3, r8, r6, lr
 800028a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800028e:	fb06 f107 	mul.w	r1, r6, r7
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f106 30ff 	add.w	r0, r6, #4294967295
 800029e:	f080 811f 	bcs.w	80004e0 <__udivmoddi4+0x298>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 811c 	bls.w	80004e0 <__udivmoddi4+0x298>
 80002a8:	3e02      	subs	r6, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a5b      	subs	r3, r3, r1
 80002ae:	b2a4      	uxth	r4, r4
 80002b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002b4:	fb08 3310 	mls	r3, r8, r0, r3
 80002b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002bc:	fb00 f707 	mul.w	r7, r0, r7
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	d90a      	bls.n	80002da <__udivmoddi4+0x92>
 80002c4:	eb1c 0404 	adds.w	r4, ip, r4
 80002c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002cc:	f080 810a 	bcs.w	80004e4 <__udivmoddi4+0x29c>
 80002d0:	42a7      	cmp	r7, r4
 80002d2:	f240 8107 	bls.w	80004e4 <__udivmoddi4+0x29c>
 80002d6:	4464      	add	r4, ip
 80002d8:	3802      	subs	r0, #2
 80002da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002de:	1be4      	subs	r4, r4, r7
 80002e0:	2600      	movs	r6, #0
 80002e2:	b11d      	cbz	r5, 80002ec <__udivmoddi4+0xa4>
 80002e4:	40d4      	lsrs	r4, r2
 80002e6:	2300      	movs	r3, #0
 80002e8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d909      	bls.n	800030a <__udivmoddi4+0xc2>
 80002f6:	2d00      	cmp	r5, #0
 80002f8:	f000 80ef 	beq.w	80004da <__udivmoddi4+0x292>
 80002fc:	2600      	movs	r6, #0
 80002fe:	e9c5 0100 	strd	r0, r1, [r5]
 8000302:	4630      	mov	r0, r6
 8000304:	4631      	mov	r1, r6
 8000306:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030a:	fab3 f683 	clz	r6, r3
 800030e:	2e00      	cmp	r6, #0
 8000310:	d14a      	bne.n	80003a8 <__udivmoddi4+0x160>
 8000312:	428b      	cmp	r3, r1
 8000314:	d302      	bcc.n	800031c <__udivmoddi4+0xd4>
 8000316:	4282      	cmp	r2, r0
 8000318:	f200 80f9 	bhi.w	800050e <__udivmoddi4+0x2c6>
 800031c:	1a84      	subs	r4, r0, r2
 800031e:	eb61 0303 	sbc.w	r3, r1, r3
 8000322:	2001      	movs	r0, #1
 8000324:	469e      	mov	lr, r3
 8000326:	2d00      	cmp	r5, #0
 8000328:	d0e0      	beq.n	80002ec <__udivmoddi4+0xa4>
 800032a:	e9c5 4e00 	strd	r4, lr, [r5]
 800032e:	e7dd      	b.n	80002ec <__udivmoddi4+0xa4>
 8000330:	b902      	cbnz	r2, 8000334 <__udivmoddi4+0xec>
 8000332:	deff      	udf	#255	; 0xff
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	2a00      	cmp	r2, #0
 800033a:	f040 8092 	bne.w	8000462 <__udivmoddi4+0x21a>
 800033e:	eba1 010c 	sub.w	r1, r1, ip
 8000342:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000346:	fa1f fe8c 	uxth.w	lr, ip
 800034a:	2601      	movs	r6, #1
 800034c:	0c20      	lsrs	r0, r4, #16
 800034e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000352:	fb07 1113 	mls	r1, r7, r3, r1
 8000356:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800035a:	fb0e f003 	mul.w	r0, lr, r3
 800035e:	4288      	cmp	r0, r1
 8000360:	d908      	bls.n	8000374 <__udivmoddi4+0x12c>
 8000362:	eb1c 0101 	adds.w	r1, ip, r1
 8000366:	f103 38ff 	add.w	r8, r3, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x12a>
 800036c:	4288      	cmp	r0, r1
 800036e:	f200 80cb 	bhi.w	8000508 <__udivmoddi4+0x2c0>
 8000372:	4643      	mov	r3, r8
 8000374:	1a09      	subs	r1, r1, r0
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb1 f0f7 	udiv	r0, r1, r7
 800037c:	fb07 1110 	mls	r1, r7, r0, r1
 8000380:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000384:	fb0e fe00 	mul.w	lr, lr, r0
 8000388:	45a6      	cmp	lr, r4
 800038a:	d908      	bls.n	800039e <__udivmoddi4+0x156>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 31ff 	add.w	r1, r0, #4294967295
 8000394:	d202      	bcs.n	800039c <__udivmoddi4+0x154>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f200 80bb 	bhi.w	8000512 <__udivmoddi4+0x2ca>
 800039c:	4608      	mov	r0, r1
 800039e:	eba4 040e 	sub.w	r4, r4, lr
 80003a2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003a6:	e79c      	b.n	80002e2 <__udivmoddi4+0x9a>
 80003a8:	f1c6 0720 	rsb	r7, r6, #32
 80003ac:	40b3      	lsls	r3, r6
 80003ae:	fa22 fc07 	lsr.w	ip, r2, r7
 80003b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003b6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ba:	fa01 f306 	lsl.w	r3, r1, r6
 80003be:	431c      	orrs	r4, r3
 80003c0:	40f9      	lsrs	r1, r7
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ca:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ce:	0c20      	lsrs	r0, r4, #16
 80003d0:	fa1f fe8c 	uxth.w	lr, ip
 80003d4:	fb09 1118 	mls	r1, r9, r8, r1
 80003d8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003dc:	fb08 f00e 	mul.w	r0, r8, lr
 80003e0:	4288      	cmp	r0, r1
 80003e2:	fa02 f206 	lsl.w	r2, r2, r6
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b8>
 80003e8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ec:	f108 3aff 	add.w	sl, r8, #4294967295
 80003f0:	f080 8088 	bcs.w	8000504 <__udivmoddi4+0x2bc>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f240 8085 	bls.w	8000504 <__udivmoddi4+0x2bc>
 80003fa:	f1a8 0802 	sub.w	r8, r8, #2
 80003fe:	4461      	add	r1, ip
 8000400:	1a09      	subs	r1, r1, r0
 8000402:	b2a4      	uxth	r4, r4
 8000404:	fbb1 f0f9 	udiv	r0, r1, r9
 8000408:	fb09 1110 	mls	r1, r9, r0, r1
 800040c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000410:	fb00 fe0e 	mul.w	lr, r0, lr
 8000414:	458e      	cmp	lr, r1
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1e2>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000420:	d26c      	bcs.n	80004fc <__udivmoddi4+0x2b4>
 8000422:	458e      	cmp	lr, r1
 8000424:	d96a      	bls.n	80004fc <__udivmoddi4+0x2b4>
 8000426:	3802      	subs	r0, #2
 8000428:	4461      	add	r1, ip
 800042a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800042e:	fba0 9402 	umull	r9, r4, r0, r2
 8000432:	eba1 010e 	sub.w	r1, r1, lr
 8000436:	42a1      	cmp	r1, r4
 8000438:	46c8      	mov	r8, r9
 800043a:	46a6      	mov	lr, r4
 800043c:	d356      	bcc.n	80004ec <__udivmoddi4+0x2a4>
 800043e:	d053      	beq.n	80004e8 <__udivmoddi4+0x2a0>
 8000440:	b15d      	cbz	r5, 800045a <__udivmoddi4+0x212>
 8000442:	ebb3 0208 	subs.w	r2, r3, r8
 8000446:	eb61 010e 	sbc.w	r1, r1, lr
 800044a:	fa01 f707 	lsl.w	r7, r1, r7
 800044e:	fa22 f306 	lsr.w	r3, r2, r6
 8000452:	40f1      	lsrs	r1, r6
 8000454:	431f      	orrs	r7, r3
 8000456:	e9c5 7100 	strd	r7, r1, [r5]
 800045a:	2600      	movs	r6, #0
 800045c:	4631      	mov	r1, r6
 800045e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000462:	f1c2 0320 	rsb	r3, r2, #32
 8000466:	40d8      	lsrs	r0, r3
 8000468:	fa0c fc02 	lsl.w	ip, ip, r2
 800046c:	fa21 f303 	lsr.w	r3, r1, r3
 8000470:	4091      	lsls	r1, r2
 8000472:	4301      	orrs	r1, r0
 8000474:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000480:	fb07 3610 	mls	r6, r7, r0, r3
 8000484:	0c0b      	lsrs	r3, r1, #16
 8000486:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800048a:	fb00 f60e 	mul.w	r6, r0, lr
 800048e:	429e      	cmp	r6, r3
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d908      	bls.n	80004a8 <__udivmoddi4+0x260>
 8000496:	eb1c 0303 	adds.w	r3, ip, r3
 800049a:	f100 38ff 	add.w	r8, r0, #4294967295
 800049e:	d22f      	bcs.n	8000500 <__udivmoddi4+0x2b8>
 80004a0:	429e      	cmp	r6, r3
 80004a2:	d92d      	bls.n	8000500 <__udivmoddi4+0x2b8>
 80004a4:	3802      	subs	r0, #2
 80004a6:	4463      	add	r3, ip
 80004a8:	1b9b      	subs	r3, r3, r6
 80004aa:	b289      	uxth	r1, r1
 80004ac:	fbb3 f6f7 	udiv	r6, r3, r7
 80004b0:	fb07 3316 	mls	r3, r7, r6, r3
 80004b4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b8:	fb06 f30e 	mul.w	r3, r6, lr
 80004bc:	428b      	cmp	r3, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x28a>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c8:	d216      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 80004ca:	428b      	cmp	r3, r1
 80004cc:	d914      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 80004ce:	3e02      	subs	r6, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	1ac9      	subs	r1, r1, r3
 80004d4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d8:	e738      	b.n	800034c <__udivmoddi4+0x104>
 80004da:	462e      	mov	r6, r5
 80004dc:	4628      	mov	r0, r5
 80004de:	e705      	b.n	80002ec <__udivmoddi4+0xa4>
 80004e0:	4606      	mov	r6, r0
 80004e2:	e6e3      	b.n	80002ac <__udivmoddi4+0x64>
 80004e4:	4618      	mov	r0, r3
 80004e6:	e6f8      	b.n	80002da <__udivmoddi4+0x92>
 80004e8:	454b      	cmp	r3, r9
 80004ea:	d2a9      	bcs.n	8000440 <__udivmoddi4+0x1f8>
 80004ec:	ebb9 0802 	subs.w	r8, r9, r2
 80004f0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004f4:	3801      	subs	r0, #1
 80004f6:	e7a3      	b.n	8000440 <__udivmoddi4+0x1f8>
 80004f8:	4646      	mov	r6, r8
 80004fa:	e7ea      	b.n	80004d2 <__udivmoddi4+0x28a>
 80004fc:	4620      	mov	r0, r4
 80004fe:	e794      	b.n	800042a <__udivmoddi4+0x1e2>
 8000500:	4640      	mov	r0, r8
 8000502:	e7d1      	b.n	80004a8 <__udivmoddi4+0x260>
 8000504:	46d0      	mov	r8, sl
 8000506:	e77b      	b.n	8000400 <__udivmoddi4+0x1b8>
 8000508:	3b02      	subs	r3, #2
 800050a:	4461      	add	r1, ip
 800050c:	e732      	b.n	8000374 <__udivmoddi4+0x12c>
 800050e:	4630      	mov	r0, r6
 8000510:	e709      	b.n	8000326 <__udivmoddi4+0xde>
 8000512:	4464      	add	r4, ip
 8000514:	3802      	subs	r0, #2
 8000516:	e742      	b.n	800039e <__udivmoddi4+0x156>

08000518 <__aeabi_idiv0>:
 8000518:	4770      	bx	lr
 800051a:	bf00      	nop

0800051c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000520:	f000 fb2f 	bl	8000b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000524:	f000 f81a 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000528:	f000 f96e 	bl	8000808 <MX_GPIO_Init>
  MX_TIM1_Init();
 800052c:	f000 f862 	bl	80005f4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000530:	f000 f91e 	bl	8000770 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8000534:	2100      	movs	r1, #0
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x3c>)
 8000538:	f001 ff50 	bl	80023dc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800053c:	2100      	movs	r1, #0
 800053e:	4806      	ldr	r0, [pc, #24]	; (8000558 <main+0x3c>)
 8000540:	f002 ff1c 	bl	800337c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8000544:	2104      	movs	r1, #4
 8000546:	4804      	ldr	r0, [pc, #16]	; (8000558 <main+0x3c>)
 8000548:	f001 ff48 	bl	80023dc <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800054c:	2104      	movs	r1, #4
 800054e:	4802      	ldr	r0, [pc, #8]	; (8000558 <main+0x3c>)
 8000550:	f002 ff14 	bl	800337c <HAL_TIMEx_PWMN_Start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000554:	e7fe      	b.n	8000554 <main+0x38>
 8000556:	bf00      	nop
 8000558:	20000028 	.word	0x20000028

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b094      	sub	sp, #80	; 0x50
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0318 	add.w	r3, r7, #24
 8000566:	2238      	movs	r2, #56	; 0x38
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f003 ff5e 	bl	800442c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2200      	movs	r2, #0
 8000574:	601a      	str	r2, [r3, #0]
 8000576:	605a      	str	r2, [r3, #4]
 8000578:	609a      	str	r2, [r3, #8]
 800057a:	60da      	str	r2, [r3, #12]
 800057c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800057e:	2000      	movs	r0, #0
 8000580:	f000 fe3e 	bl	8001200 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000584:	2302      	movs	r3, #2
 8000586:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000588:	f44f 7380 	mov.w	r3, #256	; 0x100
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800058e:	2340      	movs	r3, #64	; 0x40
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000592:	2302      	movs	r3, #2
 8000594:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800059a:	2304      	movs	r3, #4
 800059c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800059e:	2355      	movs	r3, #85	; 0x55
 80005a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005aa:	2302      	movs	r3, #2
 80005ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ae:	f107 0318 	add.w	r3, r7, #24
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fed8 	bl	8001368 <HAL_RCC_OscConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005be:	f000 f999 	bl	80008f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c2:	230f      	movs	r3, #15
 80005c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c6:	2303      	movs	r3, #3
 80005c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2104      	movs	r1, #4
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 f9dc 	bl	8001998 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80005e6:	f000 f985 	bl	80008f4 <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
	...

080005f4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b09c      	sub	sp, #112	; 0x70
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000614:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
 800061c:	605a      	str	r2, [r3, #4]
 800061e:	609a      	str	r2, [r3, #8]
 8000620:	60da      	str	r2, [r3, #12]
 8000622:	611a      	str	r2, [r3, #16]
 8000624:	615a      	str	r2, [r3, #20]
 8000626:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f003 fefc 	bl	800442c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000634:	4b4c      	ldr	r3, [pc, #304]	; (8000768 <MX_TIM1_Init+0x174>)
 8000636:	4a4d      	ldr	r2, [pc, #308]	; (800076c <MX_TIM1_Init+0x178>)
 8000638:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 800063a:	4b4b      	ldr	r3, [pc, #300]	; (8000768 <MX_TIM1_Init+0x174>)
 800063c:	2209      	movs	r2, #9
 800063e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b49      	ldr	r3, [pc, #292]	; (8000768 <MX_TIM1_Init+0x174>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8000646:	4b48      	ldr	r3, [pc, #288]	; (8000768 <MX_TIM1_Init+0x174>)
 8000648:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800064c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064e:	4b46      	ldr	r3, [pc, #280]	; (8000768 <MX_TIM1_Init+0x174>)
 8000650:	2200      	movs	r2, #0
 8000652:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000654:	4b44      	ldr	r3, [pc, #272]	; (8000768 <MX_TIM1_Init+0x174>)
 8000656:	2200      	movs	r2, #0
 8000658:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800065a:	4b43      	ldr	r3, [pc, #268]	; (8000768 <MX_TIM1_Init+0x174>)
 800065c:	2280      	movs	r2, #128	; 0x80
 800065e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000660:	4841      	ldr	r0, [pc, #260]	; (8000768 <MX_TIM1_Init+0x174>)
 8000662:	f001 fe03 	bl	800226c <HAL_TIM_Base_Init>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800066c:	f000 f942 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000670:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000674:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000676:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800067a:	4619      	mov	r1, r3
 800067c:	483a      	ldr	r0, [pc, #232]	; (8000768 <MX_TIM1_Init+0x174>)
 800067e:	f002 f8d3 	bl	8002828 <HAL_TIM_ConfigClockSource>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000688:	f000 f934 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800068c:	4836      	ldr	r0, [pc, #216]	; (8000768 <MX_TIM1_Init+0x174>)
 800068e:	f001 fe44 	bl	800231a <HAL_TIM_PWM_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000698:	f000 f92c 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800069c:	2300      	movs	r3, #0
 800069e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80006a8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006ac:	4619      	mov	r1, r3
 80006ae:	482e      	ldr	r0, [pc, #184]	; (8000768 <MX_TIM1_Init+0x174>)
 80006b0:	f002 ff26 	bl	8003500 <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80006ba:	f000 f91b 	bl	80008f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006be:	2360      	movs	r3, #96	; 0x60
 80006c0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 613;
 80006c2:	f240 2365 	movw	r3, #613	; 0x265
 80006c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006c8:	2300      	movs	r3, #0
 80006ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80006cc:	2300      	movs	r3, #0
 80006ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80006d4:	2300      	movs	r3, #0
 80006d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80006d8:	2300      	movs	r3, #0
 80006da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006e0:	2200      	movs	r2, #0
 80006e2:	4619      	mov	r1, r3
 80006e4:	4820      	ldr	r0, [pc, #128]	; (8000768 <MX_TIM1_Init+0x174>)
 80006e6:	f001 ff8b 	bl	8002600 <HAL_TIM_PWM_ConfigChannel>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80006f0:	f000 f900 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80006f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006f8:	2204      	movs	r2, #4
 80006fa:	4619      	mov	r1, r3
 80006fc:	481a      	ldr	r0, [pc, #104]	; (8000768 <MX_TIM1_Init+0x174>)
 80006fe:	f001 ff7f 	bl	8002600 <HAL_TIM_PWM_ConfigChannel>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d001      	beq.n	800070c <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8000708:	f000 f8f4 	bl	80008f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800070c:	2300      	movs	r3, #0
 800070e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000710:	2300      	movs	r3, #0
 8000712:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 210;
 8000718:	23d2      	movs	r3, #210	; 0xd2
 800071a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000724:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800072a:	2300      	movs	r3, #0
 800072c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000736:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000738:	2300      	movs	r3, #0
 800073a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800073c:	2300      	movs	r3, #0
 800073e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000740:	2300      	movs	r3, #0
 8000742:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000744:	1d3b      	adds	r3, r7, #4
 8000746:	4619      	mov	r1, r3
 8000748:	4807      	ldr	r0, [pc, #28]	; (8000768 <MX_TIM1_Init+0x174>)
 800074a:	f002 ff6f 	bl	800362c <HAL_TIMEx_ConfigBreakDeadTime>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x164>
  {
    Error_Handler();
 8000754:	f000 f8ce 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000758:	4803      	ldr	r0, [pc, #12]	; (8000768 <MX_TIM1_Init+0x174>)
 800075a:	f000 f915 	bl	8000988 <HAL_TIM_MspPostInit>

}
 800075e:	bf00      	nop
 8000760:	3770      	adds	r7, #112	; 0x70
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	20000028 	.word	0x20000028
 800076c:	40012c00 	.word	0x40012c00

08000770 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000774:	4b22      	ldr	r3, [pc, #136]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000776:	4a23      	ldr	r2, [pc, #140]	; (8000804 <MX_USART2_UART_Init+0x94>)
 8000778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_USART2_UART_Init+0x90>)
 800077c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000788:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_USART2_UART_Init+0x90>)
 800078a:	2200      	movs	r2, #0
 800078c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800078e:	4b1c      	ldr	r3, [pc, #112]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000790:	2200      	movs	r2, #0
 8000792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000794:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_USART2_UART_Init+0x90>)
 8000796:	220c      	movs	r2, #12
 8000798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800079a:	4b19      	ldr	r3, [pc, #100]	; (8000800 <MX_USART2_UART_Init+0x90>)
 800079c:	2200      	movs	r2, #0
 800079e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ac:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007b8:	4811      	ldr	r0, [pc, #68]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007ba:	f003 f80e 	bl	80037da <HAL_UART_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80007c4:	f000 f896 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007c8:	2100      	movs	r1, #0
 80007ca:	480d      	ldr	r0, [pc, #52]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007cc:	f003 fd40 	bl	8004250 <HAL_UARTEx_SetTxFifoThreshold>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80007d6:	f000 f88d 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007da:	2100      	movs	r1, #0
 80007dc:	4808      	ldr	r0, [pc, #32]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007de:	f003 fd75 	bl	80042cc <HAL_UARTEx_SetRxFifoThreshold>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80007e8:	f000 f884 	bl	80008f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80007ec:	4804      	ldr	r0, [pc, #16]	; (8000800 <MX_USART2_UART_Init+0x90>)
 80007ee:	f003 fcf6 	bl	80041de <HAL_UARTEx_DisableFifoMode>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80007f8:	f000 f87c 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007fc:	bf00      	nop
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000074 	.word	0x20000074
 8000804:	40004400 	.word	0x40004400

08000808 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b088      	sub	sp, #32
 800080c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2200      	movs	r2, #0
 8000814:	601a      	str	r2, [r3, #0]
 8000816:	605a      	str	r2, [r3, #4]
 8000818:	609a      	str	r2, [r3, #8]
 800081a:	60da      	str	r2, [r3, #12]
 800081c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000822:	4a32      	ldr	r2, [pc, #200]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082a:	4b30      	ldr	r3, [pc, #192]	; (80008ec <MX_GPIO_Init+0xe4>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	60bb      	str	r3, [r7, #8]
 8000834:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4b2d      	ldr	r3, [pc, #180]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083a:	4a2c      	ldr	r2, [pc, #176]	; (80008ec <MX_GPIO_Init+0xe4>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000842:	4b2a      	ldr	r3, [pc, #168]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000844:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	607b      	str	r3, [r7, #4]
 800084c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	4b27      	ldr	r3, [pc, #156]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000852:	4a26      	ldr	r2, [pc, #152]	; (80008ec <MX_GPIO_Init+0xe4>)
 8000854:	f043 0301 	orr.w	r3, r3, #1
 8000858:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085a:	4b24      	ldr	r3, [pc, #144]	; (80008ec <MX_GPIO_Init+0xe4>)
 800085c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800085e:	f003 0301 	and.w	r3, r3, #1
 8000862:	603b      	str	r3, [r7, #0]
 8000864:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISO_RESET_GPIO_Port, ISO_RESET_Pin, GPIO_PIN_RESET);
 8000866:	2200      	movs	r2, #0
 8000868:	2108      	movs	r1, #8
 800086a:	4821      	ldr	r0, [pc, #132]	; (80008f0 <MX_GPIO_Init+0xe8>)
 800086c:	f000 fc8c 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000870:	2200      	movs	r2, #0
 8000872:	2120      	movs	r1, #32
 8000874:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000878:	f000 fc86 	bl	8001188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000882:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000886:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4619      	mov	r1, r3
 8000892:	4817      	ldr	r0, [pc, #92]	; (80008f0 <MX_GPIO_Init+0xe8>)
 8000894:	f000 faf6 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : ISO_RESET_Pin */
  GPIO_InitStruct.Pin = ISO_RESET_Pin;
 8000898:	2308      	movs	r3, #8
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a4:	2300      	movs	r3, #0
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(ISO_RESET_GPIO_Port, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4810      	ldr	r0, [pc, #64]	; (80008f0 <MX_GPIO_Init+0xe8>)
 80008b0:	f000 fae8 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80008b4:	2320      	movs	r3, #32
 80008b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b8:	2301      	movs	r3, #1
 80008ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c0:	2300      	movs	r3, #0
 80008c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ce:	f000 fad9 	bl	8000e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2100      	movs	r1, #0
 80008d6:	2028      	movs	r0, #40	; 0x28
 80008d8:	f000 fa9f 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008dc:	2028      	movs	r0, #40	; 0x28
 80008de:	f000 fab6 	bl	8000e4e <HAL_NVIC_EnableIRQ>

}
 80008e2:	bf00      	nop
 80008e4:	3720      	adds	r7, #32
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	40021000 	.word	0x40021000
 80008f0:	48000800 	.word	0x48000800

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <HAL_MspInit+0x44>)
 8000908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800090a:	4a0e      	ldr	r2, [pc, #56]	; (8000944 <HAL_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	6613      	str	r3, [r2, #96]	; 0x60
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <HAL_MspInit+0x44>)
 8000914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_MspInit+0x44>)
 8000920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000922:	4a08      	ldr	r2, [pc, #32]	; (8000944 <HAL_MspInit+0x44>)
 8000924:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000928:	6593      	str	r3, [r2, #88]	; 0x58
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_MspInit+0x44>)
 800092c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800092e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000932:	603b      	str	r3, [r7, #0]
 8000934:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000936:	f000 fd07 	bl	8001348 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40021000 	.word	0x40021000

08000948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000948:	b480      	push	{r7}
 800094a:	b085      	sub	sp, #20
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <HAL_TIM_Base_MspInit+0x38>)
 8000956:	4293      	cmp	r3, r2
 8000958:	d10b      	bne.n	8000972 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 800095c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095e:	4a09      	ldr	r2, [pc, #36]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 8000960:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000964:	6613      	str	r3, [r2, #96]	; 0x60
 8000966:	4b07      	ldr	r3, [pc, #28]	; (8000984 <HAL_TIM_Base_MspInit+0x3c>)
 8000968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000972:	bf00      	nop
 8000974:	3714      	adds	r7, #20
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40012c00 	.word	0x40012c00
 8000984:	40021000 	.word	0x40021000

08000988 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a12      	ldr	r2, [pc, #72]	; (80009f0 <HAL_TIM_MspPostInit+0x68>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d11d      	bne.n	80009e6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <HAL_TIM_MspPostInit+0x6c>)
 80009ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ae:	4a11      	ldr	r2, [pc, #68]	; (80009f4 <HAL_TIM_MspPostInit+0x6c>)
 80009b0:	f043 0301 	orr.w	r3, r3, #1
 80009b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_TIM_MspPostInit+0x6c>)
 80009b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ba:	f003 0301 	and.w	r3, r3, #1
 80009be:	60bb      	str	r3, [r7, #8]
 80009c0:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA11     ------> TIM1_CH1N
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
 80009c2:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80009c6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d0:	2300      	movs	r3, #0
 80009d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80009d4:	2306      	movs	r3, #6
 80009d6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009d8:	f107 030c 	add.w	r3, r7, #12
 80009dc:	4619      	mov	r1, r3
 80009de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009e2:	f000 fa4f 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80009e6:	bf00      	nop
 80009e8:	3720      	adds	r7, #32
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40012c00 	.word	0x40012c00
 80009f4:	40021000 	.word	0x40021000

080009f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b09e      	sub	sp, #120	; 0x78
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a04:	2200      	movs	r2, #0
 8000a06:	601a      	str	r2, [r3, #0]
 8000a08:	605a      	str	r2, [r3, #4]
 8000a0a:	609a      	str	r2, [r3, #8]
 8000a0c:	60da      	str	r2, [r3, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a10:	f107 0310 	add.w	r3, r7, #16
 8000a14:	2254      	movs	r2, #84	; 0x54
 8000a16:	2100      	movs	r1, #0
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f003 fd07 	bl	800442c <memset>
  if(huart->Instance==USART2)
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a1f      	ldr	r2, [pc, #124]	; (8000aa0 <HAL_UART_MspInit+0xa8>)
 8000a24:	4293      	cmp	r3, r2
 8000a26:	d136      	bne.n	8000a96 <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a30:	f107 0310 	add.w	r3, r7, #16
 8000a34:	4618      	mov	r0, r3
 8000a36:	f001 f9cb 	bl	8001dd0 <HAL_RCCEx_PeriphCLKConfig>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000a40:	f7ff ff58 	bl	80008f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <HAL_UART_MspInit+0xac>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a48:	4a16      	ldr	r2, [pc, #88]	; (8000aa4 <HAL_UART_MspInit+0xac>)
 8000a4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <HAL_UART_MspInit+0xac>)
 8000a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_UART_MspInit+0xac>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a60:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_UART_MspInit+0xac>)
 8000a62:	f043 0301 	orr.w	r3, r3, #1
 8000a66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a68:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_UART_MspInit+0xac>)
 8000a6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a6c:	f003 0301 	and.w	r3, r3, #1
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a74:	230c      	movs	r3, #12
 8000a76:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2300      	movs	r3, #0
 8000a82:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a84:	2307      	movs	r3, #7
 8000a86:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a92:	f000 f9f7 	bl	8000e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a96:	bf00      	nop
 8000a98:	3778      	adds	r7, #120	; 0x78
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40004400 	.word	0x40004400
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 f898 	bl	8000c28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000b00:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000b04:	f000 fb58 	bl	80011b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000b08:	bf00      	nop
 8000b0a:	bd80      	pop	{r7, pc}

08000b0c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b5a:	f7ff ffd7 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f003 fc41 	bl	80043e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b62:	f7ff fcdb 	bl	800051c <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
  ldr   r0, =_estack
 8000b68:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b74:	080044a4 	.word	0x080044a4
  ldr r2, =_sbss
 8000b78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b7c:	20000108 	.word	0x20000108

08000b80 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_2_IRQHandler>

08000b82 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b8c:	2003      	movs	r0, #3
 8000b8e:	f000 f939 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b92:	2000      	movs	r0, #0
 8000b94:	f000 f80e 	bl	8000bb4 <HAL_InitTick>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d002      	beq.n	8000ba4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b9e:	2301      	movs	r3, #1
 8000ba0:	71fb      	strb	r3, [r7, #7]
 8000ba2:	e001      	b.n	8000ba8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ba4:	f7ff feac 	bl	8000900 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ba8:	79fb      	ldrb	r3, [r7, #7]

}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000bc0:	4b16      	ldr	r3, [pc, #88]	; (8000c1c <HAL_InitTick+0x68>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d022      	beq.n	8000c0e <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <HAL_InitTick+0x6c>)
 8000bca:	681a      	ldr	r2, [r3, #0]
 8000bcc:	4b13      	ldr	r3, [pc, #76]	; (8000c1c <HAL_InitTick+0x68>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8000bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f000 f944 	bl	8000e6a <HAL_SYSTICK_Config>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10f      	bne.n	8000c08 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2b0f      	cmp	r3, #15
 8000bec:	d809      	bhi.n	8000c02 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	6879      	ldr	r1, [r7, #4]
 8000bf2:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf6:	f000 f910 	bl	8000e1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <HAL_InitTick+0x70>)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	e007      	b.n	8000c12 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	73fb      	strb	r3, [r7, #15]
 8000c06:	e004      	b.n	8000c12 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	73fb      	strb	r3, [r7, #15]
 8000c0c:	e001      	b.n	8000c12 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0e:	2301      	movs	r3, #1
 8000c10:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000008 	.word	0x20000008
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000004 	.word	0x20000004

08000c28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c2c:	4b05      	ldr	r3, [pc, #20]	; (8000c44 <HAL_IncTick+0x1c>)
 8000c2e:	681a      	ldr	r2, [r3, #0]
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x20>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4413      	add	r3, r2
 8000c36:	4a03      	ldr	r2, [pc, #12]	; (8000c44 <HAL_IncTick+0x1c>)
 8000c38:	6013      	str	r3, [r2, #0]
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	20000104 	.word	0x20000104
 8000c48:	20000008 	.word	0x20000008

08000c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c50:	4b03      	ldr	r3, [pc, #12]	; (8000c60 <HAL_GetTick+0x14>)
 8000c52:	681b      	ldr	r3, [r3, #0]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000104 	.word	0x20000104

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e28:	f7ff ff40 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2e:	687a      	ldr	r2, [r7, #4]
 8000e30:	68b9      	ldr	r1, [r7, #8]
 8000e32:	6978      	ldr	r0, [r7, #20]
 8000e34:	f7ff ff90 	bl	8000d58 <NVIC_EncodePriority>
 8000e38:	4602      	mov	r2, r0
 8000e3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3e:	4611      	mov	r1, r2
 8000e40:	4618      	mov	r0, r3
 8000e42:	f7ff ff5f 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e46:	bf00      	nop
 8000e48:	3718      	adds	r7, #24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b082      	sub	sp, #8
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff ff33 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	6878      	ldr	r0, [r7, #4]
 8000e74:	f7ff ffa4 	bl	8000dc0 <SysTick_Config>
 8000e78:	4603      	mov	r3, r0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3708      	adds	r7, #8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
	...

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b087      	sub	sp, #28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000e92:	e15a      	b.n	800114a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	681a      	ldr	r2, [r3, #0]
 8000e98:	2101      	movs	r1, #1
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 814c 	beq.w	8001144 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d005      	beq.n	8000ec4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d130      	bne.n	8000f26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	2203      	movs	r2, #3
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	68da      	ldr	r2, [r3, #12]
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000efa:	2201      	movs	r2, #1
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43db      	mvns	r3, r3
 8000f04:	693a      	ldr	r2, [r7, #16]
 8000f06:	4013      	ands	r3, r2
 8000f08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	091b      	lsrs	r3, r3, #4
 8000f10:	f003 0201 	and.w	r2, r3, #1
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	4313      	orrs	r3, r2
 8000f1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	693a      	ldr	r2, [r7, #16]
 8000f24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b03      	cmp	r3, #3
 8000f30:	d017      	beq.n	8000f62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	2203      	movs	r2, #3
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	43db      	mvns	r3, r3
 8000f44:	693a      	ldr	r2, [r7, #16]
 8000f46:	4013      	ands	r3, r2
 8000f48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	689a      	ldr	r2, [r3, #8]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d123      	bne.n	8000fb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	08da      	lsrs	r2, r3, #3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3208      	adds	r2, #8
 8000f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	009b      	lsls	r3, r3, #2
 8000f84:	220f      	movs	r2, #15
 8000f86:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	691a      	ldr	r2, [r3, #16]
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	f003 0307 	and.w	r3, r3, #7
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	08da      	lsrs	r2, r3, #3
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3208      	adds	r2, #8
 8000fb0:	6939      	ldr	r1, [r7, #16]
 8000fb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	2203      	movs	r2, #3
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f003 0203 	and.w	r2, r3, #3
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	fa02 f303 	lsl.w	r3, r2, r3
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	f000 80a6 	beq.w	8001144 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff8:	4b5b      	ldr	r3, [pc, #364]	; (8001168 <HAL_GPIO_Init+0x2e4>)
 8000ffa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffc:	4a5a      	ldr	r2, [pc, #360]	; (8001168 <HAL_GPIO_Init+0x2e4>)
 8000ffe:	f043 0301 	orr.w	r3, r3, #1
 8001002:	6613      	str	r3, [r2, #96]	; 0x60
 8001004:	4b58      	ldr	r3, [pc, #352]	; (8001168 <HAL_GPIO_Init+0x2e4>)
 8001006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001010:	4a56      	ldr	r2, [pc, #344]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	089b      	lsrs	r3, r3, #2
 8001016:	3302      	adds	r3, #2
 8001018:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800101c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800101e:	697b      	ldr	r3, [r7, #20]
 8001020:	f003 0303 	and.w	r3, r3, #3
 8001024:	009b      	lsls	r3, r3, #2
 8001026:	220f      	movs	r2, #15
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	43db      	mvns	r3, r3
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800103a:	d01f      	beq.n	800107c <HAL_GPIO_Init+0x1f8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a4c      	ldr	r2, [pc, #304]	; (8001170 <HAL_GPIO_Init+0x2ec>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d019      	beq.n	8001078 <HAL_GPIO_Init+0x1f4>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a4b      	ldr	r2, [pc, #300]	; (8001174 <HAL_GPIO_Init+0x2f0>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d013      	beq.n	8001074 <HAL_GPIO_Init+0x1f0>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4a      	ldr	r2, [pc, #296]	; (8001178 <HAL_GPIO_Init+0x2f4>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d00d      	beq.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a49      	ldr	r2, [pc, #292]	; (800117c <HAL_GPIO_Init+0x2f8>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d007      	beq.n	800106c <HAL_GPIO_Init+0x1e8>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a48      	ldr	r2, [pc, #288]	; (8001180 <HAL_GPIO_Init+0x2fc>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d101      	bne.n	8001068 <HAL_GPIO_Init+0x1e4>
 8001064:	2305      	movs	r3, #5
 8001066:	e00a      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001068:	2306      	movs	r3, #6
 800106a:	e008      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 800106c:	2304      	movs	r3, #4
 800106e:	e006      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001070:	2303      	movs	r3, #3
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001074:	2302      	movs	r3, #2
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1fa>
 800107c:	2300      	movs	r3, #0
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800108e:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	4b39      	ldr	r3, [pc, #228]	; (8001184 <HAL_GPIO_Init+0x300>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c0:	4a30      	ldr	r2, [pc, #192]	; (8001184 <HAL_GPIO_Init+0x300>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c6:	4b2f      	ldr	r3, [pc, #188]	; (8001184 <HAL_GPIO_Init+0x300>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ea:	4a26      	ldr	r2, [pc, #152]	; (8001184 <HAL_GPIO_Init+0x300>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80010f0:	4b24      	ldr	r3, [pc, #144]	; (8001184 <HAL_GPIO_Init+0x300>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4a1b      	ldr	r2, [pc, #108]	; (8001184 <HAL_GPIO_Init+0x300>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800111a:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <HAL_GPIO_Init+0x300>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113e:	4a11      	ldr	r2, [pc, #68]	; (8001184 <HAL_GPIO_Init+0x300>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f ae9d 	bne.w	8000e94 <HAL_GPIO_Init+0x10>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	48000c00 	.word	0x48000c00
 800117c:	48001000 	.word	0x48001000
 8001180:	48001400 	.word	0x48001400
 8001184:	40010400 	.word	0x40010400

08001188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	460b      	mov	r3, r1
 8001192:	807b      	strh	r3, [r7, #2]
 8001194:	4613      	mov	r3, r2
 8001196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001198:	787b      	ldrb	r3, [r7, #1]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d003      	beq.n	80011a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800119e:	887a      	ldrh	r2, [r7, #2]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011a4:	e002      	b.n	80011ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011a6:	887a      	ldrh	r2, [r7, #2]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011c2:	4b08      	ldr	r3, [pc, #32]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011c4:	695a      	ldr	r2, [r3, #20]
 80011c6:	88fb      	ldrh	r3, [r7, #6]
 80011c8:	4013      	ands	r3, r2
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d006      	beq.n	80011dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011ce:	4a05      	ldr	r2, [pc, #20]	; (80011e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011d0:	88fb      	ldrh	r3, [r7, #6]
 80011d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011d4:	88fb      	ldrh	r3, [r7, #6]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f000 f806 	bl	80011e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80011dc:	bf00      	nop
 80011de:	3708      	adds	r7, #8
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40010400 	.word	0x40010400

080011e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b083      	sub	sp, #12
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011f2:	bf00      	nop
 80011f4:	370c      	adds	r7, #12
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
	...

08001200 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d141      	bne.n	8001292 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800120e:	4b4b      	ldr	r3, [pc, #300]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001216:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800121a:	d131      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800121c:	4b47      	ldr	r3, [pc, #284]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800121e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001222:	4a46      	ldr	r2, [pc, #280]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001224:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001228:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800122c:	4b43      	ldr	r3, [pc, #268]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001234:	4a41      	ldr	r2, [pc, #260]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800123c:	4b40      	ldr	r3, [pc, #256]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2232      	movs	r2, #50	; 0x32
 8001242:	fb02 f303 	mul.w	r3, r2, r3
 8001246:	4a3f      	ldr	r2, [pc, #252]	; (8001344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001248:	fba2 2303 	umull	r2, r3, r2, r3
 800124c:	0c9b      	lsrs	r3, r3, #18
 800124e:	3301      	adds	r3, #1
 8001250:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001252:	e002      	b.n	800125a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	3b01      	subs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800125a:	4b38      	ldr	r3, [pc, #224]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001266:	d102      	bne.n	800126e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f2      	bne.n	8001254 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800126e:	4b33      	ldr	r3, [pc, #204]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001276:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800127a:	d158      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800127c:	2303      	movs	r3, #3
 800127e:	e057      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001280:	4b2e      	ldr	r3, [pc, #184]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001286:	4a2d      	ldr	r2, [pc, #180]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800128c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001290:	e04d      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001298:	d141      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800129a:	4b28      	ldr	r3, [pc, #160]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a6:	d131      	bne.n	800130c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ae:	4a23      	ldr	r2, [pc, #140]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c0:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012c8:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2232      	movs	r2, #50	; 0x32
 80012ce:	fb02 f303 	mul.w	r3, r2, r3
 80012d2:	4a1c      	ldr	r2, [pc, #112]	; (8001344 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012d4:	fba2 2303 	umull	r2, r3, r2, r3
 80012d8:	0c9b      	lsrs	r3, r3, #18
 80012da:	3301      	adds	r3, #1
 80012dc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012de:	e002      	b.n	80012e6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e8:	695b      	ldr	r3, [r3, #20]
 80012ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f2:	d102      	bne.n	80012fa <HAL_PWREx_ControlVoltageScaling+0xfa>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f2      	bne.n	80012e0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fa:	4b10      	ldr	r3, [pc, #64]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012fc:	695b      	ldr	r3, [r3, #20]
 80012fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001302:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001306:	d112      	bne.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e011      	b.n	8001330 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800130e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001312:	4a0a      	ldr	r2, [pc, #40]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800131c:	e007      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131e:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001326:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001328:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800132e:	2300      	movs	r3, #0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40007000 	.word	0x40007000
 8001340:	20000000 	.word	0x20000000
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001352:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001356:	6093      	str	r3, [r2, #8]
}
 8001358:	bf00      	nop
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40007000 	.word	0x40007000

08001368 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b088      	sub	sp, #32
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e306      	b.n	8001988 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	2b00      	cmp	r3, #0
 8001384:	d075      	beq.n	8001472 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001386:	4b97      	ldr	r3, [pc, #604]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	f003 030c 	and.w	r3, r3, #12
 800138e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001390:	4b94      	ldr	r3, [pc, #592]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	f003 0303 	and.w	r3, r3, #3
 8001398:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	2b0c      	cmp	r3, #12
 800139e:	d102      	bne.n	80013a6 <HAL_RCC_OscConfig+0x3e>
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2b03      	cmp	r3, #3
 80013a4:	d002      	beq.n	80013ac <HAL_RCC_OscConfig+0x44>
 80013a6:	69bb      	ldr	r3, [r7, #24]
 80013a8:	2b08      	cmp	r3, #8
 80013aa:	d10b      	bne.n	80013c4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ac:	4b8d      	ldr	r3, [pc, #564]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d05b      	beq.n	8001470 <HAL_RCC_OscConfig+0x108>
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d157      	bne.n	8001470 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013c0:	2301      	movs	r3, #1
 80013c2:	e2e1      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013cc:	d106      	bne.n	80013dc <HAL_RCC_OscConfig+0x74>
 80013ce:	4b85      	ldr	r3, [pc, #532]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a84      	ldr	r2, [pc, #528]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e01d      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013e4:	d10c      	bne.n	8001400 <HAL_RCC_OscConfig+0x98>
 80013e6:	4b7f      	ldr	r3, [pc, #508]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4a7e      	ldr	r2, [pc, #504]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6013      	str	r3, [r2, #0]
 80013f2:	4b7c      	ldr	r3, [pc, #496]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4a7b      	ldr	r2, [pc, #492]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80013f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013fc:	6013      	str	r3, [r2, #0]
 80013fe:	e00b      	b.n	8001418 <HAL_RCC_OscConfig+0xb0>
 8001400:	4b78      	ldr	r3, [pc, #480]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4a77      	ldr	r2, [pc, #476]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800140a:	6013      	str	r3, [r2, #0]
 800140c:	4b75      	ldr	r3, [pc, #468]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a74      	ldr	r2, [pc, #464]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001412:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001416:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d013      	beq.n	8001448 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001420:	f7ff fc14 	bl	8000c4c <HAL_GetTick>
 8001424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001426:	e008      	b.n	800143a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001428:	f7ff fc10 	bl	8000c4c <HAL_GetTick>
 800142c:	4602      	mov	r2, r0
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d901      	bls.n	800143a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001436:	2303      	movs	r3, #3
 8001438:	e2a6      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800143a:	4b6a      	ldr	r3, [pc, #424]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d0f0      	beq.n	8001428 <HAL_RCC_OscConfig+0xc0>
 8001446:	e014      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001448:	f7ff fc00 	bl	8000c4c <HAL_GetTick>
 800144c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800144e:	e008      	b.n	8001462 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001450:	f7ff fbfc 	bl	8000c4c <HAL_GetTick>
 8001454:	4602      	mov	r2, r0
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	1ad3      	subs	r3, r2, r3
 800145a:	2b64      	cmp	r3, #100	; 0x64
 800145c:	d901      	bls.n	8001462 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800145e:	2303      	movs	r3, #3
 8001460:	e292      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001462:	4b60      	ldr	r3, [pc, #384]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f0      	bne.n	8001450 <HAL_RCC_OscConfig+0xe8>
 800146e:	e000      	b.n	8001472 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001470:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f003 0302 	and.w	r3, r3, #2
 800147a:	2b00      	cmp	r3, #0
 800147c:	d075      	beq.n	800156a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800147e:	4b59      	ldr	r3, [pc, #356]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	f003 030c 	and.w	r3, r3, #12
 8001486:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001488:	4b56      	ldr	r3, [pc, #344]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800148a:	68db      	ldr	r3, [r3, #12]
 800148c:	f003 0303 	and.w	r3, r3, #3
 8001490:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001492:	69bb      	ldr	r3, [r7, #24]
 8001494:	2b0c      	cmp	r3, #12
 8001496:	d102      	bne.n	800149e <HAL_RCC_OscConfig+0x136>
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d002      	beq.n	80014a4 <HAL_RCC_OscConfig+0x13c>
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b04      	cmp	r3, #4
 80014a2:	d11f      	bne.n	80014e4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014a4:	4b4f      	ldr	r3, [pc, #316]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d005      	beq.n	80014bc <HAL_RCC_OscConfig+0x154>
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	68db      	ldr	r3, [r3, #12]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e265      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014bc:	4b49      	ldr	r3, [pc, #292]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	691b      	ldr	r3, [r3, #16]
 80014c8:	061b      	lsls	r3, r3, #24
 80014ca:	4946      	ldr	r1, [pc, #280]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014cc:	4313      	orrs	r3, r2
 80014ce:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80014d0:	4b45      	ldr	r3, [pc, #276]	; (80015e8 <HAL_RCC_OscConfig+0x280>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fb6d 	bl	8000bb4 <HAL_InitTick>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d043      	beq.n	8001568 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e251      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d023      	beq.n	8001534 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014ec:	4b3d      	ldr	r3, [pc, #244]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4a3c      	ldr	r2, [pc, #240]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80014f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f8:	f7ff fba8 	bl	8000c4c <HAL_GetTick>
 80014fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014fe:	e008      	b.n	8001512 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001500:	f7ff fba4 	bl	8000c4c <HAL_GetTick>
 8001504:	4602      	mov	r2, r0
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	1ad3      	subs	r3, r2, r3
 800150a:	2b02      	cmp	r3, #2
 800150c:	d901      	bls.n	8001512 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800150e:	2303      	movs	r3, #3
 8001510:	e23a      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001512:	4b34      	ldr	r3, [pc, #208]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f0      	beq.n	8001500 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800151e:	4b31      	ldr	r3, [pc, #196]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	061b      	lsls	r3, r3, #24
 800152c:	492d      	ldr	r1, [pc, #180]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800152e:	4313      	orrs	r3, r2
 8001530:	604b      	str	r3, [r1, #4]
 8001532:	e01a      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001534:	4b2b      	ldr	r3, [pc, #172]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a2a      	ldr	r2, [pc, #168]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800153a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800153e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001540:	f7ff fb84 	bl	8000c4c <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001548:	f7ff fb80 	bl	8000c4c <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e216      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800155a:	4b22      	ldr	r3, [pc, #136]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001562:	2b00      	cmp	r3, #0
 8001564:	d1f0      	bne.n	8001548 <HAL_RCC_OscConfig+0x1e0>
 8001566:	e000      	b.n	800156a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001568:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0308 	and.w	r3, r3, #8
 8001572:	2b00      	cmp	r3, #0
 8001574:	d041      	beq.n	80015fa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	695b      	ldr	r3, [r3, #20]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d01c      	beq.n	80015b8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800157e:	4b19      	ldr	r3, [pc, #100]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 8001586:	f043 0301 	orr.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fb5d 	bl	8000c4c <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fb59 	bl	8000c4c <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1ef      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80015a8:	4b0e      	ldr	r3, [pc, #56]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d0ef      	beq.n	8001596 <HAL_RCC_OscConfig+0x22e>
 80015b6:	e020      	b.n	80015fa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015be:	4a09      	ldr	r2, [pc, #36]	; (80015e4 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fb40 	bl	8000c4c <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ce:	e00d      	b.n	80015ec <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fb3c 	bl	8000c4c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d906      	bls.n	80015ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e1d2      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
 80015e2:	bf00      	nop
 80015e4:	40021000 	.word	0x40021000
 80015e8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015ec:	4b8c      	ldr	r3, [pc, #560]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d1ea      	bne.n	80015d0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a6 	beq.w	8001754 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800160c:	4b84      	ldr	r3, [pc, #528]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800160e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	2b00      	cmp	r3, #0
 8001616:	d101      	bne.n	800161c <HAL_RCC_OscConfig+0x2b4>
 8001618:	2301      	movs	r3, #1
 800161a:	e000      	b.n	800161e <HAL_RCC_OscConfig+0x2b6>
 800161c:	2300      	movs	r3, #0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00d      	beq.n	800163e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b7f      	ldr	r3, [pc, #508]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001624:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001626:	4a7e      	ldr	r2, [pc, #504]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800162c:	6593      	str	r3, [r2, #88]	; 0x58
 800162e:	4b7c      	ldr	r3, [pc, #496]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800163a:	2301      	movs	r3, #1
 800163c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800163e:	4b79      	ldr	r3, [pc, #484]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001646:	2b00      	cmp	r3, #0
 8001648:	d118      	bne.n	800167c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800164a:	4b76      	ldr	r3, [pc, #472]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a75      	ldr	r2, [pc, #468]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001656:	f7ff faf9 	bl	8000c4c <HAL_GetTick>
 800165a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800165e:	f7ff faf5 	bl	8000c4c <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	693b      	ldr	r3, [r7, #16]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e18b      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001670:	4b6c      	ldr	r3, [pc, #432]	; (8001824 <HAL_RCC_OscConfig+0x4bc>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0f0      	beq.n	800165e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_RCC_OscConfig+0x32e>
 8001684:	4b66      	ldr	r3, [pc, #408]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800168a:	4a65      	ldr	r2, [pc, #404]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001694:	e024      	b.n	80016e0 <HAL_RCC_OscConfig+0x378>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	2b05      	cmp	r3, #5
 800169c:	d110      	bne.n	80016c0 <HAL_RCC_OscConfig+0x358>
 800169e:	4b60      	ldr	r3, [pc, #384]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016a4:	4a5e      	ldr	r2, [pc, #376]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016a6:	f043 0304 	orr.w	r3, r3, #4
 80016aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016ae:	4b5c      	ldr	r3, [pc, #368]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016b4:	4a5a      	ldr	r2, [pc, #360]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016b6:	f043 0301 	orr.w	r3, r3, #1
 80016ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016be:	e00f      	b.n	80016e0 <HAL_RCC_OscConfig+0x378>
 80016c0:	4b57      	ldr	r3, [pc, #348]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c6:	4a56      	ldr	r2, [pc, #344]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016c8:	f023 0301 	bic.w	r3, r3, #1
 80016cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016d0:	4b53      	ldr	r3, [pc, #332]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016d6:	4a52      	ldr	r2, [pc, #328]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d016      	beq.n	8001716 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016e8:	f7ff fab0 	bl	8000c4c <HAL_GetTick>
 80016ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ee:	e00a      	b.n	8001706 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016f0:	f7ff faac 	bl	8000c4c <HAL_GetTick>
 80016f4:	4602      	mov	r2, r0
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	1ad3      	subs	r3, r2, r3
 80016fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016fe:	4293      	cmp	r3, r2
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e140      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001706:	4b46      	ldr	r3, [pc, #280]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0ed      	beq.n	80016f0 <HAL_RCC_OscConfig+0x388>
 8001714:	e015      	b.n	8001742 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001716:	f7ff fa99 	bl	8000c4c <HAL_GetTick>
 800171a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800171c:	e00a      	b.n	8001734 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800171e:	f7ff fa95 	bl	8000c4c <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	f241 3288 	movw	r2, #5000	; 0x1388
 800172c:	4293      	cmp	r3, r2
 800172e:	d901      	bls.n	8001734 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001730:	2303      	movs	r3, #3
 8001732:	e129      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001734:	4b3a      	ldr	r3, [pc, #232]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d1ed      	bne.n	800171e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001742:	7ffb      	ldrb	r3, [r7, #31]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d105      	bne.n	8001754 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001748:	4b35      	ldr	r3, [pc, #212]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800174a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174c:	4a34      	ldr	r2, [pc, #208]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800174e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0320 	and.w	r3, r3, #32
 800175c:	2b00      	cmp	r3, #0
 800175e:	d03c      	beq.n	80017da <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d01c      	beq.n	80017a2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001768:	4b2d      	ldr	r3, [pc, #180]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800176e:	4a2c      	ldr	r2, [pc, #176]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001770:	f043 0301 	orr.w	r3, r3, #1
 8001774:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001778:	f7ff fa68 	bl	8000c4c <HAL_GetTick>
 800177c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800177e:	e008      	b.n	8001792 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001780:	f7ff fa64 	bl	8000c4c <HAL_GetTick>
 8001784:	4602      	mov	r2, r0
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	1ad3      	subs	r3, r2, r3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d901      	bls.n	8001792 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800178e:	2303      	movs	r3, #3
 8001790:	e0fa      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001792:	4b23      	ldr	r3, [pc, #140]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001794:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0ef      	beq.n	8001780 <HAL_RCC_OscConfig+0x418>
 80017a0:	e01b      	b.n	80017da <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80017a2:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017a8:	4a1d      	ldr	r2, [pc, #116]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017aa:	f023 0301 	bic.w	r3, r3, #1
 80017ae:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017b2:	f7ff fa4b 	bl	8000c4c <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017ba:	f7ff fa47 	bl	8000c4c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e0dd      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1ef      	bne.n	80017ba <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69db      	ldr	r3, [r3, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80d1 	beq.w	8001986 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80017e4:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	f003 030c 	and.w	r3, r3, #12
 80017ec:	2b0c      	cmp	r3, #12
 80017ee:	f000 808b 	beq.w	8001908 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d15e      	bne.n	80018b8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017fa:	4b09      	ldr	r3, [pc, #36]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a08      	ldr	r2, [pc, #32]	; (8001820 <HAL_RCC_OscConfig+0x4b8>)
 8001800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001806:	f7ff fa21 	bl	8000c4c <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800180c:	e00c      	b.n	8001828 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800180e:	f7ff fa1d 	bl	8000c4c <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d905      	bls.n	8001828 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e0b3      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
 8001820:	40021000 	.word	0x40021000
 8001824:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001828:	4b59      	ldr	r3, [pc, #356]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1ec      	bne.n	800180e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001834:	4b56      	ldr	r3, [pc, #344]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001836:	68da      	ldr	r2, [r3, #12]
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_RCC_OscConfig+0x62c>)
 800183a:	4013      	ands	r3, r2
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	6a11      	ldr	r1, [r2, #32]
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001844:	3a01      	subs	r2, #1
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	4311      	orrs	r1, r2
 800184a:	687a      	ldr	r2, [r7, #4]
 800184c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800184e:	0212      	lsls	r2, r2, #8
 8001850:	4311      	orrs	r1, r2
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001856:	0852      	lsrs	r2, r2, #1
 8001858:	3a01      	subs	r2, #1
 800185a:	0552      	lsls	r2, r2, #21
 800185c:	4311      	orrs	r1, r2
 800185e:	687a      	ldr	r2, [r7, #4]
 8001860:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001862:	0852      	lsrs	r2, r2, #1
 8001864:	3a01      	subs	r2, #1
 8001866:	0652      	lsls	r2, r2, #25
 8001868:	4311      	orrs	r1, r2
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800186e:	06d2      	lsls	r2, r2, #27
 8001870:	430a      	orrs	r2, r1
 8001872:	4947      	ldr	r1, [pc, #284]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001874:	4313      	orrs	r3, r2
 8001876:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001878:	4b45      	ldr	r3, [pc, #276]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a44      	ldr	r2, [pc, #272]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800187e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001882:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001884:	4b42      	ldr	r3, [pc, #264]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001886:	68db      	ldr	r3, [r3, #12]
 8001888:	4a41      	ldr	r2, [pc, #260]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 800188a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800188e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001890:	f7ff f9dc 	bl	8000c4c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001898:	f7ff f9d8 	bl	8000c4c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e06e      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018aa:	4b39      	ldr	r3, [pc, #228]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0x530>
 80018b6:	e066      	b.n	8001986 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b8:	4b35      	ldr	r3, [pc, #212]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a34      	ldr	r2, [pc, #208]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018c2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80018c4:	4b32      	ldr	r3, [pc, #200]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	4a31      	ldr	r2, [pc, #196]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018ca:	f023 0303 	bic.w	r3, r3, #3
 80018ce:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80018d0:	4b2f      	ldr	r3, [pc, #188]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	4a2e      	ldr	r2, [pc, #184]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018d6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80018da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e0:	f7ff f9b4 	bl	8000c4c <HAL_GetTick>
 80018e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e6:	e008      	b.n	80018fa <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff f9b0 	bl	8000c4c <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e046      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018fa:	4b25      	ldr	r3, [pc, #148]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1f0      	bne.n	80018e8 <HAL_RCC_OscConfig+0x580>
 8001906:	e03e      	b.n	8001986 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	69db      	ldr	r3, [r3, #28]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d101      	bne.n	8001914 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8001910:	2301      	movs	r3, #1
 8001912:	e039      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8001914:	4b1e      	ldr	r3, [pc, #120]	; (8001990 <HAL_RCC_OscConfig+0x628>)
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	f003 0203 	and.w	r2, r3, #3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6a1b      	ldr	r3, [r3, #32]
 8001924:	429a      	cmp	r2, r3
 8001926:	d12c      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	3b01      	subs	r3, #1
 8001934:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001936:	429a      	cmp	r2, r3
 8001938:	d123      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001944:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001946:	429a      	cmp	r2, r3
 8001948:	d11b      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001954:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8001956:	429a      	cmp	r2, r3
 8001958:	d113      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001964:	085b      	lsrs	r3, r3, #1
 8001966:	3b01      	subs	r3, #1
 8001968:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800196a:	429a      	cmp	r2, r3
 800196c:	d109      	bne.n	8001982 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800197e:	429a      	cmp	r2, r3
 8001980:	d001      	beq.n	8001986 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	019f800c 	.word	0x019f800c

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b086      	sub	sp, #24
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80019a2:	2300      	movs	r3, #0
 80019a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d101      	bne.n	80019b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80019ac:	2301      	movs	r3, #1
 80019ae:	e11e      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019b0:	4b91      	ldr	r3, [pc, #580]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f003 030f 	and.w	r3, r3, #15
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d910      	bls.n	80019e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019be:	4b8e      	ldr	r3, [pc, #568]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f023 020f 	bic.w	r2, r3, #15
 80019c6:	498c      	ldr	r1, [pc, #560]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ce:	4b8a      	ldr	r3, [pc, #552]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 030f 	and.w	r3, r3, #15
 80019d6:	683a      	ldr	r2, [r7, #0]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e106      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f003 0301 	and.w	r3, r3, #1
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d073      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d129      	bne.n	8001a48 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019f4:	4b81      	ldr	r3, [pc, #516]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0f4      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001a04:	f000 f99e 	bl	8001d44 <RCC_GetSysClockFreqFromPLLSource>
 8001a08:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	4a7c      	ldr	r2, [pc, #496]	; (8001c00 <HAL_RCC_ClockConfig+0x268>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d93f      	bls.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a12:	4b7a      	ldr	r3, [pc, #488]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d009      	beq.n	8001a32 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d033      	beq.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d12f      	bne.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a32:	4b72      	ldr	r3, [pc, #456]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a3a:	4a70      	ldr	r2, [pc, #448]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a40:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001a42:	2380      	movs	r3, #128	; 0x80
 8001a44:	617b      	str	r3, [r7, #20]
 8001a46:	e024      	b.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a50:	4b6a      	ldr	r3, [pc, #424]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d109      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0c6      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a60:	4b66      	ldr	r3, [pc, #408]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e0be      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001a70:	f000 f8ce 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001a74:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4a61      	ldr	r2, [pc, #388]	; (8001c00 <HAL_RCC_ClockConfig+0x268>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d909      	bls.n	8001a92 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001a7e:	4b5f      	ldr	r3, [pc, #380]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a86:	4a5d      	ldr	r2, [pc, #372]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a8c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001a8e:	2380      	movs	r3, #128	; 0x80
 8001a90:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a92:	4b5a      	ldr	r3, [pc, #360]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f023 0203 	bic.w	r2, r3, #3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	4957      	ldr	r1, [pc, #348]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001aa4:	f7ff f8d2 	bl	8000c4c <HAL_GetTick>
 8001aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aaa:	e00a      	b.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aac:	f7ff f8ce 	bl	8000c4c <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d901      	bls.n	8001ac2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001abe:	2303      	movs	r3, #3
 8001ac0:	e095      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac2:	4b4e      	ldr	r3, [pc, #312]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 020c 	and.w	r2, r3, #12
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	429a      	cmp	r2, r3
 8001ad2:	d1eb      	bne.n	8001aac <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0302 	and.w	r3, r3, #2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d023      	beq.n	8001b28 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0304 	and.w	r3, r3, #4
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001aec:	4b43      	ldr	r3, [pc, #268]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a42      	ldr	r2, [pc, #264]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001af2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001af6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f003 0308 	and.w	r3, r3, #8
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d007      	beq.n	8001b14 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8001b04:	4b3d      	ldr	r3, [pc, #244]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8001b0c:	4a3b      	ldr	r2, [pc, #236]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b0e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b12:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b14:	4b39      	ldr	r3, [pc, #228]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b16:	689b      	ldr	r3, [r3, #8]
 8001b18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	4936      	ldr	r1, [pc, #216]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b22:	4313      	orrs	r3, r2
 8001b24:	608b      	str	r3, [r1, #8]
 8001b26:	e008      	b.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	2b80      	cmp	r3, #128	; 0x80
 8001b2c:	d105      	bne.n	8001b3a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001b2e:	4b33      	ldr	r3, [pc, #204]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	4a32      	ldr	r2, [pc, #200]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b38:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b3a:	4b2f      	ldr	r3, [pc, #188]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	d21d      	bcs.n	8001b84 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 020f 	bic.w	r2, r3, #15
 8001b50:	4929      	ldr	r1, [pc, #164]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b58:	f7ff f878 	bl	8000c4c <HAL_GetTick>
 8001b5c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	e00a      	b.n	8001b76 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b60:	f7ff f874 	bl	8000c4c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e03b      	b.n	8001bee <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b76:	4b20      	ldr	r3, [pc, #128]	; (8001bf8 <HAL_RCC_ClockConfig+0x260>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 030f 	and.w	r3, r3, #15
 8001b7e:	683a      	ldr	r2, [r7, #0]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d1ed      	bne.n	8001b60 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0304 	and.w	r3, r3, #4
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d008      	beq.n	8001ba2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b90:	4b1a      	ldr	r3, [pc, #104]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	68db      	ldr	r3, [r3, #12]
 8001b9c:	4917      	ldr	r1, [pc, #92]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0308 	and.w	r3, r3, #8
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d009      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bae:	4b13      	ldr	r3, [pc, #76]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	490f      	ldr	r1, [pc, #60]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bc2:	f000 f825 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	4b0c      	ldr	r3, [pc, #48]	; (8001bfc <HAL_RCC_ClockConfig+0x264>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	091b      	lsrs	r3, r3, #4
 8001bce:	f003 030f 	and.w	r3, r3, #15
 8001bd2:	490c      	ldr	r1, [pc, #48]	; (8001c04 <HAL_RCC_ClockConfig+0x26c>)
 8001bd4:	5ccb      	ldrb	r3, [r1, r3]
 8001bd6:	f003 031f 	and.w	r3, r3, #31
 8001bda:	fa22 f303 	lsr.w	r3, r2, r3
 8001bde:	4a0a      	ldr	r2, [pc, #40]	; (8001c08 <HAL_RCC_ClockConfig+0x270>)
 8001be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001be2:	4b0a      	ldr	r3, [pc, #40]	; (8001c0c <HAL_RCC_ClockConfig+0x274>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4618      	mov	r0, r3
 8001be8:	f7fe ffe4 	bl	8000bb4 <HAL_InitTick>
 8001bec:	4603      	mov	r3, r0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40022000 	.word	0x40022000
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	04c4b400 	.word	0x04c4b400
 8001c04:	08004454 	.word	0x08004454
 8001c08:	20000000 	.word	0x20000000
 8001c0c:	20000004 	.word	0x20000004

08001c10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001c16:	4b2c      	ldr	r3, [pc, #176]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	f003 030c 	and.w	r3, r3, #12
 8001c1e:	2b04      	cmp	r3, #4
 8001c20:	d102      	bne.n	8001c28 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c22:	4b2a      	ldr	r3, [pc, #168]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c24:	613b      	str	r3, [r7, #16]
 8001c26:	e047      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001c28:	4b27      	ldr	r3, [pc, #156]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 030c 	and.w	r3, r3, #12
 8001c30:	2b08      	cmp	r3, #8
 8001c32:	d102      	bne.n	8001c3a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c34:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	e03e      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001c3a:	4b23      	ldr	r3, [pc, #140]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	f003 030c 	and.w	r3, r3, #12
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d136      	bne.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f003 0303 	and.w	r3, r3, #3
 8001c4e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 030f 	and.w	r3, r3, #15
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b03      	cmp	r3, #3
 8001c62:	d10c      	bne.n	8001c7e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c64:	4a1a      	ldr	r2, [pc, #104]	; (8001cd0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6c:	4a16      	ldr	r2, [pc, #88]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6e:	68d2      	ldr	r2, [r2, #12]
 8001c70:	0a12      	lsrs	r2, r2, #8
 8001c72:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c76:	fb02 f303 	mul.w	r3, r2, r3
 8001c7a:	617b      	str	r3, [r7, #20]
      break;
 8001c7c:	e00c      	b.n	8001c98 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001c7e:	4a13      	ldr	r2, [pc, #76]	; (8001ccc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c86:	4a10      	ldr	r2, [pc, #64]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c88:	68d2      	ldr	r2, [r2, #12]
 8001c8a:	0a12      	lsrs	r2, r2, #8
 8001c8c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
      break;
 8001c96:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	0e5b      	lsrs	r3, r3, #25
 8001c9e:	f003 0303 	and.w	r3, r3, #3
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	005b      	lsls	r3, r3, #1
 8001ca6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8001ca8:	697a      	ldr	r2, [r7, #20]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cb0:	613b      	str	r3, [r7, #16]
 8001cb2:	e001      	b.n	8001cb8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8001cb8:	693b      	ldr	r3, [r7, #16]
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	371c      	adds	r7, #28
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	00f42400 	.word	0x00f42400
 8001cd0:	016e3600 	.word	0x016e3600

08001cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	20000000 	.word	0x20000000

08001cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001cf0:	f7ff fff0 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	0a1b      	lsrs	r3, r3, #8
 8001cfc:	f003 0307 	and.w	r3, r3, #7
 8001d00:	4904      	ldr	r1, [pc, #16]	; (8001d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d02:	5ccb      	ldrb	r3, [r1, r3]
 8001d04:	f003 031f 	and.w	r3, r3, #31
 8001d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	bd80      	pop	{r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	08004464 	.word	0x08004464

08001d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001d1c:	f7ff ffda 	bl	8001cd4 <HAL_RCC_GetHCLKFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	0adb      	lsrs	r3, r3, #11
 8001d28:	f003 0307 	and.w	r3, r3, #7
 8001d2c:	4904      	ldr	r1, [pc, #16]	; (8001d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	08004464 	.word	0x08004464

08001d44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b087      	sub	sp, #28
 8001d48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	091b      	lsrs	r3, r3, #4
 8001d5a:	f003 030f 	and.w	r3, r3, #15
 8001d5e:	3301      	adds	r3, #1
 8001d60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d10c      	bne.n	8001d82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d68:	4a17      	ldr	r2, [pc, #92]	; (8001dc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d70:	4a14      	ldr	r2, [pc, #80]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d72:	68d2      	ldr	r2, [r2, #12]
 8001d74:	0a12      	lsrs	r2, r2, #8
 8001d76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d7a:	fb02 f303 	mul.w	r3, r2, r3
 8001d7e:	617b      	str	r3, [r7, #20]
    break;
 8001d80:	e00c      	b.n	8001d9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001d82:	4a12      	ldr	r2, [pc, #72]	; (8001dcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d8a:	4a0e      	ldr	r2, [pc, #56]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d8c:	68d2      	ldr	r2, [r2, #12]
 8001d8e:	0a12      	lsrs	r2, r2, #8
 8001d90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d94:	fb02 f303 	mul.w	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    break;
 8001d9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d9c:	4b09      	ldr	r3, [pc, #36]	; (8001dc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	0e5b      	lsrs	r3, r3, #25
 8001da2:	f003 0303 	and.w	r3, r3, #3
 8001da6:	3301      	adds	r3, #1
 8001da8:	005b      	lsls	r3, r3, #1
 8001daa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8001db6:	687b      	ldr	r3, [r7, #4]
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	371c      	adds	r7, #28
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	016e3600 	.word	0x016e3600
 8001dcc:	00f42400 	.word	0x00f42400

08001dd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b086      	sub	sp, #24
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dd8:	2300      	movs	r3, #0
 8001dda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001ddc:	2300      	movs	r3, #0
 8001dde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f000 8098 	beq.w	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001df2:	4b43      	ldr	r3, [pc, #268]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10d      	bne.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfe:	4b40      	ldr	r3, [pc, #256]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e02:	4a3f      	ldr	r2, [pc, #252]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e08:	6593      	str	r3, [r2, #88]	; 0x58
 8001e0a:	4b3d      	ldr	r3, [pc, #244]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e12:	60bb      	str	r3, [r7, #8]
 8001e14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e16:	2301      	movs	r3, #1
 8001e18:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e1a:	4b3a      	ldr	r3, [pc, #232]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a39      	ldr	r2, [pc, #228]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e26:	f7fe ff11 	bl	8000c4c <HAL_GetTick>
 8001e2a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e2c:	e009      	b.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2e:	f7fe ff0d 	bl	8000c4c <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d902      	bls.n	8001e42 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	74fb      	strb	r3, [r7, #19]
        break;
 8001e40:	e005      	b.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e42:	4b30      	ldr	r3, [pc, #192]	; (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0ef      	beq.n	8001e2e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8001e4e:	7cfb      	ldrb	r3, [r7, #19]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d159      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e54:	4b2a      	ldr	r3, [pc, #168]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e5e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d01e      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e70:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e7c:	4b20      	ldr	r3, [pc, #128]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e82:	4a1f      	ldr	r2, [pc, #124]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	4b1c      	ldr	r3, [pc, #112]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	4a1b      	ldr	r2, [pc, #108]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe fecd 	bl	8000c4c <HAL_GetTick>
 8001eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb4:	e00b      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe fec9 	bl	8000c4c <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d902      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	74fb      	strb	r3, [r7, #19]
            break;
 8001ecc:	e006      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ec      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10b      	bne.n	8001efa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee2:	4b07      	ldr	r3, [pc, #28]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef0:	4903      	ldr	r1, [pc, #12]	; (8001f00 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001ef8:	e008      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001efa:	7cfb      	ldrb	r3, [r7, #19]
 8001efc:	74bb      	strb	r3, [r7, #18]
 8001efe:	e005      	b.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f08:	7cfb      	ldrb	r3, [r7, #19]
 8001f0a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f0c:	7c7b      	ldrb	r3, [r7, #17]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d105      	bne.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f12:	4ba7      	ldr	r3, [pc, #668]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f16:	4aa6      	ldr	r2, [pc, #664]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2a:	4ba1      	ldr	r3, [pc, #644]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f023 0203 	bic.w	r2, r3, #3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	499d      	ldr	r1, [pc, #628]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f4c:	4b98      	ldr	r3, [pc, #608]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f023 020c 	bic.w	r2, r3, #12
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	4995      	ldr	r1, [pc, #596]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f6e:	4b90      	ldr	r3, [pc, #576]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	498c      	ldr	r1, [pc, #560]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0308 	and.w	r3, r3, #8
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d00a      	beq.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f90:	4b87      	ldr	r3, [pc, #540]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	4984      	ldr	r1, [pc, #528]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0310 	and.w	r3, r3, #16
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fb2:	4b7f      	ldr	r3, [pc, #508]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	497b      	ldr	r1, [pc, #492]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d00a      	beq.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fd4:	4b76      	ldr	r3, [pc, #472]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	699b      	ldr	r3, [r3, #24]
 8001fe2:	4973      	ldr	r1, [pc, #460]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00a      	beq.n	800200c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ff6:	4b6e      	ldr	r3, [pc, #440]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8001ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ffc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	69db      	ldr	r3, [r3, #28]
 8002004:	496a      	ldr	r1, [pc, #424]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002006:	4313      	orrs	r3, r2
 8002008:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00a      	beq.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002018:	4b65      	ldr	r3, [pc, #404]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800201a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a1b      	ldr	r3, [r3, #32]
 8002026:	4962      	ldr	r1, [pc, #392]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002028:	4313      	orrs	r3, r2
 800202a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002036:	2b00      	cmp	r3, #0
 8002038:	d00a      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800203a:	4b5d      	ldr	r3, [pc, #372]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800203c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002040:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	4959      	ldr	r1, [pc, #356]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00a      	beq.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800205c:	4b54      	ldr	r3, [pc, #336]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800205e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002062:	f023 0203 	bic.w	r2, r3, #3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206a:	4951      	ldr	r1, [pc, #324]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800206c:	4313      	orrs	r3, r2
 800206e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00a      	beq.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800207e:	4b4c      	ldr	r3, [pc, #304]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002084:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208c:	4948      	ldr	r1, [pc, #288]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800208e:	4313      	orrs	r3, r2
 8002090:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209c:	2b00      	cmp	r3, #0
 800209e:	d015      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020a0:	4b43      	ldr	r3, [pc, #268]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	4940      	ldr	r1, [pc, #256]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80020be:	d105      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c0:	4b3b      	ldr	r3, [pc, #236]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	4a3a      	ldr	r2, [pc, #232]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80020ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d015      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80020d8:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020e6:	4932      	ldr	r1, [pc, #200]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020f6:	d105      	bne.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020f8:	4b2d      	ldr	r3, [pc, #180]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	4a2c      	ldr	r2, [pc, #176]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80020fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002102:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d015      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002110:	4b27      	ldr	r3, [pc, #156]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002116:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211e:	4924      	ldr	r1, [pc, #144]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002120:	4313      	orrs	r3, r2
 8002122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800212e:	d105      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002130:	4b1f      	ldr	r3, [pc, #124]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	4a1e      	ldr	r2, [pc, #120]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002136:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800213a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d015      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002148:	4b19      	ldr	r3, [pc, #100]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800214a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002156:	4916      	ldr	r1, [pc, #88]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002158:	4313      	orrs	r3, r2
 800215a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002162:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002166:	d105      	bne.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216a:	68db      	ldr	r3, [r3, #12]
 800216c:	4a10      	ldr	r2, [pc, #64]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800216e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002172:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d019      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002180:	4b0b      	ldr	r3, [pc, #44]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4908      	ldr	r1, [pc, #32]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002190:	4313      	orrs	r3, r2
 8002192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800219e:	d109      	bne.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021a0:	4b03      	ldr	r3, [pc, #12]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	4a02      	ldr	r2, [pc, #8]	; (80021b0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80021a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021aa:	60d3      	str	r3, [r2, #12]
 80021ac:	e002      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80021ae:	bf00      	nop
 80021b0:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d015      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80021c0:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ce:	4926      	ldr	r1, [pc, #152]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021de:	d105      	bne.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a20      	ldr	r2, [pc, #128]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021ea:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d015      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80021f8:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80021fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021fe:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002206:	4918      	ldr	r1, [pc, #96]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002208:	4313      	orrs	r3, r2
 800220a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002212:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002216:	d105      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800221e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002222:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d015      	beq.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002230:	4b0d      	ldr	r3, [pc, #52]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800223e:	490a      	ldr	r1, [pc, #40]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800224a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800224e:	d105      	bne.n	800225c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002250:	4b05      	ldr	r3, [pc, #20]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4a04      	ldr	r2, [pc, #16]	; (8002268 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800225c:	7cbb      	ldrb	r3, [r7, #18]
}
 800225e:	4618      	mov	r0, r3
 8002260:	3718      	adds	r7, #24
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40021000 	.word	0x40021000

0800226c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e049      	b.n	8002312 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002284:	b2db      	uxtb	r3, r3
 8002286:	2b00      	cmp	r3, #0
 8002288:	d106      	bne.n	8002298 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2200      	movs	r2, #0
 800228e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f7fe fb58 	bl	8000948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2202      	movs	r2, #2
 800229c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3304      	adds	r3, #4
 80022a8:	4619      	mov	r1, r3
 80022aa:	4610      	mov	r0, r2
 80022ac:	f000 fbd2 	bl	8002a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2201      	movs	r2, #1
 80022bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	2201      	movs	r2, #1
 80022c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	2201      	movs	r2, #1
 80022cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2201      	movs	r2, #1
 80022e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2201      	movs	r2, #1
 80022ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2201      	movs	r2, #1
 80022f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2201      	movs	r2, #1
 80022fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d101      	bne.n	800232c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e049      	b.n	80023c0 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002332:	b2db      	uxtb	r3, r3
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f841 	bl	80023c8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2202      	movs	r2, #2
 800234a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3304      	adds	r3, #4
 8002356:	4619      	mov	r1, r3
 8002358:	4610      	mov	r0, r2
 800235a:	f000 fb7b 	bl	8002a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2201      	movs	r2, #1
 8002362:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2201      	movs	r2, #1
 800237a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2201      	movs	r2, #1
 8002392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2201      	movs	r2, #1
 80023b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023be:	2300      	movs	r3, #0
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	3708      	adds	r7, #8
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}

080023c8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b083      	sub	sp, #12
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023d0:	bf00      	nop
 80023d2:	370c      	adds	r7, #12
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr

080023dc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b084      	sub	sp, #16
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
 80023e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d109      	bne.n	8002400 <HAL_TIM_PWM_Start+0x24>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	2b01      	cmp	r3, #1
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	e03c      	b.n	800247a <HAL_TIM_PWM_Start+0x9e>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	2b04      	cmp	r3, #4
 8002404:	d109      	bne.n	800241a <HAL_TIM_PWM_Start+0x3e>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b01      	cmp	r3, #1
 8002410:	bf14      	ite	ne
 8002412:	2301      	movne	r3, #1
 8002414:	2300      	moveq	r3, #0
 8002416:	b2db      	uxtb	r3, r3
 8002418:	e02f      	b.n	800247a <HAL_TIM_PWM_Start+0x9e>
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d109      	bne.n	8002434 <HAL_TIM_PWM_Start+0x58>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002426:	b2db      	uxtb	r3, r3
 8002428:	2b01      	cmp	r3, #1
 800242a:	bf14      	ite	ne
 800242c:	2301      	movne	r3, #1
 800242e:	2300      	moveq	r3, #0
 8002430:	b2db      	uxtb	r3, r3
 8002432:	e022      	b.n	800247a <HAL_TIM_PWM_Start+0x9e>
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	2b0c      	cmp	r3, #12
 8002438:	d109      	bne.n	800244e <HAL_TIM_PWM_Start+0x72>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002440:	b2db      	uxtb	r3, r3
 8002442:	2b01      	cmp	r3, #1
 8002444:	bf14      	ite	ne
 8002446:	2301      	movne	r3, #1
 8002448:	2300      	moveq	r3, #0
 800244a:	b2db      	uxtb	r3, r3
 800244c:	e015      	b.n	800247a <HAL_TIM_PWM_Start+0x9e>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b10      	cmp	r3, #16
 8002452:	d109      	bne.n	8002468 <HAL_TIM_PWM_Start+0x8c>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b01      	cmp	r3, #1
 800245e:	bf14      	ite	ne
 8002460:	2301      	movne	r3, #1
 8002462:	2300      	moveq	r3, #0
 8002464:	b2db      	uxtb	r3, r3
 8002466:	e008      	b.n	800247a <HAL_TIM_PWM_Start+0x9e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800246e:	b2db      	uxtb	r3, r3
 8002470:	2b01      	cmp	r3, #1
 8002472:	bf14      	ite	ne
 8002474:	2301      	movne	r3, #1
 8002476:	2300      	moveq	r3, #0
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e0a6      	b.n	80025d0 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d104      	bne.n	8002492 <HAL_TIM_PWM_Start+0xb6>
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002490:	e023      	b.n	80024da <HAL_TIM_PWM_Start+0xfe>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b04      	cmp	r3, #4
 8002496:	d104      	bne.n	80024a2 <HAL_TIM_PWM_Start+0xc6>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2202      	movs	r2, #2
 800249c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024a0:	e01b      	b.n	80024da <HAL_TIM_PWM_Start+0xfe>
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	2b08      	cmp	r3, #8
 80024a6:	d104      	bne.n	80024b2 <HAL_TIM_PWM_Start+0xd6>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80024b0:	e013      	b.n	80024da <HAL_TIM_PWM_Start+0xfe>
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b0c      	cmp	r3, #12
 80024b6:	d104      	bne.n	80024c2 <HAL_TIM_PWM_Start+0xe6>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2202      	movs	r2, #2
 80024bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80024c0:	e00b      	b.n	80024da <HAL_TIM_PWM_Start+0xfe>
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d104      	bne.n	80024d2 <HAL_TIM_PWM_Start+0xf6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80024d0:	e003      	b.n	80024da <HAL_TIM_PWM_Start+0xfe>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2202      	movs	r2, #2
 80024d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2201      	movs	r2, #1
 80024e0:	6839      	ldr	r1, [r7, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f000 ff24 	bl	8003330 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3a      	ldr	r2, [pc, #232]	; (80025d8 <HAL_TIM_PWM_Start+0x1fc>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d018      	beq.n	8002524 <HAL_TIM_PWM_Start+0x148>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a39      	ldr	r2, [pc, #228]	; (80025dc <HAL_TIM_PWM_Start+0x200>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d013      	beq.n	8002524 <HAL_TIM_PWM_Start+0x148>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a37      	ldr	r2, [pc, #220]	; (80025e0 <HAL_TIM_PWM_Start+0x204>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d00e      	beq.n	8002524 <HAL_TIM_PWM_Start+0x148>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a36      	ldr	r2, [pc, #216]	; (80025e4 <HAL_TIM_PWM_Start+0x208>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d009      	beq.n	8002524 <HAL_TIM_PWM_Start+0x148>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a34      	ldr	r2, [pc, #208]	; (80025e8 <HAL_TIM_PWM_Start+0x20c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d004      	beq.n	8002524 <HAL_TIM_PWM_Start+0x148>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a33      	ldr	r2, [pc, #204]	; (80025ec <HAL_TIM_PWM_Start+0x210>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d101      	bne.n	8002528 <HAL_TIM_PWM_Start+0x14c>
 8002524:	2301      	movs	r3, #1
 8002526:	e000      	b.n	800252a <HAL_TIM_PWM_Start+0x14e>
 8002528:	2300      	movs	r3, #0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d007      	beq.n	800253e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800253c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a25      	ldr	r2, [pc, #148]	; (80025d8 <HAL_TIM_PWM_Start+0x1fc>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d022      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002550:	d01d      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a26      	ldr	r2, [pc, #152]	; (80025f0 <HAL_TIM_PWM_Start+0x214>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d018      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a24      	ldr	r2, [pc, #144]	; (80025f4 <HAL_TIM_PWM_Start+0x218>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a23      	ldr	r2, [pc, #140]	; (80025f8 <HAL_TIM_PWM_Start+0x21c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d00e      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a19      	ldr	r2, [pc, #100]	; (80025dc <HAL_TIM_PWM_Start+0x200>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d009      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4a18      	ldr	r2, [pc, #96]	; (80025e0 <HAL_TIM_PWM_Start+0x204>)
 8002580:	4293      	cmp	r3, r2
 8002582:	d004      	beq.n	800258e <HAL_TIM_PWM_Start+0x1b2>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_TIM_PWM_Start+0x210>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d115      	bne.n	80025ba <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	689a      	ldr	r2, [r3, #8]
 8002594:	4b19      	ldr	r3, [pc, #100]	; (80025fc <HAL_TIM_PWM_Start+0x220>)
 8002596:	4013      	ands	r3, r2
 8002598:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2b06      	cmp	r3, #6
 800259e:	d015      	beq.n	80025cc <HAL_TIM_PWM_Start+0x1f0>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a6:	d011      	beq.n	80025cc <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f042 0201 	orr.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025b8:	e008      	b.n	80025cc <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
 80025ca:	e000      	b.n	80025ce <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025cc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	40012c00 	.word	0x40012c00
 80025dc:	40013400 	.word	0x40013400
 80025e0:	40014000 	.word	0x40014000
 80025e4:	40014400 	.word	0x40014400
 80025e8:	40014800 	.word	0x40014800
 80025ec:	40015000 	.word	0x40015000
 80025f0:	40000400 	.word	0x40000400
 80025f4:	40000800 	.word	0x40000800
 80025f8:	40000c00 	.word	0x40000c00
 80025fc:	00010007 	.word	0x00010007

08002600 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b086      	sub	sp, #24
 8002604:	af00      	add	r7, sp, #0
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800260c:	2300      	movs	r3, #0
 800260e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002616:	2b01      	cmp	r3, #1
 8002618:	d101      	bne.n	800261e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800261a:	2302      	movs	r3, #2
 800261c:	e0ff      	b.n	800281e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2b14      	cmp	r3, #20
 800262a:	f200 80f0 	bhi.w	800280e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800262e:	a201      	add	r2, pc, #4	; (adr r2, 8002634 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002634:	08002689 	.word	0x08002689
 8002638:	0800280f 	.word	0x0800280f
 800263c:	0800280f 	.word	0x0800280f
 8002640:	0800280f 	.word	0x0800280f
 8002644:	080026c9 	.word	0x080026c9
 8002648:	0800280f 	.word	0x0800280f
 800264c:	0800280f 	.word	0x0800280f
 8002650:	0800280f 	.word	0x0800280f
 8002654:	0800270b 	.word	0x0800270b
 8002658:	0800280f 	.word	0x0800280f
 800265c:	0800280f 	.word	0x0800280f
 8002660:	0800280f 	.word	0x0800280f
 8002664:	0800274b 	.word	0x0800274b
 8002668:	0800280f 	.word	0x0800280f
 800266c:	0800280f 	.word	0x0800280f
 8002670:	0800280f 	.word	0x0800280f
 8002674:	0800278d 	.word	0x0800278d
 8002678:	0800280f 	.word	0x0800280f
 800267c:	0800280f 	.word	0x0800280f
 8002680:	0800280f 	.word	0x0800280f
 8002684:	080027cd 	.word	0x080027cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	68b9      	ldr	r1, [r7, #8]
 800268e:	4618      	mov	r0, r3
 8002690:	f000 fa88 	bl	8002ba4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	699a      	ldr	r2, [r3, #24]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0208 	orr.w	r2, r2, #8
 80026a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	699a      	ldr	r2, [r3, #24]
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f022 0204 	bic.w	r2, r2, #4
 80026b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6999      	ldr	r1, [r3, #24]
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	691a      	ldr	r2, [r3, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	619a      	str	r2, [r3, #24]
      break;
 80026c6:	e0a5      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f000 fb02 	bl	8002cd8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	699a      	ldr	r2, [r3, #24]
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	699a      	ldr	r2, [r3, #24]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	6999      	ldr	r1, [r3, #24]
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	021a      	lsls	r2, r3, #8
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	430a      	orrs	r2, r1
 8002706:	619a      	str	r2, [r3, #24]
      break;
 8002708:	e084      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	68b9      	ldr	r1, [r7, #8]
 8002710:	4618      	mov	r0, r3
 8002712:	f000 fb75 	bl	8002e00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69da      	ldr	r2, [r3, #28]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f042 0208 	orr.w	r2, r2, #8
 8002724:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	69da      	ldr	r2, [r3, #28]
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f022 0204 	bic.w	r2, r2, #4
 8002734:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	69d9      	ldr	r1, [r3, #28]
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	691a      	ldr	r2, [r3, #16]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	430a      	orrs	r2, r1
 8002746:	61da      	str	r2, [r3, #28]
      break;
 8002748:	e064      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	68b9      	ldr	r1, [r7, #8]
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fbe7 	bl	8002f24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	69da      	ldr	r2, [r3, #28]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002764:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	69da      	ldr	r2, [r3, #28]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002774:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	69d9      	ldr	r1, [r3, #28]
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	691b      	ldr	r3, [r3, #16]
 8002780:	021a      	lsls	r2, r3, #8
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	430a      	orrs	r2, r1
 8002788:	61da      	str	r2, [r3, #28]
      break;
 800278a:	e043      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	68b9      	ldr	r1, [r7, #8]
 8002792:	4618      	mov	r0, r3
 8002794:	f000 fc5a 	bl	800304c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f042 0208 	orr.w	r2, r2, #8
 80027a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0204 	bic.w	r2, r2, #4
 80027b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80027ca:	e023      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 fca4 	bl	8003120 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	021a      	lsls	r2, r3, #8
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	430a      	orrs	r2, r1
 800280a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800280c:	e002      	b.n	8002814 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800280e:	2301      	movs	r3, #1
 8002810:	75fb      	strb	r3, [r7, #23]
      break;
 8002812:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2200      	movs	r2, #0
 8002818:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800281c:	7dfb      	ldrb	r3, [r7, #23]
}
 800281e:	4618      	mov	r0, r3
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop

08002828 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b084      	sub	sp, #16
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
 8002830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002832:	2300      	movs	r3, #0
 8002834:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800283c:	2b01      	cmp	r3, #1
 800283e:	d101      	bne.n	8002844 <HAL_TIM_ConfigClockSource+0x1c>
 8002840:	2302      	movs	r3, #2
 8002842:	e0f6      	b.n	8002a32 <HAL_TIM_ConfigClockSource+0x20a>
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2202      	movs	r2, #2
 8002850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8002862:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002866:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800286e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68ba      	ldr	r2, [r7, #8]
 8002876:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6f      	ldr	r2, [pc, #444]	; (8002a3c <HAL_TIM_ConfigClockSource+0x214>)
 800287e:	4293      	cmp	r3, r2
 8002880:	f000 80c1 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 8002884:	4a6d      	ldr	r2, [pc, #436]	; (8002a3c <HAL_TIM_ConfigClockSource+0x214>)
 8002886:	4293      	cmp	r3, r2
 8002888:	f200 80c6 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 800288c:	4a6c      	ldr	r2, [pc, #432]	; (8002a40 <HAL_TIM_ConfigClockSource+0x218>)
 800288e:	4293      	cmp	r3, r2
 8002890:	f000 80b9 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 8002894:	4a6a      	ldr	r2, [pc, #424]	; (8002a40 <HAL_TIM_ConfigClockSource+0x218>)
 8002896:	4293      	cmp	r3, r2
 8002898:	f200 80be 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 800289c:	4a69      	ldr	r2, [pc, #420]	; (8002a44 <HAL_TIM_ConfigClockSource+0x21c>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	f000 80b1 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 80028a4:	4a67      	ldr	r2, [pc, #412]	; (8002a44 <HAL_TIM_ConfigClockSource+0x21c>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	f200 80b6 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80028ac:	4a66      	ldr	r2, [pc, #408]	; (8002a48 <HAL_TIM_ConfigClockSource+0x220>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	f000 80a9 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 80028b4:	4a64      	ldr	r2, [pc, #400]	; (8002a48 <HAL_TIM_ConfigClockSource+0x220>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	f200 80ae 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80028bc:	4a63      	ldr	r2, [pc, #396]	; (8002a4c <HAL_TIM_ConfigClockSource+0x224>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	f000 80a1 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 80028c4:	4a61      	ldr	r2, [pc, #388]	; (8002a4c <HAL_TIM_ConfigClockSource+0x224>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	f200 80a6 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80028cc:	4a60      	ldr	r2, [pc, #384]	; (8002a50 <HAL_TIM_ConfigClockSource+0x228>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	f000 8099 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 80028d4:	4a5e      	ldr	r2, [pc, #376]	; (8002a50 <HAL_TIM_ConfigClockSource+0x228>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	f200 809e 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80028dc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80028e0:	f000 8091 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 80028e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80028e8:	f200 8096 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80028ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f0:	f000 8089 	beq.w	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 80028f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80028f8:	f200 808e 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 80028fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002900:	d03e      	beq.n	8002980 <HAL_TIM_ConfigClockSource+0x158>
 8002902:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002906:	f200 8087 	bhi.w	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 800290a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800290e:	f000 8086 	beq.w	8002a1e <HAL_TIM_ConfigClockSource+0x1f6>
 8002912:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002916:	d87f      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002918:	2b70      	cmp	r3, #112	; 0x70
 800291a:	d01a      	beq.n	8002952 <HAL_TIM_ConfigClockSource+0x12a>
 800291c:	2b70      	cmp	r3, #112	; 0x70
 800291e:	d87b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002920:	2b60      	cmp	r3, #96	; 0x60
 8002922:	d050      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x19e>
 8002924:	2b60      	cmp	r3, #96	; 0x60
 8002926:	d877      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002928:	2b50      	cmp	r3, #80	; 0x50
 800292a:	d03c      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x17e>
 800292c:	2b50      	cmp	r3, #80	; 0x50
 800292e:	d873      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002930:	2b40      	cmp	r3, #64	; 0x40
 8002932:	d058      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x1be>
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d86f      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002938:	2b30      	cmp	r3, #48	; 0x30
 800293a:	d064      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 800293c:	2b30      	cmp	r3, #48	; 0x30
 800293e:	d86b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002940:	2b20      	cmp	r3, #32
 8002942:	d060      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 8002944:	2b20      	cmp	r3, #32
 8002946:	d867      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
 8002948:	2b00      	cmp	r3, #0
 800294a:	d05c      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 800294c:	2b10      	cmp	r3, #16
 800294e:	d05a      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x1de>
 8002950:	e062      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6818      	ldr	r0, [r3, #0]
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	6899      	ldr	r1, [r3, #8]
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	f000 fcc5 	bl	80032f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002974:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	68ba      	ldr	r2, [r7, #8]
 800297c:	609a      	str	r2, [r3, #8]
      break;
 800297e:	e04f      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	6899      	ldr	r1, [r3, #8]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	f000 fcae 	bl	80032f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029a2:	609a      	str	r2, [r3, #8]
      break;
 80029a4:	e03c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	461a      	mov	r2, r3
 80029b4:	f000 fc20 	bl	80031f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2150      	movs	r1, #80	; 0x50
 80029be:	4618      	mov	r0, r3
 80029c0:	f000 fc79 	bl	80032b6 <TIM_ITRx_SetConfig>
      break;
 80029c4:	e02c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	461a      	mov	r2, r3
 80029d4:	f000 fc3f 	bl	8003256 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2160      	movs	r1, #96	; 0x60
 80029de:	4618      	mov	r0, r3
 80029e0:	f000 fc69 	bl	80032b6 <TIM_ITRx_SetConfig>
      break;
 80029e4:	e01c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
 80029f2:	461a      	mov	r2, r3
 80029f4:	f000 fc00 	bl	80031f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2140      	movs	r1, #64	; 0x40
 80029fe:	4618      	mov	r0, r3
 8002a00:	f000 fc59 	bl	80032b6 <TIM_ITRx_SetConfig>
      break;
 8002a04:	e00c      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4610      	mov	r0, r2
 8002a12:	f000 fc50 	bl	80032b6 <TIM_ITRx_SetConfig>
      break;
 8002a16:	e003      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1c:	e000      	b.n	8002a20 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8002a1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2201      	movs	r2, #1
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	3710      	adds	r7, #16
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	00100070 	.word	0x00100070
 8002a40:	00100060 	.word	0x00100060
 8002a44:	00100050 	.word	0x00100050
 8002a48:	00100040 	.word	0x00100040
 8002a4c:	00100030 	.word	0x00100030
 8002a50:	00100020 	.word	0x00100020

08002a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	4a46      	ldr	r2, [pc, #280]	; (8002b80 <TIM_Base_SetConfig+0x12c>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d017      	beq.n	8002a9c <TIM_Base_SetConfig+0x48>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a72:	d013      	beq.n	8002a9c <TIM_Base_SetConfig+0x48>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	4a43      	ldr	r2, [pc, #268]	; (8002b84 <TIM_Base_SetConfig+0x130>)
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d00f      	beq.n	8002a9c <TIM_Base_SetConfig+0x48>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	4a42      	ldr	r2, [pc, #264]	; (8002b88 <TIM_Base_SetConfig+0x134>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00b      	beq.n	8002a9c <TIM_Base_SetConfig+0x48>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	4a41      	ldr	r2, [pc, #260]	; (8002b8c <TIM_Base_SetConfig+0x138>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d007      	beq.n	8002a9c <TIM_Base_SetConfig+0x48>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a40      	ldr	r2, [pc, #256]	; (8002b90 <TIM_Base_SetConfig+0x13c>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d003      	beq.n	8002a9c <TIM_Base_SetConfig+0x48>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	4a3f      	ldr	r2, [pc, #252]	; (8002b94 <TIM_Base_SetConfig+0x140>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d108      	bne.n	8002aae <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002aa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	68fa      	ldr	r2, [r7, #12]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a33      	ldr	r2, [pc, #204]	; (8002b80 <TIM_Base_SetConfig+0x12c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d023      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002abc:	d01f      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a30      	ldr	r2, [pc, #192]	; (8002b84 <TIM_Base_SetConfig+0x130>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d01b      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a2f      	ldr	r2, [pc, #188]	; (8002b88 <TIM_Base_SetConfig+0x134>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d017      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a2e      	ldr	r2, [pc, #184]	; (8002b8c <TIM_Base_SetConfig+0x138>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d013      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a2d      	ldr	r2, [pc, #180]	; (8002b90 <TIM_Base_SetConfig+0x13c>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00f      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a2d      	ldr	r2, [pc, #180]	; (8002b98 <TIM_Base_SetConfig+0x144>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00b      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a2c      	ldr	r2, [pc, #176]	; (8002b9c <TIM_Base_SetConfig+0x148>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d007      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a2b      	ldr	r2, [pc, #172]	; (8002ba0 <TIM_Base_SetConfig+0x14c>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d003      	beq.n	8002afe <TIM_Base_SetConfig+0xaa>
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	4a26      	ldr	r2, [pc, #152]	; (8002b94 <TIM_Base_SetConfig+0x140>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d108      	bne.n	8002b10 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	68db      	ldr	r3, [r3, #12]
 8002b0a:	68fa      	ldr	r2, [r7, #12]
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	695b      	ldr	r3, [r3, #20]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	68fa      	ldr	r2, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	689a      	ldr	r2, [r3, #8]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a12      	ldr	r2, [pc, #72]	; (8002b80 <TIM_Base_SetConfig+0x12c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d013      	beq.n	8002b64 <TIM_Base_SetConfig+0x110>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4a14      	ldr	r2, [pc, #80]	; (8002b90 <TIM_Base_SetConfig+0x13c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x110>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <TIM_Base_SetConfig+0x144>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x110>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a13      	ldr	r2, [pc, #76]	; (8002b9c <TIM_Base_SetConfig+0x148>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x110>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a12      	ldr	r2, [pc, #72]	; (8002ba0 <TIM_Base_SetConfig+0x14c>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x110>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a0d      	ldr	r2, [pc, #52]	; (8002b94 <TIM_Base_SetConfig+0x140>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	691a      	ldr	r2, [r3, #16]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	615a      	str	r2, [r3, #20]
}
 8002b72:	bf00      	nop
 8002b74:	3714      	adds	r7, #20
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	40013400 	.word	0x40013400
 8002b94:	40015000 	.word	0x40015000
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b087      	sub	sp, #28
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0201 	bic.w	r2, r3, #1
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f023 0303 	bic.w	r3, r3, #3
 8002bde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68fa      	ldr	r2, [r7, #12]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	f023 0302 	bic.w	r3, r3, #2
 8002bf0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a30      	ldr	r2, [pc, #192]	; (8002cc0 <TIM_OC1_SetConfig+0x11c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d013      	beq.n	8002c2c <TIM_OC1_SetConfig+0x88>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a2f      	ldr	r2, [pc, #188]	; (8002cc4 <TIM_OC1_SetConfig+0x120>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d00f      	beq.n	8002c2c <TIM_OC1_SetConfig+0x88>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a2e      	ldr	r2, [pc, #184]	; (8002cc8 <TIM_OC1_SetConfig+0x124>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00b      	beq.n	8002c2c <TIM_OC1_SetConfig+0x88>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a2d      	ldr	r2, [pc, #180]	; (8002ccc <TIM_OC1_SetConfig+0x128>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d007      	beq.n	8002c2c <TIM_OC1_SetConfig+0x88>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a2c      	ldr	r2, [pc, #176]	; (8002cd0 <TIM_OC1_SetConfig+0x12c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d003      	beq.n	8002c2c <TIM_OC1_SetConfig+0x88>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a2b      	ldr	r2, [pc, #172]	; (8002cd4 <TIM_OC1_SetConfig+0x130>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d10c      	bne.n	8002c46 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	f023 0308 	bic.w	r3, r3, #8
 8002c32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	697a      	ldr	r2, [r7, #20]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1d      	ldr	r2, [pc, #116]	; (8002cc0 <TIM_OC1_SetConfig+0x11c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d013      	beq.n	8002c76 <TIM_OC1_SetConfig+0xd2>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a1c      	ldr	r2, [pc, #112]	; (8002cc4 <TIM_OC1_SetConfig+0x120>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d00f      	beq.n	8002c76 <TIM_OC1_SetConfig+0xd2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	4a1b      	ldr	r2, [pc, #108]	; (8002cc8 <TIM_OC1_SetConfig+0x124>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d00b      	beq.n	8002c76 <TIM_OC1_SetConfig+0xd2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a1a      	ldr	r2, [pc, #104]	; (8002ccc <TIM_OC1_SetConfig+0x128>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d007      	beq.n	8002c76 <TIM_OC1_SetConfig+0xd2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a19      	ldr	r2, [pc, #100]	; (8002cd0 <TIM_OC1_SetConfig+0x12c>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d003      	beq.n	8002c76 <TIM_OC1_SetConfig+0xd2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a18      	ldr	r2, [pc, #96]	; (8002cd4 <TIM_OC1_SetConfig+0x130>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d111      	bne.n	8002c9a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002c84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	695b      	ldr	r3, [r3, #20]
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	693a      	ldr	r2, [r7, #16]
 8002c9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	685a      	ldr	r2, [r3, #4]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	621a      	str	r2, [r3, #32]
}
 8002cb4:	bf00      	nop
 8002cb6:	371c      	adds	r7, #28
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbe:	4770      	bx	lr
 8002cc0:	40012c00 	.word	0x40012c00
 8002cc4:	40013400 	.word	0x40013400
 8002cc8:	40014000 	.word	0x40014000
 8002ccc:	40014400 	.word	0x40014400
 8002cd0:	40014800 	.word	0x40014800
 8002cd4:	40015000 	.word	0x40015000

08002cd8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b087      	sub	sp, #28
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	6a1b      	ldr	r3, [r3, #32]
 8002ce6:	f023 0210 	bic.w	r2, r3, #16
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a1b      	ldr	r3, [r3, #32]
 8002cf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	021b      	lsls	r3, r3, #8
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	f023 0320 	bic.w	r3, r3, #32
 8002d26:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	011b      	lsls	r3, r3, #4
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a2c      	ldr	r2, [pc, #176]	; (8002de8 <TIM_OC2_SetConfig+0x110>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d007      	beq.n	8002d4c <TIM_OC2_SetConfig+0x74>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	; (8002dec <TIM_OC2_SetConfig+0x114>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d003      	beq.n	8002d4c <TIM_OC2_SetConfig+0x74>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a2a      	ldr	r2, [pc, #168]	; (8002df0 <TIM_OC2_SetConfig+0x118>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d10d      	bne.n	8002d68 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d66:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <TIM_OC2_SetConfig+0x110>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d013      	beq.n	8002d98 <TIM_OC2_SetConfig+0xc0>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <TIM_OC2_SetConfig+0x114>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00f      	beq.n	8002d98 <TIM_OC2_SetConfig+0xc0>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	; (8002df4 <TIM_OC2_SetConfig+0x11c>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d00b      	beq.n	8002d98 <TIM_OC2_SetConfig+0xc0>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a1d      	ldr	r2, [pc, #116]	; (8002df8 <TIM_OC2_SetConfig+0x120>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_OC2_SetConfig+0xc0>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	4a1c      	ldr	r2, [pc, #112]	; (8002dfc <TIM_OC2_SetConfig+0x124>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d003      	beq.n	8002d98 <TIM_OC2_SetConfig+0xc0>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a17      	ldr	r2, [pc, #92]	; (8002df0 <TIM_OC2_SetConfig+0x118>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d113      	bne.n	8002dc0 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002d98:	693b      	ldr	r3, [r7, #16]
 8002d9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002d9e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002da6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	695b      	ldr	r3, [r3, #20]
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	693a      	ldr	r2, [r7, #16]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	009b      	lsls	r3, r3, #2
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	693a      	ldr	r2, [r7, #16]
 8002dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	68fa      	ldr	r2, [r7, #12]
 8002dca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	621a      	str	r2, [r3, #32]
}
 8002dda:	bf00      	nop
 8002ddc:	371c      	adds	r7, #28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	40012c00 	.word	0x40012c00
 8002dec:	40013400 	.word	0x40013400
 8002df0:	40015000 	.word	0x40015000
 8002df4:	40014000 	.word	0x40014000
 8002df8:	40014400 	.word	0x40014400
 8002dfc:	40014800 	.word	0x40014800

08002e00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b087      	sub	sp, #28
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
 8002e0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a1b      	ldr	r3, [r3, #32]
 8002e1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	69db      	ldr	r3, [r3, #28]
 8002e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	f023 0303 	bic.w	r3, r3, #3
 8002e3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68fa      	ldr	r2, [r7, #12]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002e4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	021b      	lsls	r3, r3, #8
 8002e54:	697a      	ldr	r2, [r7, #20]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a2b      	ldr	r2, [pc, #172]	; (8002f0c <TIM_OC3_SetConfig+0x10c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_OC3_SetConfig+0x72>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a2a      	ldr	r2, [pc, #168]	; (8002f10 <TIM_OC3_SetConfig+0x110>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_OC3_SetConfig+0x72>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a29      	ldr	r2, [pc, #164]	; (8002f14 <TIM_OC3_SetConfig+0x114>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10d      	bne.n	8002e8e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	021b      	lsls	r3, r3, #8
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a1e      	ldr	r2, [pc, #120]	; (8002f0c <TIM_OC3_SetConfig+0x10c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d013      	beq.n	8002ebe <TIM_OC3_SetConfig+0xbe>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a1d      	ldr	r2, [pc, #116]	; (8002f10 <TIM_OC3_SetConfig+0x110>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d00f      	beq.n	8002ebe <TIM_OC3_SetConfig+0xbe>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	; (8002f18 <TIM_OC3_SetConfig+0x118>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d00b      	beq.n	8002ebe <TIM_OC3_SetConfig+0xbe>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a1c      	ldr	r2, [pc, #112]	; (8002f1c <TIM_OC3_SetConfig+0x11c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d007      	beq.n	8002ebe <TIM_OC3_SetConfig+0xbe>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a1b      	ldr	r2, [pc, #108]	; (8002f20 <TIM_OC3_SetConfig+0x120>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d003      	beq.n	8002ebe <TIM_OC3_SetConfig+0xbe>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a16      	ldr	r2, [pc, #88]	; (8002f14 <TIM_OC3_SetConfig+0x114>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d113      	bne.n	8002ee6 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ec4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	693a      	ldr	r2, [r7, #16]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68fa      	ldr	r2, [r7, #12]
 8002ef0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	685a      	ldr	r2, [r3, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	621a      	str	r2, [r3, #32]
}
 8002f00:	bf00      	nop
 8002f02:	371c      	adds	r7, #28
 8002f04:	46bd      	mov	sp, r7
 8002f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0a:	4770      	bx	lr
 8002f0c:	40012c00 	.word	0x40012c00
 8002f10:	40013400 	.word	0x40013400
 8002f14:	40015000 	.word	0x40015000
 8002f18:	40014000 	.word	0x40014000
 8002f1c:	40014400 	.word	0x40014400
 8002f20:	40014800 	.word	0x40014800

08002f24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b087      	sub	sp, #28
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	021b      	lsls	r3, r3, #8
 8002f66:	68fa      	ldr	r2, [r7, #12]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f72:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	689b      	ldr	r3, [r3, #8]
 8002f78:	031b      	lsls	r3, r3, #12
 8002f7a:	697a      	ldr	r2, [r7, #20]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <TIM_OC4_SetConfig+0x110>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_OC4_SetConfig+0x74>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a2b      	ldr	r2, [pc, #172]	; (8003038 <TIM_OC4_SetConfig+0x114>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_OC4_SetConfig+0x74>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a2a      	ldr	r2, [pc, #168]	; (800303c <TIM_OC4_SetConfig+0x118>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d10d      	bne.n	8002fb4 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	68db      	ldr	r3, [r3, #12]
 8002fa4:	031b      	lsls	r3, r3, #12
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fb2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a1f      	ldr	r2, [pc, #124]	; (8003034 <TIM_OC4_SetConfig+0x110>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d013      	beq.n	8002fe4 <TIM_OC4_SetConfig+0xc0>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	4a1e      	ldr	r2, [pc, #120]	; (8003038 <TIM_OC4_SetConfig+0x114>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d00f      	beq.n	8002fe4 <TIM_OC4_SetConfig+0xc0>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a1e      	ldr	r2, [pc, #120]	; (8003040 <TIM_OC4_SetConfig+0x11c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d00b      	beq.n	8002fe4 <TIM_OC4_SetConfig+0xc0>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a1d      	ldr	r2, [pc, #116]	; (8003044 <TIM_OC4_SetConfig+0x120>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d007      	beq.n	8002fe4 <TIM_OC4_SetConfig+0xc0>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	4a1c      	ldr	r2, [pc, #112]	; (8003048 <TIM_OC4_SetConfig+0x124>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d003      	beq.n	8002fe4 <TIM_OC4_SetConfig+0xc0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	4a17      	ldr	r2, [pc, #92]	; (800303c <TIM_OC4_SetConfig+0x118>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d113      	bne.n	800300c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8002ff2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
 8002ff8:	019b      	lsls	r3, r3, #6
 8002ffa:	693a      	ldr	r2, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	019b      	lsls	r3, r3, #6
 8003006:	693a      	ldr	r2, [r7, #16]
 8003008:	4313      	orrs	r3, r2
 800300a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685a      	ldr	r2, [r3, #4]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	621a      	str	r2, [r3, #32]
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40012c00 	.word	0x40012c00
 8003038:	40013400 	.word	0x40013400
 800303c:	40015000 	.word	0x40015000
 8003040:	40014000 	.word	0x40014000
 8003044:	40014400 	.word	0x40014400
 8003048:	40014800 	.word	0x40014800

0800304c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800304c:	b480      	push	{r7}
 800304e:	b087      	sub	sp, #28
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a1b      	ldr	r3, [r3, #32]
 800305a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800307a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800307e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	68fa      	ldr	r2, [r7, #12]
 8003086:	4313      	orrs	r3, r2
 8003088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	041b      	lsls	r3, r3, #16
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a19      	ldr	r2, [pc, #100]	; (8003108 <TIM_OC5_SetConfig+0xbc>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d013      	beq.n	80030ce <TIM_OC5_SetConfig+0x82>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a18      	ldr	r2, [pc, #96]	; (800310c <TIM_OC5_SetConfig+0xc0>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d00f      	beq.n	80030ce <TIM_OC5_SetConfig+0x82>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a17      	ldr	r2, [pc, #92]	; (8003110 <TIM_OC5_SetConfig+0xc4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d00b      	beq.n	80030ce <TIM_OC5_SetConfig+0x82>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a16      	ldr	r2, [pc, #88]	; (8003114 <TIM_OC5_SetConfig+0xc8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d007      	beq.n	80030ce <TIM_OC5_SetConfig+0x82>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a15      	ldr	r2, [pc, #84]	; (8003118 <TIM_OC5_SetConfig+0xcc>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d003      	beq.n	80030ce <TIM_OC5_SetConfig+0x82>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a14      	ldr	r2, [pc, #80]	; (800311c <TIM_OC5_SetConfig+0xd0>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d109      	bne.n	80030e2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	021b      	lsls	r3, r3, #8
 80030dc:	697a      	ldr	r2, [r7, #20]
 80030de:	4313      	orrs	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685a      	ldr	r2, [r3, #4]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	693a      	ldr	r2, [r7, #16]
 80030fa:	621a      	str	r2, [r3, #32]
}
 80030fc:	bf00      	nop
 80030fe:	371c      	adds	r7, #28
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40012c00 	.word	0x40012c00
 800310c:	40013400 	.word	0x40013400
 8003110:	40014000 	.word	0x40014000
 8003114:	40014400 	.word	0x40014400
 8003118:	40014800 	.word	0x40014800
 800311c:	40015000 	.word	0x40015000

08003120 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003120:	b480      	push	{r7}
 8003122:	b087      	sub	sp, #28
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a1b      	ldr	r3, [r3, #32]
 800313a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800314e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	021b      	lsls	r3, r3, #8
 800315a:	68fa      	ldr	r2, [r7, #12]
 800315c:	4313      	orrs	r3, r2
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003166:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	051b      	lsls	r3, r3, #20
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <TIM_OC6_SetConfig+0xc0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <TIM_OC6_SetConfig+0x84>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <TIM_OC6_SetConfig+0xc4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d00f      	beq.n	80031a4 <TIM_OC6_SetConfig+0x84>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a18      	ldr	r2, [pc, #96]	; (80031e8 <TIM_OC6_SetConfig+0xc8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00b      	beq.n	80031a4 <TIM_OC6_SetConfig+0x84>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a17      	ldr	r2, [pc, #92]	; (80031ec <TIM_OC6_SetConfig+0xcc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <TIM_OC6_SetConfig+0x84>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a16      	ldr	r2, [pc, #88]	; (80031f0 <TIM_OC6_SetConfig+0xd0>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d003      	beq.n	80031a4 <TIM_OC6_SetConfig+0x84>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a15      	ldr	r2, [pc, #84]	; (80031f4 <TIM_OC6_SetConfig+0xd4>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d109      	bne.n	80031b8 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	695b      	ldr	r3, [r3, #20]
 80031b0:	029b      	lsls	r3, r3, #10
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	4313      	orrs	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685a      	ldr	r2, [r3, #4]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	621a      	str	r2, [r3, #32]
}
 80031d2:	bf00      	nop
 80031d4:	371c      	adds	r7, #28
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
 80031de:	bf00      	nop
 80031e0:	40012c00 	.word	0x40012c00
 80031e4:	40013400 	.word	0x40013400
 80031e8:	40014000 	.word	0x40014000
 80031ec:	40014400 	.word	0x40014400
 80031f0:	40014800 	.word	0x40014800
 80031f4:	40015000 	.word	0x40015000

080031f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b087      	sub	sp, #28
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6a1b      	ldr	r3, [r3, #32]
 800320e:	f023 0201 	bic.w	r2, r3, #1
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	699b      	ldr	r3, [r3, #24]
 800321a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003222:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	4313      	orrs	r3, r2
 800322c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	f023 030a 	bic.w	r3, r3, #10
 8003234:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	4313      	orrs	r3, r2
 800323c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	693a      	ldr	r2, [r7, #16]
 8003242:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	697a      	ldr	r2, [r7, #20]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003256:	b480      	push	{r7}
 8003258:	b087      	sub	sp, #28
 800325a:	af00      	add	r7, sp, #0
 800325c:	60f8      	str	r0, [r7, #12]
 800325e:	60b9      	str	r1, [r7, #8]
 8003260:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	f023 0210 	bic.w	r2, r3, #16
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003280:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	031b      	lsls	r3, r3, #12
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	4313      	orrs	r3, r2
 800328a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003292:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	693a      	ldr	r2, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	697a      	ldr	r2, [r7, #20]
 80032a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	693a      	ldr	r2, [r7, #16]
 80032a8:	621a      	str	r2, [r3, #32]
}
 80032aa:	bf00      	nop
 80032ac:	371c      	adds	r7, #28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr

080032b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80032b6:	b480      	push	{r7}
 80032b8:	b085      	sub	sp, #20
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	6078      	str	r0, [r7, #4]
 80032be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80032cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	f043 0307 	orr.w	r3, r3, #7
 80032dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	609a      	str	r2, [r3, #8]
}
 80032e4:	bf00      	nop
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ee:	4770      	bx	lr

080032f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b087      	sub	sp, #28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	60f8      	str	r0, [r7, #12]
 80032f8:	60b9      	str	r1, [r7, #8]
 80032fa:	607a      	str	r2, [r7, #4]
 80032fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800330a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	431a      	orrs	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	4313      	orrs	r3, r2
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	4313      	orrs	r3, r2
 800331c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	697a      	ldr	r2, [r7, #20]
 8003322:	609a      	str	r2, [r3, #8]
}
 8003324:	bf00      	nop
 8003326:	371c      	adds	r7, #28
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003330:	b480      	push	{r7}
 8003332:	b087      	sub	sp, #28
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800333c:	68bb      	ldr	r3, [r7, #8]
 800333e:	f003 031f 	and.w	r3, r3, #31
 8003342:	2201      	movs	r2, #1
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	6a1a      	ldr	r2, [r3, #32]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	43db      	mvns	r3, r3
 8003352:	401a      	ands	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f003 031f 	and.w	r3, r3, #31
 8003362:	6879      	ldr	r1, [r7, #4]
 8003364:	fa01 f303 	lsl.w	r3, r1, r3
 8003368:	431a      	orrs	r2, r3
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	621a      	str	r2, [r3, #32]
}
 800336e:	bf00      	nop
 8003370:	371c      	adds	r7, #28
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d109      	bne.n	80033a0 <HAL_TIMEx_PWMN_Start+0x24>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b01      	cmp	r3, #1
 8003396:	bf14      	ite	ne
 8003398:	2301      	movne	r3, #1
 800339a:	2300      	moveq	r3, #0
 800339c:	b2db      	uxtb	r3, r3
 800339e:	e022      	b.n	80033e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	2b04      	cmp	r3, #4
 80033a4:	d109      	bne.n	80033ba <HAL_TIMEx_PWMN_Start+0x3e>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033ac:	b2db      	uxtb	r3, r3
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	bf14      	ite	ne
 80033b2:	2301      	movne	r3, #1
 80033b4:	2300      	moveq	r3, #0
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	e015      	b.n	80033e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d109      	bne.n	80033d4 <HAL_TIMEx_PWMN_Start+0x58>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	bf14      	ite	ne
 80033cc:	2301      	movne	r3, #1
 80033ce:	2300      	moveq	r3, #0
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	e008      	b.n	80033e6 <HAL_TIMEx_PWMN_Start+0x6a>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	2b01      	cmp	r3, #1
 80033de:	bf14      	ite	ne
 80033e0:	2301      	movne	r3, #1
 80033e2:	2300      	moveq	r3, #0
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e073      	b.n	80034d6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d104      	bne.n	80033fe <HAL_TIMEx_PWMN_Start+0x82>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033fc:	e013      	b.n	8003426 <HAL_TIMEx_PWMN_Start+0xaa>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b04      	cmp	r3, #4
 8003402:	d104      	bne.n	800340e <HAL_TIMEx_PWMN_Start+0x92>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2202      	movs	r2, #2
 8003408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800340c:	e00b      	b.n	8003426 <HAL_TIMEx_PWMN_Start+0xaa>
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b08      	cmp	r3, #8
 8003412:	d104      	bne.n	800341e <HAL_TIMEx_PWMN_Start+0xa2>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800341c:	e003      	b.n	8003426 <HAL_TIMEx_PWMN_Start+0xaa>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2204      	movs	r2, #4
 800342c:	6839      	ldr	r1, [r7, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f000 f9ae 	bl	8003790 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003442:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <HAL_TIMEx_PWMN_Start+0x164>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d022      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003456:	d01d      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a21      	ldr	r2, [pc, #132]	; (80034e4 <HAL_TIMEx_PWMN_Start+0x168>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d018      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a20      	ldr	r2, [pc, #128]	; (80034e8 <HAL_TIMEx_PWMN_Start+0x16c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d013      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a1e      	ldr	r2, [pc, #120]	; (80034ec <HAL_TIMEx_PWMN_Start+0x170>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d00e      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a1d      	ldr	r2, [pc, #116]	; (80034f0 <HAL_TIMEx_PWMN_Start+0x174>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d009      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a1b      	ldr	r2, [pc, #108]	; (80034f4 <HAL_TIMEx_PWMN_Start+0x178>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d004      	beq.n	8003494 <HAL_TIMEx_PWMN_Start+0x118>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a1a      	ldr	r2, [pc, #104]	; (80034f8 <HAL_TIMEx_PWMN_Start+0x17c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d115      	bne.n	80034c0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689a      	ldr	r2, [r3, #8]
 800349a:	4b18      	ldr	r3, [pc, #96]	; (80034fc <HAL_TIMEx_PWMN_Start+0x180>)
 800349c:	4013      	ands	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2b06      	cmp	r3, #6
 80034a4:	d015      	beq.n	80034d2 <HAL_TIMEx_PWMN_Start+0x156>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034ac:	d011      	beq.n	80034d2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f042 0201 	orr.w	r2, r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	e008      	b.n	80034d2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f042 0201 	orr.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	e000      	b.n	80034d4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3710      	adds	r7, #16
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400
 80034e8:	40000800 	.word	0x40000800
 80034ec:	40000c00 	.word	0x40000c00
 80034f0:	40013400 	.word	0x40013400
 80034f4:	40014000 	.word	0x40014000
 80034f8:	40015000 	.word	0x40015000
 80034fc:	00010007 	.word	0x00010007

08003500 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003500:	b480      	push	{r7}
 8003502:	b085      	sub	sp, #20
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003514:	2302      	movs	r3, #2
 8003516:	e074      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2202      	movs	r2, #2
 8003524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a34      	ldr	r2, [pc, #208]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d009      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a33      	ldr	r2, [pc, #204]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d004      	beq.n	8003556 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a31      	ldr	r2, [pc, #196]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d108      	bne.n	8003568 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800355c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	68fa      	ldr	r2, [r7, #12]
 8003564:	4313      	orrs	r3, r2
 8003566:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800356e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003572:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	68fa      	ldr	r2, [r7, #12]
 800357a:	4313      	orrs	r3, r2
 800357c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a21      	ldr	r2, [pc, #132]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d022      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003598:	d01d      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d018      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1d      	ldr	r2, [pc, #116]	; (8003620 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d013      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a18      	ldr	r2, [pc, #96]	; (8003628 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a11      	ldr	r2, [pc, #68]	; (8003618 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40012c00 	.word	0x40012c00
 8003614:	40013400 	.word	0x40013400
 8003618:	40015000 	.word	0x40015000
 800361c:	40000400 	.word	0x40000400
 8003620:	40000800 	.word	0x40000800
 8003624:	40000c00 	.word	0x40000c00
 8003628:	40014000 	.word	0x40014000

0800362c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800362c:	b480      	push	{r7}
 800362e:	b085      	sub	sp, #20
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003636:	2300      	movs	r3, #0
 8003638:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003640:	2b01      	cmp	r3, #1
 8003642:	d101      	bne.n	8003648 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003644:	2302      	movs	r3, #2
 8003646:	e096      	b.n	8003776 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	4313      	orrs	r3, r2
 800365c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4313      	orrs	r3, r2
 8003686:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	4313      	orrs	r3, r2
 8003694:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	695b      	ldr	r3, [r3, #20]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	4313      	orrs	r3, r2
 80036b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	041b      	lsls	r3, r3, #16
 80036be:	4313      	orrs	r3, r2
 80036c0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a2f      	ldr	r2, [pc, #188]	; (8003784 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a2d      	ldr	r2, [pc, #180]	; (8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a2c      	ldr	r2, [pc, #176]	; (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d106      	bne.n	80036ee <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	69db      	ldr	r3, [r3, #28]
 80036ea:	4313      	orrs	r3, r2
 80036ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a24      	ldr	r2, [pc, #144]	; (8003784 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d009      	beq.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a22      	ldr	r2, [pc, #136]	; (8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d004      	beq.n	800370c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a21      	ldr	r2, [pc, #132]	; (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d12b      	bne.n	8003764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003716:	051b      	lsls	r3, r3, #20
 8003718:	4313      	orrs	r3, r2
 800371a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	4313      	orrs	r3, r2
 8003728:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003734:	4313      	orrs	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a11      	ldr	r2, [pc, #68]	; (8003784 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d009      	beq.n	8003756 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a10      	ldr	r2, [pc, #64]	; (8003788 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a0e      	ldr	r2, [pc, #56]	; (800378c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d106      	bne.n	8003764 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003760:	4313      	orrs	r3, r2
 8003762:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003774:	2300      	movs	r3, #0
}
 8003776:	4618      	mov	r0, r3
 8003778:	3714      	adds	r7, #20
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	40012c00 	.word	0x40012c00
 8003788:	40013400 	.word	0x40013400
 800378c:	40015000 	.word	0x40015000

08003790 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	60f8      	str	r0, [r7, #12]
 8003798:	60b9      	str	r1, [r7, #8]
 800379a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2204      	movs	r2, #4
 80037a4:	fa02 f303 	lsl.w	r3, r2, r3
 80037a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	6a1a      	ldr	r2, [r3, #32]
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	43db      	mvns	r3, r3
 80037b2:	401a      	ands	r2, r3
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	6a1a      	ldr	r2, [r3, #32]
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f003 031f 	and.w	r3, r3, #31
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	fa01 f303 	lsl.w	r3, r1, r3
 80037c8:	431a      	orrs	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	621a      	str	r2, [r3, #32]
}
 80037ce:	bf00      	nop
 80037d0:	371c      	adds	r7, #28
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr

080037da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b082      	sub	sp, #8
 80037de:	af00      	add	r7, sp, #0
 80037e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d101      	bne.n	80037ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e042      	b.n	8003872 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d106      	bne.n	8003804 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f7fd f8fa 	bl	80009f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2224      	movs	r2, #36	; 0x24
 8003808:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0201 	bic.w	r2, r2, #1
 800381a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800381c:	6878      	ldr	r0, [r7, #4]
 800381e:	f000 f82d 	bl	800387c <UART_SetConfig>
 8003822:	4603      	mov	r3, r0
 8003824:	2b01      	cmp	r3, #1
 8003826:	d101      	bne.n	800382c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003828:	2301      	movs	r3, #1
 800382a:	e022      	b.n	8003872 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	d002      	beq.n	800383a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb1d 	bl	8003e74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003848:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689a      	ldr	r2, [r3, #8]
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003858:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 fba4 	bl	8003fb8 <UART_CheckIdleState>
 8003870:	4603      	mov	r3, r0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003880:	b08c      	sub	sp, #48	; 0x30
 8003882:	af00      	add	r7, sp, #0
 8003884:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003886:	2300      	movs	r3, #0
 8003888:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	689a      	ldr	r2, [r3, #8]
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	691b      	ldr	r3, [r3, #16]
 8003894:	431a      	orrs	r2, r3
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	431a      	orrs	r2, r3
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	69db      	ldr	r3, [r3, #28]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	4baa      	ldr	r3, [pc, #680]	; (8003b54 <UART_SetConfig+0x2d8>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	6812      	ldr	r2, [r2, #0]
 80038b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	68da      	ldr	r2, [r3, #12]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	430a      	orrs	r2, r1
 80038cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	699b      	ldr	r3, [r3, #24]
 80038d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a9f      	ldr	r2, [pc, #636]	; (8003b58 <UART_SetConfig+0x2dc>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d004      	beq.n	80038e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038e4:	4313      	orrs	r3, r2
 80038e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e8:	697b      	ldr	r3, [r7, #20]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80038f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	6812      	ldr	r2, [r2, #0]
 80038fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80038fc:	430b      	orrs	r3, r1
 80038fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f023 010f 	bic.w	r1, r3, #15
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	430a      	orrs	r2, r1
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a90      	ldr	r2, [pc, #576]	; (8003b5c <UART_SetConfig+0x2e0>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d125      	bne.n	800396c <UART_SetConfig+0xf0>
 8003920:	4b8f      	ldr	r3, [pc, #572]	; (8003b60 <UART_SetConfig+0x2e4>)
 8003922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003926:	f003 0303 	and.w	r3, r3, #3
 800392a:	2b03      	cmp	r3, #3
 800392c:	d81a      	bhi.n	8003964 <UART_SetConfig+0xe8>
 800392e:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <UART_SetConfig+0xb8>)
 8003930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003934:	08003945 	.word	0x08003945
 8003938:	08003955 	.word	0x08003955
 800393c:	0800394d 	.word	0x0800394d
 8003940:	0800395d 	.word	0x0800395d
 8003944:	2301      	movs	r3, #1
 8003946:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800394a:	e116      	b.n	8003b7a <UART_SetConfig+0x2fe>
 800394c:	2302      	movs	r3, #2
 800394e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003952:	e112      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003954:	2304      	movs	r3, #4
 8003956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800395a:	e10e      	b.n	8003b7a <UART_SetConfig+0x2fe>
 800395c:	2308      	movs	r3, #8
 800395e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003962:	e10a      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003964:	2310      	movs	r3, #16
 8003966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800396a:	e106      	b.n	8003b7a <UART_SetConfig+0x2fe>
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a7c      	ldr	r2, [pc, #496]	; (8003b64 <UART_SetConfig+0x2e8>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d138      	bne.n	80039e8 <UART_SetConfig+0x16c>
 8003976:	4b7a      	ldr	r3, [pc, #488]	; (8003b60 <UART_SetConfig+0x2e4>)
 8003978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800397c:	f003 030c 	and.w	r3, r3, #12
 8003980:	2b0c      	cmp	r3, #12
 8003982:	d82d      	bhi.n	80039e0 <UART_SetConfig+0x164>
 8003984:	a201      	add	r2, pc, #4	; (adr r2, 800398c <UART_SetConfig+0x110>)
 8003986:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398a:	bf00      	nop
 800398c:	080039c1 	.word	0x080039c1
 8003990:	080039e1 	.word	0x080039e1
 8003994:	080039e1 	.word	0x080039e1
 8003998:	080039e1 	.word	0x080039e1
 800399c:	080039d1 	.word	0x080039d1
 80039a0:	080039e1 	.word	0x080039e1
 80039a4:	080039e1 	.word	0x080039e1
 80039a8:	080039e1 	.word	0x080039e1
 80039ac:	080039c9 	.word	0x080039c9
 80039b0:	080039e1 	.word	0x080039e1
 80039b4:	080039e1 	.word	0x080039e1
 80039b8:	080039e1 	.word	0x080039e1
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	2300      	movs	r3, #0
 80039c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039c6:	e0d8      	b.n	8003b7a <UART_SetConfig+0x2fe>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039ce:	e0d4      	b.n	8003b7a <UART_SetConfig+0x2fe>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039d6:	e0d0      	b.n	8003b7a <UART_SetConfig+0x2fe>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039de:	e0cc      	b.n	8003b7a <UART_SetConfig+0x2fe>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80039e6:	e0c8      	b.n	8003b7a <UART_SetConfig+0x2fe>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a5e      	ldr	r2, [pc, #376]	; (8003b68 <UART_SetConfig+0x2ec>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d125      	bne.n	8003a3e <UART_SetConfig+0x1c2>
 80039f2:	4b5b      	ldr	r3, [pc, #364]	; (8003b60 <UART_SetConfig+0x2e4>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039fc:	2b30      	cmp	r3, #48	; 0x30
 80039fe:	d016      	beq.n	8003a2e <UART_SetConfig+0x1b2>
 8003a00:	2b30      	cmp	r3, #48	; 0x30
 8003a02:	d818      	bhi.n	8003a36 <UART_SetConfig+0x1ba>
 8003a04:	2b20      	cmp	r3, #32
 8003a06:	d00a      	beq.n	8003a1e <UART_SetConfig+0x1a2>
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	d814      	bhi.n	8003a36 <UART_SetConfig+0x1ba>
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <UART_SetConfig+0x19a>
 8003a10:	2b10      	cmp	r3, #16
 8003a12:	d008      	beq.n	8003a26 <UART_SetConfig+0x1aa>
 8003a14:	e00f      	b.n	8003a36 <UART_SetConfig+0x1ba>
 8003a16:	2300      	movs	r3, #0
 8003a18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a1c:	e0ad      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a1e:	2302      	movs	r3, #2
 8003a20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a24:	e0a9      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a26:	2304      	movs	r3, #4
 8003a28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a2c:	e0a5      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a2e:	2308      	movs	r3, #8
 8003a30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a34:	e0a1      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a36:	2310      	movs	r3, #16
 8003a38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a3c:	e09d      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a4a      	ldr	r2, [pc, #296]	; (8003b6c <UART_SetConfig+0x2f0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d125      	bne.n	8003a94 <UART_SetConfig+0x218>
 8003a48:	4b45      	ldr	r3, [pc, #276]	; (8003b60 <UART_SetConfig+0x2e4>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a52:	2bc0      	cmp	r3, #192	; 0xc0
 8003a54:	d016      	beq.n	8003a84 <UART_SetConfig+0x208>
 8003a56:	2bc0      	cmp	r3, #192	; 0xc0
 8003a58:	d818      	bhi.n	8003a8c <UART_SetConfig+0x210>
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d00a      	beq.n	8003a74 <UART_SetConfig+0x1f8>
 8003a5e:	2b80      	cmp	r3, #128	; 0x80
 8003a60:	d814      	bhi.n	8003a8c <UART_SetConfig+0x210>
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d002      	beq.n	8003a6c <UART_SetConfig+0x1f0>
 8003a66:	2b40      	cmp	r3, #64	; 0x40
 8003a68:	d008      	beq.n	8003a7c <UART_SetConfig+0x200>
 8003a6a:	e00f      	b.n	8003a8c <UART_SetConfig+0x210>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a72:	e082      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a74:	2302      	movs	r3, #2
 8003a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a7a:	e07e      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a82:	e07a      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a84:	2308      	movs	r3, #8
 8003a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a8a:	e076      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003a92:	e072      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a35      	ldr	r2, [pc, #212]	; (8003b70 <UART_SetConfig+0x2f4>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d12a      	bne.n	8003af4 <UART_SetConfig+0x278>
 8003a9e:	4b30      	ldr	r3, [pc, #192]	; (8003b60 <UART_SetConfig+0x2e4>)
 8003aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aac:	d01a      	beq.n	8003ae4 <UART_SetConfig+0x268>
 8003aae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ab2:	d81b      	bhi.n	8003aec <UART_SetConfig+0x270>
 8003ab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ab8:	d00c      	beq.n	8003ad4 <UART_SetConfig+0x258>
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abe:	d815      	bhi.n	8003aec <UART_SetConfig+0x270>
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d003      	beq.n	8003acc <UART_SetConfig+0x250>
 8003ac4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ac8:	d008      	beq.n	8003adc <UART_SetConfig+0x260>
 8003aca:	e00f      	b.n	8003aec <UART_SetConfig+0x270>
 8003acc:	2300      	movs	r3, #0
 8003ace:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ad2:	e052      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003ad4:	2302      	movs	r3, #2
 8003ad6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ada:	e04e      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003adc:	2304      	movs	r3, #4
 8003ade:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ae2:	e04a      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003ae4:	2308      	movs	r3, #8
 8003ae6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003aea:	e046      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003aec:	2310      	movs	r3, #16
 8003aee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003af2:	e042      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4a17      	ldr	r2, [pc, #92]	; (8003b58 <UART_SetConfig+0x2dc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d13a      	bne.n	8003b74 <UART_SetConfig+0x2f8>
 8003afe:	4b18      	ldr	r3, [pc, #96]	; (8003b60 <UART_SetConfig+0x2e4>)
 8003b00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b0c:	d01a      	beq.n	8003b44 <UART_SetConfig+0x2c8>
 8003b0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b12:	d81b      	bhi.n	8003b4c <UART_SetConfig+0x2d0>
 8003b14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b18:	d00c      	beq.n	8003b34 <UART_SetConfig+0x2b8>
 8003b1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1e:	d815      	bhi.n	8003b4c <UART_SetConfig+0x2d0>
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <UART_SetConfig+0x2b0>
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b28:	d008      	beq.n	8003b3c <UART_SetConfig+0x2c0>
 8003b2a:	e00f      	b.n	8003b4c <UART_SetConfig+0x2d0>
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b32:	e022      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003b34:	2302      	movs	r3, #2
 8003b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3a:	e01e      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003b3c:	2304      	movs	r3, #4
 8003b3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b42:	e01a      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003b44:	2308      	movs	r3, #8
 8003b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b4a:	e016      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003b4c:	2310      	movs	r3, #16
 8003b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b52:	e012      	b.n	8003b7a <UART_SetConfig+0x2fe>
 8003b54:	cfff69f3 	.word	0xcfff69f3
 8003b58:	40008000 	.word	0x40008000
 8003b5c:	40013800 	.word	0x40013800
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40004400 	.word	0x40004400
 8003b68:	40004800 	.word	0x40004800
 8003b6c:	40004c00 	.word	0x40004c00
 8003b70:	40005000 	.word	0x40005000
 8003b74:	2310      	movs	r3, #16
 8003b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4aae      	ldr	r2, [pc, #696]	; (8003e38 <UART_SetConfig+0x5bc>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	f040 8097 	bne.w	8003cb4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b86:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003b8a:	2b08      	cmp	r3, #8
 8003b8c:	d823      	bhi.n	8003bd6 <UART_SetConfig+0x35a>
 8003b8e:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0x318>)
 8003b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b94:	08003bb9 	.word	0x08003bb9
 8003b98:	08003bd7 	.word	0x08003bd7
 8003b9c:	08003bc1 	.word	0x08003bc1
 8003ba0:	08003bd7 	.word	0x08003bd7
 8003ba4:	08003bc7 	.word	0x08003bc7
 8003ba8:	08003bd7 	.word	0x08003bd7
 8003bac:	08003bd7 	.word	0x08003bd7
 8003bb0:	08003bd7 	.word	0x08003bd7
 8003bb4:	08003bcf 	.word	0x08003bcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bb8:	f7fe f898 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003bbc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bbe:	e010      	b.n	8003be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bc0:	4b9e      	ldr	r3, [pc, #632]	; (8003e3c <UART_SetConfig+0x5c0>)
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bc4:	e00d      	b.n	8003be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bc6:	f7fe f823 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8003bca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003bcc:	e009      	b.n	8003be2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003bd4:	e005      	b.n	8003be2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003be0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 8130 	beq.w	8003e4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bee:	4a94      	ldr	r2, [pc, #592]	; (8003e40 <UART_SetConfig+0x5c4>)
 8003bf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf4:	461a      	mov	r2, r3
 8003bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	005b      	lsls	r3, r3, #1
 8003c06:	4413      	add	r3, r2
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	d305      	bcc.n	8003c1a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c14:	69ba      	ldr	r2, [r7, #24]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d903      	bls.n	8003c22 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003c20:	e113      	b.n	8003e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c24:	2200      	movs	r2, #0
 8003c26:	60bb      	str	r3, [r7, #8]
 8003c28:	60fa      	str	r2, [r7, #12]
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	4a84      	ldr	r2, [pc, #528]	; (8003e40 <UART_SetConfig+0x5c4>)
 8003c30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c34:	b29b      	uxth	r3, r3
 8003c36:	2200      	movs	r2, #0
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	607a      	str	r2, [r7, #4]
 8003c3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c40:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c44:	f7fc fae8 	bl	8000218 <__aeabi_uldivmod>
 8003c48:	4602      	mov	r2, r0
 8003c4a:	460b      	mov	r3, r1
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	f04f 0200 	mov.w	r2, #0
 8003c54:	f04f 0300 	mov.w	r3, #0
 8003c58:	020b      	lsls	r3, r1, #8
 8003c5a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c5e:	0202      	lsls	r2, r0, #8
 8003c60:	6979      	ldr	r1, [r7, #20]
 8003c62:	6849      	ldr	r1, [r1, #4]
 8003c64:	0849      	lsrs	r1, r1, #1
 8003c66:	2000      	movs	r0, #0
 8003c68:	460c      	mov	r4, r1
 8003c6a:	4605      	mov	r5, r0
 8003c6c:	eb12 0804 	adds.w	r8, r2, r4
 8003c70:	eb43 0905 	adc.w	r9, r3, r5
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	469a      	mov	sl, r3
 8003c7c:	4693      	mov	fp, r2
 8003c7e:	4652      	mov	r2, sl
 8003c80:	465b      	mov	r3, fp
 8003c82:	4640      	mov	r0, r8
 8003c84:	4649      	mov	r1, r9
 8003c86:	f7fc fac7 	bl	8000218 <__aeabi_uldivmod>
 8003c8a:	4602      	mov	r2, r0
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	4613      	mov	r3, r2
 8003c90:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c92:	6a3b      	ldr	r3, [r7, #32]
 8003c94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c98:	d308      	bcc.n	8003cac <UART_SetConfig+0x430>
 8003c9a:	6a3b      	ldr	r3, [r7, #32]
 8003c9c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca0:	d204      	bcs.n	8003cac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003ca2:	697b      	ldr	r3, [r7, #20]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	6a3a      	ldr	r2, [r7, #32]
 8003ca8:	60da      	str	r2, [r3, #12]
 8003caa:	e0ce      	b.n	8003e4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003cb2:	e0ca      	b.n	8003e4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	69db      	ldr	r3, [r3, #28]
 8003cb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cbc:	d166      	bne.n	8003d8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003cbe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d827      	bhi.n	8003d16 <UART_SetConfig+0x49a>
 8003cc6:	a201      	add	r2, pc, #4	; (adr r2, 8003ccc <UART_SetConfig+0x450>)
 8003cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ccc:	08003cf1 	.word	0x08003cf1
 8003cd0:	08003cf9 	.word	0x08003cf9
 8003cd4:	08003d01 	.word	0x08003d01
 8003cd8:	08003d17 	.word	0x08003d17
 8003cdc:	08003d07 	.word	0x08003d07
 8003ce0:	08003d17 	.word	0x08003d17
 8003ce4:	08003d17 	.word	0x08003d17
 8003ce8:	08003d17 	.word	0x08003d17
 8003cec:	08003d0f 	.word	0x08003d0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf0:	f7fd fffc 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003cf4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cf6:	e014      	b.n	8003d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cf8:	f7fe f80e 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003cfc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003cfe:	e010      	b.n	8003d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d00:	4b4e      	ldr	r3, [pc, #312]	; (8003e3c <UART_SetConfig+0x5c0>)
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d04:	e00d      	b.n	8003d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d06:	f7fd ff83 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8003d0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d0c:	e009      	b.n	8003d22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d14:	e005      	b.n	8003d22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003d16:	2300      	movs	r3, #0
 8003d18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	f000 8090 	beq.w	8003e4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2e:	4a44      	ldr	r2, [pc, #272]	; (8003e40 <UART_SetConfig+0x5c4>)
 8003d30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d34:	461a      	mov	r2, r3
 8003d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d38:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d3c:	005a      	lsls	r2, r3, #1
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	441a      	add	r2, r3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d50:	6a3b      	ldr	r3, [r7, #32]
 8003d52:	2b0f      	cmp	r3, #15
 8003d54:	d916      	bls.n	8003d84 <UART_SetConfig+0x508>
 8003d56:	6a3b      	ldr	r3, [r7, #32]
 8003d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5c:	d212      	bcs.n	8003d84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5e:	6a3b      	ldr	r3, [r7, #32]
 8003d60:	b29b      	uxth	r3, r3
 8003d62:	f023 030f 	bic.w	r3, r3, #15
 8003d66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d68:	6a3b      	ldr	r3, [r7, #32]
 8003d6a:	085b      	lsrs	r3, r3, #1
 8003d6c:	b29b      	uxth	r3, r3
 8003d6e:	f003 0307 	and.w	r3, r3, #7
 8003d72:	b29a      	uxth	r2, r3
 8003d74:	8bfb      	ldrh	r3, [r7, #30]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	8bfa      	ldrh	r2, [r7, #30]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	e062      	b.n	8003e4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d8a:	e05e      	b.n	8003e4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d828      	bhi.n	8003de6 <UART_SetConfig+0x56a>
 8003d94:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x520>)
 8003d96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9a:	bf00      	nop
 8003d9c:	08003dc1 	.word	0x08003dc1
 8003da0:	08003dc9 	.word	0x08003dc9
 8003da4:	08003dd1 	.word	0x08003dd1
 8003da8:	08003de7 	.word	0x08003de7
 8003dac:	08003dd7 	.word	0x08003dd7
 8003db0:	08003de7 	.word	0x08003de7
 8003db4:	08003de7 	.word	0x08003de7
 8003db8:	08003de7 	.word	0x08003de7
 8003dbc:	08003ddf 	.word	0x08003ddf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dc0:	f7fd ff94 	bl	8001cec <HAL_RCC_GetPCLK1Freq>
 8003dc4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dc6:	e014      	b.n	8003df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc8:	f7fd ffa6 	bl	8001d18 <HAL_RCC_GetPCLK2Freq>
 8003dcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003dce:	e010      	b.n	8003df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dd0:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <UART_SetConfig+0x5c0>)
 8003dd2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003dd4:	e00d      	b.n	8003df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd6:	f7fd ff1b 	bl	8001c10 <HAL_RCC_GetSysClockFreq>
 8003dda:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003ddc:	e009      	b.n	8003df2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003de2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003de4:	e005      	b.n	8003df2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8003de6:	2300      	movs	r3, #0
 8003de8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003df0:	bf00      	nop
    }

    if (pclk != 0U)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d028      	beq.n	8003e4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfc:	4a10      	ldr	r2, [pc, #64]	; (8003e40 <UART_SetConfig+0x5c4>)
 8003dfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003e02:	461a      	mov	r2, r3
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	fbb3 f2f2 	udiv	r2, r3, r2
 8003e0a:	697b      	ldr	r3, [r7, #20]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	085b      	lsrs	r3, r3, #1
 8003e10:	441a      	add	r2, r3
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e1c:	6a3b      	ldr	r3, [r7, #32]
 8003e1e:	2b0f      	cmp	r3, #15
 8003e20:	d910      	bls.n	8003e44 <UART_SetConfig+0x5c8>
 8003e22:	6a3b      	ldr	r3, [r7, #32]
 8003e24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e28:	d20c      	bcs.n	8003e44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e2a:	6a3b      	ldr	r3, [r7, #32]
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	60da      	str	r2, [r3, #12]
 8003e34:	e009      	b.n	8003e4a <UART_SetConfig+0x5ce>
 8003e36:	bf00      	nop
 8003e38:	40008000 	.word	0x40008000
 8003e3c:	00f42400 	.word	0x00f42400
 8003e40:	0800446c 	.word	0x0800446c
      }
      else
      {
        ret = HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8003e66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003e74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b083      	sub	sp, #12
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d00a      	beq.n	8003e9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	f003 0302 	and.w	r3, r3, #2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d00a      	beq.n	8003ec0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00a      	beq.n	8003ee2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	430a      	orrs	r2, r1
 8003ee0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ee6:	f003 0308 	and.w	r3, r3, #8
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00a      	beq.n	8003f04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	430a      	orrs	r2, r1
 8003f02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	f003 0310 	and.w	r3, r3, #16
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d00a      	beq.n	8003f26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	430a      	orrs	r2, r1
 8003f24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2a:	f003 0320 	and.w	r3, r3, #32
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d00a      	beq.n	8003f48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d01a      	beq.n	8003f8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f72:	d10a      	bne.n	8003f8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00a      	beq.n	8003fac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	430a      	orrs	r2, r1
 8003faa:	605a      	str	r2, [r3, #4]
  }
}
 8003fac:	bf00      	nop
 8003fae:	370c      	adds	r7, #12
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr

08003fb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fc8:	f7fc fe40 	bl	8000c4c <HAL_GetTick>
 8003fcc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d10e      	bne.n	8003ffa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f82f 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d001      	beq.n	8003ffa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e025      	b.n	8004046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0304 	and.w	r3, r3, #4
 8004004:	2b04      	cmp	r3, #4
 8004006:	d10e      	bne.n	8004026 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2200      	movs	r2, #0
 8004012:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f819 	bl	800404e <UART_WaitOnFlagUntilTimeout>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e00f      	b.n	8004046 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2220      	movs	r2, #32
 8004032:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3710      	adds	r7, #16
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}

0800404e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404e:	b580      	push	{r7, lr}
 8004050:	b09c      	sub	sp, #112	; 0x70
 8004052:	af00      	add	r7, sp, #0
 8004054:	60f8      	str	r0, [r7, #12]
 8004056:	60b9      	str	r1, [r7, #8]
 8004058:	603b      	str	r3, [r7, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405e:	e0a9      	b.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004060:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004062:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004066:	f000 80a5 	beq.w	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800406a:	f7fc fdef 	bl	8000c4c <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004076:	429a      	cmp	r2, r3
 8004078:	d302      	bcc.n	8004080 <UART_WaitOnFlagUntilTimeout+0x32>
 800407a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800407c:	2b00      	cmp	r3, #0
 800407e:	d140      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004086:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004088:	e853 3f00 	ldrex	r3, [r3]
 800408c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800408e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004090:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004094:	667b      	str	r3, [r7, #100]	; 0x64
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	461a      	mov	r2, r3
 800409c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800409e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80040a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80040a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80040ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e6      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040c4:	f023 0301 	bic.w	r3, r3, #1
 80040c8:	663b      	str	r3, [r7, #96]	; 0x60
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	3308      	adds	r3, #8
 80040d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80040d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80040d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80040d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80040e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d1e5      	bne.n	80040b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2220      	movs	r2, #32
 80040ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e069      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0304 	and.w	r3, r3, #4
 800410c:	2b00      	cmp	r3, #0
 800410e:	d051      	beq.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800411a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800411e:	d149      	bne.n	80041b4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004128:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004132:	e853 3f00 	ldrex	r3, [r3]
 8004136:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800413a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800413e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	461a      	mov	r2, r3
 8004146:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
 800414a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800414c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800414e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004150:	e841 2300 	strex	r3, r2, [r1]
 8004154:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004158:	2b00      	cmp	r3, #0
 800415a:	d1e6      	bne.n	800412a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3308      	adds	r3, #8
 8004162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	e853 3f00 	ldrex	r3, [r3]
 800416a:	613b      	str	r3, [r7, #16]
   return(result);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f023 0301 	bic.w	r3, r3, #1
 8004172:	66bb      	str	r3, [r7, #104]	; 0x68
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3308      	adds	r3, #8
 800417a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800417c:	623a      	str	r2, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69f9      	ldr	r1, [r7, #28]
 8004182:	6a3a      	ldr	r2, [r7, #32]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	61bb      	str	r3, [r7, #24]
   return(result);
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e5      	bne.n	800415c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2220      	movs	r2, #32
 8004194:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2220      	movs	r2, #32
 80041a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e010      	b.n	80041d6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	69da      	ldr	r2, [r3, #28]
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	4013      	ands	r3, r2
 80041be:	68ba      	ldr	r2, [r7, #8]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	bf0c      	ite	eq
 80041c4:	2301      	moveq	r3, #1
 80041c6:	2300      	movne	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	79fb      	ldrb	r3, [r7, #7]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	f43f af46 	beq.w	8004060 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3770      	adds	r7, #112	; 0x70
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}

080041de <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80041de:	b480      	push	{r7}
 80041e0:	b085      	sub	sp, #20
 80041e2:	af00      	add	r7, sp, #0
 80041e4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80041ec:	2b01      	cmp	r3, #1
 80041ee:	d101      	bne.n	80041f4 <HAL_UARTEx_DisableFifoMode+0x16>
 80041f0:	2302      	movs	r3, #2
 80041f2:	e027      	b.n	8004244 <HAL_UARTEx_DisableFifoMode+0x66>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	681a      	ldr	r2, [r3, #0]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0201 	bic.w	r2, r2, #1
 800421a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004222:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	68fa      	ldr	r2, [r7, #12]
 8004230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2220      	movs	r2, #32
 8004236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	3714      	adds	r7, #20
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
 8004258:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004264:	2302      	movs	r3, #2
 8004266:	e02d      	b.n	80042c4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2224      	movs	r2, #36	; 0x24
 8004274:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f022 0201 	bic.w	r2, r2, #1
 800428e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f000 f84f 	bl	8004348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2220      	movs	r2, #32
 80042b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80042c2:	2300      	movs	r3, #0
}
 80042c4:	4618      	mov	r0, r3
 80042c6:	3710      	adds	r7, #16
 80042c8:	46bd      	mov	sp, r7
 80042ca:	bd80      	pop	{r7, pc}

080042cc <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b084      	sub	sp, #16
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d101      	bne.n	80042e4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80042e0:	2302      	movs	r3, #2
 80042e2:	e02d      	b.n	8004340 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2224      	movs	r2, #36	; 0x24
 80042f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	683a      	ldr	r2, [r7, #0]
 800431c:	430a      	orrs	r2, r1
 800431e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004320:	6878      	ldr	r0, [r7, #4]
 8004322:	f000 f811 	bl	8004348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2220      	movs	r2, #32
 8004332:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004354:	2b00      	cmp	r3, #0
 8004356:	d108      	bne.n	800436a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2201      	movs	r2, #1
 800435c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004368:	e031      	b.n	80043ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800436a:	2308      	movs	r3, #8
 800436c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800436e:	2308      	movs	r3, #8
 8004370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	0e5b      	lsrs	r3, r3, #25
 800437a:	b2db      	uxtb	r3, r3
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	689b      	ldr	r3, [r3, #8]
 8004388:	0f5b      	lsrs	r3, r3, #29
 800438a:	b2db      	uxtb	r3, r3
 800438c:	f003 0307 	and.w	r3, r3, #7
 8004390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004392:	7bbb      	ldrb	r3, [r7, #14]
 8004394:	7b3a      	ldrb	r2, [r7, #12]
 8004396:	4911      	ldr	r1, [pc, #68]	; (80043dc <UARTEx_SetNbDataToProcess+0x94>)
 8004398:	5c8a      	ldrb	r2, [r1, r2]
 800439a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800439e:	7b3a      	ldrb	r2, [r7, #12]
 80043a0:	490f      	ldr	r1, [pc, #60]	; (80043e0 <UARTEx_SetNbDataToProcess+0x98>)
 80043a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80043a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80043a8:	b29a      	uxth	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043b0:	7bfb      	ldrb	r3, [r7, #15]
 80043b2:	7b7a      	ldrb	r2, [r7, #13]
 80043b4:	4909      	ldr	r1, [pc, #36]	; (80043dc <UARTEx_SetNbDataToProcess+0x94>)
 80043b6:	5c8a      	ldrb	r2, [r1, r2]
 80043b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80043bc:	7b7a      	ldrb	r2, [r7, #13]
 80043be:	4908      	ldr	r1, [pc, #32]	; (80043e0 <UARTEx_SetNbDataToProcess+0x98>)
 80043c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80043c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	08004484 	.word	0x08004484
 80043e0:	0800448c 	.word	0x0800448c

080043e4 <__libc_init_array>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	4d0d      	ldr	r5, [pc, #52]	; (800441c <__libc_init_array+0x38>)
 80043e8:	4c0d      	ldr	r4, [pc, #52]	; (8004420 <__libc_init_array+0x3c>)
 80043ea:	1b64      	subs	r4, r4, r5
 80043ec:	10a4      	asrs	r4, r4, #2
 80043ee:	2600      	movs	r6, #0
 80043f0:	42a6      	cmp	r6, r4
 80043f2:	d109      	bne.n	8004408 <__libc_init_array+0x24>
 80043f4:	4d0b      	ldr	r5, [pc, #44]	; (8004424 <__libc_init_array+0x40>)
 80043f6:	4c0c      	ldr	r4, [pc, #48]	; (8004428 <__libc_init_array+0x44>)
 80043f8:	f000 f820 	bl	800443c <_init>
 80043fc:	1b64      	subs	r4, r4, r5
 80043fe:	10a4      	asrs	r4, r4, #2
 8004400:	2600      	movs	r6, #0
 8004402:	42a6      	cmp	r6, r4
 8004404:	d105      	bne.n	8004412 <__libc_init_array+0x2e>
 8004406:	bd70      	pop	{r4, r5, r6, pc}
 8004408:	f855 3b04 	ldr.w	r3, [r5], #4
 800440c:	4798      	blx	r3
 800440e:	3601      	adds	r6, #1
 8004410:	e7ee      	b.n	80043f0 <__libc_init_array+0xc>
 8004412:	f855 3b04 	ldr.w	r3, [r5], #4
 8004416:	4798      	blx	r3
 8004418:	3601      	adds	r6, #1
 800441a:	e7f2      	b.n	8004402 <__libc_init_array+0x1e>
 800441c:	0800449c 	.word	0x0800449c
 8004420:	0800449c 	.word	0x0800449c
 8004424:	0800449c 	.word	0x0800449c
 8004428:	080044a0 	.word	0x080044a0

0800442c <memset>:
 800442c:	4402      	add	r2, r0
 800442e:	4603      	mov	r3, r0
 8004430:	4293      	cmp	r3, r2
 8004432:	d100      	bne.n	8004436 <memset+0xa>
 8004434:	4770      	bx	lr
 8004436:	f803 1b01 	strb.w	r1, [r3], #1
 800443a:	e7f9      	b.n	8004430 <memset+0x4>

0800443c <_init>:
 800443c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800443e:	bf00      	nop
 8004440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004442:	bc08      	pop	{r3}
 8004444:	469e      	mov	lr, r3
 8004446:	4770      	bx	lr

08004448 <_fini>:
 8004448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800444a:	bf00      	nop
 800444c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800444e:	bc08      	pop	{r3}
 8004450:	469e      	mov	lr, r3
 8004452:	4770      	bx	lr
